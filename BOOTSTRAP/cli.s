.global _start
.text
_start:
	mov %rsp,%rbp
	mov $malloc_SB_block_SB_head_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_block_SB_tail_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_first_SB_free_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_page_SB_tail_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_large_SB_size_CL_U64, %r15
	movq $1024, 0(%r15)
	mov $point_SB_of_SB_interest_CL_U64, %r15
	movq $0, 0(%r15)
	mov $rc_SB_magic_SB_number_CL_U64, %r15
	movq $423809104, 0(%r15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_header_SB_section_CL_SSCaseNumber3, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_text_SB_section_CL_SSCaseNumber3, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_init_SB_section_CL_SSCaseNumber3, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_data_SB_section_CL_SSCaseNumber3, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_profile_SB_onexit_CL_SSCaseNumber3, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	mov $assemble_SB_final_CL_String, %r15
	movq $uuid_00000000000c4960, 0(%r15)
	mov $assemble_SB_argv_SB_referenced_CL_U8, %r15
	movb $0, 0(%r15)
	mov $main_SB_with_SB_argv_CL_U8, %r15
	movb $0, 0(%r15)
	mov $main_SB_with_CL_U8, %r15
	movb $0, 0(%r15)
	mov $config_SB_platform_SB_prefix_CL_String, %r15
	movq $uuid_00000000000c49b5, 0(%r15)
	mov $config_SB_profile_SB_invocations_CL_U8, %r15
	movb $0, 0(%r15)
	mov $config_SB_strict_CL_U8, %r15
	movb $1, 0(%r15)
	mov $config_SB_preprocess_CL_U8, %r15
	movb $1, 0(%r15)
	mov $config_SB_target_CL_String, %r15
	movq $uuid_00000000000c4960, 0(%r15)
	pushq $2
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %R15
	popq 0(%R15)
	pushq $0
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $preprocess_SB_macros_CL_MacroListMacroListCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	movq $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	movq $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $global_SB_ctx_CL_FContextFContextCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $parameter_SB_is_SB_flat_SB_index_CL_HashtableEqU64TupleU64TupleU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $is_SB_special_SB_index_CL_HashtableEqU64TupleTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $lone_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $tag_SB_is_SB_fragment_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $global_SB_symbol_SB_registry_CL_HashtableEqU64TupleTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $tag_SB_to_SB_index_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %r15
	movq $99999, 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $type_SB_complex_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov $types_SB_have_SB_changed_CL_U8, %r15
	movb $1, 0(%r15)
	pushq $0
	pushq $0
	pushq $1
	movq $already_SB_tokenized_CL_ListStringListStringCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $is_SB_lm_SB_struct_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov $uuid_SB_counter_CL_U64, %r15
	movq $0, 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $cstring_SB_cache_CL_StringStringListStringStringListCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	mov %rbp,%rsp
	popq %r8
	movq %rsp, %r9
	push %rbp
	mov %rsp, %rbp
	pushq %r8
	pushq %r9
	call main
	mov %rbp, %rsp
	pop %rbp
	mov $60, %rax
	mov $0, %rdi
	syscall
_EQ__EQ__CL_ArrowU64ConsStringString:
	pushq $0
	pushq $0
	pushq $0
	mov -8(%rbp), %R8
	mov -16(%rbp), %R9
	cmp %R8,%R9
	je uuid_00000000000c4806
	cmp $0,%R8
	je uuid_00000000000c4807
	cmp $0,%R9
	je uuid_00000000000c4807
uuid_00000000000c4805:
	mov %R8, %r14
	movb 0(%r14), %r15b
	movb %r15b, -32(%rbp)
	mov %R9, %r14
	movb 0(%r14), %r15b
	movb %r15b, -40(%rbp)
	mov -32(%RBP), %AL
	mov -40(%RBP), %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	movq %RAX, -48(%rbp)
	mov -48(%rbp), %R10
	cmp $0,%R10
	je uuid_00000000000c4807
	mov -32(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	movq %RAX, -48(%rbp)
	mov -48(%rbp), %R10
	cmp $0,%R10
	jne uuid_00000000000c4806
	inc %R8
	inc %R9
	jmp uuid_00000000000c4805
uuid_00000000000c4806:
	mov $1, %RAX
	jmp uuid_00000000000c4808
uuid_00000000000c4807:
	mov $0, %RAX
	jmp uuid_00000000000c4808
uuid_00000000000c4808:
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
_EX__EQ__CL_ArrowU64ConsStringString:
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
_AD__CL_ArrowSConsSS:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c480c
	jmp uuid_00000000000c480e
uuid_00000000000c480c:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4809
	movq -48(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -40(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -32(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c480b
uuid_00000000000c4809:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c480b:
	mov -72(%RBP),%RSP
	add $-72, %RSP
uuid_00000000000c480e:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
deep_SB_hash_CL_ArrowU64U64:
#call function hash : Arrow<Sized<8>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call hash_CL_ArrowU64Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
non_SB_zero_CL_ArrowU64S:
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4814
	push %RBP
	jmp uuid_00000000000c4811
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4810
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4813
uuid_00000000000c4811:
uuid_00000000000c4813:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000c4816
uuid_00000000000c4814:
	movq $0, -40(%rbp)
uuid_00000000000c4816:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64String:
	pushq $0
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c4817
	jmp uuid_00000000000c4819
uuid_00000000000c4817:
	movq $1, -24(%rbp)
uuid_00000000000c4819:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsSS:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4820
	jmp uuid_00000000000c4822
uuid_00000000000c4820:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c481d
	jmp uuid_00000000000c481f
uuid_00000000000c481d:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c481a
	jmp uuid_00000000000c481c
uuid_00000000000c481a:
	movb $1, -192(%rbp)
uuid_00000000000c481c:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c481f:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c4822:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c487e
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4835
	jmp uuid_00000000000c4837
uuid_00000000000c4835:
	push %RBP
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4826
	jmp uuid_00000000000c4828
uuid_00000000000c4826:
	push %RBP
	mov -368(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4823
	jmp uuid_00000000000c4825
uuid_00000000000c4823:
	movb $1, -384(%rbp)
uuid_00000000000c4825:
	mov -400(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c4828:
	mov -392(%RBP),%RSP
	add $-408, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4832
	jmp uuid_00000000000c4834
uuid_00000000000c4832:
	push %RBP
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c482c
	jmp uuid_00000000000c482e
uuid_00000000000c482c:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4829
	jmp uuid_00000000000c482b
uuid_00000000000c4829:
	movb $1, -448(%rbp)
uuid_00000000000c482b:
	mov -464(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c482e:
	mov -456(%RBP),%RSP
	add $-472, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c482f
	jmp uuid_00000000000c4831
uuid_00000000000c482f:
	movb $1, -336(%rbp)
uuid_00000000000c4831:
	mov -416(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c4834:
	mov -352(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c4837:
	mov -344(%RBP),%RSP
	add $-472, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c487b
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4850
	jmp uuid_00000000000c4852
uuid_00000000000c4850:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c483e
	jmp uuid_00000000000c4840
uuid_00000000000c483e:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c483b
	jmp uuid_00000000000c483d
uuid_00000000000c483b:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4838
	jmp uuid_00000000000c483a
uuid_00000000000c4838:
	movb $1, -592(%rbp)
uuid_00000000000c483a:
	mov -640(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c483d:
	mov -608(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c4840:
	mov -600(%RBP),%RSP
	add $-664, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c484d
	jmp uuid_00000000000c484f
uuid_00000000000c484d:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4847
	jmp uuid_00000000000c4849
uuid_00000000000c4847:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4844
	jmp uuid_00000000000c4846
uuid_00000000000c4844:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4841
	jmp uuid_00000000000c4843
uuid_00000000000c4841:
	movb $1, -704(%rbp)
uuid_00000000000c4843:
	mov -752(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c4846:
	mov -720(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c4849:
	mov -712(%RBP),%RSP
	add $-776, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c484a
	jmp uuid_00000000000c484c
uuid_00000000000c484a:
	movb $1, -544(%rbp)
uuid_00000000000c484c:
	mov -672(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c484f:
	mov -560(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c4852:
	mov -552(%RBP),%RSP
	add $-776, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4878
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -840(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c486b
	jmp uuid_00000000000c486d
uuid_00000000000c486b:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c485c
	jmp uuid_00000000000c485e
uuid_00000000000c485c:
	push %RBP
	mov -880(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4859
	jmp uuid_00000000000c485b
uuid_00000000000c4859:
	movb $1, -896(%rbp)
uuid_00000000000c485b:
	mov -912(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c485e:
	mov -904(%RBP),%RSP
	add $-920, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4868
	jmp uuid_00000000000c486a
uuid_00000000000c4868:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4862
	jmp uuid_00000000000c4864
uuid_00000000000c4862:
	push %RBP
	mov -944(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c485f
	jmp uuid_00000000000c4861
uuid_00000000000c485f:
	movb $1, -960(%rbp)
uuid_00000000000c4861:
	mov -976(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c4864:
	mov -968(%RBP),%RSP
	add $-984, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4865
	jmp uuid_00000000000c4867
uuid_00000000000c4865:
	movb $1, -848(%rbp)
uuid_00000000000c4867:
	mov -928(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c486a:
	mov -864(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c486d:
	mov -856(%RBP),%RSP
	add $-984, %RSP
	mov -848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4875
	push %RBP
	jmp uuid_00000000000c4872
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4871
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4874
uuid_00000000000c4872:
uuid_00000000000c4874:
	mov -992(%RBP),%RSP
	add $-992, %RSP
	jmp uuid_00000000000c4877
uuid_00000000000c4875:
	push %RBP
	mov -984(%RBP), %RAX
	mov -920(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c486e
	jmp uuid_00000000000c4870
uuid_00000000000c486e:
	movq $1, -64(%rbp)
uuid_00000000000c4870:
	mov -992(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c4877:
	mov -784(%RBP),%RSP
	add $-992, %RSP
	jmp uuid_00000000000c487a
uuid_00000000000c4878:
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4856
	jmp uuid_00000000000c4858
uuid_00000000000c4856:
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4853
	jmp uuid_00000000000c4855
uuid_00000000000c4853:
	movq $1, -64(%rbp)
uuid_00000000000c4855:
	mov -792(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c4858:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c487a:
	mov -480(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000c487d
uuid_00000000000c487b:
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c487d:
	mov -272(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000c4880
uuid_00000000000c487e:
	movq $1, -64(%rbp)
uuid_00000000000c4880:
	mov -128(%RBP),%RSP
	add $-264, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_EX__EQ__CL_ArrowU64ConsSS:
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
print_CL_ArrowNilS:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48a6
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4885
	jmp uuid_00000000000c4887
uuid_00000000000c4885:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4882
	jmp uuid_00000000000c4884
uuid_00000000000c4882:
	movb $1, -128(%rbp)
uuid_00000000000c4884:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c4887:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48a3
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c488e
	jmp uuid_00000000000c4890
uuid_00000000000c488e:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c488b
	jmp uuid_00000000000c488d
uuid_00000000000c488b:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4888
	jmp uuid_00000000000c488a
uuid_00000000000c4888:
	movb $1, -192(%rbp)
uuid_00000000000c488a:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c488d:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c4890:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48a0
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4897
	jmp uuid_00000000000c4899
uuid_00000000000c4897:
	push %RBP
	mov -288(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4894
	jmp uuid_00000000000c4896
uuid_00000000000c4894:
	movb $1, -304(%rbp)
uuid_00000000000c4896:
	mov -320(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c4899:
	mov -312(%RBP),%RSP
	add $-328, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c489d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c489c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c489f
uuid_00000000000c489d:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c489a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c489b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c489f:
	mov -272(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000c48a2
uuid_00000000000c48a0:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4891
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4892
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4893
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c48a2:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c48a5
uuid_00000000000c48a3:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c48a5:
	mov -96(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c48a8
uuid_00000000000c48a6:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4881
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c48a8:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
fail_CL_ArrowNilString:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fail_CL_ArrowNilConsStringString:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48a9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
exit_CL_ArrowNilU64:
	mov $60, %RAX
	mov -8(%rbp), %RDI
	syscall
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilString:
	mov -8(%rbp), %R15
	mov $0, %RDX
uuid_00000000000c48aa:
	mov 0(%R15), %R14B
	cmp $0,%R14B
	je uuid_00000000000c48ab
	inc %RDX
	inc %R15
	jmp uuid_00000000000c48aa
uuid_00000000000c48ab:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $1
	pushq -8(%rbp)
	push %RDX
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
eprint_CL_ArrowNilString:
	mov -8(%rbp), %R15
	mov $0, %RDX
uuid_00000000000c48ac:
	mov 0(%R15), %R14B
	cmp $0,%R14B
	je uuid_00000000000c48ad
	inc %RDX
	inc %R15
	jmp uuid_00000000000c48ac
uuid_00000000000c48ad:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $2
	pushq -8(%rbp)
	push %RDX
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU64:
	pushq $0
	mov -8(%rbp), %R15
	mov $0, %R14
uuid_00000000000c48ae:
	mov	%R15, %RAX
	mov $0, %RDX
	mov $10, %RCX
	div %RCX
	push %RDX
	inc %R14
	mov	%RAX, %R15
	cmp $0,%R15
	jne uuid_00000000000c48ae
uuid_00000000000c48af:
	pop %RDX
	movb %DL, -24(%rbp)
	addb $48, -24(%rbp)
	dec %R14
	mov $1, %RAX
	mov $1, %RDI
	mov	%rbp, %r12
	addq $-24, %r12
	mov	%R12, %RSI
	mov $1, %RDX
	syscall
	cmp $0,%R14
	jne uuid_00000000000c48af
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilASCII:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $1
	mov	%rbp, %r12
	addq $0, %r12
	push %R12
	pushq $1
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
print_CL_ArrowNilI64:
	pushq $0
	mov -8(%rbp), %R15
	mov $0, %R14
	cmp $0,%R15
	jge uuid_00000000000c48b0
	neg %R15
	movb $45, -24(%rbp)
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $1
	mov	%rbp, %r12
	addq $-24, %r12
	push %R12
	pushq $1
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c48b0:
	mov	%R15, %RAX
	mov $0, %RDX
	mov $10, %RCX
	div %RCX
	push %RDX
	inc %R14
	mov	%RAX, %R15
	cmp $0,%R15
	jne uuid_00000000000c48b0
uuid_00000000000c48b1:
	pop %RDX
	movb %DL, -24(%rbp)
	addb $48, -24(%rbp)
	dec %R14
	mov $1, %RAX
	mov $1, %RDI
	mov	%rbp, %r12
	addq $-24, %r12
	mov	%R12, %RSI
	mov $1, %RDX
	syscall
	cmp $0,%R14
	jne uuid_00000000000c48b1
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU32:
	mov $0, %R15
	mov -8(%rbp), %R15D
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU16:
	mov $0, %R15
	mov -8(%rbp), %R15W
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU8:
	mov $0, %R15
	mov -8(%rbp), %R15B
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilI32:
	mov $0, %R15
	mov -8(%rbp), %R15D
	movsx %R15D,%R15
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilI16:
	mov $0, %R15
	mov -8(%rbp), %R15W
	movsx %R15W,%R15
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilI8:
	mov $0, %R15
	mov -8(%rbp), %R15B
	movsx %R15B,%R15
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64:
	mov -8(%rbp), %RAX
	mov -16(%rbp), %RDI
	mov -24(%rbp), %RSI
	mov -32(%rbp), %RDX
	syscall
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
read_SB_file_CL_ArrowStringString:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $2
	pushq -8(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -24(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48b7
	jmp uuid_00000000000c48b9
uuid_00000000000c48b7:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b5
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c48b9:
	mov -32(%RBP),%RSP
	add $-32, %RSP
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1025
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $1024
uuid_00000000000c48bf:
	mov -56(%RBP), %RAX
	mov $1024, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48c0
	jmp uuid_00000000000c48c1
uuid_00000000000c48c0:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -24(%rbp)
	mov -40(%RBP), %RAX
	mov -48(%RBP), %R14
	addq %R14,%RAX
	push %RAX
	pushq $1024
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -56(%rbp)
	push %RBP
	mov -56(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48bc
	jmp uuid_00000000000c48be
uuid_00000000000c48bc:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48ba
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48bb
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c48be:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	mov -48(%RBP), %RAX
	mov -56(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, -48(%rbp)
#call function realloc : Arrow<Cons<Array<?,?>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov -48(%RBP), %RAX
	mov $1025, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	add $8, %RSP
	jmp uuid_00000000000c48bf
uuid_00000000000c48c1:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $3
	pushq -24(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov -48(%RBP), %R13
	mov -40(%RBP), %R15
	add %R13, %R15
	movb $0, 0(%R15)
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
clone_SB_rope_CL_ArrowStringS:
#call function malloc : Arrow<Cons<U64,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $1024
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function clone-rope-impl : Arrow<Cons<Cons<Array<?,?>,S>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	mov %RBX, %RBP
	call clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function realloc : Arrow<Cons<Array<?,?>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov -48(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	mov -48(%RBP), %R13
	mov -40(%RBP), %R15
	add %R13, %R15
	movb $0, 0(%R15)
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48db
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48c8
	jmp uuid_00000000000c48ca
uuid_00000000000c48c8:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c48c5
	jmp uuid_00000000000c48c7
uuid_00000000000c48c5:
	push %RBP
	mov -120(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c48c2
	jmp uuid_00000000000c48c4
uuid_00000000000c48c2:
	movb $1, -144(%rbp)
uuid_00000000000c48c4:
	mov -192(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c48c7:
	mov -160(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c48ca:
	mov -152(%RBP),%RSP
	add $-216, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48d8
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48ce
	jmp uuid_00000000000c48d0
uuid_00000000000c48ce:
	push %RBP
	mov -240(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c48cb
	jmp uuid_00000000000c48cd
uuid_00000000000c48cb:
	movb $1, -256(%rbp)
uuid_00000000000c48cd:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c48d0:
	mov -264(%RBP),%RSP
	add $-280, %RSP
	mov -256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48d5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c48d4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c48d7
uuid_00000000000c48d5:
	pushq $0
	mov -280(%RBP), %R15
	mov -288(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	push %RAX
uuid_00000000000c48d1:
	mov -296(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48d2
	jmp uuid_00000000000c48d3
uuid_00000000000c48d2:
#call function realloc : Arrow<Cons<Array<?,?>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
	mov -296(%RBP), %R14B
	mov -40(%RBP), %R13
	mov -8(%RBP), %R15
	add %R13, %R15
	movb %R14B, 0(%R15)
	mov -288(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -288(%rbp)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
	mov -280(%RBP), %R15
	mov -288(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	movb %R15B, -296(%rbp)
	jmp uuid_00000000000c48d1
uuid_00000000000c48d3:
uuid_00000000000c48d7:
	mov -224(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c48da
uuid_00000000000c48d8:
#call function clone-rope-impl : Arrow<Cons<Cons<Array<?,?>,S>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
#call function clone-rope-impl : Arrow<Cons<Cons<Array<?,?>,S>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c48da:
	mov -112(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000c48dd
uuid_00000000000c48db:
uuid_00000000000c48dd:
	mov -80(%RBP),%RSP
	add $-104, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
clone_SB_rope_CL_ArrowStringU8:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $2
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %r14
	mov -8(%rbp),%r15b
	mov %r15b, 0(%r14)
	mov -24(%rbp), %r15
	movb $0, 1(%r15)
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
length_CL_ArrowU64String:
	pushq $0
uuid_00000000000c48de:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c48df
	jmp uuid_00000000000c48e0
uuid_00000000000c48df:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c48de
uuid_00000000000c48e0:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
write_SB_file_CL_ArrowNilConsStringString:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $2
	pushq -8(%rbp)
	pushq $577
	pushq $420
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq -32(%rbp)
	pushq -16(%rbp)
#call function length : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call length_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $3
	pushq -32(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
to_SB_string_CL_ArrowStringU64:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
uuid_00000000000c48e1:
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48e2
	jmp uuid_00000000000c48e3
uuid_00000000000c48e2:
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	mov %RAX, %RAX
	mov $48, %R14
	addq %R14,%RAX
	push %RAX
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	movq %RAX, -8(%rbp)
	mov -56(%rbp), %R8
	movb %R8B, -48(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	add $8, %rsp
	jmp uuid_00000000000c48e1
uuid_00000000000c48e3:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c48e5
	pushq $0
	pushq $uuid_00000000000c48e4
	pushq $2
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000c48e7
uuid_00000000000c48e5:
uuid_00000000000c48e7:
	mov -56(%RBP),%RSP
	add $-56, %RSP
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_string_CL_ArrowStringI64:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	push %RBP
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48e9
	jmp uuid_00000000000c48eb
uuid_00000000000c48e9:
	pushq $0
	pushq $uuid_00000000000c48e8
	pushq $2
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	mov $0, %RAX
	mov -8(%RBP), %R14
	subq %R14,%RAX
	movq %RAX, -8(%rbp)
uuid_00000000000c48eb:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	pushq $0
uuid_00000000000c48ec:
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c48ed
	jmp uuid_00000000000c48ee
uuid_00000000000c48ed:
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	mov %RAX, %RAX
	mov $48, %R14
	addq %R14,%RAX
	push %RAX
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	movq %RAX, -8(%rbp)
	mov -88(%rbp), %R8
	movb %R8B, -80(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	add $8, %rsp
	jmp uuid_00000000000c48ec
uuid_00000000000c48ee:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c48ef
	pushq $0
	pushq $uuid_00000000000c48e4
	pushq $2
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	jmp uuid_00000000000c48f1
uuid_00000000000c48ef:
uuid_00000000000c48f1:
	mov -88(%RBP),%RSP
	add $-88, %RSP
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_i64_CL_ArrowI64String:
	pushq $0
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $45, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48f2
	jmp uuid_00000000000c48f4
uuid_00000000000c48f2:
	movb $1, -24(%rbp)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000c48f4:
	mov -32(%RBP),%RSP
	add $-32, %RSP
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -24(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48f5
	jmp uuid_00000000000c48f7
uuid_00000000000c48f5:
	mov $0, %RAX
	mov -40(%RBP), %R14
	subq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c48f7:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_u64_CL_ArrowU64String:
	pushq $0
uuid_00000000000c491a:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c491b
	jmp uuid_00000000000c491c
uuid_00000000000c491b:
	mov -24(%RBP), %RAX
	mov $10, %R14
	mul %R14
	movq %RAX, -24(%rbp)
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -32(%rbp)
	mov -48(%RBP), %AL
	mov $48, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4917
	push %RBP
	pushq -32(%rbp)
	mov -64(%RBP), %AL
	mov $49, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4914
	push %RBP
	pushq -32(%rbp)
	mov -80(%RBP), %AL
	mov $50, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4911
	push %RBP
	pushq -32(%rbp)
	mov -96(%RBP), %AL
	mov $51, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c490e
	push %RBP
	pushq -32(%rbp)
	mov -112(%RBP), %AL
	mov $52, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c490b
	push %RBP
	pushq -32(%rbp)
	mov -128(%RBP), %AL
	mov $53, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4908
	push %RBP
	pushq -32(%rbp)
	mov -144(%RBP), %AL
	mov $54, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4905
	push %RBP
	pushq -32(%rbp)
	mov -160(%RBP), %AL
	mov $55, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4902
	push %RBP
	pushq -32(%rbp)
	mov -176(%RBP), %AL
	mov $56, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48ff
	push %RBP
	pushq -32(%rbp)
	mov -192(%RBP), %AL
	mov $57, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c48fc
	push %RBP
	jmp uuid_00000000000c48f9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c48f8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c48fb
uuid_00000000000c48f9:
uuid_00000000000c48fb:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c48fe
uuid_00000000000c48fc:
	mov -24(%RBP), %RAX
	mov $9, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c48fe:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c4901
uuid_00000000000c48ff:
	mov -24(%RBP), %RAX
	mov $8, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c4901:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c4904
uuid_00000000000c4902:
	mov -24(%RBP), %RAX
	mov $7, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c4904:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c4907
uuid_00000000000c4905:
	mov -24(%RBP), %RAX
	mov $6, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c4907:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c490a
uuid_00000000000c4908:
	mov -24(%RBP), %RAX
	mov $5, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c490a:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c490d
uuid_00000000000c490b:
	mov -24(%RBP), %RAX
	mov $4, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c490d:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c4910
uuid_00000000000c490e:
	mov -24(%RBP), %RAX
	mov $3, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c4910:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c4913
uuid_00000000000c4911:
	mov -24(%RBP), %RAX
	mov $2, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c4913:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c4916
uuid_00000000000c4914:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c4916:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c4919
uuid_00000000000c4917:
uuid_00000000000c4919:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c491a
uuid_00000000000c491c:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_hex_CL_ArrowStringU64:
	pushq $0
	pushq $0
	pushq $3
	pushq $16
uuid_00000000000c495d:
	mov -48(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c495e
	jmp uuid_00000000000c495f
uuid_00000000000c495e:
	mov -8(%RBP), %RAX
	mov $16, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c495a
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4957
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4954
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4951
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c494e
	push %RBP
	pushq -56(%rbp)
	mov -152(%RBP), %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c494b
	push %RBP
	pushq -56(%rbp)
	mov -168(%RBP), %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4948
	push %RBP
	pushq -56(%rbp)
	mov -184(%RBP), %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4945
	push %RBP
	pushq -56(%rbp)
	mov -200(%RBP), %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4942
	push %RBP
	pushq -56(%rbp)
	mov -216(%RBP), %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c493f
	push %RBP
	pushq -56(%rbp)
	mov -232(%RBP), %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c493c
	push %RBP
	pushq -56(%rbp)
	mov -248(%RBP), %RAX
	mov $11, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4939
	push %RBP
	pushq -56(%rbp)
	mov -264(%RBP), %RAX
	mov $12, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4936
	push %RBP
	pushq -56(%rbp)
	mov -280(%RBP), %RAX
	mov $13, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4933
	push %RBP
	pushq -56(%rbp)
	mov -296(%RBP), %RAX
	mov $14, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4930
	push %RBP
	pushq -56(%rbp)
	mov -312(%RBP), %RAX
	mov $15, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c492d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c492c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c492f
uuid_00000000000c492d:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c492b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c492f:
	mov -304(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c4932
uuid_00000000000c4930:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c492a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4932:
	mov -288(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c4935
uuid_00000000000c4933:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4929
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4935:
	mov -272(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c4938
uuid_00000000000c4936:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4928
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4938:
	mov -256(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c493b
uuid_00000000000c4939:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4927
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c493b:
	mov -240(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c493e
uuid_00000000000c493c:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4926
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c493e:
	mov -224(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c4941
uuid_00000000000c493f:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4925
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4941:
	mov -208(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000c4944
uuid_00000000000c4942:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4924
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4944:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c4947
uuid_00000000000c4945:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4923
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4947:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000c494a
uuid_00000000000c4948:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4922
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c494a:
	mov -160(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c494d
uuid_00000000000c494b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4921
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c494d:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c4950
uuid_00000000000c494e:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4920
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4950:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c4953
uuid_00000000000c4951:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c491f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4953:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c4956
uuid_00000000000c4954:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c491e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4956:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000c4959
uuid_00000000000c4957:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c491d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4959:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000c495c
uuid_00000000000c495a:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c48e4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c495c:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	mov -8(%RBP), %RAX
	mov $16, %R14
	mov $0, %RDX
	div %R14
	movq %RAX, -8(%rbp)
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c495d
uuid_00000000000c495f:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
has_SB_prefix_CL_ArrowU64ConsStringString:
	pushq $1
uuid_00000000000c4967:
	mov -16(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c4968
	jmp uuid_00000000000c4969
uuid_00000000000c4968:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c4964
	movq $0, -32(%rbp)
	movq $uuid_00000000000c4960, -16(%rbp)
	jmp uuid_00000000000c4966
uuid_00000000000c4964:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov -16(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	mov -48(%RBP), %AL
	mov -56(%RBP), %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4961
	movq $0, -32(%rbp)
	movq $uuid_00000000000c4960, -16(%rbp)
	jmp uuid_00000000000c4963
uuid_00000000000c4961:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -16(%RBP), %RAX
	inc %RAX
	movq %RAX, -16(%rbp)
uuid_00000000000c4963:
	mov -64(%RBP),%RSP
	add $-64, %RSP
uuid_00000000000c4966:
	mov -40(%RBP),%RSP
	add $-64, %RSP
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c4967
uuid_00000000000c4969:
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
remove_SB_prefix_CL_ArrowStringConsStringString:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c496d
	jmp uuid_00000000000c496f
uuid_00000000000c496d:
uuid_00000000000c496a:
	mov -16(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c496b
	jmp uuid_00000000000c496c
uuid_00000000000c496b:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -16(%RBP), %RAX
	inc %RAX
	movq %RAX, -16(%rbp)
	jmp uuid_00000000000c496a
uuid_00000000000c496c:
uuid_00000000000c496f:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
replace_CL_ArrowStringConsStringConsStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c4973:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c4974
	jmp uuid_00000000000c4975
uuid_00000000000c4974:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4970
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c4972
uuid_00000000000c4970:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -24(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function remove-prefix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call remove_SB_prefix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
uuid_00000000000c4972:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	add $8, %RSP
	jmp uuid_00000000000c4973
uuid_00000000000c4975:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
has_SB_suffix_CL_ArrowU64ConsStringString:
	pushq $0
uuid_00000000000c4979:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c497a
	jmp uuid_00000000000c497b
uuid_00000000000c497a:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4976
	jmp uuid_00000000000c4978
uuid_00000000000c4976:
	movq $1, -32(%rbp)
uuid_00000000000c4978:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %RSP
	jmp uuid_00000000000c4979
uuid_00000000000c497b:
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
remove_SB_suffix_CL_ArrowStringConsStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c497f:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c4980
	jmp uuid_00000000000c4981
uuid_00000000000c4980:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c497c
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	jmp uuid_00000000000c497e
uuid_00000000000c497c:
	movq $uuid_00000000000c48e4, -8(%rbp)
uuid_00000000000c497e:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %RSP
	jmp uuid_00000000000c497f
uuid_00000000000c4981:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
deep_SB_hash_CL_ArrowU64String:
	pushq $0
	pushq $0
uuid_00000000000c4982:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c4983
	jmp uuid_00000000000c4984
uuid_00000000000c4983:
	mov $0, %R14
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov -40(%rbp), %R14B
	mov %R14, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -32(%RBP),%RAX
	shl $10,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $6,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	jmp uuid_00000000000c4982
uuid_00000000000c4984:
	mov -32(%RBP),%RAX
	shl $3,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $11,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shl $15,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_ML__CL_ArrowStringConsU64String:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c4985:
	mov -16(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4986
	jmp uuid_00000000000c4987
uuid_00000000000c4986:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	mov -16(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -16(%rbp)
	jmp uuid_00000000000c4985
uuid_00000000000c4987:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
not_CL_ArrowU64U64:
	pushq $0
	push %RBP
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4988
	jmp uuid_00000000000c498a
uuid_00000000000c4988:
	movq $1, -24(%rbp)
uuid_00000000000c498a:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
not_CL_ArrowU64U8:
	pushq $0
	push %RBP
	mov -8(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c498b
	jmp uuid_00000000000c498d
uuid_00000000000c498b:
	movq $1, -24(%rbp)
uuid_00000000000c498d:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock:
	mov -8(%RBP), %R15
	add $0, %R15
	mov 0(%R15), %R15
	push %R15
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_prev_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -8(%RBP), %R15
	add $8, %R15
	mov 0(%R15), %R15
	push %R15
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -8(%RBP), %R15
	add $16, %R15
	mov 0(%R15), %R15
	push %R15
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock:
	mov -8(%RBP), %RAX
	mov $24, %R14
	addq %R14,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
set_DT_block_SB_size_CL_ArrowNilConsU64Array_QM_MallocBlock:
	mov -16(%RBP), %R14
	mov -8(%RBP), %R15
	mov %R14, 0(%R15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -16(%RBP), %R14
	mov -8(%RBP), %R15
	mov %R14, 8(%R15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -16(%RBP), %R14
	mov -8(%RBP), %R15
	mov %R14, 16(%R15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
malloc_SB_new_SB_page_CL_ArrowNilNil:
	mov $12, %RAX
	mov $0, %RDI
	syscall
	mov	%RAX, %R8
	movq %R8, %r15
	movq $malloc_SB_block_SB_head_CL_U64, %r14
	movq %r15, 0(%r14)
	movq %R8, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	mov $12, %RAX
	mov	%R8, %RDI
	syscall
	movq %R8, %r15
	movq $malloc_SB_page_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_:
	mov -8(%RBP), %RAX
	mov $24, %R14
	subq %R14,%RAX
	push %RAX
#call function .block-size : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -16(%RBP), %RAX
	subq %R14,%RAX
	push %RAX
	push %RBP
#call function .free-space : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_free_SB_space_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -40(%RBP), %RAX
	cmp %R14,%RAX
	setle %AL
	andq $1,%RAX
	push %RAX
#call function .block-size : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4994
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -56(%RBP), %RAX
	mov $24, %R14
	subq %R14,%RAX
	push %RAX
	pushq $0
uuid_00000000000c4991:
	mov -72(%RBP), %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4992
	jmp uuid_00000000000c4993
uuid_00000000000c4992:
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %R15B, %R14B
	mov -72(%RBP), %R13
	mov -80(%RBP), %R15
	add %R13, %R15
	mov %R14B, 0(%R15)
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -72(%rbp)
	add $8, %rsp
	add $8, %rsp
	jmp uuid_00000000000c4991
uuid_00000000000c4993:
#call function free : Arrow<Array<?,?>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call free_CL_ArrowNilArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -64(%rbp), %r15
	movq %r15, -32(%rbp)
	mov -64(%rbp), %r15
	mov %r15, -32(%rbp)
	jmp uuid_00000000000c4996
uuid_00000000000c4994:
#call function set.block-size : Arrow<Cons<Array<MallocBlock,?>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_size_CL_ArrowNilConsU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c498e
	jmp uuid_00000000000c4990
uuid_00000000000c498e:
	mov $malloc_SB_block_SB_tail_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov -40(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
uuid_00000000000c4990:
	mov -56(%RBP),%RSP
	add $-56, %RSP
uuid_00000000000c4996:
	mov -48(%RBP),%RSP
	add $-56, %RSP
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
_DT_free_SB_space_CL_ArrowU64Array_QM_MallocBlock:
	pushq $0
	push %RBP
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4997
#call function .block-size : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov $24, %RAX
	addq %R14,%RAX
	mov %RAX, %R14
	mov -8(%RBP), %RAX
	addq %R14,%RAX
	push %RAX
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	subq %R14,%RAX
	movq %RAX, -24(%rbp)
	jmp uuid_00000000000c4999
uuid_00000000000c4997:
	movq $1073741824, -24(%rbp)
uuid_00000000000c4999:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
free_CL_ArrowNilArray_QM__QM_:
	mov -8(%RBP), %RAX
	mov $24, %R14
	subq %R14,%RAX
	push %RAX
#call function .block-prev : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_prev_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -32(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c499a
	jmp uuid_00000000000c499c
uuid_00000000000c499a:
#call function set.block-next : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c499c:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c499d
	jmp uuid_00000000000c499f
uuid_00000000000c499d:
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c499f:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov %rbp, %rsp
	sub $16, %rsp
	ret
malloc_CL_ArrowArray_QM__QM_U64:
#call function malloc : Arrow<Cons<U64,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
malloc_CL_ArrowArray_QM__QM_ConsU64U64:
	push %RBP
	mov $malloc_SB_block_SB_head_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c49a0
	jmp uuid_00000000000c49a2
uuid_00000000000c49a0:
#call function malloc-new-page : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call malloc_SB_new_SB_page_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c49a2:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov $malloc_SB_first_SB_free_CL_U64, %r15
	pushq 0(%r15)
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c49a3
	jmp uuid_00000000000c49a5
uuid_00000000000c49a3:
	mov $malloc_SB_block_SB_head_CL_U64, %r14
	movq 0(%r14), %r15
	movq %r15, -40(%rbp)
	mov 0(%r14), %r15
	mov %r15, -40(%rbp)
uuid_00000000000c49a5:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	pushq $0
uuid_00000000000c49a9:
#call function .free-space : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_free_SB_space_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -16(%RBP), %RAX
	mov $24, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c49aa
	jmp uuid_00000000000c49ab
uuid_00000000000c49aa:
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	mov $malloc_SB_first_SB_free_CL_U64, %r14
	movq -40(%rbp), %r15
	movq %r15, 0(%r14)
	mov -40(%rbp), %r15
	mov %r15, 0(%r14)
	push %RBP
	mov -16(%RBP), %RAX
	mov $malloc_SB_large_SB_size_CL_U64, %R14
	mov 0(%R14), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c49a6
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
	jmp uuid_00000000000c49a8
uuid_00000000000c49a6:
uuid_00000000000c49a8:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	add $8, %RSP
	jmp uuid_00000000000c49a9
uuid_00000000000c49ab:
	mov $malloc_SB_block_SB_tail_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov $8, %RAX
	mov -64(%RBP), %R14
	subq %R14,%RAX
	mov %RAX, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov $malloc_SB_block_SB_tail_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov -72(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
	mov $malloc_SB_block_SB_tail_CL_U64, %r15
	pushq 0(%r15)
	mov -80(%RBP), %RAX
	mov $24, %R14
	addq %R14,%RAX
	push %RAX
	mov -88(%RBP), %RAX
	mov -8(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c49ac
	jmp uuid_00000000000c49ae
uuid_00000000000c49ac:
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c49ae:
	mov -104(%RBP),%RSP
	add $-104, %RSP
#call function set.block-next : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function set.block-size : Arrow<Cons<Array<MallocBlock,?>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_size_CL_ArrowNilConsU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function set.block-next : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $0
	mov %RBX, %RBP
	call set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
	mov -80(%RBP), %RAX
	mov -40(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c49af
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c49b1
uuid_00000000000c49af:
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $0
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c49b1:
	mov -112(%RBP),%RSP
	add $-112, %RSP
	mov -88(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_:
	pushq $0
uuid_00000000000c49b2:
	mov -40(%RBP), %RAX
	mov -24(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c49b3
	jmp uuid_00000000000c49b4
uuid_00000000000c49b3:
	mov -16(%RBP), %R14B
	mov -40(%RBP), %R13
	mov -8(%RBP), %R15
	add %R13, %R15
	movb %R14B, 0(%R15)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
	jmp uuid_00000000000c49b2
uuid_00000000000c49b4:
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64Type:
	mov $3, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64AST:
	mov $10, %RAX
	push %RAX
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
non_SB_zero_CL_ArrowU64FragmentKV:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64FragmentList:
	mov $1, %RAX
	push %RAX
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
non_SB_zero_CL_ArrowU64Context:
	mov $2, %RAX
	push %RAX
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
non_SB_zero_CL_ArrowU64TContext:
	mov $2, %RAX
	push %RAX
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $128, %rsp
	ret
non_SB_zero_CL_ArrowU64FContext:
	mov $1, %RAX
	push %RAX
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
non_SB_zero_CL_ArrowU64STypeList:
	mov $1, %RAX
	push %RAX
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
non_SB_zero_CL_ArrowU64StringTypeList:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64StringList:
	mov $1, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64StringU64List:
	mov $1, %RAX
	push %RAX
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
non_SB_zero_CL_ArrowU64StringStringList:
	mov $1, %RAX
	push %RAX
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
non_SB_zero_CL_ArrowU64StringSList:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64MacroList:
	mov $1, %RAX
	push %RAX
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
non_SB_zero_CL_ArrowU64SfxList:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
mangle_SB_identifier_CL_ArrowSString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c4a1e:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c4a1f
	jmp uuid_00000000000c4a20
uuid_00000000000c4a1f:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -48(%rbp)
	mov -64(%RBP), %AL
	mov $33, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a1b
	push %RBP
	pushq -48(%rbp)
	mov -80(%RBP), %AL
	mov $36, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a18
	push %RBP
	pushq -48(%rbp)
	mov -96(%RBP), %AL
	mov $37, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a15
	push %RBP
	pushq -48(%rbp)
	mov -112(%RBP), %AL
	mov $38, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a12
	push %RBP
	pushq -48(%rbp)
	mov -128(%RBP), %AL
	mov $42, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a0f
	push %RBP
	pushq -48(%rbp)
	mov -144(%RBP), %AL
	mov $43, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a0c
	push %RBP
	pushq -48(%rbp)
	mov -160(%RBP), %AL
	mov $45, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a09
	push %RBP
	pushq -48(%rbp)
	mov -176(%RBP), %AL
	mov $46, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a06
	push %RBP
	pushq -48(%rbp)
	mov -192(%RBP), %AL
	mov $47, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a03
	push %RBP
	pushq -48(%rbp)
	mov -208(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a00
	push %RBP
	pushq -48(%rbp)
	mov -224(%RBP), %AL
	mov $59, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49fd
	push %RBP
	pushq -48(%rbp)
	mov -240(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49fa
	push %RBP
	pushq -48(%rbp)
	mov -256(%RBP), %AL
	mov $61, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49f7
	push %RBP
	pushq -48(%rbp)
	mov -272(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49f4
	push %RBP
	pushq -48(%rbp)
	mov -288(%RBP), %AL
	mov $63, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49f1
	push %RBP
	pushq -48(%rbp)
	mov -304(%RBP), %AL
	mov $64, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49ee
	push %RBP
	pushq -48(%rbp)
	mov -320(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49eb
	push %RBP
	pushq -48(%rbp)
	mov -336(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49e8
	push %RBP
	pushq -48(%rbp)
	mov -352(%RBP), %AL
	mov $94, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49e5
	push %RBP
	pushq -48(%rbp)
	mov -368(%RBP), %AL
	mov $95, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49e2
	push %RBP
	pushq -48(%rbp)
	mov -384(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49df
	push %RBP
	pushq -48(%rbp)
	mov -400(%RBP), %AL
	mov $124, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49dc
	push %RBP
	pushq -48(%rbp)
	mov -416(%RBP), %AL
	mov $126, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c49d9
	push %RBP
	pushq -48(%rbp)
	jmp uuid_00000000000c49d6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c49d5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c49d8
uuid_00000000000c49d6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c49d8:
	mov -424(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000c49db
uuid_00000000000c49d9:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49d4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c49db:
	mov -408(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000c49de
uuid_00000000000c49dc:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49d3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c49de:
	mov -392(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c49e1
uuid_00000000000c49df:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49d2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c49e1:
	mov -376(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c49e4
uuid_00000000000c49e2:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49d1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c49e4:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000c49e7
uuid_00000000000c49e5:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49d0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c49e7:
	mov -344(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c49ea
uuid_00000000000c49e8:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49cf
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c49ea:
	mov -328(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000c49ed
uuid_00000000000c49eb:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49ce
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c49ed:
	mov -312(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000c49f0
uuid_00000000000c49ee:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49cd
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c49f0:
	mov -296(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000c49f3
uuid_00000000000c49f1:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49cc
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c49f3:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c49f6
uuid_00000000000c49f4:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49cb
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c49f6:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c49f9
uuid_00000000000c49f7:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49ca
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c49f9:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c49fc
uuid_00000000000c49fa:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49c9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c49fc:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c49ff
uuid_00000000000c49fd:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49c8
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c49ff:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c4a02
uuid_00000000000c4a00:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49c7
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4a02:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c4a05
uuid_00000000000c4a03:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49c6
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4a05:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c4a08
uuid_00000000000c4a06:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49c5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4a08:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c4a0b
uuid_00000000000c4a09:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49c4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4a0b:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c4a0e
uuid_00000000000c4a0c:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49c3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4a0e:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c4a11
uuid_00000000000c4a0f:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49c2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4a11:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c4a14
uuid_00000000000c4a12:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49c1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4a14:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c4a17
uuid_00000000000c4a15:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49c0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4a17:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c4a1a
uuid_00000000000c4a18:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49bf
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4a1a:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c4a1d
uuid_00000000000c4a1b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49be
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4a1d:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c4a1e
uuid_00000000000c4a20:
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
mangle_SB_identifier_CL_ArrowSType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a54
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a25
	jmp uuid_00000000000c4a27
uuid_00000000000c4a25:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4a22
	jmp uuid_00000000000c4a24
uuid_00000000000c4a22:
	movb $1, -152(%rbp)
uuid_00000000000c4a24:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c4a27:
	mov -160(%RBP),%RSP
	add $-176, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a51
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a2e
	jmp uuid_00000000000c4a30
uuid_00000000000c4a2e:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a2b
	jmp uuid_00000000000c4a2d
uuid_00000000000c4a2b:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4a28
	jmp uuid_00000000000c4a2a
uuid_00000000000c4a28:
	movb $1, -216(%rbp)
uuid_00000000000c4a2a:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c4a2d:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c4a30:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a4e
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a47
	jmp uuid_00000000000c4a49
uuid_00000000000c4a47:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a44
	jmp uuid_00000000000c4a46
uuid_00000000000c4a44:
	push %RBP
	mov -304(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a41
	jmp uuid_00000000000c4a43
uuid_00000000000c4a41:
	movb $1, -328(%rbp)
uuid_00000000000c4a43:
	mov -376(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c4a46:
	mov -344(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c4a49:
	mov -336(%RBP),%RSP
	add $-400, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a4b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4a4a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4a4d
uuid_00000000000c4a4b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4a4d:
	mov -296(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c4a50
uuid_00000000000c4a4e:
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4a3e:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4a3f
	jmp uuid_00000000000c4a40
uuid_00000000000c4a3f:
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a37
	jmp uuid_00000000000c4a39
uuid_00000000000c4a37:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a34
	jmp uuid_00000000000c4a36
uuid_00000000000c4a34:
	push %RBP
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	jmp uuid_00000000000c4a31
	jmp uuid_00000000000c4a33
uuid_00000000000c4a31:
	movb $1, -384(%rbp)
uuid_00000000000c4a33:
	mov -448(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c4a36:
	mov -400(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c4a39:
	mov -392(%RBP),%RSP
	add $-472, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a3b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4a3a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4a3d
uuid_00000000000c4a3b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	movq -440(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -240(%rbp)
uuid_00000000000c4a3d:
	mov -336(%RBP),%RSP
	add $-472, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c4a3e
uuid_00000000000c4a40:
uuid_00000000000c4a50:
	mov -184(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c4a53
uuid_00000000000c4a51:
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4a53:
	mov -120(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c4a56
uuid_00000000000c4a54:
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a21
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4a56:
	mov -88(%RBP),%RSP
	add $-112, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mangle_SB_identifier_CL_ArrowStringConsTypeString:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c49c7
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
mangle_SB_c_SB_type_CL_ArrowSType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b28
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a5d
	jmp uuid_00000000000c4a5f
uuid_00000000000c4a5d:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a5a
	jmp uuid_00000000000c4a5c
uuid_00000000000c4a5a:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4a57
	jmp uuid_00000000000c4a59
uuid_00000000000c4a57:
	movb $1, -152(%rbp)
uuid_00000000000c4a59:
	mov -200(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000c4a5c:
	mov -168(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000c4a5f:
	mov -160(%RBP),%RSP
	add $-224, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b25
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a66
	jmp uuid_00000000000c4a68
uuid_00000000000c4a66:
	push %RBP
	jmp uuid_00000000000c4a63
	jmp uuid_00000000000c4a65
uuid_00000000000c4a63:
	movb $1, -264(%rbp)
uuid_00000000000c4a65:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c4a68:
	mov -272(%RBP),%RSP
	add $-280, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b22
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a70
	jmp uuid_00000000000c4a72
uuid_00000000000c4a70:
	push %RBP
	jmp uuid_00000000000c4a6d
	jmp uuid_00000000000c4a6f
uuid_00000000000c4a6d:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4a6a
	jmp uuid_00000000000c4a6c
uuid_00000000000c4a6a:
	movb $1, -320(%rbp)
uuid_00000000000c4a6c:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c4a6f:
	mov -336(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c4a72:
	mov -328(%RBP),%RSP
	add $-352, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b1f
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a7b
	jmp uuid_00000000000c4a7d
uuid_00000000000c4a7b:
	push %RBP
	jmp uuid_00000000000c4a78
	jmp uuid_00000000000c4a7a
uuid_00000000000c4a78:
	push %RBP
	mov -368(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -424(%rbp)
	pushq $uuid_00000000000c4a74
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4a75
	jmp uuid_00000000000c4a77
uuid_00000000000c4a75:
	movb $1, -392(%rbp)
uuid_00000000000c4a77:
	mov -416(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c4a7a:
	mov -408(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c4a7d:
	mov -400(%RBP),%RSP
	add $-424, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b1c
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a86
	jmp uuid_00000000000c4a88
uuid_00000000000c4a86:
	push %RBP
	jmp uuid_00000000000c4a83
	jmp uuid_00000000000c4a85
uuid_00000000000c4a83:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq $uuid_00000000000c4a7f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4a80
	jmp uuid_00000000000c4a82
uuid_00000000000c4a80:
	movb $1, -464(%rbp)
uuid_00000000000c4a82:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c4a85:
	mov -480(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c4a88:
	mov -472(%RBP),%RSP
	add $-496, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b19
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a91
	jmp uuid_00000000000c4a93
uuid_00000000000c4a91:
	push %RBP
	jmp uuid_00000000000c4a8e
	jmp uuid_00000000000c4a90
uuid_00000000000c4a8e:
	push %RBP
	mov -512(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -568(%rbp)
	pushq $uuid_00000000000c4a8a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4a8b
	jmp uuid_00000000000c4a8d
uuid_00000000000c4a8b:
	movb $1, -536(%rbp)
uuid_00000000000c4a8d:
	mov -560(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000c4a90:
	mov -552(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000c4a93:
	mov -544(%RBP),%RSP
	add $-568, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b16
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4a9c
	jmp uuid_00000000000c4a9e
uuid_00000000000c4a9c:
	push %RBP
	jmp uuid_00000000000c4a99
	jmp uuid_00000000000c4a9b
uuid_00000000000c4a99:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -640(%rbp)
	pushq $uuid_00000000000c4a95
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4a96
	jmp uuid_00000000000c4a98
uuid_00000000000c4a96:
	movb $1, -608(%rbp)
uuid_00000000000c4a98:
	mov -632(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c4a9b:
	mov -624(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c4a9e:
	mov -616(%RBP),%RSP
	add $-640, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b13
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4aa7
	jmp uuid_00000000000c4aa9
uuid_00000000000c4aa7:
	push %RBP
	jmp uuid_00000000000c4aa4
	jmp uuid_00000000000c4aa6
uuid_00000000000c4aa4:
	push %RBP
	mov -656(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq $uuid_00000000000c4aa0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4aa1
	jmp uuid_00000000000c4aa3
uuid_00000000000c4aa1:
	movb $1, -680(%rbp)
uuid_00000000000c4aa3:
	mov -704(%RBP),%RSP
	add $-712, %RSP
uuid_00000000000c4aa6:
	mov -696(%RBP),%RSP
	add $-712, %RSP
uuid_00000000000c4aa9:
	mov -688(%RBP),%RSP
	add $-712, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b10
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ab2
	jmp uuid_00000000000c4ab4
uuid_00000000000c4ab2:
	push %RBP
	jmp uuid_00000000000c4aaf
	jmp uuid_00000000000c4ab1
uuid_00000000000c4aaf:
	push %RBP
	mov -728(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq $uuid_00000000000c4aab
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4aac
	jmp uuid_00000000000c4aae
uuid_00000000000c4aac:
	movb $1, -752(%rbp)
uuid_00000000000c4aae:
	mov -776(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c4ab1:
	mov -768(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c4ab4:
	mov -760(%RBP),%RSP
	add $-784, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b0d
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4abd
	jmp uuid_00000000000c4abf
uuid_00000000000c4abd:
	push %RBP
	jmp uuid_00000000000c4aba
	jmp uuid_00000000000c4abc
uuid_00000000000c4aba:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq $uuid_00000000000c4ab6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ab7
	jmp uuid_00000000000c4ab9
uuid_00000000000c4ab7:
	movb $1, -824(%rbp)
uuid_00000000000c4ab9:
	mov -848(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000c4abc:
	mov -840(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000c4abf:
	mov -832(%RBP),%RSP
	add $-856, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b0a
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ac8
	jmp uuid_00000000000c4aca
uuid_00000000000c4ac8:
	push %RBP
	jmp uuid_00000000000c4ac5
	jmp uuid_00000000000c4ac7
uuid_00000000000c4ac5:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq $uuid_00000000000c4ac1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ac2
	jmp uuid_00000000000c4ac4
uuid_00000000000c4ac2:
	movb $1, -896(%rbp)
uuid_00000000000c4ac4:
	mov -920(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c4ac7:
	mov -912(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c4aca:
	mov -904(%RBP),%RSP
	add $-928, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b07
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ad3
	jmp uuid_00000000000c4ad5
uuid_00000000000c4ad3:
	push %RBP
	jmp uuid_00000000000c4ad0
	jmp uuid_00000000000c4ad2
uuid_00000000000c4ad0:
	push %RBP
	mov -944(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq $uuid_00000000000c4acc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4acd
	jmp uuid_00000000000c4acf
uuid_00000000000c4acd:
	movb $1, -968(%rbp)
uuid_00000000000c4acf:
	mov -992(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000c4ad2:
	mov -984(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000c4ad5:
	mov -976(%RBP),%RSP
	add $-1000, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b04
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1032(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4af0
	jmp uuid_00000000000c4af2
uuid_00000000000c4af0:
	push %RBP
	mov -1024(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1096(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ae6
	jmp uuid_00000000000c4ae8
uuid_00000000000c4ae6:
	push %RBP
	mov -1088(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4add
	jmp uuid_00000000000c4adf
uuid_00000000000c4add:
	push %RBP
	jmp uuid_00000000000c4ada
	jmp uuid_00000000000c4adc
uuid_00000000000c4ada:
	push %RBP
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	jmp uuid_00000000000c4ad7
	jmp uuid_00000000000c4ad9
uuid_00000000000c4ad7:
	movb $1, -1168(%rbp)
uuid_00000000000c4ad9:
	mov -1192(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000c4adc:
	mov -1184(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000c4adf:
	mov -1176(%RBP),%RSP
	add $-1216, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ae3
	jmp uuid_00000000000c4ae5
uuid_00000000000c4ae3:
	push %RBP
	jmp uuid_00000000000c4ae0
	jmp uuid_00000000000c4ae2
uuid_00000000000c4ae0:
	movb $1, -1104(%rbp)
uuid_00000000000c4ae2:
	mov -1224(%RBP),%RSP
	add $-1224, %RSP
uuid_00000000000c4ae5:
	mov -1120(%RBP),%RSP
	add $-1224, %RSP
uuid_00000000000c4ae8:
	mov -1112(%RBP),%RSP
	add $-1224, %RSP
	mov -1104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4aed
	jmp uuid_00000000000c4aef
uuid_00000000000c4aed:
	push %RBP
	mov -1016(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq $uuid_00000000000c4ae9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4aea
	jmp uuid_00000000000c4aec
uuid_00000000000c4aea:
	movb $1, -1040(%rbp)
uuid_00000000000c4aec:
	mov -1232(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c4aef:
	mov -1056(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c4af2:
	mov -1048(%RBP),%RSP
	add $-1240, %RSP
	mov -1040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b01
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4afa
	jmp uuid_00000000000c4afc
uuid_00000000000c4afa:
	push %RBP
	jmp uuid_00000000000c4af7
	jmp uuid_00000000000c4af9
uuid_00000000000c4af7:
	push %RBP
	jmp uuid_00000000000c4af4
	jmp uuid_00000000000c4af6
uuid_00000000000c4af4:
	movb $1, -1280(%rbp)
uuid_00000000000c4af6:
	mov -1304(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c4af9:
	mov -1296(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c4afc:
	mov -1288(%RBP),%RSP
	add $-1304, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4afe
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4afd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4b00
uuid_00000000000c4afe:
uuid_00000000000c4b00:
	mov -1248(%RBP),%RSP
	add $-1304, %RSP
	jmp uuid_00000000000c4b03
uuid_00000000000c4b01:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $uuid_00000000000c4af3
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4b03:
	mov -1008(%RBP),%RSP
	add $-1240, %RSP
	jmp uuid_00000000000c4b06
uuid_00000000000c4b04:
	pushq $0
	pushq $uuid_00000000000c4ad6
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4b06:
	mov -936(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000c4b09
uuid_00000000000c4b07:
	pushq $0
	pushq $uuid_00000000000c4acb
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4b09:
	mov -864(%RBP),%RSP
	add $-928, %RSP
	jmp uuid_00000000000c4b0c
uuid_00000000000c4b0a:
	pushq $0
	pushq $uuid_00000000000c4ac0
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4b0c:
	mov -792(%RBP),%RSP
	add $-856, %RSP
	jmp uuid_00000000000c4b0f
uuid_00000000000c4b0d:
	pushq $0
	pushq $uuid_00000000000c4ab5
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4b0f:
	mov -720(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c4b12
uuid_00000000000c4b10:
	pushq $0
	pushq $uuid_00000000000c4aaa
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4b12:
	mov -648(%RBP),%RSP
	add $-712, %RSP
	jmp uuid_00000000000c4b15
uuid_00000000000c4b13:
	pushq $0
	pushq $uuid_00000000000c4a9f
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4b15:
	mov -576(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000c4b18
uuid_00000000000c4b16:
	pushq $0
	pushq $uuid_00000000000c4a94
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4b18:
	mov -504(%RBP),%RSP
	add $-568, %RSP
	jmp uuid_00000000000c4b1b
uuid_00000000000c4b19:
	pushq $0
	pushq $uuid_00000000000c4a89
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4b1b:
	mov -432(%RBP),%RSP
	add $-496, %RSP
	jmp uuid_00000000000c4b1e
uuid_00000000000c4b1c:
	pushq $0
	pushq $uuid_00000000000c4a7e
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4b1e:
	mov -360(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000c4b21
uuid_00000000000c4b1f:
	pushq $0
	pushq $uuid_00000000000c4a73
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4b21:
	mov -288(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c4b24
uuid_00000000000c4b22:
uuid_00000000000c4b24:
	mov -232(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c4b27
uuid_00000000000c4b25:
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4a60
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	jmp uuid_00000000000c4a62
uuid_00000000000c4a60:
uuid_00000000000c4a62:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c4b27:
	mov -120(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c4b2a
uuid_00000000000c4b28:
uuid_00000000000c4b2a:
	mov -88(%RBP),%RSP
	add $-112, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
escape_SB_string_CL_ArrowStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c4b50:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c4b51
	jmp uuid_00000000000c4b52
uuid_00000000000c4b51:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b4d
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c4b4f
uuid_00000000000c4b4d:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b4a
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b47
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b44
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b41
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b3e
	push %RBP
	pushq -56(%rbp)
	mov -152(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b3b
	push %RBP
	pushq -56(%rbp)
	mov -168(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b38
	push %RBP
	pushq -56(%rbp)
	mov -184(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b35
	push %RBP
	pushq -56(%rbp)
	mov -200(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b32
	push %RBP
	pushq -56(%rbp)
	jmp uuid_00000000000c4b2f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4b2e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4b31
uuid_00000000000c4b2f:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4b2c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U8,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4b2d
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4b31:
	mov -208(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000c4b34
uuid_00000000000c4b32:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $32
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4b34:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c4b37
uuid_00000000000c4b35:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $9
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4b37:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000c4b3a
uuid_00000000000c4b38:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $35
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4b3a:
	mov -160(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c4b3d
uuid_00000000000c4b3b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $10
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4b3d:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c4b40
uuid_00000000000c4b3e:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $39
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4b40:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c4b43
uuid_00000000000c4b41:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $41
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4b43:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c4b46
uuid_00000000000c4b44:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4b2b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4b46:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000c4b49
uuid_00000000000c4b47:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $40
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4b49:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000c4b4c
uuid_00000000000c4b4a:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $59
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4b4c:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000c4b4f:
	mov -48(%RBP),%RSP
	add $-72, %RSP
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c4b50
uuid_00000000000c4b52:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
escape_SB_literal_CL_ArrowStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c4b8f:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c4b90
	jmp uuid_00000000000c4b91
uuid_00000000000c4b90:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -48(%rbp)
	mov -64(%RBP), %AL
	mov $34, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b8c
	push %RBP
	pushq -48(%rbp)
	mov -80(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b89
	push %RBP
	pushq -48(%rbp)
	mov -96(%RBP), %AL
	mov $10, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b86
	push %RBP
	pushq -48(%rbp)
	jmp uuid_00000000000c4b83
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4b82
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4b85
uuid_00000000000c4b83:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4b85:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c4b88
uuid_00000000000c4b86:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4b81
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4b88:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c4b8b
uuid_00000000000c4b89:
	pushq $uuid_00000000000c4960
	mov -8(%RBP), %RAX
	inc %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b7a
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b77
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b74
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b71
	push %RBP
	pushq -96(%rbp)
	mov -176(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b6e
	push %RBP
	pushq -96(%rbp)
	mov -192(%RBP), %AL
	mov $108, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b6b
	push %RBP
	pushq -96(%rbp)
	mov -208(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b68
	push %RBP
	pushq -96(%rbp)
	mov -224(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b65
	push %RBP
	pushq -96(%rbp)
	mov -240(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b62
	push %RBP
	pushq -96(%rbp)
	mov -256(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b5f
	push %RBP
	jmp uuid_00000000000c4b5c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4b5b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4b5e
uuid_00000000000c4b5c:
uuid_00000000000c4b5e:
	mov -264(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c4b61
uuid_00000000000c4b5f:
	movq $uuid_00000000000c4b5a, -88(%rbp)
uuid_00000000000c4b61:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c4b64
uuid_00000000000c4b62:
	movq $uuid_00000000000c4892, -88(%rbp)
uuid_00000000000c4b64:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c4b67
uuid_00000000000c4b65:
	movq $uuid_00000000000c4b59, -88(%rbp)
uuid_00000000000c4b67:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c4b6a
uuid_00000000000c4b68:
	movq $uuid_00000000000c4b58, -88(%rbp)
uuid_00000000000c4b6a:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c4b6d
uuid_00000000000c4b6b:
	movq $uuid_00000000000c4b57, -88(%rbp)
uuid_00000000000c4b6d:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c4b70
uuid_00000000000c4b6e:
	movq $uuid_00000000000c4b56, -88(%rbp)
uuid_00000000000c4b70:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c4b73
uuid_00000000000c4b71:
	movq $uuid_00000000000c4893, -88(%rbp)
uuid_00000000000c4b73:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c4b76
uuid_00000000000c4b74:
	movq $uuid_00000000000c4b55, -88(%rbp)
uuid_00000000000c4b76:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c4b79
uuid_00000000000c4b77:
	movq $uuid_00000000000c4891, -88(%rbp)
uuid_00000000000c4b79:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c4b7c
uuid_00000000000c4b7a:
	movq $uuid_00000000000c4b54, -88(%rbp)
uuid_00000000000c4b7c:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -88(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c4b7e
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4b7d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000c4b80
uuid_00000000000c4b7e:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -88(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000c4b80:
	mov -120(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000c4b8b:
	mov -72(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c4b8e
uuid_00000000000c4b8c:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4b53
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c4b8e:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c4b8f
uuid_00000000000c4b91:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
escape_SB_string_CL_ArrowSS:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b95
	jmp uuid_00000000000c4b97
uuid_00000000000c4b95:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4b92
	jmp uuid_00000000000c4b94
uuid_00000000000c4b92:
	movb $1, -96(%rbp)
uuid_00000000000c4b94:
	mov -112(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000c4b97:
	mov -104(%RBP),%RSP
	add $-120, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ba8
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4b9e
	jmp uuid_00000000000c4ba0
uuid_00000000000c4b9e:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4b9b
	jmp uuid_00000000000c4b9d
uuid_00000000000c4b9b:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4b98
	jmp uuid_00000000000c4b9a
uuid_00000000000c4b98:
	movb $1, -160(%rbp)
uuid_00000000000c4b9a:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c4b9d:
	mov -176(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c4ba0:
	mov -168(%RBP),%RSP
	add $-232, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ba5
	push %RBP
	jmp uuid_00000000000c4ba2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4ba1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4ba4
uuid_00000000000c4ba2:
uuid_00000000000c4ba4:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c4ba7
uuid_00000000000c4ba5:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c4ba7:
	mov -128(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c4baa
uuid_00000000000c4ba8:
	pushq $0
#call function escape-string : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c4baa:
	mov -64(%RBP),%RSP
	add $-120, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
exit_SB_error_CL_ArrowNilConsASTString:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bca
	jmp uuid_00000000000c4bcc
uuid_00000000000c4bca:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bb7
	jmp uuid_00000000000c4bb9
uuid_00000000000c4bb7:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bae
	jmp uuid_00000000000c4bb0
uuid_00000000000c4bae:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000c4bab
	jmp uuid_00000000000c4bad
uuid_00000000000c4bab:
	movb $1, -440(%rbp)
uuid_00000000000c4bad:
	mov -456(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000c4bb0:
	mov -448(%RBP),%RSP
	add $-480, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bb4
	jmp uuid_00000000000c4bb6
uuid_00000000000c4bb4:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4bb1
	jmp uuid_00000000000c4bb3
uuid_00000000000c4bb1:
	movb $1, -344(%rbp)
uuid_00000000000c4bb3:
	mov -488(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c4bb6:
	mov -360(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c4bb9:
	mov -352(%RBP),%RSP
	add $-560, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bc7
	jmp uuid_00000000000c4bc9
uuid_00000000000c4bc7:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bc1
	jmp uuid_00000000000c4bc3
uuid_00000000000c4bc1:
	push %RBP
	jmp uuid_00000000000c4bbe
	jmp uuid_00000000000c4bc0
uuid_00000000000c4bbe:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq $uuid_00000000000c4bba
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4bbb
	jmp uuid_00000000000c4bbd
uuid_00000000000c4bbb:
	movb $1, -648(%rbp)
uuid_00000000000c4bbd:
	mov -672(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000c4bc0:
	mov -664(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000c4bc3:
	mov -656(%RBP),%RSP
	add $-680, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bc4
	jmp uuid_00000000000c4bc6
uuid_00000000000c4bc4:
	movb $1, -248(%rbp)
uuid_00000000000c4bc6:
	mov -568(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000c4bc9:
	mov -264(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000c4bcc:
	mov -256(%RBP),%RSP
	add $-680, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4be2
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bd6
	jmp uuid_00000000000c4bd8
uuid_00000000000c4bd6:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4bd3
	jmp uuid_00000000000c4bd5
uuid_00000000000c4bd3:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4bd0
	jmp uuid_00000000000c4bd2
uuid_00000000000c4bd0:
	movb $1, -768(%rbp)
uuid_00000000000c4bd2:
	mov -864(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c4bd5:
	mov -784(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c4bd8:
	mov -776(%RBP),%RSP
	add $-936, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bdf
	push %RBP
	jmp uuid_00000000000c4bdc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4bdb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4bde
uuid_00000000000c4bdc:
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4bde:
	mov -944(%RBP),%RSP
	add $-944, %RSP
	jmp uuid_00000000000c4be1
uuid_00000000000c4bdf:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4bd9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4bce
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4bce
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4bda
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4be1:
	mov -688(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000c4be4
uuid_00000000000c4be2:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4bcd
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4bce
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4bcf
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4be4:
	mov -168(%RBP),%RSP
	add $-680, %RSP
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
is_SB_variable_CL_ArrowU64String:
	pushq $0
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -32(%rbp)
	mov -48(%RBP), %AL
	mov $33, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c80
	push %RBP
	pushq -32(%rbp)
	mov -64(%RBP), %AL
	mov $36, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c7d
	push %RBP
	pushq -32(%rbp)
	mov -80(%RBP), %AL
	mov $37, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c7a
	push %RBP
	pushq -32(%rbp)
	mov -96(%RBP), %AL
	mov $38, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c77
	push %RBP
	pushq -32(%rbp)
	mov -112(%RBP), %AL
	mov $42, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c74
	push %RBP
	pushq -32(%rbp)
	mov -128(%RBP), %AL
	mov $43, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c71
	push %RBP
	pushq -32(%rbp)
	mov -144(%RBP), %AL
	mov $45, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c6e
	push %RBP
	pushq -32(%rbp)
	mov -160(%RBP), %AL
	mov $46, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c6b
	push %RBP
	pushq -32(%rbp)
	mov -176(%RBP), %AL
	mov $47, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c68
	push %RBP
	pushq -32(%rbp)
	mov -192(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c65
	push %RBP
	pushq -32(%rbp)
	mov -208(%RBP), %AL
	mov $59, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c62
	push %RBP
	pushq -32(%rbp)
	mov -224(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c5f
	push %RBP
	pushq -32(%rbp)
	mov -240(%RBP), %AL
	mov $61, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c5c
	push %RBP
	pushq -32(%rbp)
	mov -256(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c59
	push %RBP
	pushq -32(%rbp)
	mov -272(%RBP), %AL
	mov $63, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c56
	push %RBP
	pushq -32(%rbp)
	mov -288(%RBP), %AL
	mov $64, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c53
	push %RBP
	pushq -32(%rbp)
	mov -304(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c50
	push %RBP
	pushq -32(%rbp)
	mov -320(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c4d
	push %RBP
	pushq -32(%rbp)
	mov -336(%RBP), %AL
	mov $94, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c4a
	push %RBP
	pushq -32(%rbp)
	mov -352(%RBP), %AL
	mov $95, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c47
	push %RBP
	pushq -32(%rbp)
	mov -368(%RBP), %AL
	mov $97, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c44
	push %RBP
	pushq -32(%rbp)
	mov -384(%RBP), %AL
	mov $98, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c41
	push %RBP
	pushq -32(%rbp)
	mov -400(%RBP), %AL
	mov $99, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c3e
	push %RBP
	pushq -32(%rbp)
	mov -416(%RBP), %AL
	mov $100, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c3b
	push %RBP
	pushq -32(%rbp)
	mov -432(%RBP), %AL
	mov $101, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c38
	push %RBP
	pushq -32(%rbp)
	mov -448(%RBP), %AL
	mov $102, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c35
	push %RBP
	pushq -32(%rbp)
	mov -464(%RBP), %AL
	mov $103, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c32
	push %RBP
	pushq -32(%rbp)
	mov -480(%RBP), %AL
	mov $104, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c2f
	push %RBP
	pushq -32(%rbp)
	mov -496(%RBP), %AL
	mov $105, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c2c
	push %RBP
	pushq -32(%rbp)
	mov -512(%RBP), %AL
	mov $106, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c29
	push %RBP
	pushq -32(%rbp)
	mov -528(%RBP), %AL
	mov $107, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c26
	push %RBP
	pushq -32(%rbp)
	mov -544(%RBP), %AL
	mov $108, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c23
	push %RBP
	pushq -32(%rbp)
	mov -560(%RBP), %AL
	mov $109, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c20
	push %RBP
	pushq -32(%rbp)
	mov -576(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c1d
	push %RBP
	pushq -32(%rbp)
	mov -592(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c1a
	push %RBP
	pushq -32(%rbp)
	mov -608(%RBP), %AL
	mov $112, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c17
	push %RBP
	pushq -32(%rbp)
	mov -624(%RBP), %AL
	mov $113, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c14
	push %RBP
	pushq -32(%rbp)
	mov -640(%RBP), %AL
	mov $114, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c11
	push %RBP
	pushq -32(%rbp)
	mov -656(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c0e
	push %RBP
	pushq -32(%rbp)
	mov -672(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c0b
	push %RBP
	pushq -32(%rbp)
	mov -688(%RBP), %AL
	mov $117, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c08
	push %RBP
	pushq -32(%rbp)
	mov -704(%RBP), %AL
	mov $118, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c05
	push %RBP
	pushq -32(%rbp)
	mov -720(%RBP), %AL
	mov $119, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c02
	push %RBP
	pushq -32(%rbp)
	mov -736(%RBP), %AL
	mov $120, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bff
	push %RBP
	pushq -32(%rbp)
	mov -752(%RBP), %AL
	mov $121, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bfc
	push %RBP
	pushq -32(%rbp)
	mov -768(%RBP), %AL
	mov $122, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bf9
	push %RBP
	pushq -32(%rbp)
	mov -784(%RBP), %AL
	mov $124, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bf6
	push %RBP
	pushq -32(%rbp)
	mov -800(%RBP), %AL
	mov $126, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4bf3
	push %RBP
	jmp uuid_00000000000c4bf0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4bef
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4bf2
uuid_00000000000c4bf0:
uuid_00000000000c4bf2:
	mov -808(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000c4bf5
uuid_00000000000c4bf3:
	movb $1, -24(%rbp)
uuid_00000000000c4bf5:
	mov -792(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000c4bf8
uuid_00000000000c4bf6:
	movb $1, -24(%rbp)
uuid_00000000000c4bf8:
	mov -776(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c4bfb
uuid_00000000000c4bf9:
	movb $1, -24(%rbp)
uuid_00000000000c4bfb:
	mov -760(%RBP),%RSP
	add $-768, %RSP
	jmp uuid_00000000000c4bfe
uuid_00000000000c4bfc:
	movb $1, -24(%rbp)
uuid_00000000000c4bfe:
	mov -744(%RBP),%RSP
	add $-752, %RSP
	jmp uuid_00000000000c4c01
uuid_00000000000c4bff:
	movb $1, -24(%rbp)
uuid_00000000000c4c01:
	mov -728(%RBP),%RSP
	add $-736, %RSP
	jmp uuid_00000000000c4c04
uuid_00000000000c4c02:
	movb $1, -24(%rbp)
uuid_00000000000c4c04:
	mov -712(%RBP),%RSP
	add $-720, %RSP
	jmp uuid_00000000000c4c07
uuid_00000000000c4c05:
	movb $1, -24(%rbp)
uuid_00000000000c4c07:
	mov -696(%RBP),%RSP
	add $-704, %RSP
	jmp uuid_00000000000c4c0a
uuid_00000000000c4c08:
	movb $1, -24(%rbp)
uuid_00000000000c4c0a:
	mov -680(%RBP),%RSP
	add $-688, %RSP
	jmp uuid_00000000000c4c0d
uuid_00000000000c4c0b:
	movb $1, -24(%rbp)
uuid_00000000000c4c0d:
	mov -664(%RBP),%RSP
	add $-672, %RSP
	jmp uuid_00000000000c4c10
uuid_00000000000c4c0e:
	movb $1, -24(%rbp)
uuid_00000000000c4c10:
	mov -648(%RBP),%RSP
	add $-656, %RSP
	jmp uuid_00000000000c4c13
uuid_00000000000c4c11:
	movb $1, -24(%rbp)
uuid_00000000000c4c13:
	mov -632(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000c4c16
uuid_00000000000c4c14:
	movb $1, -24(%rbp)
uuid_00000000000c4c16:
	mov -616(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c4c19
uuid_00000000000c4c17:
	movb $1, -24(%rbp)
uuid_00000000000c4c19:
	mov -600(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000c4c1c
uuid_00000000000c4c1a:
	movb $1, -24(%rbp)
uuid_00000000000c4c1c:
	mov -584(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000c4c1f
uuid_00000000000c4c1d:
	movb $1, -24(%rbp)
uuid_00000000000c4c1f:
	mov -568(%RBP),%RSP
	add $-576, %RSP
	jmp uuid_00000000000c4c22
uuid_00000000000c4c20:
	movb $1, -24(%rbp)
uuid_00000000000c4c22:
	mov -552(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c4c25
uuid_00000000000c4c23:
	movb $1, -24(%rbp)
uuid_00000000000c4c25:
	mov -536(%RBP),%RSP
	add $-544, %RSP
	jmp uuid_00000000000c4c28
uuid_00000000000c4c26:
	movb $1, -24(%rbp)
uuid_00000000000c4c28:
	mov -520(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000c4c2b
uuid_00000000000c4c29:
	movb $1, -24(%rbp)
uuid_00000000000c4c2b:
	mov -504(%RBP),%RSP
	add $-512, %RSP
	jmp uuid_00000000000c4c2e
uuid_00000000000c4c2c:
	movb $1, -24(%rbp)
uuid_00000000000c4c2e:
	mov -488(%RBP),%RSP
	add $-496, %RSP
	jmp uuid_00000000000c4c31
uuid_00000000000c4c2f:
	movb $1, -24(%rbp)
uuid_00000000000c4c31:
	mov -472(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000c4c34
uuid_00000000000c4c32:
	movb $1, -24(%rbp)
uuid_00000000000c4c34:
	mov -456(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000c4c37
uuid_00000000000c4c35:
	movb $1, -24(%rbp)
uuid_00000000000c4c37:
	mov -440(%RBP),%RSP
	add $-448, %RSP
	jmp uuid_00000000000c4c3a
uuid_00000000000c4c38:
	movb $1, -24(%rbp)
uuid_00000000000c4c3a:
	mov -424(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000c4c3d
uuid_00000000000c4c3b:
	movb $1, -24(%rbp)
uuid_00000000000c4c3d:
	mov -408(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000c4c40
uuid_00000000000c4c3e:
	movb $1, -24(%rbp)
uuid_00000000000c4c40:
	mov -392(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c4c43
uuid_00000000000c4c41:
	movb $1, -24(%rbp)
uuid_00000000000c4c43:
	mov -376(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c4c46
uuid_00000000000c4c44:
	movb $1, -24(%rbp)
uuid_00000000000c4c46:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000c4c49
uuid_00000000000c4c47:
	movb $1, -24(%rbp)
uuid_00000000000c4c49:
	mov -344(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c4c4c
uuid_00000000000c4c4a:
	movb $1, -24(%rbp)
uuid_00000000000c4c4c:
	mov -328(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000c4c4f
uuid_00000000000c4c4d:
	movb $1, -24(%rbp)
uuid_00000000000c4c4f:
	mov -312(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000c4c52
uuid_00000000000c4c50:
	movb $1, -24(%rbp)
uuid_00000000000c4c52:
	mov -296(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000c4c55
uuid_00000000000c4c53:
	movb $1, -24(%rbp)
uuid_00000000000c4c55:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c4c58
uuid_00000000000c4c56:
	movb $1, -24(%rbp)
uuid_00000000000c4c58:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c4c5b
uuid_00000000000c4c59:
	movb $1, -24(%rbp)
uuid_00000000000c4c5b:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c4c5e
uuid_00000000000c4c5c:
	movb $1, -24(%rbp)
uuid_00000000000c4c5e:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c4c61
uuid_00000000000c4c5f:
	movb $1, -24(%rbp)
uuid_00000000000c4c61:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c4c64
uuid_00000000000c4c62:
	movb $1, -24(%rbp)
uuid_00000000000c4c64:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c4c67
uuid_00000000000c4c65:
	push %RBP
	mov -8(%RBP), %RAX
	inc %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4be9
	jmp uuid_00000000000c4beb
uuid_00000000000c4be9:
	movb $1, -24(%rbp)
uuid_00000000000c4beb:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	inc %RAX
	push %RAX
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4bec
	jmp uuid_00000000000c4bee
uuid_00000000000c4bec:
	movb $1, -24(%rbp)
uuid_00000000000c4bee:
	mov -208(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c4c67:
	mov -184(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c4c6a
uuid_00000000000c4c68:
	movb $1, -24(%rbp)
uuid_00000000000c4c6a:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c4c6d
uuid_00000000000c4c6b:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000c4be5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4be6
	movb $1, -24(%rbp)
	jmp uuid_00000000000c4be8
uuid_00000000000c4be6:
uuid_00000000000c4be8:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c4c6d:
	mov -152(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c4c70
uuid_00000000000c4c6e:
	movb $1, -24(%rbp)
uuid_00000000000c4c70:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c4c73
uuid_00000000000c4c71:
	movb $1, -24(%rbp)
uuid_00000000000c4c73:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c4c76
uuid_00000000000c4c74:
	movb $1, -24(%rbp)
uuid_00000000000c4c76:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c4c79
uuid_00000000000c4c77:
	movb $1, -24(%rbp)
uuid_00000000000c4c79:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c4c7c
uuid_00000000000c4c7a:
	movb $1, -24(%rbp)
uuid_00000000000c4c7c:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c4c7f
uuid_00000000000c4c7d:
	movb $1, -24(%rbp)
uuid_00000000000c4c7f:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c4c82
uuid_00000000000c4c80:
	movb $1, -24(%rbp)
uuid_00000000000c4c82:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000c4c83
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4c84
	jmp uuid_00000000000c4c86
uuid_00000000000c4c84:
	movb $0, -24(%rbp)
uuid_00000000000c4c86:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -24(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_string_CL_ArrowStringIsUsed:
	pushq $uuid_00000000000c4960
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c99
	push %RBP
	pushq -32(%rbp)
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c96
	push %RBP
	pushq -32(%rbp)
	mov -80(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c93
	push %RBP
	pushq -32(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c90
	push %RBP
	pushq -32(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4c8d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4c8c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4c8f
uuid_00000000000c4c8d:
	movq $uuid_00000000000c4c8b, -24(%rbp)
uuid_00000000000c4c8f:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c4c92
uuid_00000000000c4c90:
	movq $uuid_00000000000c4c8a, -24(%rbp)
uuid_00000000000c4c92:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c4c95
uuid_00000000000c4c93:
	movq $uuid_00000000000c4c89, -24(%rbp)
uuid_00000000000c4c95:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c4c98
uuid_00000000000c4c96:
	movq $uuid_00000000000c4c88, -24(%rbp)
uuid_00000000000c4c98:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c4c9b
uuid_00000000000c4c99:
	movq $uuid_00000000000c4c87, -24(%rbp)
uuid_00000000000c4c9b:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_string_CL_ArrowStringType:
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
to_SB_string_CL_ArrowSListType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cba
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ca6
	jmp uuid_00000000000c4ca8
uuid_00000000000c4ca6:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ca3
	jmp uuid_00000000000c4ca5
uuid_00000000000c4ca3:
	push %RBP
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	jmp uuid_00000000000c4ca0
	jmp uuid_00000000000c4ca2
uuid_00000000000c4ca0:
	movb $1, -216(%rbp)
uuid_00000000000c4ca2:
	mov -280(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c4ca5:
	mov -232(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c4ca8:
	mov -224(%RBP),%RSP
	add $-304, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cb7
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4caf
	jmp uuid_00000000000c4cb1
uuid_00000000000c4caf:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4cac
	jmp uuid_00000000000c4cae
uuid_00000000000c4cac:
	push %RBP
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	jmp uuid_00000000000c4ca9
	jmp uuid_00000000000c4cab
uuid_00000000000c4ca9:
	movb $1, -360(%rbp)
uuid_00000000000c4cab:
	mov -424(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c4cae:
	mov -376(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c4cb1:
	mov -368(%RBP),%RSP
	add $-448, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cb4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4cb3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4cb6
uuid_00000000000c4cb4:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<List<Type>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowSListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4cb2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c4cb6:
	mov -312(%RBP),%RSP
	add $-448, %RSP
	jmp uuid_00000000000c4cb9
uuid_00000000000c4cb7:
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c4cb9:
	mov -168(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000c4cbc
uuid_00000000000c4cba:
uuid_00000000000c4cbc:
	mov -120(%RBP),%RSP
	add $-160, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
to_SB_string_SB_impl_CL_ArrowSType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d04
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cc0
	jmp uuid_00000000000c4cc2
uuid_00000000000c4cc0:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4cbd
	jmp uuid_00000000000c4cbf
uuid_00000000000c4cbd:
	movb $1, -152(%rbp)
uuid_00000000000c4cbf:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c4cc2:
	mov -160(%RBP),%RSP
	add $-176, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d01
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cc9
	jmp uuid_00000000000c4ccb
uuid_00000000000c4cc9:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4cc6
	jmp uuid_00000000000c4cc8
uuid_00000000000c4cc6:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4cc3
	jmp uuid_00000000000c4cc5
uuid_00000000000c4cc3:
	movb $1, -216(%rbp)
uuid_00000000000c4cc5:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c4cc8:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c4ccb:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cfe
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cd3
	jmp uuid_00000000000c4cd5
uuid_00000000000c4cd3:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cd0
	jmp uuid_00000000000c4cd2
uuid_00000000000c4cd0:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4ccd
	jmp uuid_00000000000c4ccf
uuid_00000000000c4ccd:
	movb $1, -328(%rbp)
uuid_00000000000c4ccf:
	mov -392(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c4cd2:
	mov -344(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c4cd5:
	mov -336(%RBP),%RSP
	add $-400, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cfb
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ce6
	jmp uuid_00000000000c4ce8
uuid_00000000000c4ce6:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cdc
	jmp uuid_00000000000c4cde
uuid_00000000000c4cdc:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cd9
	jmp uuid_00000000000c4cdb
uuid_00000000000c4cd9:
	push %RBP
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	jmp uuid_00000000000c4cd6
	jmp uuid_00000000000c4cd8
uuid_00000000000c4cd6:
	movb $1, -504(%rbp)
uuid_00000000000c4cd8:
	mov -568(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c4cdb:
	mov -520(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c4cde:
	mov -512(%RBP),%RSP
	add $-592, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ce3
	jmp uuid_00000000000c4ce5
uuid_00000000000c4ce3:
	push %RBP
	mov -416(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq $uuid_00000000000c4cdf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ce0
	jmp uuid_00000000000c4ce2
uuid_00000000000c4ce0:
	movb $1, -440(%rbp)
uuid_00000000000c4ce2:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c4ce5:
	mov -456(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c4ce8:
	mov -448(%RBP),%RSP
	add $-608, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cf8
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cef
	jmp uuid_00000000000c4cf1
uuid_00000000000c4cef:
	push %RBP
	mov -632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4cec
	jmp uuid_00000000000c4cee
uuid_00000000000c4cec:
	push %RBP
	mov -624(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4ce9
	jmp uuid_00000000000c4ceb
uuid_00000000000c4ce9:
	movb $1, -648(%rbp)
uuid_00000000000c4ceb:
	mov -712(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000c4cee:
	mov -664(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000c4cf1:
	mov -656(%RBP),%RSP
	add $-720, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4cf5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4cf4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4cf7
uuid_00000000000c4cf5:
	pushq $0
	pushq -720(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4cf2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<List<Type>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowSListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4cf3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4cf7:
	mov -616(%RBP),%RSP
	add $-720, %RSP
	jmp uuid_00000000000c4cfa
uuid_00000000000c4cf8:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4cdf
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4cfa:
	mov -408(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000c4cfd
uuid_00000000000c4cfb:
	pushq $0
	pushq -400(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4cfd:
	mov -296(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c4d00
uuid_00000000000c4cfe:
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4ccc
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4d00:
	mov -184(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000c4d03
uuid_00000000000c4d01:
	pushq $0
	pushq -176(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4d03:
	mov -120(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c4d06
uuid_00000000000c4d04:
	pushq $0
	pushq $uuid_00000000000c4a21
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c4d06:
	mov -88(%RBP),%RSP
	add $-112, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTypeType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d0d
	jmp uuid_00000000000c4d0f
uuid_00000000000c4d0d:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d0a
	jmp uuid_00000000000c4d0c
uuid_00000000000c4d0a:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d07
	jmp uuid_00000000000c4d09
uuid_00000000000c4d07:
	movb $1, -192(%rbp)
uuid_00000000000c4d09:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c4d0c:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c4d0f:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d74
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d22
	jmp uuid_00000000000c4d24
uuid_00000000000c4d22:
	push %RBP
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d13
	jmp uuid_00000000000c4d15
uuid_00000000000c4d13:
	push %RBP
	mov -368(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4d10
	jmp uuid_00000000000c4d12
uuid_00000000000c4d10:
	movb $1, -384(%rbp)
uuid_00000000000c4d12:
	mov -400(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c4d15:
	mov -392(%RBP),%RSP
	add $-408, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d1f
	jmp uuid_00000000000c4d21
uuid_00000000000c4d1f:
	push %RBP
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d19
	jmp uuid_00000000000c4d1b
uuid_00000000000c4d19:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4d16
	jmp uuid_00000000000c4d18
uuid_00000000000c4d16:
	movb $1, -448(%rbp)
uuid_00000000000c4d18:
	mov -464(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c4d1b:
	mov -456(%RBP),%RSP
	add $-472, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d1c
	jmp uuid_00000000000c4d1e
uuid_00000000000c4d1c:
	movb $1, -336(%rbp)
uuid_00000000000c4d1e:
	mov -416(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c4d21:
	mov -352(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c4d24:
	mov -344(%RBP),%RSP
	add $-472, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d71
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d3d
	jmp uuid_00000000000c4d3f
uuid_00000000000c4d3d:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d2b
	jmp uuid_00000000000c4d2d
uuid_00000000000c4d2b:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4d28
	jmp uuid_00000000000c4d2a
uuid_00000000000c4d28:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4d25
	jmp uuid_00000000000c4d27
uuid_00000000000c4d25:
	movb $1, -592(%rbp)
uuid_00000000000c4d27:
	mov -640(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c4d2a:
	mov -608(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c4d2d:
	mov -600(%RBP),%RSP
	add $-664, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d3a
	jmp uuid_00000000000c4d3c
uuid_00000000000c4d3a:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d34
	jmp uuid_00000000000c4d36
uuid_00000000000c4d34:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4d31
	jmp uuid_00000000000c4d33
uuid_00000000000c4d31:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4d2e
	jmp uuid_00000000000c4d30
uuid_00000000000c4d2e:
	movb $1, -704(%rbp)
uuid_00000000000c4d30:
	mov -752(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c4d33:
	mov -720(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c4d36:
	mov -712(%RBP),%RSP
	add $-776, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d37
	jmp uuid_00000000000c4d39
uuid_00000000000c4d37:
	movb $1, -544(%rbp)
uuid_00000000000c4d39:
	mov -672(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c4d3c:
	mov -560(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c4d3f:
	mov -552(%RBP),%RSP
	add $-776, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d6e
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -840(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d5e
	jmp uuid_00000000000c4d60
uuid_00000000000c4d5e:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d4c
	jmp uuid_00000000000c4d4e
uuid_00000000000c4d4c:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4d49
	jmp uuid_00000000000c4d4b
uuid_00000000000c4d49:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4d46
	jmp uuid_00000000000c4d48
uuid_00000000000c4d46:
	movb $1, -896(%rbp)
uuid_00000000000c4d48:
	mov -960(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c4d4b:
	mov -912(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c4d4e:
	mov -904(%RBP),%RSP
	add $-968, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d5b
	jmp uuid_00000000000c4d5d
uuid_00000000000c4d5b:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq $0
	push %RBP
	mov -1000(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d55
	jmp uuid_00000000000c4d57
uuid_00000000000c4d55:
	push %RBP
	mov -992(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4d52
	jmp uuid_00000000000c4d54
uuid_00000000000c4d52:
	push %RBP
	mov -984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4d4f
	jmp uuid_00000000000c4d51
uuid_00000000000c4d4f:
	movb $1, -1008(%rbp)
uuid_00000000000c4d51:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c4d54:
	mov -1024(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c4d57:
	mov -1016(%RBP),%RSP
	add $-1080, %RSP
	mov -1008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d58
	jmp uuid_00000000000c4d5a
uuid_00000000000c4d58:
	movb $1, -848(%rbp)
uuid_00000000000c4d5a:
	mov -976(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c4d5d:
	mov -864(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c4d60:
	mov -856(%RBP),%RSP
	add $-1080, %RSP
	mov -848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d6b
	push %RBP
	jmp uuid_00000000000c4d68
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4d67
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4d6a
uuid_00000000000c4d68:
uuid_00000000000c4d6a:
	mov -1088(%RBP),%RSP
	add $-1088, %RSP
	jmp uuid_00000000000c4d6d
uuid_00000000000c4d6b:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -968(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4d64
	jmp uuid_00000000000c4d66
uuid_00000000000c4d64:
	push %RBP
#call function == : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4d61
	jmp uuid_00000000000c4d63
uuid_00000000000c4d61:
	movq $1, -64(%rbp)
uuid_00000000000c4d63:
	mov -1096(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c4d66:
	mov -1088(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c4d6d:
	mov -784(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000c4d70
uuid_00000000000c4d6e:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4d43
	jmp uuid_00000000000c4d45
uuid_00000000000c4d43:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4d40
	jmp uuid_00000000000c4d42
uuid_00000000000c4d40:
	movq $1, -64(%rbp)
uuid_00000000000c4d42:
	mov -792(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c4d45:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c4d70:
	mov -480(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000c4d73
uuid_00000000000c4d71:
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c4d73:
	mov -272(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000c4d76
uuid_00000000000c4d74:
	movq $1, -64(%rbp)
uuid_00000000000c4d76:
	mov -128(%RBP),%RSP
	add $-264, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
typeof_CL_ArrowTypeAST:
#call function .lookup : Arrow<Cons<Cons<HashtableIs<AST,Type>,AST>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTypeConsTypeConsASTHashtableIsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
ascript_CL_ArrowNilConsTypeAST:
#call function .bind : Arrow<Cons<Cons<HashtableIs<AST,Type>,AST>,Type>,HashtableIs<AST,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableIsTypeASTConsTypeConsASTHashtableIsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $104, %rsp
	ret
infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5076
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5073
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d7d
	jmp uuid_00000000000c4d7f
uuid_00000000000c4d7d:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4d7a
	jmp uuid_00000000000c4d7c
uuid_00000000000c4d7a:
	push %RBP
	mov -536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4d77
	jmp uuid_00000000000c4d79
uuid_00000000000c4d77:
	movb $1, -560(%rbp)
uuid_00000000000c4d79:
	mov -656(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c4d7c:
	mov -576(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c4d7f:
	mov -568(%RBP),%RSP
	add $-728, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5070
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -808(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d86
	jmp uuid_00000000000c4d88
uuid_00000000000c4d86:
	push %RBP
	jmp uuid_00000000000c4d83
	jmp uuid_00000000000c4d85
uuid_00000000000c4d83:
	push %RBP
	jmp uuid_00000000000c4d80
	jmp uuid_00000000000c4d82
uuid_00000000000c4d80:
	movb $1, -816(%rbp)
uuid_00000000000c4d82:
	mov -840(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c4d85:
	mov -832(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c4d88:
	mov -824(%RBP),%RSP
	add $-840, %RSP
	mov -816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c506d
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d8f
	jmp uuid_00000000000c4d91
uuid_00000000000c4d8f:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4d8c
	jmp uuid_00000000000c4d8e
uuid_00000000000c4d8c:
	push %RBP
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	jmp uuid_00000000000c4d89
	jmp uuid_00000000000c4d8b
uuid_00000000000c4d89:
	movb $1, -928(%rbp)
uuid_00000000000c4d8b:
	mov -1024(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c4d8e:
	mov -944(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c4d91:
	mov -936(%RBP),%RSP
	add $-1080, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c506a
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dc3
	jmp uuid_00000000000c4dc5
uuid_00000000000c4dc3:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4db0
	jmp uuid_00000000000c4db2
uuid_00000000000c4db0:
	push %RBP
	mov -1248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4d9e
	jmp uuid_00000000000c4da0
uuid_00000000000c4d9e:
	push %RBP
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	jmp uuid_00000000000c4d9b
	jmp uuid_00000000000c4d9d
uuid_00000000000c4d9b:
	movb $1, -1360(%rbp)
uuid_00000000000c4d9d:
	mov -1376(%RBP),%RSP
	add $-1400, %RSP
uuid_00000000000c4da0:
	mov -1368(%RBP),%RSP
	add $-1400, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dad
	jmp uuid_00000000000c4daf
uuid_00000000000c4dad:
	push %RBP
	mov -1240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4da7
	jmp uuid_00000000000c4da9
uuid_00000000000c4da7:
	push %RBP
	jmp uuid_00000000000c4da4
	jmp uuid_00000000000c4da6
uuid_00000000000c4da4:
	push %RBP
	jmp uuid_00000000000c4da1
	jmp uuid_00000000000c4da3
uuid_00000000000c4da1:
	movb $1, -1488(%rbp)
uuid_00000000000c4da3:
	mov -1512(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000c4da6:
	mov -1504(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000c4da9:
	mov -1496(%RBP),%RSP
	add $-1512, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4daa
	jmp uuid_00000000000c4dac
uuid_00000000000c4daa:
	movb $1, -1264(%rbp)
uuid_00000000000c4dac:
	mov -1408(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000c4daf:
	mov -1280(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000c4db2:
	mov -1272(%RBP),%RSP
	add $-1512, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dc0
	jmp uuid_00000000000c4dc2
uuid_00000000000c4dc0:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1592(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dba
	jmp uuid_00000000000c4dbc
uuid_00000000000c4dba:
	push %RBP
	jmp uuid_00000000000c4db7
	jmp uuid_00000000000c4db9
uuid_00000000000c4db7:
	push %RBP
	mov -1528(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1632(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4db4
	jmp uuid_00000000000c4db6
uuid_00000000000c4db4:
	movb $1, -1600(%rbp)
uuid_00000000000c4db6:
	mov -1624(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c4db9:
	mov -1616(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c4dbc:
	mov -1608(%RBP),%RSP
	add $-1632, %RSP
	mov -1600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dbd
	jmp uuid_00000000000c4dbf
uuid_00000000000c4dbd:
	movb $1, -1168(%rbp)
uuid_00000000000c4dbf:
	mov -1520(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c4dc2:
	mov -1184(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c4dc5:
	mov -1176(%RBP),%RSP
	add $-1632, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5067
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -1712(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e00
	jmp uuid_00000000000c4e02
uuid_00000000000c4e00:
	push %RBP
	mov -1704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1808(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dee
	jmp uuid_00000000000c4df0
uuid_00000000000c4dee:
	push %RBP
	mov -1800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1904(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4de5
	jmp uuid_00000000000c4de7
uuid_00000000000c4de5:
	push %RBP
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	jmp uuid_00000000000c4de2
	jmp uuid_00000000000c4de4
uuid_00000000000c4de2:
	movb $1, -1912(%rbp)
uuid_00000000000c4de4:
	mov -1928(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000c4de7:
	mov -1920(%RBP),%RSP
	add $-1952, %RSP
	mov -1912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4deb
	jmp uuid_00000000000c4ded
uuid_00000000000c4deb:
	push %RBP
	mov -1792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4de8
	jmp uuid_00000000000c4dea
uuid_00000000000c4de8:
	movb $1, -1816(%rbp)
uuid_00000000000c4dea:
	mov -1960(%RBP),%RSP
	add $-2032, %RSP
uuid_00000000000c4ded:
	mov -1832(%RBP),%RSP
	add $-2032, %RSP
uuid_00000000000c4df0:
	mov -1824(%RBP),%RSP
	add $-2032, %RSP
	mov -1816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dfd
	jmp uuid_00000000000c4dff
uuid_00000000000c4dfd:
	push %RBP
	mov -1696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2112(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4df7
	jmp uuid_00000000000c4df9
uuid_00000000000c4df7:
	push %RBP
	jmp uuid_00000000000c4df4
	jmp uuid_00000000000c4df6
uuid_00000000000c4df4:
	push %RBP
	mov -2048(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2152(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4df1
	jmp uuid_00000000000c4df3
uuid_00000000000c4df1:
	movb $1, -2120(%rbp)
uuid_00000000000c4df3:
	mov -2144(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000c4df6:
	mov -2136(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000c4df9:
	mov -2128(%RBP),%RSP
	add $-2152, %RSP
	mov -2120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dfa
	jmp uuid_00000000000c4dfc
uuid_00000000000c4dfa:
	movb $1, -1720(%rbp)
uuid_00000000000c4dfc:
	mov -2040(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000c4dff:
	mov -1736(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000c4e02:
	mov -1728(%RBP),%RSP
	add $-2152, %RSP
	mov -1720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5064
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -2232(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e2f
	jmp uuid_00000000000c4e31
uuid_00000000000c4e2f:
	push %RBP
	mov -2224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2328(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e1c
	jmp uuid_00000000000c4e1e
uuid_00000000000c4e1c:
	push %RBP
	jmp uuid_00000000000c4e19
	jmp uuid_00000000000c4e1b
uuid_00000000000c4e19:
	push %RBP
	mov -2264(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4e16
	jmp uuid_00000000000c4e18
uuid_00000000000c4e16:
	movb $1, -2336(%rbp)
uuid_00000000000c4e18:
	mov -2360(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000c4e1b:
	mov -2352(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000c4e1e:
	mov -2344(%RBP),%RSP
	add $-2368, %RSP
	mov -2336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e2c
	jmp uuid_00000000000c4e2e
uuid_00000000000c4e2c:
	push %RBP
	mov -2216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2448(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e26
	jmp uuid_00000000000c4e28
uuid_00000000000c4e26:
	push %RBP
	jmp uuid_00000000000c4e23
	jmp uuid_00000000000c4e25
uuid_00000000000c4e23:
	push %RBP
	mov -2384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2488(%rbp)
	pushq $uuid_00000000000c4e1f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e20
	jmp uuid_00000000000c4e22
uuid_00000000000c4e20:
	movb $1, -2456(%rbp)
uuid_00000000000c4e22:
	mov -2480(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000c4e25:
	mov -2472(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000c4e28:
	mov -2464(%RBP),%RSP
	add $-2488, %RSP
	mov -2456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e29
	jmp uuid_00000000000c4e2b
uuid_00000000000c4e29:
	movb $1, -2240(%rbp)
uuid_00000000000c4e2b:
	mov -2376(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000c4e2e:
	mov -2256(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000c4e31:
	mov -2248(%RBP),%RSP
	add $-2488, %RSP
	mov -2240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5061
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -2568(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e4c
	jmp uuid_00000000000c4e4e
uuid_00000000000c4e4c:
	push %RBP
	mov -2560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e39
	jmp uuid_00000000000c4e3b
uuid_00000000000c4e39:
	push %RBP
	jmp uuid_00000000000c4e36
	jmp uuid_00000000000c4e38
uuid_00000000000c4e36:
	push %RBP
	mov -2600(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4e33
	jmp uuid_00000000000c4e35
uuid_00000000000c4e33:
	movb $1, -2672(%rbp)
uuid_00000000000c4e35:
	mov -2696(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c4e38:
	mov -2688(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c4e3b:
	mov -2680(%RBP),%RSP
	add $-2704, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e49
	jmp uuid_00000000000c4e4b
uuid_00000000000c4e49:
	push %RBP
	mov -2552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2784(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e43
	jmp uuid_00000000000c4e45
uuid_00000000000c4e43:
	push %RBP
	jmp uuid_00000000000c4e40
	jmp uuid_00000000000c4e42
uuid_00000000000c4e40:
	push %RBP
	mov -2720(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2824(%rbp)
	pushq $uuid_00000000000c4e3c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e3d
	jmp uuid_00000000000c4e3f
uuid_00000000000c4e3d:
	movb $1, -2792(%rbp)
uuid_00000000000c4e3f:
	mov -2816(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000c4e42:
	mov -2808(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000c4e45:
	mov -2800(%RBP),%RSP
	add $-2824, %RSP
	mov -2792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e46
	jmp uuid_00000000000c4e48
uuid_00000000000c4e46:
	movb $1, -2576(%rbp)
uuid_00000000000c4e48:
	mov -2712(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000c4e4b:
	mov -2592(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000c4e4e:
	mov -2584(%RBP),%RSP
	add $-2824, %RSP
	mov -2576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c505e
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -2904(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e71
	jmp uuid_00000000000c4e73
uuid_00000000000c4e71:
	push %RBP
	mov -2896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4e6e
	jmp uuid_00000000000c4e70
uuid_00000000000c4e6e:
	push %RBP
	mov -2888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3080(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e68
	jmp uuid_00000000000c4e6a
uuid_00000000000c4e68:
	push %RBP
	mov -3072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4e65
	jmp uuid_00000000000c4e67
uuid_00000000000c4e65:
	push %RBP
	mov -3064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e5f
	jmp uuid_00000000000c4e61
uuid_00000000000c4e5f:
	push %RBP
	mov -3248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4e5c
	jmp uuid_00000000000c4e5e
uuid_00000000000c4e5c:
	push %RBP
	mov -3240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3432(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e56
	jmp uuid_00000000000c4e58
uuid_00000000000c4e56:
	push %RBP
	jmp uuid_00000000000c4e53
	jmp uuid_00000000000c4e55
uuid_00000000000c4e53:
	push %RBP
	mov -3368(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3472(%rbp)
	pushq $uuid_00000000000c4e4f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e50
	jmp uuid_00000000000c4e52
uuid_00000000000c4e50:
	movb $1, -3440(%rbp)
uuid_00000000000c4e52:
	mov -3464(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c4e55:
	mov -3456(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c4e58:
	mov -3448(%RBP),%RSP
	add $-3472, %RSP
	mov -3440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e59
	jmp uuid_00000000000c4e5b
uuid_00000000000c4e59:
	movb $1, -3264(%rbp)
uuid_00000000000c4e5b:
	mov -3360(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c4e5e:
	mov -3280(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c4e61:
	mov -3272(%RBP),%RSP
	add $-3472, %RSP
	mov -3264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e62
	jmp uuid_00000000000c4e64
uuid_00000000000c4e62:
	movb $1, -3088(%rbp)
uuid_00000000000c4e64:
	mov -3184(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c4e67:
	mov -3104(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c4e6a:
	mov -3096(%RBP),%RSP
	add $-3472, %RSP
	mov -3088(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e6b
	jmp uuid_00000000000c4e6d
uuid_00000000000c4e6b:
	movb $1, -2912(%rbp)
uuid_00000000000c4e6d:
	mov -3008(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c4e70:
	mov -2928(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000c4e73:
	mov -2920(%RBP),%RSP
	add $-3472, %RSP
	mov -2912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c505b
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -3552(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e95
	jmp uuid_00000000000c4e97
uuid_00000000000c4e95:
	push %RBP
	mov -3544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3648(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e83
	jmp uuid_00000000000c4e85
uuid_00000000000c4e83:
	push %RBP
	mov -3640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3744(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e7a
	jmp uuid_00000000000c4e7c
uuid_00000000000c4e7a:
	push %RBP
	pushq -3720(%RBP)
	pushq -3728(%RBP)
	pushq -3736(%RBP)
	jmp uuid_00000000000c4e77
	jmp uuid_00000000000c4e79
uuid_00000000000c4e77:
	movb $1, -3752(%rbp)
uuid_00000000000c4e79:
	mov -3768(%RBP),%RSP
	add $-3792, %RSP
uuid_00000000000c4e7c:
	mov -3760(%RBP),%RSP
	add $-3792, %RSP
	mov -3752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e80
	jmp uuid_00000000000c4e82
uuid_00000000000c4e80:
	push %RBP
	mov -3632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4e7d
	jmp uuid_00000000000c4e7f
uuid_00000000000c4e7d:
	movb $1, -3656(%rbp)
uuid_00000000000c4e7f:
	mov -3800(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c4e82:
	mov -3672(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c4e85:
	mov -3664(%RBP),%RSP
	add $-3872, %RSP
	mov -3656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e92
	jmp uuid_00000000000c4e94
uuid_00000000000c4e92:
	push %RBP
	mov -3536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3952(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e8c
	jmp uuid_00000000000c4e8e
uuid_00000000000c4e8c:
	push %RBP
	jmp uuid_00000000000c4e89
	jmp uuid_00000000000c4e8b
uuid_00000000000c4e89:
	push %RBP
	mov -3888(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3992(%rbp)
	pushq $uuid_00000000000c4bba
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e86
	jmp uuid_00000000000c4e88
uuid_00000000000c4e86:
	movb $1, -3960(%rbp)
uuid_00000000000c4e88:
	mov -3984(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000c4e8b:
	mov -3976(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000c4e8e:
	mov -3968(%RBP),%RSP
	add $-3992, %RSP
	mov -3960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e8f
	jmp uuid_00000000000c4e91
uuid_00000000000c4e8f:
	movb $1, -3560(%rbp)
uuid_00000000000c4e91:
	mov -3880(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000c4e94:
	mov -3576(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000c4e97:
	mov -3568(%RBP),%RSP
	add $-3992, %RSP
	mov -3560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5058
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4072(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ed7
	jmp uuid_00000000000c4ed9
uuid_00000000000c4ed7:
	push %RBP
	mov -4064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4168(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ec4
	jmp uuid_00000000000c4ec6
uuid_00000000000c4ec4:
	push %RBP
	jmp uuid_00000000000c4ec1
	jmp uuid_00000000000c4ec3
uuid_00000000000c4ec1:
	movb $1, -4176(%rbp)
uuid_00000000000c4ec3:
	mov -4192(%RBP),%RSP
	add $-4192, %RSP
uuid_00000000000c4ec6:
	mov -4184(%RBP),%RSP
	add $-4192, %RSP
	mov -4176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ed4
	jmp uuid_00000000000c4ed6
uuid_00000000000c4ed4:
	push %RBP
	mov -4056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4272(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ece
	jmp uuid_00000000000c4ed0
uuid_00000000000c4ece:
	push %RBP
	jmp uuid_00000000000c4ecb
	jmp uuid_00000000000c4ecd
uuid_00000000000c4ecb:
	push %RBP
	mov -4208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4312(%rbp)
	pushq $uuid_00000000000c4ec7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ec8
	jmp uuid_00000000000c4eca
uuid_00000000000c4ec8:
	movb $1, -4280(%rbp)
uuid_00000000000c4eca:
	mov -4304(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000c4ecd:
	mov -4296(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000c4ed0:
	mov -4288(%RBP),%RSP
	add $-4312, %RSP
	mov -4280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ed1
	jmp uuid_00000000000c4ed3
uuid_00000000000c4ed1:
	movb $1, -4080(%rbp)
uuid_00000000000c4ed3:
	mov -4200(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000c4ed6:
	mov -4096(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000c4ed9:
	mov -4088(%RBP),%RSP
	add $-4312, %RSP
	mov -4080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5055
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ef7
	jmp uuid_00000000000c4ef9
uuid_00000000000c4ef7:
	push %RBP
	mov -4384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4ef4
	jmp uuid_00000000000c4ef6
uuid_00000000000c4ef4:
	push %RBP
	mov -4376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4568(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4eee
	jmp uuid_00000000000c4ef0
uuid_00000000000c4eee:
	push %RBP
	jmp uuid_00000000000c4eeb
	jmp uuid_00000000000c4eed
uuid_00000000000c4eeb:
	push %RBP
	mov -4504(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4608(%rbp)
	pushq $uuid_00000000000c4ee7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ee8
	jmp uuid_00000000000c4eea
uuid_00000000000c4ee8:
	movb $1, -4576(%rbp)
uuid_00000000000c4eea:
	mov -4600(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000c4eed:
	mov -4592(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000c4ef0:
	mov -4584(%RBP),%RSP
	add $-4608, %RSP
	mov -4576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ef1
	jmp uuid_00000000000c4ef3
uuid_00000000000c4ef1:
	movb $1, -4400(%rbp)
uuid_00000000000c4ef3:
	mov -4496(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000c4ef6:
	mov -4416(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000c4ef9:
	mov -4408(%RBP),%RSP
	add $-4608, %RSP
	mov -4400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5052
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4688(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f0a
	jmp uuid_00000000000c4f0c
uuid_00000000000c4f0a:
	push %RBP
	mov -4680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4f07
	jmp uuid_00000000000c4f09
uuid_00000000000c4f07:
	push %RBP
	mov -4672(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4864(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f01
	jmp uuid_00000000000c4f03
uuid_00000000000c4f01:
	push %RBP
	jmp uuid_00000000000c4efe
	jmp uuid_00000000000c4f00
uuid_00000000000c4efe:
	push %RBP
	mov -4800(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4904(%rbp)
	pushq $uuid_00000000000c4efa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4efb
	jmp uuid_00000000000c4efd
uuid_00000000000c4efb:
	movb $1, -4872(%rbp)
uuid_00000000000c4efd:
	mov -4896(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000c4f00:
	mov -4888(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000c4f03:
	mov -4880(%RBP),%RSP
	add $-4904, %RSP
	mov -4872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f04
	jmp uuid_00000000000c4f06
uuid_00000000000c4f04:
	movb $1, -4696(%rbp)
uuid_00000000000c4f06:
	mov -4792(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000c4f09:
	mov -4712(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000c4f0c:
	mov -4704(%RBP),%RSP
	add $-4904, %RSP
	mov -4696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c504f
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4984(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f6a
	jmp uuid_00000000000c4f6c
uuid_00000000000c4f6a:
	push %RBP
	mov -4976(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4f67
	jmp uuid_00000000000c4f69
uuid_00000000000c4f67:
	push %RBP
	mov -4968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5160(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f61
	jmp uuid_00000000000c4f63
uuid_00000000000c4f61:
	push %RBP
	pushq -5136(%RBP)
	pushq -5144(%RBP)
	pushq -5152(%RBP)
	jmp uuid_00000000000c4f5e
	jmp uuid_00000000000c4f60
uuid_00000000000c4f5e:
	push %RBP
	mov -5128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -5288(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f5b
	jmp uuid_00000000000c4f5d
uuid_00000000000c4f5b:
	push %RBP
	mov -5120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f55
	jmp uuid_00000000000c4f57
uuid_00000000000c4f55:
	push %RBP
	jmp uuid_00000000000c4f52
	jmp uuid_00000000000c4f54
uuid_00000000000c4f52:
	push %RBP
	mov -5304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4f4f
	jmp uuid_00000000000c4f51
uuid_00000000000c4f4f:
	movb $1, -5376(%rbp)
uuid_00000000000c4f51:
	mov -5400(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c4f54:
	mov -5392(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c4f57:
	mov -5384(%RBP),%RSP
	add $-5408, %RSP
	mov -5376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f58
	jmp uuid_00000000000c4f5a
uuid_00000000000c4f58:
	movb $1, -5168(%rbp)
uuid_00000000000c4f5a:
	mov -5296(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c4f5d:
	mov -5216(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c4f60:
	mov -5184(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c4f63:
	mov -5176(%RBP),%RSP
	add $-5408, %RSP
	mov -5168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f64
	jmp uuid_00000000000c4f66
uuid_00000000000c4f64:
	movb $1, -4992(%rbp)
uuid_00000000000c4f66:
	mov -5088(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c4f69:
	mov -5008(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c4f6c:
	mov -5000(%RBP),%RSP
	add $-5408, %RSP
	mov -4992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c504c
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -5488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f98
	jmp uuid_00000000000c4f9a
uuid_00000000000c4f98:
	push %RBP
	mov -5480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4f95
	jmp uuid_00000000000c4f97
uuid_00000000000c4f95:
	push %RBP
	mov -5472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4f92
	jmp uuid_00000000000c4f94
uuid_00000000000c4f92:
	movb $1, -5496(%rbp)
uuid_00000000000c4f94:
	mov -5592(%RBP),%RSP
	add $-5664, %RSP
uuid_00000000000c4f97:
	mov -5512(%RBP),%RSP
	add $-5664, %RSP
uuid_00000000000c4f9a:
	mov -5504(%RBP),%RSP
	add $-5664, %RSP
	mov -5496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5049
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -5744(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fe4
	jmp uuid_00000000000c4fe6
uuid_00000000000c4fe4:
	push %RBP
	pushq -5720(%RBP)
	pushq -5728(%RBP)
	pushq -5736(%RBP)
	jmp uuid_00000000000c4fe1
	jmp uuid_00000000000c4fe3
uuid_00000000000c4fe1:
	push %RBP
	mov -5712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4fde
	jmp uuid_00000000000c4fe0
uuid_00000000000c4fde:
	push %RBP
	mov -5704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4fdb
	jmp uuid_00000000000c4fdd
uuid_00000000000c4fdb:
	movb $1, -5752(%rbp)
uuid_00000000000c4fdd:
	mov -5880(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c4fe0:
	mov -5800(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c4fe3:
	mov -5768(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c4fe6:
	mov -5760(%RBP),%RSP
	add $-5952, %RSP
	mov -5752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5046
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -6032(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c501a
	jmp uuid_00000000000c501c
uuid_00000000000c501a:
	push %RBP
	pushq -5976(%RBP)
	pushq -5984(%RBP)
	pushq -5992(%RBP)
	pushq -6000(%RBP)
	pushq -6008(%RBP)
	pushq -6016(%RBP)
	pushq -6024(%RBP)
	jmp uuid_00000000000c5017
	jmp uuid_00000000000c5019
uuid_00000000000c5017:
	push %RBP
	mov -5968(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5014
	jmp uuid_00000000000c5016
uuid_00000000000c5014:
	movb $1, -6040(%rbp)
uuid_00000000000c5016:
	mov -6120(%RBP),%RSP
	add $-6128, %RSP
uuid_00000000000c5019:
	mov -6056(%RBP),%RSP
	add $-6128, %RSP
uuid_00000000000c501c:
	mov -6048(%RBP),%RSP
	add $-6128, %RSP
	mov -6040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5043
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -6208(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5023
	jmp uuid_00000000000c5025
uuid_00000000000c5023:
	push %RBP
	jmp uuid_00000000000c5020
	jmp uuid_00000000000c5022
uuid_00000000000c5020:
	push %RBP
	mov -6144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c501d
	jmp uuid_00000000000c501f
uuid_00000000000c501d:
	movb $1, -6216(%rbp)
uuid_00000000000c501f:
	mov -6240(%RBP),%RSP
	add $-6248, %RSP
uuid_00000000000c5022:
	mov -6232(%RBP),%RSP
	add $-6248, %RSP
uuid_00000000000c5025:
	mov -6224(%RBP),%RSP
	add $-6248, %RSP
	mov -6216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5040
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -6328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5035
	jmp uuid_00000000000c5037
uuid_00000000000c5035:
	push %RBP
	jmp uuid_00000000000c5032
	jmp uuid_00000000000c5034
uuid_00000000000c5032:
	movb $1, -6336(%rbp)
uuid_00000000000c5034:
	mov -6352(%RBP),%RSP
	add $-6352, %RSP
uuid_00000000000c5037:
	mov -6344(%RBP),%RSP
	add $-6352, %RSP
	mov -6336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c503d
	push %RBP
	jmp uuid_00000000000c503a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5039
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c503c
uuid_00000000000c503a:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5038
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c503c:
	mov -6360(%RBP),%RSP
	add $-6360, %RSP
	jmp uuid_00000000000c503f
uuid_00000000000c503d:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c503f:
	mov -6256(%RBP),%RSP
	add $-6352, %RSP
	jmp uuid_00000000000c5042
uuid_00000000000c5040:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c502f
#call function typeof-tag : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6248(%rbp)
	mov %RBX, %RBP
	call typeof_SB_tag_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c502c
	jmp uuid_00000000000c502e
uuid_00000000000c502c:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5026
	jmp uuid_00000000000c5028
uuid_00000000000c5026:
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6280(%RBP)
	popq -6272(%RBP)
	popq -6264(%RBP)
uuid_00000000000c5028:
	mov -6296(%RBP),%RSP
	add $-6296, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5029
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fd0
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c4fd0
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -6312(%rbp)
	pushq -6320(%rbp)
	pushq -6328(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	jmp uuid_00000000000c502b
uuid_00000000000c5029:
uuid_00000000000c502b:
	mov -6304(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c502e:
	mov -6288(%RBP),%RSP
	add $-6304, %RSP
	jmp uuid_00000000000c5031
uuid_00000000000c502f:
uuid_00000000000c5031:
	mov -6256(%RBP),%RSP
	add $-6256, %RSP
uuid_00000000000c5042:
	mov -6136(%RBP),%RSP
	add $-6256, %RSP
	jmp uuid_00000000000c5045
uuid_00000000000c5043:
#call function typeof-var : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -6128(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function typeof-var : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -6128(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c5045:
	mov -5960(%RBP),%RSP
	add $-6152, %RSP
	jmp uuid_00000000000c5048
uuid_00000000000c5046:
#call function infer-ctx : Arrow<Cons<TContext,AST>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5888(%rbp)
	pushq -5896(%rbp)
	pushq -5904(%rbp)
	pushq -5912(%rbp)
	pushq -5920(%rbp)
	pushq -5928(%rbp)
	pushq -5936(%rbp)
	pushq -5944(%rbp)
	pushq -5952(%rbp)
	mov %RBX, %RBP
	call infer_SB_ctx_CL_ArrowTContextConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c500c
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	jmp uuid_00000000000c500e
uuid_00000000000c500c:
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	push %RBP
	pushq -5968(%rbp)
	pushq -5976(%rbp)
	pushq -5984(%rbp)
	pushq -5992(%rbp)
	pushq -6000(%rbp)
	pushq -6008(%rbp)
	pushq -6016(%rbp)
	pushq -6024(%rbp)
	pushq -6032(%rbp)
	pushq $0
	push %RBP
	mov -6112(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5005
	jmp uuid_00000000000c5007
uuid_00000000000c5005:
	push %RBP
	mov -6104(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6208(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ff3
	jmp uuid_00000000000c4ff5
uuid_00000000000c4ff3:
	push %RBP
	mov -6200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6304(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fea
	jmp uuid_00000000000c4fec
uuid_00000000000c4fea:
	push %RBP
	pushq -6280(%RBP)
	pushq -6288(%RBP)
	pushq -6296(%RBP)
	jmp uuid_00000000000c4fe7
	jmp uuid_00000000000c4fe9
uuid_00000000000c4fe7:
	movb $1, -6312(%rbp)
uuid_00000000000c4fe9:
	mov -6328(%RBP),%RSP
	add $-6352, %RSP
uuid_00000000000c4fec:
	mov -6320(%RBP),%RSP
	add $-6352, %RSP
	mov -6312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ff0
	jmp uuid_00000000000c4ff2
uuid_00000000000c4ff0:
	push %RBP
	mov -6192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4fed
	jmp uuid_00000000000c4fef
uuid_00000000000c4fed:
	movb $1, -6216(%rbp)
uuid_00000000000c4fef:
	mov -6360(%RBP),%RSP
	add $-6432, %RSP
uuid_00000000000c4ff2:
	mov -6232(%RBP),%RSP
	add $-6432, %RSP
uuid_00000000000c4ff5:
	mov -6224(%RBP),%RSP
	add $-6432, %RSP
	mov -6216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5002
	jmp uuid_00000000000c5004
uuid_00000000000c5002:
	push %RBP
	mov -6096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6512(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ffc
	jmp uuid_00000000000c4ffe
uuid_00000000000c4ffc:
	push %RBP
	jmp uuid_00000000000c4ff9
	jmp uuid_00000000000c4ffb
uuid_00000000000c4ff9:
	push %RBP
	mov -6448(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6552(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ff6
	jmp uuid_00000000000c4ff8
uuid_00000000000c4ff6:
	movb $1, -6520(%rbp)
uuid_00000000000c4ff8:
	mov -6544(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000c4ffb:
	mov -6536(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000c4ffe:
	mov -6528(%RBP),%RSP
	add $-6552, %RSP
	mov -6520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fff
	jmp uuid_00000000000c5001
uuid_00000000000c4fff:
	movb $1, -6120(%rbp)
uuid_00000000000c5001:
	mov -6440(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000c5004:
	mov -6136(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000c5007:
	mov -6128(%RBP),%RSP
	add $-6552, %RSP
	mov -6120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5009
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5008
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c500b
uuid_00000000000c5009:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -6368(%rbp)
	pushq -6376(%rbp)
	pushq -6384(%rbp)
	pushq -6392(%rbp)
	pushq -6400(%rbp)
	pushq -6408(%rbp)
	pushq -6416(%rbp)
	pushq -6424(%rbp)
	pushq -6432(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	pushq -6336(%rbp)
	pushq -6344(%rbp)
	pushq -6352(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c500b:
	mov -6040(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000c500e:
	mov -5960(%RBP),%RSP
	add $-6552, %RSP
#call function typeof-lhs : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5888(%rbp)
	pushq -5896(%rbp)
	pushq -5904(%rbp)
	pushq -5912(%rbp)
	pushq -5920(%rbp)
	pushq -5928(%rbp)
	pushq -5936(%rbp)
	pushq -5944(%rbp)
	pushq -5952(%rbp)
	mov %RBX, %RBP
	call typeof_SB_lhs_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function enrich : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c500f
	pushq -6560(%rbp)
	pushq -6568(%rbp)
	pushq -6576(%rbp)
	pushq -6584(%rbp)
	pushq -6592(%rbp)
	pushq -6600(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	mov %RBX, %RBP
	call enrich_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5011
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5010
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c5010
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -6584(%rbp)
	pushq -6592(%rbp)
	pushq -6600(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	jmp uuid_00000000000c5013
uuid_00000000000c5011:
uuid_00000000000c5013:
	mov -6608(%RBP),%RSP
	add $-6608, %RSP
uuid_00000000000c5048:
	mov -5672(%RBP),%RSP
	add $-6608, %RSP
	mov %RSP, %R14
	add $72, %rsp
	add $8, %rsp
	add $24, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c504b
uuid_00000000000c5049:
	pushq $3
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4f9b
	jmp uuid_00000000000c4f9d
uuid_00000000000c4f9b:
	pushq $0
	popq -5672(%RBP)
uuid_00000000000c4f9d:
	mov -5680(%RBP),%RSP
	add $-5680, %RSP
	pushq $4
	pushq $0
	pushq $0
	pushq $3
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	push %RBP
	pushq -5720(%rbp)
	pushq -5728(%rbp)
	pushq -5736(%rbp)
	pushq -5744(%rbp)
	pushq -5752(%rbp)
	pushq -5760(%rbp)
	pushq -5768(%rbp)
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq $0
	push %RBP
	mov -5864(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fa4
	jmp uuid_00000000000c4fa6
uuid_00000000000c4fa4:
	push %RBP
	jmp uuid_00000000000c4fa1
	jmp uuid_00000000000c4fa3
uuid_00000000000c4fa1:
	push %RBP
	mov -5800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4f9e
	jmp uuid_00000000000c4fa0
uuid_00000000000c4f9e:
	movb $1, -5872(%rbp)
uuid_00000000000c4fa0:
	mov -5896(%RBP),%RSP
	add $-5904, %RSP
uuid_00000000000c4fa3:
	mov -5888(%RBP),%RSP
	add $-5904, %RSP
uuid_00000000000c4fa6:
	mov -5880(%RBP),%RSP
	add $-5904, %RSP
	mov -5872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fb7
	push %RBP
	jmp uuid_00000000000c4fb4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4fb3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4fb6
uuid_00000000000c4fb4:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4fad
	jmp uuid_00000000000c4faf
uuid_00000000000c4fad:
	pushq $3
	popq -5688(%RBP)
uuid_00000000000c4faf:
	mov -5920(%RBP),%RSP
	add $-5920, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5672(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4fb0
	jmp uuid_00000000000c4fb2
uuid_00000000000c4fb0:
	pushq $0
	popq -5688(%RBP)
uuid_00000000000c4fb2:
	mov -5928(%RBP),%RSP
	add $-5928, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5688(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function apply-or-cons-and-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call apply_SB_or_SB_cons_SB_and_SB_specialize_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	pushq -5960(%RBP)
	pushq -5968(%RBP)
	pushq -5976(%RBP)
	popq -5712(%RBP)
	popq -5704(%RBP)
	popq -5696(%RBP)
uuid_00000000000c4fb6:
	mov -5912(%RBP),%RSP
	add $-5984, %RSP
	jmp uuid_00000000000c4fb9
uuid_00000000000c4fb7:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4fa7
	jmp uuid_00000000000c4fa9
uuid_00000000000c4fa7:
	pushq $3
	popq -5688(%RBP)
uuid_00000000000c4fa9:
	mov -5912(%RBP),%RSP
	add $-5912, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5672(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4faa
	jmp uuid_00000000000c4fac
uuid_00000000000c4faa:
	pushq $0
	popq -5688(%RBP)
uuid_00000000000c4fac:
	mov -5920(%RBP),%RSP
	add $-5920, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5688(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function apply-or-cons-and-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call apply_SB_or_SB_cons_SB_and_SB_specialize_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	pushq -5928(%RBP)
	pushq -5936(%RBP)
	pushq -5944(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq -5984(%rbp)
	pushq -5992(%rbp)
	pushq -6000(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -5952(%RBP)
	pushq -5960(%RBP)
	pushq -5968(%RBP)
	popq -5712(%RBP)
	popq -5704(%RBP)
	popq -5696(%RBP)
uuid_00000000000c4fb9:
	mov -5792(%RBP),%RSP
	add $-6000, %RSP
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5672(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4fba
	jmp uuid_00000000000c4fbc
uuid_00000000000c4fba:
#call function implicit-tail : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	mov %RBX, %RBP
	call implicit_SB_tail_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -5712(%RBP)
	popq -5704(%RBP)
	popq -5696(%RBP)
uuid_00000000000c4fbc:
	mov -6008(%RBP),%RSP
	add $-6008, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $uuid_00000000000c4fbd
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4fc0
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c4fc2
uuid_00000000000c4fc0:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fbe
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c4fbe
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fbd
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p1 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call p1_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $uuid_00000000000c4ae9
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $uuid_00000000000c4fbf
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000c4fc2:
	mov -6016(%RBP),%RSP
	add $-6016, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6024(%rbp)
	pushq -6032(%rbp)
	pushq -6040(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4fd8
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c4fda
uuid_00000000000c4fd8:
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	push %RBP
	pushq -6056(%rbp)
	pushq -6064(%rbp)
	pushq -6072(%rbp)
	pushq -6080(%rbp)
	pushq -6088(%rbp)
	pushq -6096(%rbp)
	pushq -6104(%rbp)
	pushq -6112(%rbp)
	pushq -6120(%rbp)
	pushq $0
	push %RBP
	mov -6200(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fc9
	jmp uuid_00000000000c4fcb
uuid_00000000000c4fc9:
	push %RBP
	jmp uuid_00000000000c4fc6
	jmp uuid_00000000000c4fc8
uuid_00000000000c4fc6:
	push %RBP
	mov -6136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4fc3
	jmp uuid_00000000000c4fc5
uuid_00000000000c4fc3:
	movb $1, -6208(%rbp)
uuid_00000000000c4fc5:
	mov -6232(%RBP),%RSP
	add $-6240, %RSP
uuid_00000000000c4fc8:
	mov -6224(%RBP),%RSP
	add $-6240, %RSP
uuid_00000000000c4fcb:
	mov -6216(%RBP),%RSP
	add $-6240, %RSP
	mov -6208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4fd5
	push %RBP
	jmp uuid_00000000000c4fd2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4fd1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4fd4
uuid_00000000000c4fd2:
uuid_00000000000c4fd4:
	mov -6248(%RBP),%RSP
	add $-6248, %RSP
	mov %RSP, %R14
	add $8, %RSP
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c4fd7
uuid_00000000000c4fd5:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fcc
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fcd
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6240(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6280(%RBP)
	popq -6272(%RBP)
	popq -6264(%RBP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fce
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6256(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6280(%RBP)
	popq -6272(%RBP)
	popq -6264(%RBP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fcf
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6248(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6280(%RBP)
	popq -6272(%RBP)
	popq -6264(%RBP)
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fd0
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c4fd0
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000c4fd7:
	mov -6128(%RBP),%RSP
	add $-6280, %RSP
uuid_00000000000c4fda:
	mov -6048(%RBP),%RSP
	add $-6280, %RSP
uuid_00000000000c504b:
	mov -5416(%RBP),%RSP
	add $-6280, %RSP
	mov %RSP, %R14
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %rsp
	add $24, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $56, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c504e
uuid_00000000000c504c:
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5408(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4f71
	jmp uuid_00000000000c4f73
uuid_00000000000c4f71:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f6e
	jmp uuid_00000000000c4f70
uuid_00000000000c4f6e:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4f6d
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4f70:
	mov -5448(%RBP),%RSP
	add $-5448, %RSP
uuid_00000000000c4f73:
	mov -5440(%RBP),%RSP
	add $-5448, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4f75
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4f74
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4f77
uuid_00000000000c4f75:
uuid_00000000000c4f77:
	mov -5480(%RBP),%RSP
	add $-5480, %RSP
#call function maybe-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call maybe_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -5472(%RBP)
	popq -5464(%RBP)
	popq -5456(%RBP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq $0
	push %RBP
	mov -5632(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f8a
	jmp uuid_00000000000c4f8c
uuid_00000000000c4f8a:
	push %RBP
	jmp uuid_00000000000c4f87
	jmp uuid_00000000000c4f89
uuid_00000000000c4f87:
	push %RBP
	mov -5616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5736(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f81
	jmp uuid_00000000000c4f83
uuid_00000000000c4f81:
	push %RBP
	jmp uuid_00000000000c4f7e
	jmp uuid_00000000000c4f80
uuid_00000000000c4f7e:
	push %RBP
	jmp uuid_00000000000c4f7b
	jmp uuid_00000000000c4f7d
uuid_00000000000c4f7b:
	push %RBP
	mov -5696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4f78
	jmp uuid_00000000000c4f7a
uuid_00000000000c4f78:
	movb $1, -5744(%rbp)
uuid_00000000000c4f7a:
	mov -5776(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000c4f7d:
	mov -5768(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000c4f80:
	mov -5760(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000c4f83:
	mov -5752(%RBP),%RSP
	add $-5848, %RSP
	mov -5744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f84
	jmp uuid_00000000000c4f86
uuid_00000000000c4f84:
	movb $1, -5640(%rbp)
uuid_00000000000c4f86:
	mov -5664(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000c4f89:
	mov -5656(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000c4f8c:
	mov -5648(%RBP),%RSP
	add $-5848, %RSP
	mov -5640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f8e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4f8d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4f90
uuid_00000000000c4f8e:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	pushq -5800(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4f90:
	mov -5560(%RBP),%RSP
	add $-5848, %RSP
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -5408(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4f91
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c4f91
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000c504e:
	mov -4912(%RBP),%RSP
	add $-5848, %RSP
	jmp uuid_00000000000c5051
uuid_00000000000c504f:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq $uuid_00000000000c4ae9
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq $0
	push %RBP
	mov -4984(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f25
	jmp uuid_00000000000c4f27
uuid_00000000000c4f25:
	push %RBP
	mov -4976(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f1c
	jmp uuid_00000000000c4f1e
uuid_00000000000c4f1c:
	push %RBP
	mov -5040(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f13
	jmp uuid_00000000000c4f15
uuid_00000000000c4f13:
	push %RBP
	mov -5104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -5176(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f10
	jmp uuid_00000000000c4f12
uuid_00000000000c4f10:
	push %RBP
	pushq -5080(%RBP)
	pushq -5088(%RBP)
	pushq -5096(%RBP)
	mov -5208(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f0d
	jmp uuid_00000000000c4f0f
uuid_00000000000c4f0d:
	movb $1, -5120(%rbp)
uuid_00000000000c4f0f:
	mov -5184(%RBP),%RSP
	add $-5208, %RSP
uuid_00000000000c4f12:
	mov -5136(%RBP),%RSP
	add $-5208, %RSP
uuid_00000000000c4f15:
	mov -5128(%RBP),%RSP
	add $-5208, %RSP
	mov -5120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f19
	jmp uuid_00000000000c4f1b
uuid_00000000000c4f19:
	push %RBP
	jmp uuid_00000000000c4f16
	jmp uuid_00000000000c4f18
uuid_00000000000c4f16:
	movb $1, -5056(%rbp)
uuid_00000000000c4f18:
	mov -5216(%RBP),%RSP
	add $-5216, %RSP
uuid_00000000000c4f1b:
	mov -5072(%RBP),%RSP
	add $-5216, %RSP
uuid_00000000000c4f1e:
	mov -5064(%RBP),%RSP
	add $-5216, %RSP
	mov -5056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f22
	jmp uuid_00000000000c4f24
uuid_00000000000c4f22:
	push %RBP
	mov -4968(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5232(%rbp)
	pushq $uuid_00000000000c4ae9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4f1f
	jmp uuid_00000000000c4f21
uuid_00000000000c4f1f:
	movb $1, -4992(%rbp)
uuid_00000000000c4f21:
	mov -5224(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000c4f24:
	mov -5008(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000c4f27:
	mov -5000(%RBP),%RSP
	add $-5232, %RSP
	mov -4992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f4c
	push %RBP
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq $0
	push %RBP
	mov -5264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f40
	jmp uuid_00000000000c4f42
uuid_00000000000c4f40:
	push %RBP
	mov -5256(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f37
	jmp uuid_00000000000c4f39
uuid_00000000000c4f37:
	push %RBP
	mov -5320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f2e
	jmp uuid_00000000000c4f30
uuid_00000000000c4f2e:
	push %RBP
	mov -5384(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -5456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f2b
	jmp uuid_00000000000c4f2d
uuid_00000000000c4f2b:
	push %RBP
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	jmp uuid_00000000000c4f28
	jmp uuid_00000000000c4f2a
uuid_00000000000c4f28:
	movb $1, -5400(%rbp)
uuid_00000000000c4f2a:
	mov -5464(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c4f2d:
	mov -5416(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c4f30:
	mov -5408(%RBP),%RSP
	add $-5488, %RSP
	mov -5400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f34
	jmp uuid_00000000000c4f36
uuid_00000000000c4f34:
	push %RBP
	pushq -5296(%RBP)
	pushq -5304(%RBP)
	pushq -5312(%RBP)
	mov -5520(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f31
	jmp uuid_00000000000c4f33
uuid_00000000000c4f31:
	movb $1, -5336(%rbp)
uuid_00000000000c4f33:
	mov -5496(%RBP),%RSP
	add $-5520, %RSP
uuid_00000000000c4f36:
	mov -5352(%RBP),%RSP
	add $-5520, %RSP
uuid_00000000000c4f39:
	mov -5344(%RBP),%RSP
	add $-5520, %RSP
	mov -5336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f3d
	jmp uuid_00000000000c4f3f
uuid_00000000000c4f3d:
	push %RBP
	mov -5248(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5536(%rbp)
	pushq $uuid_00000000000c4ae9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4f3a
	jmp uuid_00000000000c4f3c
uuid_00000000000c4f3a:
	movb $1, -5272(%rbp)
uuid_00000000000c4f3c:
	mov -5528(%RBP),%RSP
	add $-5536, %RSP
uuid_00000000000c4f3f:
	mov -5288(%RBP),%RSP
	add $-5536, %RSP
uuid_00000000000c4f42:
	mov -5280(%RBP),%RSP
	add $-5536, %RSP
	mov -5272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4f49
	push %RBP
	jmp uuid_00000000000c4f46
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4f45
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4f48
uuid_00000000000c4f46:
uuid_00000000000c4f48:
	mov -5544(%RBP),%RSP
	add $-5544, %RSP
	jmp uuid_00000000000c4f4b
uuid_00000000000c4f49:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4f43
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c4f43
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4f44
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -4928(%RBP)
	popq -4920(%RBP)
	popq -4912(%RBP)
uuid_00000000000c4f4b:
	mov -5240(%RBP),%RSP
	add $-5536, %RSP
	jmp uuid_00000000000c4f4e
uuid_00000000000c4f4c:
uuid_00000000000c4f4e:
	mov -4960(%RBP),%RSP
	add $-5232, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c5051:
	mov -4616(%RBP),%RSP
	add $-5232, %RSP
	jmp uuid_00000000000c5054
uuid_00000000000c5052:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq $1
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c5054:
	mov -4320(%RBP),%RSP
	add $-4608, %RSP
	jmp uuid_00000000000c5057
uuid_00000000000c5055:
#call function as-constant : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a95
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call as_SB_constant_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq $0
	push %RBP
	mov -4488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ee0
	jmp uuid_00000000000c4ee2
uuid_00000000000c4ee0:
	push %RBP
	jmp uuid_00000000000c4edd
	jmp uuid_00000000000c4edf
uuid_00000000000c4edd:
	push %RBP
	mov -4472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4eda
	jmp uuid_00000000000c4edc
uuid_00000000000c4eda:
	movb $1, -4496(%rbp)
uuid_00000000000c4edc:
	mov -4520(%RBP),%RSP
	add $-4592, %RSP
uuid_00000000000c4edf:
	mov -4512(%RBP),%RSP
	add $-4592, %RSP
uuid_00000000000c4ee2:
	mov -4504(%RBP),%RSP
	add $-4592, %RSP
	mov -4496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ee4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4ee3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4ee6
uuid_00000000000c4ee4:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4528(%rbp)
	pushq -4536(%rbp)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4ee6:
	mov -4416(%RBP),%RSP
	add $-4592, %RSP
uuid_00000000000c5057:
	mov -4000(%RBP),%RSP
	add $-4592, %RSP
	jmp uuid_00000000000c505a
uuid_00000000000c5058:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -232(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	push %RBP
	pushq -4024(%rbp)
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq $0
	push %RBP
	mov -4168(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e9e
	jmp uuid_00000000000c4ea0
uuid_00000000000c4e9e:
	push %RBP
	jmp uuid_00000000000c4e9b
	jmp uuid_00000000000c4e9d
uuid_00000000000c4e9b:
	push %RBP
	mov -4104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c4e98
	jmp uuid_00000000000c4e9a
uuid_00000000000c4e98:
	movb $1, -4176(%rbp)
uuid_00000000000c4e9a:
	mov -4200(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000c4e9d:
	mov -4192(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000c4ea0:
	mov -4184(%RBP),%RSP
	add $-4208, %RSP
	mov -4176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4eb5
	push %RBP
	jmp uuid_00000000000c4eb2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4eb1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4eb4
uuid_00000000000c4eb2:
uuid_00000000000c4eb4:
	mov -4216(%RBP),%RSP
	add $-4216, %RSP
	jmp uuid_00000000000c4eb7
uuid_00000000000c4eb5:
	push %RBP
#call function is-reg8 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ea2
	jmp uuid_00000000000c4ea4
uuid_00000000000c4ea2:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4ea1
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000c4ea4:
	mov -4216(%RBP),%RSP
	add $-4216, %RSP
	push %RBP
#call function is-reg16 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ea6
	jmp uuid_00000000000c4ea8
uuid_00000000000c4ea6:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4ea5
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000c4ea8:
	mov -4224(%RBP),%RSP
	add $-4224, %RSP
	push %RBP
#call function is-reg32 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4eaa
	jmp uuid_00000000000c4eac
uuid_00000000000c4eaa:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4ea9
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000c4eac:
	mov -4232(%RBP),%RSP
	add $-4232, %RSP
	push %RBP
#call function is-reg64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4eae
	jmp uuid_00000000000c4eb0
uuid_00000000000c4eae:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4ead
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000c4eb0:
	mov -4240(%RBP),%RSP
	add $-4240, %RSP
uuid_00000000000c4eb7:
	mov -4096(%RBP),%RSP
	add $-4240, %RSP
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ebe
	jmp uuid_00000000000c4ec0
uuid_00000000000c4ebe:
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4eb8
	jmp uuid_00000000000c4eba
uuid_00000000000c4eb8:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -3792(%RBP)
	popq -3784(%RBP)
	popq -3776(%RBP)
uuid_00000000000c4eba:
	mov -4280(%RBP),%RSP
	add $-4280, %RSP
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ebb
	jmp uuid_00000000000c4ebd
uuid_00000000000c4ebb:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -3792(%RBP)
	popq -3784(%RBP)
	popq -3776(%RBP)
uuid_00000000000c4ebd:
	mov -4312(%RBP),%RSP
	add $-4312, %RSP
#call function with-fields : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	mov %RBX, %RBP
	call with_SB_fields_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -3792(%RBP)
	popq -3784(%RBP)
	popq -3776(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4ec0:
	mov -4248(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000c505a:
	mov -3480(%RBP),%RSP
	add $-4312, %RSP
	jmp uuid_00000000000c505d
uuid_00000000000c505b:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq $1
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e74
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	pushq -3304(%rbp)
	pushq -3312(%rbp)
	pushq -3320(%rbp)
	pushq -3328(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -3136(%rbp)
	pushq -3144(%rbp)
	pushq -3152(%rbp)
	pushq -3160(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	mov %RSP, %R14
	movq 112(%R14), %R15
	movq %R15, 112(%RSP)
	movq 104(%R14), %R15
	movq %R15, 104(%RSP)
	movq 96(%R14), %R15
	movq %R15, 96(%RSP)
	movq 88(%R14), %R15
	movq %R15, 88(%RSP)
	movq 80(%R14), %R15
	movq %R15, 80(%RSP)
	movq 72(%R14), %R15
	movq %R15, 72(%RSP)
	movq 64(%R14), %R15
	movq %R15, 64(%RSP)
	movq 56(%R14), %R15
	movq %R15, 56(%RSP)
	movq 48(%R14), %R15
	movq %R15, 48(%RSP)
	movq 40(%R14), %R15
	movq %R15, 40(%RSP)
	movq 32(%R14), %R15
	movq %R15, 32(%RSP)
	movq 24(%R14), %R15
	movq %R15, 24(%RSP)
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c4e76
uuid_00000000000c4e74:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	pushq -3304(%rbp)
	pushq -3312(%rbp)
	pushq -3320(%rbp)
	pushq -3328(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3488(%rbp)
	pushq -3496(%rbp)
	pushq -3504(%rbp)
	pushq -3512(%rbp)
	pushq -3520(%rbp)
	pushq -3528(%rbp)
	pushq -3536(%rbp)
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3568(%rbp)
	pushq -3576(%rbp)
	pushq -3584(%rbp)
	pushq -3592(%rbp)
	pushq -3600(%rbp)
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -3136(%rbp)
	pushq -3144(%rbp)
	pushq -3152(%rbp)
	pushq -3160(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
uuid_00000000000c4e76:
	mov -3480(%RBP),%RSP
	add $-3600, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2960(%rbp)
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	pushq -2984(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -3136(%rbp)
	pushq -3144(%rbp)
	pushq -3152(%rbp)
	pushq -3160(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c505d:
	mov -2832(%RBP),%RSP
	add $-3600, %RSP
	jmp uuid_00000000000c5060
uuid_00000000000c505e:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c5060:
	mov -2496(%RBP),%RSP
	add $-2824, %RSP
	jmp uuid_00000000000c5063
uuid_00000000000c5061:
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2368(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4e32
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c5063:
	mov -2160(%RBP),%RSP
	add $-2488, %RSP
	jmp uuid_00000000000c5066
uuid_00000000000c5064:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq $0
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e13
	jmp uuid_00000000000c4e15
uuid_00000000000c4e13:
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4e03
	jmp uuid_00000000000c4e05
uuid_00000000000c4e03:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	movq -2240(%rbp), %r15
	movq %r15, -1952(%rbp)
	movq -2232(%rbp), %r15
	movq %r15, -1944(%rbp)
	movq -2224(%rbp), %r15
	movq %r15, -1936(%rbp)
uuid_00000000000c4e05:
	mov -2216(%RBP),%RSP
	add $-2240, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq $0
	push %RBP
	mov -2392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e0c
	jmp uuid_00000000000c4e0e
uuid_00000000000c4e0c:
	push %RBP
	mov -2384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4e09
	jmp uuid_00000000000c4e0b
uuid_00000000000c4e09:
	push %RBP
	mov -2376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4e06
	jmp uuid_00000000000c4e08
uuid_00000000000c4e06:
	movb $1, -2400(%rbp)
uuid_00000000000c4e08:
	mov -2496(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000c4e0b:
	mov -2416(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000c4e0e:
	mov -2408(%RBP),%RSP
	add $-2568, %RSP
	mov -2400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4e10
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4e0f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4e12
uuid_00000000000c4e10:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4e12:
	mov -2320(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000c4e15:
	mov -2184(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000c5066:
	mov -1640(%RBP),%RSP
	add $-2568, %RSP
	jmp uuid_00000000000c5069
uuid_00000000000c5067:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq $0
	push %RBP
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dd5
	jmp uuid_00000000000c4dd7
uuid_00000000000c4dd5:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1880(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dcc
	jmp uuid_00000000000c4dce
uuid_00000000000c4dcc:
	push %RBP
	jmp uuid_00000000000c4dc9
	jmp uuid_00000000000c4dcb
uuid_00000000000c4dc9:
	push %RBP
	mov -1864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c4dc6
	jmp uuid_00000000000c4dc8
uuid_00000000000c4dc6:
	movb $1, -1888(%rbp)
uuid_00000000000c4dc8:
	mov -1912(%RBP),%RSP
	add $-1984, %RSP
uuid_00000000000c4dcb:
	mov -1904(%RBP),%RSP
	add $-1984, %RSP
uuid_00000000000c4dce:
	mov -1896(%RBP),%RSP
	add $-1984, %RSP
	mov -1888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4dd2
	jmp uuid_00000000000c4dd4
uuid_00000000000c4dd2:
	push %RBP
	jmp uuid_00000000000c4dcf
	jmp uuid_00000000000c4dd1
uuid_00000000000c4dcf:
	movb $1, -1792(%rbp)
uuid_00000000000c4dd1:
	mov -1992(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000c4dd4:
	mov -1808(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000c4dd7:
	mov -1800(%RBP),%RSP
	add $-1992, %RSP
	mov -1792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c4ddf
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c4dde
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4de1
uuid_00000000000c4ddf:
	push %RBP
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4dd8
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	jmp uuid_00000000000c4dda
uuid_00000000000c4dd8:
uuid_00000000000c4dda:
	mov -2000(%RBP),%RSP
	add $-2000, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4ddb
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c4ddd
uuid_00000000000c4ddb:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -1400(%RBP)
	popq -1392(%RBP)
	popq -1384(%RBP)
uuid_00000000000c4ddd:
	mov -2032(%RBP),%RSP
	add $-2032, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c4de1:
	mov -1712(%RBP),%RSP
	add $-2032, %RSP
uuid_00000000000c5069:
	mov -1088(%RBP),%RSP
	add $-2032, %RSP
	jmp uuid_00000000000c506c
uuid_00000000000c506a:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4d98
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c4d95
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d92
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d93
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c4d93
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d94
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	jmp uuid_00000000000c4d97
uuid_00000000000c4d95:
uuid_00000000000c4d97:
	mov -1120(%RBP),%RSP
	add $-1120, %RSP
	jmp uuid_00000000000c4d9a
uuid_00000000000c4d98:
uuid_00000000000c4d9a:
	mov -1088(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c506c:
	mov -848(%RBP),%RSP
	add $-1088, %RSP
	jmp uuid_00000000000c506f
uuid_00000000000c506d:
uuid_00000000000c506f:
	mov -736(%RBP),%RSP
	add $-840, %RSP
	mov %RSP, %R14
	add $72, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	movq 112(%R14), %R15
	movq %R15, 112(%RSP)
	movq 104(%R14), %R15
	movq %R15, 104(%RSP)
	movq 96(%R14), %R15
	movq %R15, 96(%RSP)
	movq 88(%R14), %R15
	movq %R15, 88(%RSP)
	movq 80(%R14), %R15
	movq %R15, 80(%RSP)
	movq 72(%R14), %R15
	movq %R15, 72(%RSP)
	movq 64(%R14), %R15
	movq %R15, 64(%RSP)
	movq 56(%R14), %R15
	movq %R15, 56(%RSP)
	movq 48(%R14), %R15
	movq %R15, 48(%RSP)
	movq 40(%R14), %R15
	movq %R15, 40(%RSP)
	movq 32(%R14), %R15
	movq %R15, 32(%RSP)
	movq 24(%R14), %R15
	movq %R15, 24(%RSP)
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c5072
uuid_00000000000c5070:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
uuid_00000000000c5072:
	mov -480(%RBP),%RSP
	add $-728, %RSP
	jmp uuid_00000000000c5075
uuid_00000000000c5073:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c5075:
	mov -400(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000c5078
uuid_00000000000c5076:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c5078:
	mov -320(%RBP),%RSP
	add $-392, %RSP
	push %RBP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5079
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000c507b
uuid_00000000000c5079:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fd0
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000c4fd0
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000c507b:
	mov -400(%RBP),%RSP
	add $-400, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $240, %rsp
	ret
add_SB_alias_CL_ArrowNilConsTypeConsStringString:
#call function cons : Arrow<Cons<Tuple<Tuple<String,String>,Type>,List<Tuple<Tuple<String,String>,Type>>>,List<Tuple<Tuple<String,String>,Type>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq $0
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListTupleTypeTupleStringStringConsListTupleTypeTupleStringStringTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	mov %rbp, %rsp
	sub $48, %rsp
	ret
find_SB_alias_CL_ArrowStringConsTypeString:
	pushq -8(%rbp)
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c50fc:
#call function non-zero : Arrow<List<Tuple<Tuple<String,String>,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c50fd
	jmp uuid_00000000000c50fe
uuid_00000000000c50fd:
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c50be
	jmp uuid_00000000000c50c0
uuid_00000000000c50be:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c50bb
	jmp uuid_00000000000c50bd
uuid_00000000000c50bb:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	jmp uuid_00000000000c50b8
	jmp uuid_00000000000c50ba
uuid_00000000000c50b8:
	movb $1, -280(%rbp)
uuid_00000000000c50ba:
	mov -376(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000c50bd:
	mov -296(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000c50c0:
	mov -288(%RBP),%RSP
	add $-432, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c50f9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c50f8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c50fb
uuid_00000000000c50f9:
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	push %RBP
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c50eb
	jmp uuid_00000000000c50ed
uuid_00000000000c50eb:
	push %RBP
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c50d9
	jmp uuid_00000000000c50db
uuid_00000000000c50d9:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c50d0
	jmp uuid_00000000000c50d2
uuid_00000000000c50d0:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c50c7
	jmp uuid_00000000000c50c9
uuid_00000000000c50c7:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c50c4
	jmp uuid_00000000000c50c6
uuid_00000000000c50c4:
	push %RBP
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	jmp uuid_00000000000c50c1
	jmp uuid_00000000000c50c3
uuid_00000000000c50c1:
	movb $1, -736(%rbp)
uuid_00000000000c50c3:
	mov -800(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000c50c6:
	mov -752(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000c50c9:
	mov -744(%RBP),%RSP
	add $-824, %RSP
	mov -736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c50cd
	jmp uuid_00000000000c50cf
uuid_00000000000c50cd:
	push %RBP
	jmp uuid_00000000000c50ca
	jmp uuid_00000000000c50cc
uuid_00000000000c50ca:
	movb $1, -672(%rbp)
uuid_00000000000c50cc:
	mov -832(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c50cf:
	mov -688(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c50d2:
	mov -680(%RBP),%RSP
	add $-832, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c50d6
	jmp uuid_00000000000c50d8
uuid_00000000000c50d6:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq $uuid_00000000000c500f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c50d3
	jmp uuid_00000000000c50d5
uuid_00000000000c50d3:
	movb $1, -608(%rbp)
uuid_00000000000c50d5:
	mov -840(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000c50d8:
	mov -624(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000c50db:
	mov -616(%RBP),%RSP
	add $-848, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c50e8
	jmp uuid_00000000000c50ea
uuid_00000000000c50e8:
	push %RBP
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c50e2
	jmp uuid_00000000000c50e4
uuid_00000000000c50e2:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c50df
	jmp uuid_00000000000c50e1
uuid_00000000000c50df:
	push %RBP
	mov -864(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c50dc
	jmp uuid_00000000000c50de
uuid_00000000000c50dc:
	movb $1, -888(%rbp)
uuid_00000000000c50de:
	mov -920(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c50e1:
	mov -904(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c50e4:
	mov -896(%RBP),%RSP
	add $-928, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c50e5
	jmp uuid_00000000000c50e7
uuid_00000000000c50e5:
	movb $1, -560(%rbp)
uuid_00000000000c50e7:
	mov -856(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c50ea:
	mov -576(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c50ed:
	mov -568(%RBP),%RSP
	add $-928, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c50f5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c50f4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c50f7
uuid_00000000000c50f5:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -928(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c50f1
	jmp uuid_00000000000c50f3
uuid_00000000000c50f1:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c50ee
	jmp uuid_00000000000c50f0
uuid_00000000000c50ee:
	movq -912(%rbp), %r15
	movq %r15, -48(%rbp)
	mov -912(%rbp), %r15
	mov %r15, -48(%rbp)
uuid_00000000000c50f0:
	mov -944(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c50f3:
	mov -936(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c50f7:
	mov -496(%RBP),%RSP
	add $-944, %RSP
	movq -368(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000c50fb:
	mov -200(%RBP),%RSP
	add $-944, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c50fc
uuid_00000000000c50fe:
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
find_SB_alias_SB_type_CL_ArrowTypeString:
	pushq $0
	pushq $0
	pushq $3
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c5140:
#call function non-zero : Arrow<List<Tuple<Tuple<String,String>,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5141
	jmp uuid_00000000000c5142
uuid_00000000000c5141:
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c511d
	jmp uuid_00000000000c511f
uuid_00000000000c511d:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c511a
	jmp uuid_00000000000c511c
uuid_00000000000c511a:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	jmp uuid_00000000000c5117
	jmp uuid_00000000000c5119
uuid_00000000000c5117:
	movb $1, -272(%rbp)
uuid_00000000000c5119:
	mov -368(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c511c:
	mov -288(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c511f:
	mov -280(%RBP),%RSP
	add $-424, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c513d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c513c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c513f
uuid_00000000000c513d:
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c512f
	jmp uuid_00000000000c5131
uuid_00000000000c512f:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c512c
	jmp uuid_00000000000c512e
uuid_00000000000c512c:
	push %RBP
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5126
	jmp uuid_00000000000c5128
uuid_00000000000c5126:
	push %RBP
	mov -616(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5123
	jmp uuid_00000000000c5125
uuid_00000000000c5123:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5120
	jmp uuid_00000000000c5122
uuid_00000000000c5120:
	movb $1, -632(%rbp)
uuid_00000000000c5122:
	mov -664(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c5125:
	mov -648(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c5128:
	mov -640(%RBP),%RSP
	add $-672, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5129
	jmp uuid_00000000000c512b
uuid_00000000000c5129:
	movb $1, -552(%rbp)
uuid_00000000000c512b:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c512e:
	mov -568(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c5131:
	mov -560(%RBP),%RSP
	add $-672, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5139
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5138
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c513b
uuid_00000000000c5139:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5135
	jmp uuid_00000000000c5137
uuid_00000000000c5135:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5132
	movq -592(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -24(%rbp)
	jmp uuid_00000000000c5134
uuid_00000000000c5132:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c5134:
	mov -688(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000c5137:
	mov -680(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000c513b:
	mov -488(%RBP),%RSP
	add $-688, %RSP
	movq -360(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -296(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000c513f:
	mov -192(%RBP),%RSP
	add $-688, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c5140
uuid_00000000000c5142:
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
mark_SB_class_SB_exists_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $16, %rsp
	ret
mark_SB_parameter_SB_flat_CL_ArrowNilConsU64ConsU64String:
#call function .bind : Arrow<Cons<Cons<HashtableEq<Tuple<Tuple<String,U64>,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64>,HashtableEq<Tuple<Tuple<String,U64>,U64>,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $parameter_SB_is_SB_flat_SB_index_CL_HashtableEqU64TupleU64TupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq $0
	pushq -24(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64TupleU64TupleU64StringConsU64ConsTupleU64TupleU64StringHashtableEqU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	mov $parameter_SB_is_SB_flat_SB_index_CL_HashtableEqU64TupleU64TupleU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_parameter_SB_flat_CL_ArrowU64ConsU64ConsU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<Tuple<String,U64>,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $parameter_SB_is_SB_flat_SB_index_CL_HashtableEqU64TupleU64TupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq $0
	pushq -24(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringHashtableEqU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mark_SB_as_SB_special_CL_ArrowNilConsTypeString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,HashtableEq<Tuple<String,Type>,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $is_SB_special_SB_index_CL_HashtableEqU64TupleTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64TupleTypeStringConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	mov $is_SB_special_SB_index_CL_HashtableEqU64TupleTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $40, %rsp
	ret
is_SB_special_CL_ArrowU64ConsTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $is_SB_special_SB_index_CL_HashtableEqU64TupleTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
index_SB_lone_SB_tag_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $lone_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $lone_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_lone_SB_tag_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $lone_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_tag_SB_is_SB_fragment_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_is_SB_fragment_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $tag_SB_is_SB_fragment_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_fragment_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_is_SB_fragment_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_fragment_CL_ArrowU64Type:
#call function is-fragment : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call is_SB_fragment_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mark_SB_global_SB_as_SB_seen_CL_ArrowNilConsTypeConsTypeString:
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function global-is-seen : Arrow<Cons<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call global_SB_is_SB_seen_CL_ArrowU64ConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5145
#call function .bind : Arrow<Cons<Cons<HashtableEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,HashtableEq<Tuple<String,Type>,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_symbol_SB_registry_CL_HashtableEqU64TupleTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64TupleTypeStringConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	mov $global_SB_symbol_SB_registry_CL_HashtableEqU64TupleTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	jmp uuid_00000000000c5147
uuid_00000000000c5145:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5143
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5144
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c5147:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov %rbp, %rsp
	sub $64, %rsp
	ret
global_SB_is_SB_seen_CL_ArrowU64ConsTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_symbol_SB_registry_CL_HashtableEqU64TupleTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
has_SB_only_SB_child_CL_ArrowNilConsStringString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,String>,String>,String>,HashtableEq<String,String>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqStringStringConsStringConsStringHashtableEqStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
get_SB_only_SB_child_CL_ArrowStringString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,String>,String>,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $uuid_00000000000c4960
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowStringConsStringConsStringHashtableEqStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_of_SB_tag_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_index_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %r15
	pushq 0(%r15)
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_index_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $tag_SB_to_SB_index_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
index_SB_size_SB_of_SB_class_CL_ArrowNilConsU64String:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,U64>,?>,String>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
size_SB_of_SB_class_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_class_SB_of_SB_tag_CL_ArrowNilConsTypeString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,HashtableEq<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTypeStringConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5166
	jmp uuid_00000000000c5168
uuid_00000000000c5166:
	push %RBP
	jmp uuid_00000000000c5163
	jmp uuid_00000000000c5165
uuid_00000000000c5163:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5160
	jmp uuid_00000000000c5162
uuid_00000000000c5160:
	movb $1, -104(%rbp)
uuid_00000000000c5162:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c5165:
	mov -120(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c5168:
	mov -112(%RBP),%RSP
	add $-136, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c516e
	push %RBP
	jmp uuid_00000000000c516b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c516a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c516d
uuid_00000000000c516b:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5169
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c516d:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c5170
uuid_00000000000c516e:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -136(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
uuid_00000000000c5170:
	mov -72(%RBP),%RSP
	add $-136, %RSP
	mov %rbp, %rsp
	sub $40, %rsp
	ret
class_SB_of_SB_tag_CL_ArrowTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTypeConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_class_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_fields_SB_of_SB_tag_CL_ArrowNilConsTypeConsTypeString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,HashtableEq<String,Tuple<Type,Type>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTupleTypeTypeStringConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $64, %rsp
	ret
fields_SB_of_SB_tag_CL_ArrowTupleTypeTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	subq $56, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fields_SB_of_SB_tag_CL_ArrowTypeConsTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c518a
	jmp uuid_00000000000c518c
uuid_00000000000c518a:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5180
	jmp uuid_00000000000c5182
uuid_00000000000c5180:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c517d
	jmp uuid_00000000000c517f
uuid_00000000000c517d:
	push %RBP
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5177
	jmp uuid_00000000000c5179
uuid_00000000000c5177:
	push %RBP
	jmp uuid_00000000000c5174
	jmp uuid_00000000000c5176
uuid_00000000000c5174:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5171
	jmp uuid_00000000000c5173
uuid_00000000000c5171:
	movb $1, -304(%rbp)
uuid_00000000000c5173:
	mov -328(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c5176:
	mov -320(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c5179:
	mov -312(%RBP),%RSP
	add $-336, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c517a
	jmp uuid_00000000000c517c
uuid_00000000000c517a:
	movb $1, -208(%rbp)
uuid_00000000000c517c:
	mov -272(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c517f:
	mov -224(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c5182:
	mov -216(%RBP),%RSP
	add $-336, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5187
	jmp uuid_00000000000c5189
uuid_00000000000c5187:
	push %RBP
	mov -120(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq $uuid_00000000000c5183
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5184
	jmp uuid_00000000000c5186
uuid_00000000000c5184:
	movb $1, -144(%rbp)
uuid_00000000000c5186:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c5189:
	mov -160(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c518c:
	mov -152(%RBP),%RSP
	add $-352, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c51ab
	push %RBP
	jmp uuid_00000000000c51a8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c51a7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c51aa
uuid_00000000000c51a8:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c51a6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c51aa:
	mov -360(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000c51ad
uuid_00000000000c51ab:
#call function fields-of-tag : Arrow<String,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	mov %RBX, %RBP
	call fields_SB_of_SB_tag_CL_ArrowTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5193
	jmp uuid_00000000000c5195
uuid_00000000000c5193:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5190
	jmp uuid_00000000000c5192
uuid_00000000000c5190:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c518d
	jmp uuid_00000000000c518f
uuid_00000000000c518d:
	movb $1, -480(%rbp)
uuid_00000000000c518f:
	mov -528(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c5192:
	mov -496(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c5195:
	mov -488(%RBP),%RSP
	add $-552, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c51a3
	push %RBP
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c519c
	jmp uuid_00000000000c519e
uuid_00000000000c519c:
	push %RBP
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	jmp uuid_00000000000c5199
	jmp uuid_00000000000c519b
uuid_00000000000c5199:
	push %RBP
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	jmp uuid_00000000000c5196
	jmp uuid_00000000000c5198
uuid_00000000000c5196:
	movb $1, -624(%rbp)
uuid_00000000000c5198:
	mov -672(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000c519b:
	mov -640(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000c519e:
	mov -632(%RBP),%RSP
	add $-696, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c51a0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c519f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c51a2
uuid_00000000000c51a0:
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c51a2:
	mov -560(%RBP),%RSP
	add $-696, %RSP
	jmp uuid_00000000000c51a5
uuid_00000000000c51a3:
uuid_00000000000c51a5:
	mov -416(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c51ad:
	mov -112(%RBP),%RSP
	add $-552, %RSP
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $uuid_00000000000c51ae
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fields-of-type : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d94
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a95
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fce
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4924
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call fields_SB_of_SB_type_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
set_SB_type_SB_fields_CL_ArrowNilConsTypeType:
	pushq $uuid_00000000000c4960
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c51bd
	jmp uuid_00000000000c51bf
uuid_00000000000c51bd:
	push %RBP
	jmp uuid_00000000000c51ba
	jmp uuid_00000000000c51bc
uuid_00000000000c51ba:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c51b7
	jmp uuid_00000000000c51b9
uuid_00000000000c51b7:
	movb $1, -128(%rbp)
uuid_00000000000c51b9:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c51bc:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c51bf:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c51c5
	push %RBP
	jmp uuid_00000000000c51c2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c51c1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c51c4
uuid_00000000000c51c2:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c51c0
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c51c4:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c51c7
uuid_00000000000c51c5:
	movq -160(%rbp), %r15
	movq %r15, -64(%rbp)
	mov -160(%rbp), %r15
	mov %r15, -64(%rbp)
uuid_00000000000c51c7:
	mov -96(%RBP),%RSP
	add $-160, %RSP
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,HashtableEq<String,Tuple<Type,Type>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_complex_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -64(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTupleTypeTypeStringConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	mov $type_SB_complex_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $56, %rsp
	ret
get_SB_vararg_SB_inner_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c51ce
	jmp uuid_00000000000c51d0
uuid_00000000000c51ce:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c51cb
	jmp uuid_00000000000c51cd
uuid_00000000000c51cb:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c51c8
	jmp uuid_00000000000c51ca
uuid_00000000000c51c8:
	movb $1, -120(%rbp)
uuid_00000000000c51ca:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c51cd:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c51d0:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c51f0
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c51e6
	jmp uuid_00000000000c51e8
uuid_00000000000c51e6:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c51dd
	jmp uuid_00000000000c51df
uuid_00000000000c51dd:
	push %RBP
	jmp uuid_00000000000c51da
	jmp uuid_00000000000c51dc
uuid_00000000000c51da:
	push %RBP
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	jmp uuid_00000000000c51d7
	jmp uuid_00000000000c51d9
uuid_00000000000c51d7:
	movb $1, -296(%rbp)
uuid_00000000000c51d9:
	mov -320(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c51dc:
	mov -312(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c51df:
	mov -304(%RBP),%RSP
	add $-344, %RSP
	mov -296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c51e3
	jmp uuid_00000000000c51e5
uuid_00000000000c51e3:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq $uuid_00000000000c4cdf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c51e0
	jmp uuid_00000000000c51e2
uuid_00000000000c51e0:
	movb $1, -232(%rbp)
uuid_00000000000c51e2:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c51e5:
	mov -248(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c51e8:
	mov -240(%RBP),%RSP
	add $-360, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c51ed
	push %RBP
	jmp uuid_00000000000c51ea
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c51e9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c51ec
uuid_00000000000c51ea:
uuid_00000000000c51ec:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000c51ef
uuid_00000000000c51ed:
	movq -344(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c51ef:
	mov -200(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000c51f2
uuid_00000000000c51f0:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c51d1
	jmp uuid_00000000000c51d3
uuid_00000000000c51d1:
	movq -192(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c51d3:
	mov -200(%RBP),%RSP
	add $-200, %RSP
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c51d4
	jmp uuid_00000000000c51d6
uuid_00000000000c51d4:
	movq -160(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c51d6:
	mov -208(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c51f2:
	mov -88(%RBP),%RSP
	add $-208, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,U64>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsU64ConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
maybe_SB_local_SB_variable_CL_ArrowTypeType:
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c51f4
	jmp uuid_00000000000c51f6
uuid_00000000000c51f4:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c51f3
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c51f6:
	mov -40(%RBP),%RSP
	add $-40, %RSP
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_constructor_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c51fd
	jmp uuid_00000000000c51ff
uuid_00000000000c51fd:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c51fa
	jmp uuid_00000000000c51fc
uuid_00000000000c51fa:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c51f7
	jmp uuid_00000000000c51f9
uuid_00000000000c51f7:
	movb $1, -104(%rbp)
uuid_00000000000c51f9:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c51fc:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c51ff:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5228
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5206
	jmp uuid_00000000000c5208
uuid_00000000000c5206:
	push %RBP
	jmp uuid_00000000000c5203
	jmp uuid_00000000000c5205
uuid_00000000000c5203:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c4fcc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5200
	jmp uuid_00000000000c5202
uuid_00000000000c5200:
	movb $1, -216(%rbp)
uuid_00000000000c5202:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c5205:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c5208:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5225
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c520f
	jmp uuid_00000000000c5211
uuid_00000000000c520f:
	push %RBP
	jmp uuid_00000000000c520c
	jmp uuid_00000000000c520e
uuid_00000000000c520c:
	push %RBP
	mov -264(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq $uuid_00000000000c500f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5209
	jmp uuid_00000000000c520b
uuid_00000000000c5209:
	movb $1, -288(%rbp)
uuid_00000000000c520b:
	mov -312(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c520e:
	mov -304(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c5211:
	mov -296(%RBP),%RSP
	add $-320, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5222
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5218
	jmp uuid_00000000000c521a
uuid_00000000000c5218:
	push %RBP
	jmp uuid_00000000000c5215
	jmp uuid_00000000000c5217
uuid_00000000000c5215:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5212
	jmp uuid_00000000000c5214
uuid_00000000000c5212:
	movb $1, -360(%rbp)
uuid_00000000000c5214:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c5217:
	mov -376(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c521a:
	mov -368(%RBP),%RSP
	add $-392, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c521f
	push %RBP
	jmp uuid_00000000000c521c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c521b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c521e
uuid_00000000000c521c:
uuid_00000000000c521e:
	mov -400(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c5221
uuid_00000000000c521f:
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c5221:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c5224
uuid_00000000000c5222:
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c5224:
	mov -256(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000c5227
uuid_00000000000c5225:
	movq $1, -40(%rbp)
uuid_00000000000c5227:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c522a
uuid_00000000000c5228:
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c522a:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_simple_SB_constructor_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5231
	jmp uuid_00000000000c5233
uuid_00000000000c5231:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c522e
	jmp uuid_00000000000c5230
uuid_00000000000c522e:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c522b
	jmp uuid_00000000000c522d
uuid_00000000000c522b:
	movb $1, -104(%rbp)
uuid_00000000000c522d:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5230:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5233:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5244
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c523a
	jmp uuid_00000000000c523c
uuid_00000000000c523a:
	push %RBP
	jmp uuid_00000000000c5237
	jmp uuid_00000000000c5239
uuid_00000000000c5237:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c4fcc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5234
	jmp uuid_00000000000c5236
uuid_00000000000c5234:
	movb $1, -216(%rbp)
uuid_00000000000c5236:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c5239:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c523c:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5241
	push %RBP
	jmp uuid_00000000000c523e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c523d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5240
uuid_00000000000c523e:
uuid_00000000000c5240:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c5243
uuid_00000000000c5241:
	movq $1, -40(%rbp)
uuid_00000000000c5243:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c5246
uuid_00000000000c5244:
#call function is-simple-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_simple_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-simple-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_simple_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c5246:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_tag_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c524d
	jmp uuid_00000000000c524f
uuid_00000000000c524d:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c524a
	jmp uuid_00000000000c524c
uuid_00000000000c524a:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5247
	jmp uuid_00000000000c5249
uuid_00000000000c5247:
	movb $1, -104(%rbp)
uuid_00000000000c5249:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c524c:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c524f:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5260
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5256
	jmp uuid_00000000000c5258
uuid_00000000000c5256:
	push %RBP
	jmp uuid_00000000000c5253
	jmp uuid_00000000000c5255
uuid_00000000000c5253:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c5183
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5250
	jmp uuid_00000000000c5252
uuid_00000000000c5250:
	movb $1, -216(%rbp)
uuid_00000000000c5252:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c5255:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c5258:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c525d
	push %RBP
	jmp uuid_00000000000c525a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5259
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c525c
uuid_00000000000c525a:
uuid_00000000000c525c:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c525f
uuid_00000000000c525d:
	movq $1, -40(%rbp)
uuid_00000000000c525f:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c5262
uuid_00000000000c5260:
#call function is-tag : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_tag_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-tag : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_tag_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c5262:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_open_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52f9
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5266
	jmp uuid_00000000000c5268
uuid_00000000000c5266:
	push %RBP
	jmp uuid_00000000000c5263
	jmp uuid_00000000000c5265
uuid_00000000000c5263:
	movb $1, -136(%rbp)
uuid_00000000000c5265:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c5268:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c52f6
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c526f
	jmp uuid_00000000000c5271
uuid_00000000000c526f:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c526c
	jmp uuid_00000000000c526e
uuid_00000000000c526c:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5269
	jmp uuid_00000000000c526b
uuid_00000000000c5269:
	movb $1, -192(%rbp)
uuid_00000000000c526b:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c526e:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c5271:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c52f3
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5290
	jmp uuid_00000000000c5292
uuid_00000000000c5290:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5287
	jmp uuid_00000000000c5289
uuid_00000000000c5287:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c527e
	jmp uuid_00000000000c5280
uuid_00000000000c527e:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c527b
	jmp uuid_00000000000c527d
uuid_00000000000c527b:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5278
	jmp uuid_00000000000c527a
uuid_00000000000c5278:
	movb $1, -432(%rbp)
uuid_00000000000c527a:
	mov -496(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c527d:
	mov -448(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c5280:
	mov -440(%RBP),%RSP
	add $-520, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5284
	jmp uuid_00000000000c5286
uuid_00000000000c5284:
	push %RBP
	jmp uuid_00000000000c5281
	jmp uuid_00000000000c5283
uuid_00000000000c5281:
	movb $1, -368(%rbp)
uuid_00000000000c5283:
	mov -528(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000c5286:
	mov -384(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000c5289:
	mov -376(%RBP),%RSP
	add $-528, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c528d
	jmp uuid_00000000000c528f
uuid_00000000000c528d:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	pushq $uuid_00000000000c4ae9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c528a
	jmp uuid_00000000000c528c
uuid_00000000000c528a:
	movb $1, -304(%rbp)
uuid_00000000000c528c:
	mov -536(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c528f:
	mov -320(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c5292:
	mov -312(%RBP),%RSP
	add $-544, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c52f0
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52ab
	jmp uuid_00000000000c52ad
uuid_00000000000c52ab:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52a2
	jmp uuid_00000000000c52a4
uuid_00000000000c52a2:
	push %RBP
	mov -632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5299
	jmp uuid_00000000000c529b
uuid_00000000000c5299:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5296
	jmp uuid_00000000000c5298
uuid_00000000000c5296:
	push %RBP
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000c5293
	jmp uuid_00000000000c5295
uuid_00000000000c5293:
	movb $1, -712(%rbp)
uuid_00000000000c5295:
	mov -776(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c5298:
	mov -728(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c529b:
	mov -720(%RBP),%RSP
	add $-800, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c529f
	jmp uuid_00000000000c52a1
uuid_00000000000c529f:
	push %RBP
	jmp uuid_00000000000c529c
	jmp uuid_00000000000c529e
uuid_00000000000c529c:
	movb $1, -648(%rbp)
uuid_00000000000c529e:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c52a1:
	mov -664(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c52a4:
	mov -656(%RBP),%RSP
	add $-808, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c52a8
	jmp uuid_00000000000c52aa
uuid_00000000000c52a8:
	push %RBP
	mov -560(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq $uuid_00000000000c4ae9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c52a5
	jmp uuid_00000000000c52a7
uuid_00000000000c52a5:
	movb $1, -584(%rbp)
uuid_00000000000c52a7:
	mov -816(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000c52aa:
	mov -600(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000c52ad:
	mov -592(%RBP),%RSP
	add $-824, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c52ed
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52c7
	jmp uuid_00000000000c52c9
uuid_00000000000c52c7:
	push %RBP
	mov -848(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52bd
	jmp uuid_00000000000c52bf
uuid_00000000000c52bd:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -984(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52b4
	jmp uuid_00000000000c52b6
uuid_00000000000c52b4:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52b1
	jmp uuid_00000000000c52b3
uuid_00000000000c52b1:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000c52ae
	jmp uuid_00000000000c52b0
uuid_00000000000c52ae:
	movb $1, -992(%rbp)
uuid_00000000000c52b0:
	mov -1056(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c52b3:
	mov -1008(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c52b6:
	mov -1000(%RBP),%RSP
	add $-1080, %RSP
	mov -992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c52ba
	jmp uuid_00000000000c52bc
uuid_00000000000c52ba:
	push %RBP
	jmp uuid_00000000000c52b7
	jmp uuid_00000000000c52b9
uuid_00000000000c52b7:
	movb $1, -928(%rbp)
uuid_00000000000c52b9:
	mov -1088(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c52bc:
	mov -944(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c52bf:
	mov -936(%RBP),%RSP
	add $-1088, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c52c4
	jmp uuid_00000000000c52c6
uuid_00000000000c52c4:
	push %RBP
	mov -840(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1104(%rbp)
	pushq $uuid_00000000000c52c0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c52c1
	jmp uuid_00000000000c52c3
uuid_00000000000c52c1:
	movb $1, -864(%rbp)
uuid_00000000000c52c3:
	mov -1096(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c52c6:
	mov -880(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c52c9:
	mov -872(%RBP),%RSP
	add $-1104, %RSP
	mov -864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c52ea
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52d0
	jmp uuid_00000000000c52d2
uuid_00000000000c52d0:
	push %RBP
	mov -1128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c52cd
	jmp uuid_00000000000c52cf
uuid_00000000000c52cd:
	push %RBP
	jmp uuid_00000000000c52ca
	jmp uuid_00000000000c52cc
uuid_00000000000c52ca:
	movb $1, -1144(%rbp)
uuid_00000000000c52cc:
	mov -1208(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000c52cf:
	mov -1160(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000c52d2:
	mov -1152(%RBP),%RSP
	add $-1208, %RSP
	mov -1144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c52e7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c52e6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c52e9
uuid_00000000000c52e7:
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
uuid_00000000000c52e3:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c52e4
	jmp uuid_00000000000c52e5
uuid_00000000000c52e4:
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	push %RBP
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq $0
	push %RBP
	mov -1336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c52d9
	jmp uuid_00000000000c52db
uuid_00000000000c52d9:
	push %RBP
	mov -1328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c52d6
	jmp uuid_00000000000c52d8
uuid_00000000000c52d6:
	push %RBP
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	jmp uuid_00000000000c52d3
	jmp uuid_00000000000c52d5
uuid_00000000000c52d3:
	movb $1, -1344(%rbp)
uuid_00000000000c52d5:
	mov -1408(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000c52d8:
	mov -1360(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000c52db:
	mov -1352(%RBP),%RSP
	add $-1432, %RSP
	mov -1344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c52e0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c52df
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c52e2
uuid_00000000000c52e0:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c52dc
	jmp uuid_00000000000c52de
uuid_00000000000c52dc:
	movq $1, -40(%rbp)
uuid_00000000000c52de:
	mov -1440(%RBP),%RSP
	add $-1440, %RSP
	movq -1400(%rbp), %r15
	movq %r15, -1248(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -1240(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -1232(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -1224(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -1216(%rbp)
uuid_00000000000c52e2:
	mov -1296(%RBP),%RSP
	add $-1440, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c52e3
uuid_00000000000c52e5:
uuid_00000000000c52e9:
	mov -1112(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000c52ec
uuid_00000000000c52ea:
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c52ec:
	mov -832(%RBP),%RSP
	add $-1104, %RSP
	jmp uuid_00000000000c52ef
uuid_00000000000c52ed:
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c52ef:
	mov -552(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000c52f2
uuid_00000000000c52f0:
uuid_00000000000c52f2:
	mov -272(%RBP),%RSP
	add $-544, %RSP
	jmp uuid_00000000000c52f5
uuid_00000000000c52f3:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5272
	jmp uuid_00000000000c5274
uuid_00000000000c5272:
	movq $1, -40(%rbp)
uuid_00000000000c5274:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5275
	jmp uuid_00000000000c5277
uuid_00000000000c5275:
	movq $1, -40(%rbp)
uuid_00000000000c5277:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c52f5:
	mov -160(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c52f8
uuid_00000000000c52f6:
	movq $1, -40(%rbp)
uuid_00000000000c52f8:
	mov -104(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c52fb
uuid_00000000000c52f9:
	movq $1, -40(%rbp)
uuid_00000000000c52fb:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_vararg_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5302
	jmp uuid_00000000000c5304
uuid_00000000000c5302:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c52ff
	jmp uuid_00000000000c5301
uuid_00000000000c52ff:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c52fc
	jmp uuid_00000000000c52fe
uuid_00000000000c52fc:
	movb $1, -104(%rbp)
uuid_00000000000c52fe:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5301:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5304:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5315
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c530b
	jmp uuid_00000000000c530d
uuid_00000000000c530b:
	push %RBP
	jmp uuid_00000000000c5308
	jmp uuid_00000000000c530a
uuid_00000000000c5308:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c4cdf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5305
	jmp uuid_00000000000c5307
uuid_00000000000c5305:
	movb $1, -216(%rbp)
uuid_00000000000c5307:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c530a:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c530d:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5312
	push %RBP
	jmp uuid_00000000000c530f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c530e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5311
uuid_00000000000c530f:
uuid_00000000000c5311:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c5314
uuid_00000000000c5312:
	movq $1, -40(%rbp)
uuid_00000000000c5314:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c5317
uuid_00000000000c5315:
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c5317:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_parameterized_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5327
	jmp uuid_00000000000c5329
uuid_00000000000c5327:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c531e
	jmp uuid_00000000000c5320
uuid_00000000000c531e:
	push %RBP
	jmp uuid_00000000000c531b
	jmp uuid_00000000000c531d
uuid_00000000000c531b:
	push %RBP
	jmp uuid_00000000000c5318
	jmp uuid_00000000000c531a
uuid_00000000000c5318:
	movb $1, -168(%rbp)
uuid_00000000000c531a:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c531d:
	mov -184(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c5320:
	mov -176(%RBP),%RSP
	add $-192, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5324
	jmp uuid_00000000000c5326
uuid_00000000000c5324:
	push %RBP
	jmp uuid_00000000000c5321
	jmp uuid_00000000000c5323
uuid_00000000000c5321:
	movb $1, -104(%rbp)
uuid_00000000000c5323:
	mov -200(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000c5326:
	mov -120(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000c5329:
	mov -112(%RBP),%RSP
	add $-200, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5340
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5330
	jmp uuid_00000000000c5332
uuid_00000000000c5330:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c532d
	jmp uuid_00000000000c532f
uuid_00000000000c532d:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c532a
	jmp uuid_00000000000c532c
uuid_00000000000c532a:
	movb $1, -240(%rbp)
uuid_00000000000c532c:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c532f:
	mov -256(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c5332:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c533d
	push %RBP
	jmp uuid_00000000000c533a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5339
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c533c
uuid_00000000000c533a:
uuid_00000000000c533c:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000c533f
uuid_00000000000c533d:
	push %RBP
#call function is-parameterized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_parameterized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5333
	jmp uuid_00000000000c5335
uuid_00000000000c5333:
	movq $1, -40(%rbp)
uuid_00000000000c5335:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	push %RBP
#call function is-parameterized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call is_SB_parameterized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5336
	jmp uuid_00000000000c5338
uuid_00000000000c5336:
	movq $1, -40(%rbp)
uuid_00000000000c5338:
	mov -328(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c533f:
	mov -208(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000c5342
uuid_00000000000c5340:
	movq $1, -40(%rbp)
uuid_00000000000c5342:
	mov -72(%RBP),%RSP
	add $-200, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_sized_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5377
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5349
	jmp uuid_00000000000c534b
uuid_00000000000c5349:
	push %RBP
	jmp uuid_00000000000c5346
	jmp uuid_00000000000c5348
uuid_00000000000c5346:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5343
	jmp uuid_00000000000c5345
uuid_00000000000c5343:
	movb $1, -136(%rbp)
uuid_00000000000c5345:
	mov -160(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5348:
	mov -152(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c534b:
	mov -144(%RBP),%RSP
	add $-168, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5374
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5352
	jmp uuid_00000000000c5354
uuid_00000000000c5352:
	push %RBP
	jmp uuid_00000000000c534f
	jmp uuid_00000000000c5351
uuid_00000000000c534f:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c500f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c534c
	jmp uuid_00000000000c534e
uuid_00000000000c534c:
	movb $1, -208(%rbp)
uuid_00000000000c534e:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c5351:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c5354:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5371
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c535b
	jmp uuid_00000000000c535d
uuid_00000000000c535b:
	push %RBP
	jmp uuid_00000000000c5358
	jmp uuid_00000000000c535a
uuid_00000000000c5358:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000c4fce
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5355
	jmp uuid_00000000000c5357
uuid_00000000000c5355:
	movb $1, -280(%rbp)
uuid_00000000000c5357:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c535a:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c535d:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c536e
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5364
	jmp uuid_00000000000c5366
uuid_00000000000c5364:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5361
	jmp uuid_00000000000c5363
uuid_00000000000c5361:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c535e
	jmp uuid_00000000000c5360
uuid_00000000000c535e:
	movb $1, -352(%rbp)
uuid_00000000000c5360:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c5363:
	mov -368(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c5366:
	mov -360(%RBP),%RSP
	add $-424, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c536b
	push %RBP
	jmp uuid_00000000000c5368
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5367
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c536a
uuid_00000000000c5368:
uuid_00000000000c536a:
	mov -432(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000c536d
uuid_00000000000c536b:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function is-sized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call is_SB_sized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-sized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call is_SB_sized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c536d:
	mov -320(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000c5370
uuid_00000000000c536e:
	movq $1, -40(%rbp)
uuid_00000000000c5370:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c5373
uuid_00000000000c5371:
	movq $1, -40(%rbp)
uuid_00000000000c5373:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c5376
uuid_00000000000c5374:
	movq $1, -40(%rbp)
uuid_00000000000c5376:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c5379
uuid_00000000000c5377:
	movq $1, -40(%rbp)
uuid_00000000000c5379:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
has_SB_representation_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5380
	jmp uuid_00000000000c5382
uuid_00000000000c5380:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c537d
	jmp uuid_00000000000c537f
uuid_00000000000c537d:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c537a
	jmp uuid_00000000000c537c
uuid_00000000000c537a:
	movb $1, -104(%rbp)
uuid_00000000000c537c:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c537f:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5382:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c53d0
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c538a
	jmp uuid_00000000000c538c
uuid_00000000000c538a:
	push %RBP
	jmp uuid_00000000000c5387
	jmp uuid_00000000000c5389
uuid_00000000000c5387:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c5383
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5384
	jmp uuid_00000000000c5386
uuid_00000000000c5384:
	movb $1, -216(%rbp)
uuid_00000000000c5386:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c5389:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c538c:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c53cd
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5393
	jmp uuid_00000000000c5395
uuid_00000000000c5393:
	push %RBP
	jmp uuid_00000000000c5390
	jmp uuid_00000000000c5392
uuid_00000000000c5390:
	push %RBP
	mov -264(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq $uuid_00000000000c4ea1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c538d
	jmp uuid_00000000000c538f
uuid_00000000000c538d:
	movb $1, -288(%rbp)
uuid_00000000000c538f:
	mov -312(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c5392:
	mov -304(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c5395:
	mov -296(%RBP),%RSP
	add $-320, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c53ca
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c539c
	jmp uuid_00000000000c539e
uuid_00000000000c539c:
	push %RBP
	jmp uuid_00000000000c5399
	jmp uuid_00000000000c539b
uuid_00000000000c5399:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000c4ea5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5396
	jmp uuid_00000000000c5398
uuid_00000000000c5396:
	movb $1, -360(%rbp)
uuid_00000000000c5398:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c539b:
	mov -376(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c539e:
	mov -368(%RBP),%RSP
	add $-392, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c53c7
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53a5
	jmp uuid_00000000000c53a7
uuid_00000000000c53a5:
	push %RBP
	jmp uuid_00000000000c53a2
	jmp uuid_00000000000c53a4
uuid_00000000000c53a2:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -464(%rbp)
	pushq $uuid_00000000000c4ea9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c539f
	jmp uuid_00000000000c53a1
uuid_00000000000c539f:
	movb $1, -432(%rbp)
uuid_00000000000c53a1:
	mov -456(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c53a4:
	mov -448(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c53a7:
	mov -440(%RBP),%RSP
	add $-464, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c53c4
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53ae
	jmp uuid_00000000000c53b0
uuid_00000000000c53ae:
	push %RBP
	jmp uuid_00000000000c53ab
	jmp uuid_00000000000c53ad
uuid_00000000000c53ab:
	push %RBP
	mov -480(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq $uuid_00000000000c4ead
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c53a8
	jmp uuid_00000000000c53aa
uuid_00000000000c53a8:
	movb $1, -504(%rbp)
uuid_00000000000c53aa:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c53ad:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c53b0:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c53c1
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53b7
	jmp uuid_00000000000c53b9
uuid_00000000000c53b7:
	push %RBP
	jmp uuid_00000000000c53b4
	jmp uuid_00000000000c53b6
uuid_00000000000c53b4:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq $uuid_00000000000c4f44
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c53b1
	jmp uuid_00000000000c53b3
uuid_00000000000c53b1:
	movb $1, -576(%rbp)
uuid_00000000000c53b3:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c53b6:
	mov -592(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c53b9:
	mov -584(%RBP),%RSP
	add $-608, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c53be
	push %RBP
	jmp uuid_00000000000c53bb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c53ba
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c53bd
uuid_00000000000c53bb:
uuid_00000000000c53bd:
	mov -616(%RBP),%RSP
	add $-616, %RSP
	jmp uuid_00000000000c53c0
uuid_00000000000c53be:
	movq $1, -40(%rbp)
uuid_00000000000c53c0:
	mov -544(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000c53c3
uuid_00000000000c53c1:
	movq $1, -40(%rbp)
uuid_00000000000c53c3:
	mov -472(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000c53c6
uuid_00000000000c53c4:
	movq $1, -40(%rbp)
uuid_00000000000c53c6:
	mov -400(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000c53c9
uuid_00000000000c53c7:
	movq $1, -40(%rbp)
uuid_00000000000c53c9:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c53cc
uuid_00000000000c53ca:
	movq $1, -40(%rbp)
uuid_00000000000c53cc:
	mov -256(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000c53cf
uuid_00000000000c53cd:
	movq $1, -40(%rbp)
uuid_00000000000c53cf:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c53d2
uuid_00000000000c53d0:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-representation : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call has_SB_representation_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-representation : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call has_SB_representation_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c53d2:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
guess_SB_representation_CL_ArrowTypeType:
	push %RBP
#call function has-representation : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call has_SB_representation_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c53e6
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -48(%rbp)
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53e3
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53e0
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53dd
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53da
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53d7
	push %RBP
	jmp uuid_00000000000c53d4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c53d3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c53d6
uuid_00000000000c53d4:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4f44
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c53d6:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c53d9
uuid_00000000000c53d7:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4ead
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c53d9:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c53dc
uuid_00000000000c53da:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4ea9
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c53dc:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c53df
uuid_00000000000c53dd:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4ea5
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c53df:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000c53e2
uuid_00000000000c53e0:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4ea1
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c53e2:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000c53e5
uuid_00000000000c53e3:
uuid_00000000000c53e5:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	jmp uuid_00000000000c53e8
uuid_00000000000c53e6:
uuid_00000000000c53e8:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
as_SB_constant_CL_ArrowTypeType:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c53e9
	jmp uuid_00000000000c53eb
uuid_00000000000c53e9:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5383
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c53eb:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
deep_SB_hash_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c540e
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53ef
	jmp uuid_00000000000c53f1
uuid_00000000000c53ef:
	push %RBP
	mov -120(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c53ec
	jmp uuid_00000000000c53ee
uuid_00000000000c53ec:
	movb $1, -136(%rbp)
uuid_00000000000c53ee:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c53f1:
	mov -144(%RBP),%RSP
	add $-160, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c540b
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c53f8
	jmp uuid_00000000000c53fa
uuid_00000000000c53f8:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c53f5
	jmp uuid_00000000000c53f7
uuid_00000000000c53f5:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c53f2
	jmp uuid_00000000000c53f4
uuid_00000000000c53f2:
	movb $1, -200(%rbp)
uuid_00000000000c53f4:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c53f7:
	mov -216(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c53fa:
	mov -208(%RBP),%RSP
	add $-272, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5408
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5401
	jmp uuid_00000000000c5403
uuid_00000000000c5401:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c53fe
	jmp uuid_00000000000c5400
uuid_00000000000c53fe:
	push %RBP
	mov -288(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c53fb
	jmp uuid_00000000000c53fd
uuid_00000000000c53fb:
	movb $1, -312(%rbp)
uuid_00000000000c53fd:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c5400:
	mov -328(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c5403:
	mov -320(%RBP),%RSP
	add $-384, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5405
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5404
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5407
uuid_00000000000c5405:
#call function deep-hash : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c5407:
	mov -280(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c540a
uuid_00000000000c5408:
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c540a:
	mov -168(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c540d
uuid_00000000000c540b:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c540d:
	mov -104(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c5410
uuid_00000000000c540e:
uuid_00000000000c5410:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
deep_SB_hash_CL_ArrowU64ListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5422
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c541b
	jmp uuid_00000000000c541d
uuid_00000000000c541b:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5418
	jmp uuid_00000000000c541a
uuid_00000000000c5418:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000c5415
	jmp uuid_00000000000c5417
uuid_00000000000c5415:
	movb $1, -200(%rbp)
uuid_00000000000c5417:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c541a:
	mov -216(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c541d:
	mov -208(%RBP),%RSP
	add $-288, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c541f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c541e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5421
uuid_00000000000c541f:
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000c5421:
	mov -152(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c5424
uuid_00000000000c5422:
uuid_00000000000c5424:
	mov -104(%RBP),%RSP
	add $-144, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
ascript_SB_normal_CL_ArrowNilConsTypeAST:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5430
	jmp uuid_00000000000c5432
uuid_00000000000c5430:
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c542d
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov $types_SB_have_SB_changed_CL_U8, %r15
	movb $1, 0(%r15)
	jmp uuid_00000000000c542f
uuid_00000000000c542d:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c542a
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5427
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5425
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5426
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5429
uuid_00000000000c5427:
uuid_00000000000c5429:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000c542c
uuid_00000000000c542a:
uuid_00000000000c542c:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c542f:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c5432:
	mov -112(%RBP),%RSP
	add $-152, %RSP
	mov %rbp, %rsp
	sub $104, %rsp
	ret
typeof_CL_ArrowTypeFragmentList:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5439
	jmp uuid_00000000000c543b
uuid_00000000000c5439:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c5436
	jmp uuid_00000000000c5438
uuid_00000000000c5436:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5433
	jmp uuid_00000000000c5435
uuid_00000000000c5433:
	movb $1, -552(%rbp)
uuid_00000000000c5435:
	mov -728(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000c5438:
	mov -568(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000c543b:
	mov -560(%RBP),%RSP
	add $-896, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5443
	push %RBP
	jmp uuid_00000000000c5440
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c543f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5442
uuid_00000000000c5440:
uuid_00000000000c5442:
	mov -904(%RBP),%RSP
	add $-904, %RSP
	jmp uuid_00000000000c5445
uuid_00000000000c5443:
#call function typeof : Arrow<FragmentList,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c543c
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	jmp uuid_00000000000c543e
uuid_00000000000c543c:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d94
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c543e:
	mov -904(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c5445:
	mov -376(%RBP),%RSP
	add $-904, %RSP
	subq $24, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
to_SB_s_CL_ArrowSAST:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c544c
	jmp uuid_00000000000c544e
uuid_00000000000c544c:
	push %RBP
	jmp uuid_00000000000c5449
	jmp uuid_00000000000c544b
uuid_00000000000c5449:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5446
	jmp uuid_00000000000c5448
uuid_00000000000c5446:
	movb $1, -264(%rbp)
uuid_00000000000c5448:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c544b:
	mov -280(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c544e:
	mov -272(%RBP),%RSP
	add $-296, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c54c6
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5456
	jmp uuid_00000000000c5458
uuid_00000000000c5456:
	push %RBP
	jmp uuid_00000000000c5453
	jmp uuid_00000000000c5455
uuid_00000000000c5453:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5450
	jmp uuid_00000000000c5452
uuid_00000000000c5450:
	movb $1, -384(%rbp)
uuid_00000000000c5452:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c5455:
	mov -400(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c5458:
	mov -392(%RBP),%RSP
	add $-416, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c54c3
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5478
	jmp uuid_00000000000c547a
uuid_00000000000c5478:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5466
	jmp uuid_00000000000c5468
uuid_00000000000c5466:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c545d
	jmp uuid_00000000000c545f
uuid_00000000000c545d:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000c545a
	jmp uuid_00000000000c545c
uuid_00000000000c545a:
	movb $1, -696(%rbp)
uuid_00000000000c545c:
	mov -712(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000c545f:
	mov -704(%RBP),%RSP
	add $-736, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5463
	jmp uuid_00000000000c5465
uuid_00000000000c5463:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5460
	jmp uuid_00000000000c5462
uuid_00000000000c5460:
	movb $1, -600(%rbp)
uuid_00000000000c5462:
	mov -744(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c5465:
	mov -616(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c5468:
	mov -608(%RBP),%RSP
	add $-816, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5475
	jmp uuid_00000000000c5477
uuid_00000000000c5475:
	push %RBP
	mov -480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c546f
	jmp uuid_00000000000c5471
uuid_00000000000c546f:
	push %RBP
	jmp uuid_00000000000c546c
	jmp uuid_00000000000c546e
uuid_00000000000c546c:
	push %RBP
	mov -832(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5469
	jmp uuid_00000000000c546b
uuid_00000000000c5469:
	movb $1, -904(%rbp)
uuid_00000000000c546b:
	mov -928(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c546e:
	mov -920(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c5471:
	mov -912(%RBP),%RSP
	add $-936, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5472
	jmp uuid_00000000000c5474
uuid_00000000000c5472:
	movb $1, -504(%rbp)
uuid_00000000000c5474:
	mov -824(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c5477:
	mov -520(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c547a:
	mov -512(%RBP),%RSP
	add $-936, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c54c0
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5499
	jmp uuid_00000000000c549b
uuid_00000000000c5499:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1112(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5487
	jmp uuid_00000000000c5489
uuid_00000000000c5487:
	push %RBP
	mov -1104(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c547e
	jmp uuid_00000000000c5480
uuid_00000000000c547e:
	push %RBP
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	jmp uuid_00000000000c547b
	jmp uuid_00000000000c547d
uuid_00000000000c547b:
	movb $1, -1216(%rbp)
uuid_00000000000c547d:
	mov -1232(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000c5480:
	mov -1224(%RBP),%RSP
	add $-1256, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5484
	jmp uuid_00000000000c5486
uuid_00000000000c5484:
	push %RBP
	mov -1096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5481
	jmp uuid_00000000000c5483
uuid_00000000000c5481:
	movb $1, -1120(%rbp)
uuid_00000000000c5483:
	mov -1264(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000c5486:
	mov -1136(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000c5489:
	mov -1128(%RBP),%RSP
	add $-1336, %RSP
	mov -1120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5496
	jmp uuid_00000000000c5498
uuid_00000000000c5496:
	push %RBP
	mov -1000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5490
	jmp uuid_00000000000c5492
uuid_00000000000c5490:
	push %RBP
	jmp uuid_00000000000c548d
	jmp uuid_00000000000c548f
uuid_00000000000c548d:
	push %RBP
	mov -1352(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	pushq $uuid_00000000000c4bba
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c548a
	jmp uuid_00000000000c548c
uuid_00000000000c548a:
	movb $1, -1424(%rbp)
uuid_00000000000c548c:
	mov -1448(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c548f:
	mov -1440(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c5492:
	mov -1432(%RBP),%RSP
	add $-1456, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5493
	jmp uuid_00000000000c5495
uuid_00000000000c5493:
	movb $1, -1024(%rbp)
uuid_00000000000c5495:
	mov -1344(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c5498:
	mov -1040(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c549b:
	mov -1032(%RBP),%RSP
	add $-1456, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c54bd
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c54a2
	jmp uuid_00000000000c54a4
uuid_00000000000c54a2:
	push %RBP
	mov -1528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c549f
	jmp uuid_00000000000c54a1
uuid_00000000000c549f:
	push %RBP
	mov -1520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c549c
	jmp uuid_00000000000c549e
uuid_00000000000c549c:
	movb $1, -1544(%rbp)
uuid_00000000000c549e:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c54a1:
	mov -1560(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c54a4:
	mov -1552(%RBP),%RSP
	add $-1712, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c54ba
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1792(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c54af
	jmp uuid_00000000000c54b1
uuid_00000000000c54af:
	push %RBP
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	jmp uuid_00000000000c54ac
	jmp uuid_00000000000c54ae
uuid_00000000000c54ac:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c54a9
	jmp uuid_00000000000c54ab
uuid_00000000000c54a9:
	push %RBP
	mov -1752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c54a6
	jmp uuid_00000000000c54a8
uuid_00000000000c54a6:
	movb $1, -1800(%rbp)
uuid_00000000000c54a8:
	mov -1928(%RBP),%RSP
	add $-2000, %RSP
uuid_00000000000c54ab:
	mov -1848(%RBP),%RSP
	add $-2000, %RSP
uuid_00000000000c54ae:
	mov -1816(%RBP),%RSP
	add $-2000, %RSP
uuid_00000000000c54b1:
	mov -1808(%RBP),%RSP
	add $-2000, %RSP
	mov -1800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c54b7
	push %RBP
	jmp uuid_00000000000c54b4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c54b3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c54b6
uuid_00000000000c54b4:
uuid_00000000000c54b6:
	mov -2008(%RBP),%RSP
	add $-2008, %RSP
	jmp uuid_00000000000c54b9
uuid_00000000000c54b7:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c54b2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c54b9:
	mov -1720(%RBP),%RSP
	add $-2000, %RSP
	jmp uuid_00000000000c54bc
uuid_00000000000c54ba:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c54a5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c54bc:
	mov -1464(%RBP),%RSP
	add $-1712, %RSP
	jmp uuid_00000000000c54bf
uuid_00000000000c54bd:
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c54bf:
	mov -944(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000c54c2
uuid_00000000000c54c0:
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c54c2:
	mov -424(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000c54c5
uuid_00000000000c54c3:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c5459
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -416(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c54c5:
	mov -304(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000c54c8
uuid_00000000000c54c6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c544f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -296(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c54c8:
	mov -184(%RBP),%RSP
	add $-296, %RSP
	subq $24, %rsp
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
domain_CL_ArrowTypeType:
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000c500f
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
range_CL_ArrowTypeType:
#call function p1 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000c500f
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p1_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
t1_CL_ArrowTypeString:
	pushq -8(%rbp)
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
t2_CL_ArrowTypeConsTypeString:
	pushq -8(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
t3_CL_ArrowTypeConsTypeConsTypeString:
	pushq -8(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $64, %rsp
	ret
p_CL_ArrowTypeConsU64Type:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c54e7
	jmp uuid_00000000000c54e9
uuid_00000000000c54e7:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c54e4
	jmp uuid_00000000000c54e6
uuid_00000000000c54e4:
	push %RBP
	jmp uuid_00000000000c54e1
	jmp uuid_00000000000c54e3
uuid_00000000000c54e1:
	movb $1, -104(%rbp)
uuid_00000000000c54e3:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c54e6:
	mov -120(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c54e9:
	mov -112(%RBP),%RSP
	add $-168, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c54ee
	push %RBP
	jmp uuid_00000000000c54eb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c54ea
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c54ed
uuid_00000000000c54eb:
uuid_00000000000c54ed:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c54f0
uuid_00000000000c54ee:
#call function .nth : Arrow<Cons<Cons<List<Type>,U64>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_nth_CL_ArrowTypeConsTypeConsU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c54f0:
	mov -72(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
p1_CL_ArrowTypeType:
#call function p : Arrow<Cons<Type,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	mov %RBX, %RBP
	call p_CL_ArrowTypeConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
p2_CL_ArrowTypeType:
#call function p : Arrow<Cons<Type,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $1
	mov %RBX, %RBP
	call p_CL_ArrowTypeConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
and_CL_ArrowTContextConsTContextTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq $0
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c54f7
	jmp uuid_00000000000c54f9
uuid_00000000000c54f7:
	push %RBP
	jmp uuid_00000000000c54f4
	jmp uuid_00000000000c54f6
uuid_00000000000c54f4:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	mov -904(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c54f1
	jmp uuid_00000000000c54f3
uuid_00000000000c54f1:
	movb $1, -760(%rbp)
uuid_00000000000c54f3:
	mov -784(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c54f6:
	mov -776(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c54f9:
	mov -768(%RBP),%RSP
	add $-904, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c550a
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5500
	jmp uuid_00000000000c5502
uuid_00000000000c5500:
	push %RBP
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c54fd
	jmp uuid_00000000000c54ff
uuid_00000000000c54fd:
	push %RBP
	jmp uuid_00000000000c54fa
	jmp uuid_00000000000c54fc
uuid_00000000000c54fa:
	movb $1, -1168(%rbp)
uuid_00000000000c54fc:
	mov -1312(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c54ff:
	mov -1184(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c5502:
	mov -1176(%RBP),%RSP
	add $-1312, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5507
	push %RBP
	jmp uuid_00000000000c5504
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5503
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5506
uuid_00000000000c5504:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5506:
	mov -1320(%RBP),%RSP
	add $-1320, %RSP
	jmp uuid_00000000000c5509
uuid_00000000000c5507:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5509:
	mov -912(%RBP),%RSP
	add $-1312, %RSP
	jmp uuid_00000000000c550c
uuid_00000000000c550a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c550c:
	mov -504(%RBP),%RSP
	add $-904, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $248, %rsp
	ret
and_CL_ArrowTypeConsTypeType:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	subq $24, %rsp
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
union_CL_ArrowTContextConsTContextTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5523
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5520
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5519
	jmp uuid_00000000000c551b
uuid_00000000000c5519:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000c5516
	jmp uuid_00000000000c5518
uuid_00000000000c5516:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000c5513
	jmp uuid_00000000000c5515
uuid_00000000000c5513:
	push %RBP
	mov -648(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5510
	jmp uuid_00000000000c5512
uuid_00000000000c5510:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c550d
	jmp uuid_00000000000c550f
uuid_00000000000c550d:
	movb $1, -760(%rbp)
uuid_00000000000c550f:
	mov -904(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c5512:
	mov -888(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c5515:
	mov -856(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c5518:
	mov -776(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c551b:
	mov -768(%RBP),%RSP
	add $-1024, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c551d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c551c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c551f
uuid_00000000000c551d:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -896(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c551f:
	mov -632(%RBP),%RSP
	add $-1024, %RSP
	jmp uuid_00000000000c5522
uuid_00000000000c5520:
uuid_00000000000c5522:
	mov -504(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c5525
uuid_00000000000c5523:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c5525:
	mov -376(%RBP),%RSP
	add $-496, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $248, %rsp
	ret
union_CL_ArrowContextConsContextContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5526
	jmp uuid_00000000000c5528
uuid_00000000000c5526:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
uuid_00000000000c5528:
	mov -304(%RBP),%RSP
	add $-304, %RSP
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c553c
	jmp uuid_00000000000c553e
uuid_00000000000c553c:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5532
	jmp uuid_00000000000c5534
uuid_00000000000c5532:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	jmp uuid_00000000000c552f
	jmp uuid_00000000000c5531
uuid_00000000000c552f:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c552c
	jmp uuid_00000000000c552e
uuid_00000000000c552c:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5529
	jmp uuid_00000000000c552b
uuid_00000000000c5529:
	movb $1, -520(%rbp)
uuid_00000000000c552b:
	mov -632(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c552e:
	mov -616(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c5531:
	mov -536(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c5534:
	mov -528(%RBP),%RSP
	add $-728, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5539
	push %RBP
	jmp uuid_00000000000c5536
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5535
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5538
uuid_00000000000c5536:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000c5538:
	mov -736(%RBP),%RSP
	add $-736, %RSP
	jmp uuid_00000000000c553b
uuid_00000000000c5539:
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -624(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq $0
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
uuid_00000000000c553b:
	mov -416(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c553e:
	mov -312(%RBP),%RSP
	add $-728, %RSP
	subq $96, %rsp
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	addq $96, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
union_CL_ArrowFContextConsTContextFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
uuid_00000000000c5556:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5557
	jmp uuid_00000000000c5558
uuid_00000000000c5557:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	push %RBP
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5553
	push %RBP
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq $0
	push %RBP
	mov -904(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c554b
	jmp uuid_00000000000c554d
uuid_00000000000c554b:
	push %RBP
	jmp uuid_00000000000c5548
	jmp uuid_00000000000c554a
uuid_00000000000c5548:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000c5545
	jmp uuid_00000000000c5547
uuid_00000000000c5545:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5542
	jmp uuid_00000000000c5544
uuid_00000000000c5542:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c553f
	jmp uuid_00000000000c5541
uuid_00000000000c553f:
	movb $1, -912(%rbp)
uuid_00000000000c5541:
	mov -984(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c5544:
	mov -968(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c5547:
	mov -936(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c554a:
	mov -928(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c554d:
	mov -920(%RBP),%RSP
	add $-1104, %RSP
	mov -912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5550
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c554f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5552
uuid_00000000000c5550:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $uuid_00000000000c554e
	pushq $0
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1256(%RBP)
	popq -1248(%RBP)
	popq -1240(%RBP)
	popq -1232(%RBP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -976(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $0
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	movq -1104(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -208(%rbp)
uuid_00000000000c5552:
	mov -784(%RBP),%RSP
	add $-1256, %RSP
	jmp uuid_00000000000c5555
uuid_00000000000c5553:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
uuid_00000000000c5555:
	mov -656(%RBP),%RSP
	add $-776, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c5556
uuid_00000000000c5558:
	subq $200, %rsp
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
tag_SB_of_CL_ArrowStringType:
	pushq $uuid_00000000000c4960
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c555f
	jmp uuid_00000000000c5561
uuid_00000000000c555f:
	push %RBP
	jmp uuid_00000000000c555c
	jmp uuid_00000000000c555e
uuid_00000000000c555c:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5559
	jmp uuid_00000000000c555b
uuid_00000000000c5559:
	movb $1, -104(%rbp)
uuid_00000000000c555b:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c555e:
	mov -120(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c5561:
	mov -112(%RBP),%RSP
	add $-136, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5566
	push %RBP
	jmp uuid_00000000000c5563
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5562
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5565
uuid_00000000000c5563:
uuid_00000000000c5565:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c5568
uuid_00000000000c5566:
	movq -136(%rbp), %r15
	movq %r15, -40(%rbp)
	mov -136(%rbp), %r15
	mov %r15, -40(%rbp)
uuid_00000000000c5568:
	mov -72(%RBP),%RSP
	add $-136, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
can_SB_unify_CL_ArrowU64ConsListTypeListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5578
	jmp uuid_00000000000c557a
uuid_00000000000c5578:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5575
	jmp uuid_00000000000c5577
uuid_00000000000c5575:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5572
	jmp uuid_00000000000c5574
uuid_00000000000c5572:
	movb $1, -288(%rbp)
uuid_00000000000c5574:
	mov -352(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c5577:
	mov -304(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c557a:
	mov -296(%RBP),%RSP
	add $-392, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c55a3
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5593
	jmp uuid_00000000000c5595
uuid_00000000000c5593:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5581
	jmp uuid_00000000000c5583
uuid_00000000000c5581:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c557e
	jmp uuid_00000000000c5580
uuid_00000000000c557e:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c557b
	jmp uuid_00000000000c557d
uuid_00000000000c557b:
	movb $1, -560(%rbp)
uuid_00000000000c557d:
	mov -624(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c5580:
	mov -576(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c5583:
	mov -568(%RBP),%RSP
	add $-648, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5590
	jmp uuid_00000000000c5592
uuid_00000000000c5590:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c558a
	jmp uuid_00000000000c558c
uuid_00000000000c558a:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5587
	jmp uuid_00000000000c5589
uuid_00000000000c5587:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000c5584
	jmp uuid_00000000000c5586
uuid_00000000000c5584:
	movb $1, -704(%rbp)
uuid_00000000000c5586:
	mov -768(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c5589:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c558c:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c558d
	jmp uuid_00000000000c558f
uuid_00000000000c558d:
	movb $1, -496(%rbp)
uuid_00000000000c558f:
	mov -656(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c5592:
	mov -512(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c5595:
	mov -504(%RBP),%RSP
	add $-792, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c55a0
	push %RBP
	jmp uuid_00000000000c559d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c559c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c559f
uuid_00000000000c559d:
uuid_00000000000c559f:
	mov -800(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000c55a2
uuid_00000000000c55a0:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5599
	jmp uuid_00000000000c559b
uuid_00000000000c5599:
	push %RBP
#call function can-unify : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5596
	jmp uuid_00000000000c5598
uuid_00000000000c5596:
	movq $1, -96(%rbp)
uuid_00000000000c5598:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c559b:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c55a2:
	mov -400(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000c55a5
uuid_00000000000c55a3:
	movq $1, -96(%rbp)
uuid_00000000000c55a5:
	mov -192(%RBP),%RSP
	add $-392, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
can_SB_unify_CL_ArrowU64ConsTypeType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c55ac
	jmp uuid_00000000000c55ae
uuid_00000000000c55ac:
	push %RBP
	jmp uuid_00000000000c55a9
	jmp uuid_00000000000c55ab
uuid_00000000000c55a9:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c55a6
	jmp uuid_00000000000c55a8
uuid_00000000000c55a6:
	movb $1, -192(%rbp)
uuid_00000000000c55a8:
	mov -216(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c55ab:
	mov -208(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c55ae:
	mov -200(%RBP),%RSP
	add $-240, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5783
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c55c8
	jmp uuid_00000000000c55ca
uuid_00000000000c55c8:
	push %RBP
	jmp uuid_00000000000c55c5
	jmp uuid_00000000000c55c7
uuid_00000000000c55c5:
	push %RBP
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c55bf
	jmp uuid_00000000000c55c1
uuid_00000000000c55bf:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c55b5
	jmp uuid_00000000000c55b7
uuid_00000000000c55b5:
	push %RBP
	jmp uuid_00000000000c55b2
	jmp uuid_00000000000c55b4
uuid_00000000000c55b2:
	push %RBP
	jmp uuid_00000000000c55af
	jmp uuid_00000000000c55b1
uuid_00000000000c55af:
	movb $1, -432(%rbp)
uuid_00000000000c55b1:
	mov -456(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c55b4:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c55b7:
	mov -440(%RBP),%RSP
	add $-456, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c55bc
	jmp uuid_00000000000c55be
uuid_00000000000c55bc:
	push %RBP
	mov -344(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $uuid_00000000000c55b8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c55b9
	jmp uuid_00000000000c55bb
uuid_00000000000c55b9:
	movb $1, -368(%rbp)
uuid_00000000000c55bb:
	mov -464(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c55be:
	mov -384(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c55c1:
	mov -376(%RBP),%RSP
	add $-472, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c55c2
	jmp uuid_00000000000c55c4
uuid_00000000000c55c2:
	movb $1, -312(%rbp)
uuid_00000000000c55c4:
	mov -336(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c55c7:
	mov -328(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000c55ca:
	mov -320(%RBP),%RSP
	add $-472, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5780
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c55d7
	jmp uuid_00000000000c55d9
uuid_00000000000c55d7:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	jmp uuid_00000000000c55d4
	jmp uuid_00000000000c55d6
uuid_00000000000c55d4:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c55ce
	jmp uuid_00000000000c55d0
uuid_00000000000c55ce:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c55cb
	jmp uuid_00000000000c55cd
uuid_00000000000c55cb:
	movb $1, -624(%rbp)
uuid_00000000000c55cd:
	mov -640(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c55d0:
	mov -632(%RBP),%RSP
	add $-648, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c55d1
	jmp uuid_00000000000c55d3
uuid_00000000000c55d1:
	movb $1, -544(%rbp)
uuid_00000000000c55d3:
	mov -592(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c55d6:
	mov -560(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c55d9:
	mov -552(%RBP),%RSP
	add $-648, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c577d
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c55e9
	jmp uuid_00000000000c55eb
uuid_00000000000c55e9:
	push %RBP
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	jmp uuid_00000000000c55e6
	jmp uuid_00000000000c55e8
uuid_00000000000c55e6:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c55e0
	jmp uuid_00000000000c55e2
uuid_00000000000c55e0:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c55dd
	jmp uuid_00000000000c55df
uuid_00000000000c55dd:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c55da
	jmp uuid_00000000000c55dc
uuid_00000000000c55da:
	movb $1, -800(%rbp)
uuid_00000000000c55dc:
	mov -848(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c55df:
	mov -816(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c55e2:
	mov -808(%RBP),%RSP
	add $-872, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c55e3
	jmp uuid_00000000000c55e5
uuid_00000000000c55e3:
	movb $1, -720(%rbp)
uuid_00000000000c55e5:
	mov -768(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c55e8:
	mov -736(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c55eb:
	mov -728(%RBP),%RSP
	add $-872, %RSP
	mov -720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c577a
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -936(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5601
	jmp uuid_00000000000c5603
uuid_00000000000c5601:
	push %RBP
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq $0
	push %RBP
	mov -984(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c55f8
	jmp uuid_00000000000c55fa
uuid_00000000000c55f8:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c55f5
	jmp uuid_00000000000c55f7
uuid_00000000000c55f5:
	push %RBP
	mov -968(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c55f2
	jmp uuid_00000000000c55f4
uuid_00000000000c55f2:
	movb $1, -992(%rbp)
uuid_00000000000c55f4:
	mov -1040(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c55f7:
	mov -1008(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c55fa:
	mov -1000(%RBP),%RSP
	add $-1064, %RSP
	mov -992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c55fe
	jmp uuid_00000000000c5600
uuid_00000000000c55fe:
	push %RBP
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	jmp uuid_00000000000c55fb
	jmp uuid_00000000000c55fd
uuid_00000000000c55fb:
	movb $1, -944(%rbp)
uuid_00000000000c55fd:
	mov -1072(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c5600:
	mov -960(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c5603:
	mov -952(%RBP),%RSP
	add $-1096, %RSP
	mov -944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5777
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5658
	jmp uuid_00000000000c565a
uuid_00000000000c5658:
	push %RBP
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5622
	jmp uuid_00000000000c5624
uuid_00000000000c5622:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5619
	jmp uuid_00000000000c561b
uuid_00000000000c5619:
	push %RBP
	mov -1264(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5610
	jmp uuid_00000000000c5612
uuid_00000000000c5610:
	push %RBP
	mov -1328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c560d
	jmp uuid_00000000000c560f
uuid_00000000000c560d:
	push %RBP
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	jmp uuid_00000000000c560a
	jmp uuid_00000000000c560c
uuid_00000000000c560a:
	movb $1, -1344(%rbp)
uuid_00000000000c560c:
	mov -1408(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000c560f:
	mov -1360(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000c5612:
	mov -1352(%RBP),%RSP
	add $-1432, %RSP
	mov -1344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5616
	jmp uuid_00000000000c5618
uuid_00000000000c5616:
	push %RBP
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	jmp uuid_00000000000c5613
	jmp uuid_00000000000c5615
uuid_00000000000c5613:
	movb $1, -1280(%rbp)
uuid_00000000000c5615:
	mov -1440(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000c5618:
	mov -1296(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000c561b:
	mov -1288(%RBP),%RSP
	add $-1464, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c561f
	jmp uuid_00000000000c5621
uuid_00000000000c561f:
	push %RBP
	mov -1192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1480(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c561c
	jmp uuid_00000000000c561e
uuid_00000000000c561c:
	movb $1, -1216(%rbp)
uuid_00000000000c561e:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c5621:
	mov -1232(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c5624:
	mov -1224(%RBP),%RSP
	add $-1480, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5655
	jmp uuid_00000000000c5657
uuid_00000000000c5655:
	push %RBP
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq $0
	push %RBP
	mov -1512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c564f
	jmp uuid_00000000000c5651
uuid_00000000000c564f:
	push %RBP
	mov -1504(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1576(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5646
	jmp uuid_00000000000c5648
uuid_00000000000c5646:
	push %RBP
	mov -1568(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c562b
	jmp uuid_00000000000c562d
uuid_00000000000c562b:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1704(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5628
	jmp uuid_00000000000c562a
uuid_00000000000c5628:
	push %RBP
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	jmp uuid_00000000000c5625
	jmp uuid_00000000000c5627
uuid_00000000000c5625:
	movb $1, -1648(%rbp)
uuid_00000000000c5627:
	mov -1712(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c562a:
	mov -1664(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c562d:
	mov -1656(%RBP),%RSP
	add $-1736, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5643
	jmp uuid_00000000000c5645
uuid_00000000000c5643:
	push %RBP
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c563d
	jmp uuid_00000000000c563f
uuid_00000000000c563d:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1832(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5634
	jmp uuid_00000000000c5636
uuid_00000000000c5634:
	push %RBP
	mov -1824(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5631
	jmp uuid_00000000000c5633
uuid_00000000000c5631:
	push %RBP
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	jmp uuid_00000000000c562e
	jmp uuid_00000000000c5630
uuid_00000000000c562e:
	movb $1, -1840(%rbp)
uuid_00000000000c5630:
	mov -1904(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c5633:
	mov -1856(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c5636:
	mov -1848(%RBP),%RSP
	add $-1928, %RSP
	mov -1840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c563a
	jmp uuid_00000000000c563c
uuid_00000000000c563a:
	push %RBP
	mov -1752(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1944(%rbp)
	pushq $uuid_00000000000c4cdf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5637
	jmp uuid_00000000000c5639
uuid_00000000000c5637:
	movb $1, -1776(%rbp)
uuid_00000000000c5639:
	mov -1936(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000c563c:
	mov -1792(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000c563f:
	mov -1784(%RBP),%RSP
	add $-1944, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5640
	jmp uuid_00000000000c5642
uuid_00000000000c5640:
	movb $1, -1584(%rbp)
uuid_00000000000c5642:
	mov -1744(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000c5645:
	mov -1600(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000c5648:
	mov -1592(%RBP),%RSP
	add $-1944, %RSP
	mov -1584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c564c
	jmp uuid_00000000000c564e
uuid_00000000000c564c:
	push %RBP
	mov -1496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1960(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5649
	jmp uuid_00000000000c564b
uuid_00000000000c5649:
	movb $1, -1520(%rbp)
uuid_00000000000c564b:
	mov -1952(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c564e:
	mov -1536(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c5651:
	mov -1528(%RBP),%RSP
	add $-1960, %RSP
	mov -1520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5652
	jmp uuid_00000000000c5654
uuid_00000000000c5652:
	movb $1, -1168(%rbp)
uuid_00000000000c5654:
	mov -1488(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c5657:
	mov -1184(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c565a:
	mov -1176(%RBP),%RSP
	add $-1960, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5774
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -2024(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5691
	jmp uuid_00000000000c5693
uuid_00000000000c5691:
	push %RBP
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	jmp uuid_00000000000c568e
	jmp uuid_00000000000c5690
uuid_00000000000c568e:
	push %RBP
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq $0
	push %RBP
	mov -2104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5688
	jmp uuid_00000000000c568a
uuid_00000000000c5688:
	push %RBP
	mov -2096(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c567f
	jmp uuid_00000000000c5681
uuid_00000000000c567f:
	push %RBP
	mov -2160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5664
	jmp uuid_00000000000c5666
uuid_00000000000c5664:
	push %RBP
	mov -2224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5661
	jmp uuid_00000000000c5663
uuid_00000000000c5661:
	push %RBP
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	jmp uuid_00000000000c565e
	jmp uuid_00000000000c5660
uuid_00000000000c565e:
	movb $1, -2240(%rbp)
uuid_00000000000c5660:
	mov -2304(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000c5663:
	mov -2256(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000c5666:
	mov -2248(%RBP),%RSP
	add $-2328, %RSP
	mov -2240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c567c
	jmp uuid_00000000000c567e
uuid_00000000000c567c:
	push %RBP
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq $0
	push %RBP
	mov -2360(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5676
	jmp uuid_00000000000c5678
uuid_00000000000c5676:
	push %RBP
	mov -2352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c566d
	jmp uuid_00000000000c566f
uuid_00000000000c566d:
	push %RBP
	mov -2416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c566a
	jmp uuid_00000000000c566c
uuid_00000000000c566a:
	push %RBP
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	jmp uuid_00000000000c5667
	jmp uuid_00000000000c5669
uuid_00000000000c5667:
	movb $1, -2432(%rbp)
uuid_00000000000c5669:
	mov -2496(%RBP),%RSP
	add $-2520, %RSP
uuid_00000000000c566c:
	mov -2448(%RBP),%RSP
	add $-2520, %RSP
uuid_00000000000c566f:
	mov -2440(%RBP),%RSP
	add $-2520, %RSP
	mov -2432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5673
	jmp uuid_00000000000c5675
uuid_00000000000c5673:
	push %RBP
	mov -2344(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2536(%rbp)
	pushq $uuid_00000000000c4cdf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5670
	jmp uuid_00000000000c5672
uuid_00000000000c5670:
	movb $1, -2368(%rbp)
uuid_00000000000c5672:
	mov -2528(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000c5675:
	mov -2384(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000c5678:
	mov -2376(%RBP),%RSP
	add $-2536, %RSP
	mov -2368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5679
	jmp uuid_00000000000c567b
uuid_00000000000c5679:
	movb $1, -2176(%rbp)
uuid_00000000000c567b:
	mov -2336(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000c567e:
	mov -2192(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000c5681:
	mov -2184(%RBP),%RSP
	add $-2536, %RSP
	mov -2176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5685
	jmp uuid_00000000000c5687
uuid_00000000000c5685:
	push %RBP
	mov -2088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2552(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5682
	jmp uuid_00000000000c5684
uuid_00000000000c5682:
	movb $1, -2112(%rbp)
uuid_00000000000c5684:
	mov -2544(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000c5687:
	mov -2128(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000c568a:
	mov -2120(%RBP),%RSP
	add $-2552, %RSP
	mov -2112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c568b
	jmp uuid_00000000000c568d
uuid_00000000000c568b:
	movb $1, -2032(%rbp)
uuid_00000000000c568d:
	mov -2080(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000c5690:
	mov -2048(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000c5693:
	mov -2040(%RBP),%RSP
	add $-2552, %RSP
	mov -2032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5771
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -2616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c56ca
	jmp uuid_00000000000c56cc
uuid_00000000000c56ca:
	push %RBP
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c56af
	jmp uuid_00000000000c56b1
uuid_00000000000c56af:
	push %RBP
	mov -2656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2728(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c56a6
	jmp uuid_00000000000c56a8
uuid_00000000000c56a6:
	push %RBP
	mov -2720(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c569d
	jmp uuid_00000000000c569f
uuid_00000000000c569d:
	push %RBP
	mov -2784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c569a
	jmp uuid_00000000000c569c
uuid_00000000000c569a:
	push %RBP
	pushq -2760(%RBP)
	pushq -2768(%RBP)
	pushq -2776(%RBP)
	jmp uuid_00000000000c5697
	jmp uuid_00000000000c5699
uuid_00000000000c5697:
	movb $1, -2800(%rbp)
uuid_00000000000c5699:
	mov -2864(%RBP),%RSP
	add $-2888, %RSP
uuid_00000000000c569c:
	mov -2816(%RBP),%RSP
	add $-2888, %RSP
uuid_00000000000c569f:
	mov -2808(%RBP),%RSP
	add $-2888, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c56a3
	jmp uuid_00000000000c56a5
uuid_00000000000c56a3:
	push %RBP
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	jmp uuid_00000000000c56a0
	jmp uuid_00000000000c56a2
uuid_00000000000c56a0:
	movb $1, -2736(%rbp)
uuid_00000000000c56a2:
	mov -2896(%RBP),%RSP
	add $-2920, %RSP
uuid_00000000000c56a5:
	mov -2752(%RBP),%RSP
	add $-2920, %RSP
uuid_00000000000c56a8:
	mov -2744(%RBP),%RSP
	add $-2920, %RSP
	mov -2736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c56ac
	jmp uuid_00000000000c56ae
uuid_00000000000c56ac:
	push %RBP
	mov -2648(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2936(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c56a9
	jmp uuid_00000000000c56ab
uuid_00000000000c56a9:
	movb $1, -2672(%rbp)
uuid_00000000000c56ab:
	mov -2928(%RBP),%RSP
	add $-2936, %RSP
uuid_00000000000c56ae:
	mov -2688(%RBP),%RSP
	add $-2936, %RSP
uuid_00000000000c56b1:
	mov -2680(%RBP),%RSP
	add $-2936, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c56c7
	jmp uuid_00000000000c56c9
uuid_00000000000c56c7:
	push %RBP
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq $0
	push %RBP
	mov -2968(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c56c1
	jmp uuid_00000000000c56c3
uuid_00000000000c56c1:
	push %RBP
	mov -2960(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3032(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c56b8
	jmp uuid_00000000000c56ba
uuid_00000000000c56b8:
	push %RBP
	mov -3024(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3096(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c56b5
	jmp uuid_00000000000c56b7
uuid_00000000000c56b5:
	push %RBP
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	jmp uuid_00000000000c56b2
	jmp uuid_00000000000c56b4
uuid_00000000000c56b2:
	movb $1, -3040(%rbp)
uuid_00000000000c56b4:
	mov -3104(%RBP),%RSP
	add $-3128, %RSP
uuid_00000000000c56b7:
	mov -3056(%RBP),%RSP
	add $-3128, %RSP
uuid_00000000000c56ba:
	mov -3048(%RBP),%RSP
	add $-3128, %RSP
	mov -3040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c56be
	jmp uuid_00000000000c56c0
uuid_00000000000c56be:
	push %RBP
	mov -2952(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3144(%rbp)
	pushq $uuid_00000000000c4cdf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c56bb
	jmp uuid_00000000000c56bd
uuid_00000000000c56bb:
	movb $1, -2976(%rbp)
uuid_00000000000c56bd:
	mov -3136(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000c56c0:
	mov -2992(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000c56c3:
	mov -2984(%RBP),%RSP
	add $-3144, %RSP
	mov -2976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c56c4
	jmp uuid_00000000000c56c6
uuid_00000000000c56c4:
	movb $1, -2624(%rbp)
uuid_00000000000c56c6:
	mov -2944(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000c56c9:
	mov -2640(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000c56cc:
	mov -2632(%RBP),%RSP
	add $-3144, %RSP
	mov -2624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c576e
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -3208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c56f1
	jmp uuid_00000000000c56f3
uuid_00000000000c56f1:
	push %RBP
	pushq -3184(%RBP)
	pushq -3192(%RBP)
	pushq -3200(%RBP)
	pushq $0
	push %RBP
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c56d6
	jmp uuid_00000000000c56d8
uuid_00000000000c56d6:
	push %RBP
	mov -3248(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c56d3
	jmp uuid_00000000000c56d5
uuid_00000000000c56d3:
	push %RBP
	mov -3240(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3336(%rbp)
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c56d0
	jmp uuid_00000000000c56d2
uuid_00000000000c56d0:
	movb $1, -3264(%rbp)
uuid_00000000000c56d2:
	mov -3328(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000c56d5:
	mov -3280(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000c56d8:
	mov -3272(%RBP),%RSP
	add $-3336, %RSP
	mov -3264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c56ee
	jmp uuid_00000000000c56f0
uuid_00000000000c56ee:
	push %RBP
	pushq -3160(%RBP)
	pushq -3168(%RBP)
	pushq -3176(%RBP)
	pushq $0
	push %RBP
	mov -3368(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c56e8
	jmp uuid_00000000000c56ea
uuid_00000000000c56e8:
	push %RBP
	mov -3360(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3432(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c56df
	jmp uuid_00000000000c56e1
uuid_00000000000c56df:
	push %RBP
	mov -3424(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3496(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c56dc
	jmp uuid_00000000000c56de
uuid_00000000000c56dc:
	push %RBP
	pushq -3400(%RBP)
	pushq -3408(%RBP)
	pushq -3416(%RBP)
	jmp uuid_00000000000c56d9
	jmp uuid_00000000000c56db
uuid_00000000000c56d9:
	movb $1, -3440(%rbp)
uuid_00000000000c56db:
	mov -3504(%RBP),%RSP
	add $-3528, %RSP
uuid_00000000000c56de:
	mov -3456(%RBP),%RSP
	add $-3528, %RSP
uuid_00000000000c56e1:
	mov -3448(%RBP),%RSP
	add $-3528, %RSP
	mov -3440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c56e5
	jmp uuid_00000000000c56e7
uuid_00000000000c56e5:
	push %RBP
	mov -3352(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3544(%rbp)
	pushq $uuid_00000000000c4cdf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c56e2
	jmp uuid_00000000000c56e4
uuid_00000000000c56e2:
	movb $1, -3376(%rbp)
uuid_00000000000c56e4:
	mov -3536(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000c56e7:
	mov -3392(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000c56ea:
	mov -3384(%RBP),%RSP
	add $-3544, %RSP
	mov -3376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c56eb
	jmp uuid_00000000000c56ed
uuid_00000000000c56eb:
	movb $1, -3216(%rbp)
uuid_00000000000c56ed:
	mov -3344(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000c56f0:
	mov -3232(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000c56f3:
	mov -3224(%RBP),%RSP
	add $-3544, %RSP
	mov -3216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c576b
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -3608(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c570c
	jmp uuid_00000000000c570e
uuid_00000000000c570c:
	push %RBP
	pushq -3584(%RBP)
	pushq -3592(%RBP)
	pushq -3600(%RBP)
	jmp uuid_00000000000c5709
	jmp uuid_00000000000c570b
uuid_00000000000c5709:
	push %RBP
	pushq -3560(%RBP)
	pushq -3568(%RBP)
	pushq -3576(%RBP)
	pushq $0
	push %RBP
	mov -3688(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5703
	jmp uuid_00000000000c5705
uuid_00000000000c5703:
	push %RBP
	mov -3680(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c56fa
	jmp uuid_00000000000c56fc
uuid_00000000000c56fa:
	push %RBP
	mov -3744(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3816(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c56f7
	jmp uuid_00000000000c56f9
uuid_00000000000c56f7:
	push %RBP
	pushq -3720(%RBP)
	pushq -3728(%RBP)
	pushq -3736(%RBP)
	jmp uuid_00000000000c56f4
	jmp uuid_00000000000c56f6
uuid_00000000000c56f4:
	movb $1, -3760(%rbp)
uuid_00000000000c56f6:
	mov -3824(%RBP),%RSP
	add $-3848, %RSP
uuid_00000000000c56f9:
	mov -3776(%RBP),%RSP
	add $-3848, %RSP
uuid_00000000000c56fc:
	mov -3768(%RBP),%RSP
	add $-3848, %RSP
	mov -3760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5700
	jmp uuid_00000000000c5702
uuid_00000000000c5700:
	push %RBP
	mov -3672(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3864(%rbp)
	pushq $uuid_00000000000c4cdf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c56fd
	jmp uuid_00000000000c56ff
uuid_00000000000c56fd:
	movb $1, -3696(%rbp)
uuid_00000000000c56ff:
	mov -3856(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000c5702:
	mov -3712(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000c5705:
	mov -3704(%RBP),%RSP
	add $-3864, %RSP
	mov -3696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5706
	jmp uuid_00000000000c5708
uuid_00000000000c5706:
	movb $1, -3616(%rbp)
uuid_00000000000c5708:
	mov -3664(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000c570b:
	mov -3632(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000c570e:
	mov -3624(%RBP),%RSP
	add $-3864, %RSP
	mov -3616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5768
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -3928(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c573a
	jmp uuid_00000000000c573c
uuid_00000000000c573a:
	push %RBP
	pushq -3904(%RBP)
	pushq -3912(%RBP)
	pushq -3920(%RBP)
	pushq $0
	push %RBP
	mov -3976(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5715
	jmp uuid_00000000000c5717
uuid_00000000000c5715:
	push %RBP
	mov -3968(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4040(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5712
	jmp uuid_00000000000c5714
uuid_00000000000c5712:
	push %RBP
	mov -3960(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c570f
	jmp uuid_00000000000c5711
uuid_00000000000c570f:
	movb $1, -3984(%rbp)
uuid_00000000000c5711:
	mov -4048(%RBP),%RSP
	add $-4056, %RSP
uuid_00000000000c5714:
	mov -4000(%RBP),%RSP
	add $-4056, %RSP
uuid_00000000000c5717:
	mov -3992(%RBP),%RSP
	add $-4056, %RSP
	mov -3984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5737
	jmp uuid_00000000000c5739
uuid_00000000000c5737:
	push %RBP
	pushq -3880(%RBP)
	pushq -3888(%RBP)
	pushq -3896(%RBP)
	pushq $0
	push %RBP
	mov -4088(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5731
	jmp uuid_00000000000c5733
uuid_00000000000c5731:
	push %RBP
	mov -4080(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5727
	jmp uuid_00000000000c5729
uuid_00000000000c5727:
	push %RBP
	mov -4144(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5724
	jmp uuid_00000000000c5726
uuid_00000000000c5724:
	push %RBP
	pushq -4120(%RBP)
	pushq -4128(%RBP)
	pushq -4136(%RBP)
	pushq $0
	push %RBP
	mov -4248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c571e
	jmp uuid_00000000000c5720
uuid_00000000000c571e:
	push %RBP
	mov -4240(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c571b
	jmp uuid_00000000000c571d
uuid_00000000000c571b:
	push %RBP
	mov -4232(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5718
	jmp uuid_00000000000c571a
uuid_00000000000c5718:
	movb $1, -4256(%rbp)
uuid_00000000000c571a:
	mov -4320(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000c571d:
	mov -4272(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000c5720:
	mov -4264(%RBP),%RSP
	add $-4328, %RSP
	mov -4256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5721
	jmp uuid_00000000000c5723
uuid_00000000000c5721:
	movb $1, -4160(%rbp)
uuid_00000000000c5723:
	mov -4224(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000c5726:
	mov -4176(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000c5729:
	mov -4168(%RBP),%RSP
	add $-4328, %RSP
	mov -4160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c572e
	jmp uuid_00000000000c5730
uuid_00000000000c572e:
	push %RBP
	mov -4072(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4344(%rbp)
	pushq $uuid_00000000000c572a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c572b
	jmp uuid_00000000000c572d
uuid_00000000000c572b:
	movb $1, -4096(%rbp)
uuid_00000000000c572d:
	mov -4336(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000c5730:
	mov -4112(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000c5733:
	mov -4104(%RBP),%RSP
	add $-4344, %RSP
	mov -4096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5734
	jmp uuid_00000000000c5736
uuid_00000000000c5734:
	movb $1, -3936(%rbp)
uuid_00000000000c5736:
	mov -4064(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000c5739:
	mov -3952(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000c573c:
	mov -3944(%RBP),%RSP
	add $-4344, %RSP
	mov -3936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5765
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -4408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5758
	jmp uuid_00000000000c575a
uuid_00000000000c5758:
	push %RBP
	pushq -4384(%RBP)
	pushq -4392(%RBP)
	pushq -4400(%RBP)
	pushq $0
	push %RBP
	mov -4456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5746
	jmp uuid_00000000000c5748
uuid_00000000000c5746:
	push %RBP
	mov -4448(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5743
	jmp uuid_00000000000c5745
uuid_00000000000c5743:
	push %RBP
	mov -4440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5740
	jmp uuid_00000000000c5742
uuid_00000000000c5740:
	movb $1, -4464(%rbp)
uuid_00000000000c5742:
	mov -4528(%RBP),%RSP
	add $-4536, %RSP
uuid_00000000000c5745:
	mov -4480(%RBP),%RSP
	add $-4536, %RSP
uuid_00000000000c5748:
	mov -4472(%RBP),%RSP
	add $-4536, %RSP
	mov -4464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5755
	jmp uuid_00000000000c5757
uuid_00000000000c5755:
	push %RBP
	pushq -4360(%RBP)
	pushq -4368(%RBP)
	pushq -4376(%RBP)
	pushq $0
	push %RBP
	mov -4568(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c574f
	jmp uuid_00000000000c5751
uuid_00000000000c574f:
	push %RBP
	mov -4560(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c574c
	jmp uuid_00000000000c574e
uuid_00000000000c574c:
	push %RBP
	mov -4552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5749
	jmp uuid_00000000000c574b
uuid_00000000000c5749:
	movb $1, -4576(%rbp)
uuid_00000000000c574b:
	mov -4640(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000c574e:
	mov -4592(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000c5751:
	mov -4584(%RBP),%RSP
	add $-4648, %RSP
	mov -4576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5752
	jmp uuid_00000000000c5754
uuid_00000000000c5752:
	movb $1, -4416(%rbp)
uuid_00000000000c5754:
	mov -4544(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000c5757:
	mov -4432(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000c575a:
	mov -4424(%RBP),%RSP
	add $-4648, %RSP
	mov -4416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5762
	push %RBP
	jmp uuid_00000000000c575f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c575e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5761
uuid_00000000000c575f:
uuid_00000000000c5761:
	mov -4656(%RBP),%RSP
	add $-4656, %RSP
	jmp uuid_00000000000c5764
uuid_00000000000c5762:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4648(%rbp)
	pushq -4536(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c575b
	jmp uuid_00000000000c575d
uuid_00000000000c575b:
#call function can-unify : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c575d:
	mov -4656(%RBP),%RSP
	add $-4656, %RSP
uuid_00000000000c5764:
	mov -4352(%RBP),%RSP
	add $-4656, %RSP
	jmp uuid_00000000000c5767
uuid_00000000000c5765:
	push %RBP
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4328(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4056(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c573d
	jmp uuid_00000000000c573f
uuid_00000000000c573d:
	movq $1, -64(%rbp)
uuid_00000000000c573f:
	mov -4352(%RBP),%RSP
	add $-4352, %RSP
uuid_00000000000c5767:
	mov -3872(%RBP),%RSP
	add $-4352, %RSP
	jmp uuid_00000000000c576a
uuid_00000000000c5768:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3640(%rbp)
	pushq -3648(%rbp)
	pushq -3656(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c576a:
	mov -3552(%RBP),%RSP
	add $-3864, %RSP
	jmp uuid_00000000000c576d
uuid_00000000000c576b:
	movq $1, -64(%rbp)
uuid_00000000000c576d:
	mov -3152(%RBP),%RSP
	add $-3544, %RSP
	jmp uuid_00000000000c5770
uuid_00000000000c576e:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c56cd
	jmp uuid_00000000000c56cf
uuid_00000000000c56cd:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c56cf:
	mov -3152(%RBP),%RSP
	add $-3152, %RSP
uuid_00000000000c5770:
	mov -2560(%RBP),%RSP
	add $-3152, %RSP
	jmp uuid_00000000000c5773
uuid_00000000000c5771:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq -2520(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5694
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000c5696
uuid_00000000000c5694:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c5696:
	mov -2560(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c5773:
	mov -1968(%RBP),%RSP
	add $-2560, %RSP
	jmp uuid_00000000000c5776
uuid_00000000000c5774:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c565b
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000c565d
uuid_00000000000c565b:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c565d:
	mov -1968(%RBP),%RSP
	add $-1968, %RSP
uuid_00000000000c5776:
	mov -1104(%RBP),%RSP
	add $-1968, %RSP
	jmp uuid_00000000000c5779
uuid_00000000000c5777:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5604
	jmp uuid_00000000000c5606
uuid_00000000000c5604:
	movq $1, -64(%rbp)
uuid_00000000000c5606:
	mov -1104(%RBP),%RSP
	add $-1104, %RSP
	push %RBP
	mov -64(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5607
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000c5609
uuid_00000000000c5607:
uuid_00000000000c5609:
	mov -1112(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c5779:
	mov -880(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000c577c
uuid_00000000000c577a:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c55ef
	jmp uuid_00000000000c55f1
uuid_00000000000c55ef:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c55ec
	jmp uuid_00000000000c55ee
uuid_00000000000c55ec:
	movq $1, -64(%rbp)
uuid_00000000000c55ee:
	mov -888(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c55f1:
	mov -880(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c577c:
	mov -656(%RBP),%RSP
	add $-888, %RSP
	jmp uuid_00000000000c577f
uuid_00000000000c577d:
	movq $1, -64(%rbp)
uuid_00000000000c577f:
	mov -480(%RBP),%RSP
	add $-648, %RSP
	jmp uuid_00000000000c5782
uuid_00000000000c5780:
	movq $1, -64(%rbp)
uuid_00000000000c5782:
	mov -248(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000c5785
uuid_00000000000c5783:
	movq $1, -64(%rbp)
uuid_00000000000c5785:
	mov -128(%RBP),%RSP
	add $-240, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_CL_ArrowTContextConsTypeType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5786
	jmp uuid_00000000000c5788
uuid_00000000000c5786:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c5788:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	subq $120, %rsp
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_SB_inner_CL_ArrowTContextConsTypeType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c578f
	jmp uuid_00000000000c5791
uuid_00000000000c578f:
	push %RBP
	jmp uuid_00000000000c578c
	jmp uuid_00000000000c578e
uuid_00000000000c578c:
	push %RBP
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5789
	jmp uuid_00000000000c578b
uuid_00000000000c5789:
	movb $1, -304(%rbp)
uuid_00000000000c578b:
	mov -328(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c578e:
	mov -320(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c5791:
	mov -312(%RBP),%RSP
	add $-352, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c59c9
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c57a7
	jmp uuid_00000000000c57a9
uuid_00000000000c57a7:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5798
	jmp uuid_00000000000c579a
uuid_00000000000c5798:
	push %RBP
	mov -456(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5795
	jmp uuid_00000000000c5797
uuid_00000000000c5795:
	push %RBP
	mov -448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5792
	jmp uuid_00000000000c5794
uuid_00000000000c5792:
	movb $1, -472(%rbp)
uuid_00000000000c5794:
	mov -536(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c5797:
	mov -488(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c579a:
	mov -480(%RBP),%RSP
	add $-544, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c57a4
	jmp uuid_00000000000c57a6
uuid_00000000000c57a4:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c579e
	jmp uuid_00000000000c57a0
uuid_00000000000c579e:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c579b
	jmp uuid_00000000000c579d
uuid_00000000000c579b:
	movb $1, -584(%rbp)
uuid_00000000000c579d:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c57a0:
	mov -592(%RBP),%RSP
	add $-608, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c57a1
	jmp uuid_00000000000c57a3
uuid_00000000000c57a1:
	movb $1, -424(%rbp)
uuid_00000000000c57a3:
	mov -552(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c57a6:
	mov -440(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c57a9:
	mov -432(%RBP),%RSP
	add $-608, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c59c6
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c57c2
	jmp uuid_00000000000c57c4
uuid_00000000000c57c2:
	push %RBP
	jmp uuid_00000000000c57bf
	jmp uuid_00000000000c57c1
uuid_00000000000c57bf:
	push %RBP
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq $0
	push %RBP
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c57b9
	jmp uuid_00000000000c57bb
uuid_00000000000c57b9:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c57b0
	jmp uuid_00000000000c57b2
uuid_00000000000c57b0:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c57ad
	jmp uuid_00000000000c57af
uuid_00000000000c57ad:
	push %RBP
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	jmp uuid_00000000000c57aa
	jmp uuid_00000000000c57ac
uuid_00000000000c57aa:
	movb $1, -800(%rbp)
uuid_00000000000c57ac:
	mov -864(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c57af:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c57b2:
	mov -808(%RBP),%RSP
	add $-888, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c57b6
	jmp uuid_00000000000c57b8
uuid_00000000000c57b6:
	push %RBP
	mov -712(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq $uuid_00000000000c55b8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c57b3
	jmp uuid_00000000000c57b5
uuid_00000000000c57b3:
	movb $1, -736(%rbp)
uuid_00000000000c57b5:
	mov -896(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c57b8:
	mov -752(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c57bb:
	mov -744(%RBP),%RSP
	add $-904, %RSP
	mov -736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c57bc
	jmp uuid_00000000000c57be
uuid_00000000000c57bc:
	movb $1, -680(%rbp)
uuid_00000000000c57be:
	mov -704(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c57c1:
	mov -696(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c57c4:
	mov -688(%RBP),%RSP
	add $-904, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c59c3
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c57d1
	jmp uuid_00000000000c57d3
uuid_00000000000c57d1:
	push %RBP
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	jmp uuid_00000000000c57ce
	jmp uuid_00000000000c57d0
uuid_00000000000c57ce:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq $0
	push %RBP
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c57c8
	jmp uuid_00000000000c57ca
uuid_00000000000c57c8:
	push %RBP
	mov -1040(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c57c5
	jmp uuid_00000000000c57c7
uuid_00000000000c57c5:
	movb $1, -1056(%rbp)
uuid_00000000000c57c7:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c57ca:
	mov -1064(%RBP),%RSP
	add $-1080, %RSP
	mov -1056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c57cb
	jmp uuid_00000000000c57cd
uuid_00000000000c57cb:
	movb $1, -976(%rbp)
uuid_00000000000c57cd:
	mov -1024(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c57d0:
	mov -992(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c57d3:
	mov -984(%RBP),%RSP
	add $-1080, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c59c0
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -1144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c57e3
	jmp uuid_00000000000c57e5
uuid_00000000000c57e3:
	push %RBP
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	jmp uuid_00000000000c57e0
	jmp uuid_00000000000c57e2
uuid_00000000000c57e0:
	push %RBP
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq $0
	push %RBP
	mov -1224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c57da
	jmp uuid_00000000000c57dc
uuid_00000000000c57da:
	push %RBP
	mov -1216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c57d7
	jmp uuid_00000000000c57d9
uuid_00000000000c57d7:
	push %RBP
	mov -1208(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c57d4
	jmp uuid_00000000000c57d6
uuid_00000000000c57d4:
	movb $1, -1232(%rbp)
uuid_00000000000c57d6:
	mov -1280(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c57d9:
	mov -1248(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c57dc:
	mov -1240(%RBP),%RSP
	add $-1304, %RSP
	mov -1232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c57dd
	jmp uuid_00000000000c57df
uuid_00000000000c57dd:
	movb $1, -1152(%rbp)
uuid_00000000000c57df:
	mov -1200(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c57e2:
	mov -1168(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c57e5:
	mov -1160(%RBP),%RSP
	add $-1304, %RSP
	mov -1152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c59bd
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -1368(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c581a
	jmp uuid_00000000000c581c
uuid_00000000000c581a:
	push %RBP
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5811
	jmp uuid_00000000000c5813
uuid_00000000000c5811:
	push %RBP
	mov -1408(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c580e
	jmp uuid_00000000000c5810
uuid_00000000000c580e:
	push %RBP
	mov -1400(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c580b
	jmp uuid_00000000000c580d
uuid_00000000000c580b:
	movb $1, -1424(%rbp)
uuid_00000000000c580d:
	mov -1472(%RBP),%RSP
	add $-1496, %RSP
uuid_00000000000c5810:
	mov -1440(%RBP),%RSP
	add $-1496, %RSP
uuid_00000000000c5813:
	mov -1432(%RBP),%RSP
	add $-1496, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5817
	jmp uuid_00000000000c5819
uuid_00000000000c5817:
	push %RBP
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	jmp uuid_00000000000c5814
	jmp uuid_00000000000c5816
uuid_00000000000c5814:
	movb $1, -1376(%rbp)
uuid_00000000000c5816:
	mov -1504(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c5819:
	mov -1392(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c581c:
	mov -1384(%RBP),%RSP
	add $-1528, %RSP
	mov -1376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c59ba
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -1592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c589c
	jmp uuid_00000000000c589e
uuid_00000000000c589c:
	push %RBP
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5866
	jmp uuid_00000000000c5868
uuid_00000000000c5866:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1704(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c585d
	jmp uuid_00000000000c585f
uuid_00000000000c585d:
	push %RBP
	mov -1696(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5854
	jmp uuid_00000000000c5856
uuid_00000000000c5854:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1832(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5851
	jmp uuid_00000000000c5853
uuid_00000000000c5851:
	push %RBP
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	jmp uuid_00000000000c584e
	jmp uuid_00000000000c5850
uuid_00000000000c584e:
	movb $1, -1776(%rbp)
uuid_00000000000c5850:
	mov -1840(%RBP),%RSP
	add $-1864, %RSP
uuid_00000000000c5853:
	mov -1792(%RBP),%RSP
	add $-1864, %RSP
uuid_00000000000c5856:
	mov -1784(%RBP),%RSP
	add $-1864, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c585a
	jmp uuid_00000000000c585c
uuid_00000000000c585a:
	push %RBP
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	jmp uuid_00000000000c5857
	jmp uuid_00000000000c5859
uuid_00000000000c5857:
	movb $1, -1712(%rbp)
uuid_00000000000c5859:
	mov -1872(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c585c:
	mov -1728(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c585f:
	mov -1720(%RBP),%RSP
	add $-1896, %RSP
	mov -1712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5863
	jmp uuid_00000000000c5865
uuid_00000000000c5863:
	push %RBP
	mov -1624(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1912(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5860
	jmp uuid_00000000000c5862
uuid_00000000000c5860:
	movb $1, -1648(%rbp)
uuid_00000000000c5862:
	mov -1904(%RBP),%RSP
	add $-1912, %RSP
uuid_00000000000c5865:
	mov -1664(%RBP),%RSP
	add $-1912, %RSP
uuid_00000000000c5868:
	mov -1656(%RBP),%RSP
	add $-1912, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5899
	jmp uuid_00000000000c589b
uuid_00000000000c5899:
	push %RBP
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq $0
	push %RBP
	mov -1944(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5893
	jmp uuid_00000000000c5895
uuid_00000000000c5893:
	push %RBP
	mov -1936(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2008(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c588a
	jmp uuid_00000000000c588c
uuid_00000000000c588a:
	push %RBP
	mov -2000(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2072(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c586f
	jmp uuid_00000000000c5871
uuid_00000000000c586f:
	push %RBP
	mov -2064(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c586c
	jmp uuid_00000000000c586e
uuid_00000000000c586c:
	push %RBP
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	jmp uuid_00000000000c5869
	jmp uuid_00000000000c586b
uuid_00000000000c5869:
	movb $1, -2080(%rbp)
uuid_00000000000c586b:
	mov -2144(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000c586e:
	mov -2096(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000c5871:
	mov -2088(%RBP),%RSP
	add $-2168, %RSP
	mov -2080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5887
	jmp uuid_00000000000c5889
uuid_00000000000c5887:
	push %RBP
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq $0
	push %RBP
	mov -2200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5881
	jmp uuid_00000000000c5883
uuid_00000000000c5881:
	push %RBP
	mov -2192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5878
	jmp uuid_00000000000c587a
uuid_00000000000c5878:
	push %RBP
	mov -2256(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5875
	jmp uuid_00000000000c5877
uuid_00000000000c5875:
	push %RBP
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	jmp uuid_00000000000c5872
	jmp uuid_00000000000c5874
uuid_00000000000c5872:
	movb $1, -2272(%rbp)
uuid_00000000000c5874:
	mov -2336(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c5877:
	mov -2288(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c587a:
	mov -2280(%RBP),%RSP
	add $-2360, %RSP
	mov -2272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c587e
	jmp uuid_00000000000c5880
uuid_00000000000c587e:
	push %RBP
	mov -2184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2376(%rbp)
	pushq $uuid_00000000000c4cdf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c587b
	jmp uuid_00000000000c587d
uuid_00000000000c587b:
	movb $1, -2208(%rbp)
uuid_00000000000c587d:
	mov -2368(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000c5880:
	mov -2224(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000c5883:
	mov -2216(%RBP),%RSP
	add $-2376, %RSP
	mov -2208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5884
	jmp uuid_00000000000c5886
uuid_00000000000c5884:
	movb $1, -2016(%rbp)
uuid_00000000000c5886:
	mov -2176(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000c5889:
	mov -2032(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000c588c:
	mov -2024(%RBP),%RSP
	add $-2376, %RSP
	mov -2016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5890
	jmp uuid_00000000000c5892
uuid_00000000000c5890:
	push %RBP
	mov -1928(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2392(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c588d
	jmp uuid_00000000000c588f
uuid_00000000000c588d:
	movb $1, -1952(%rbp)
uuid_00000000000c588f:
	mov -2384(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000c5892:
	mov -1968(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000c5895:
	mov -1960(%RBP),%RSP
	add $-2392, %RSP
	mov -1952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5896
	jmp uuid_00000000000c5898
uuid_00000000000c5896:
	movb $1, -1600(%rbp)
uuid_00000000000c5898:
	mov -1920(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000c589b:
	mov -1616(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000c589e:
	mov -1608(%RBP),%RSP
	add $-2392, %RSP
	mov -1600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c59b7
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -2456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c58d5
	jmp uuid_00000000000c58d7
uuid_00000000000c58d5:
	push %RBP
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	jmp uuid_00000000000c58d2
	jmp uuid_00000000000c58d4
uuid_00000000000c58d2:
	push %RBP
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq $0
	push %RBP
	mov -2536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c58cc
	jmp uuid_00000000000c58ce
uuid_00000000000c58cc:
	push %RBP
	mov -2528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c58c3
	jmp uuid_00000000000c58c5
uuid_00000000000c58c3:
	push %RBP
	mov -2592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c58a8
	jmp uuid_00000000000c58aa
uuid_00000000000c58a8:
	push %RBP
	mov -2656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2728(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c58a5
	jmp uuid_00000000000c58a7
uuid_00000000000c58a5:
	push %RBP
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	jmp uuid_00000000000c58a2
	jmp uuid_00000000000c58a4
uuid_00000000000c58a2:
	movb $1, -2672(%rbp)
uuid_00000000000c58a4:
	mov -2736(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c58a7:
	mov -2688(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c58aa:
	mov -2680(%RBP),%RSP
	add $-2760, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c58c0
	jmp uuid_00000000000c58c2
uuid_00000000000c58c0:
	push %RBP
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c58ba
	jmp uuid_00000000000c58bc
uuid_00000000000c58ba:
	push %RBP
	mov -2784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c58b1
	jmp uuid_00000000000c58b3
uuid_00000000000c58b1:
	push %RBP
	mov -2848(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2920(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c58ae
	jmp uuid_00000000000c58b0
uuid_00000000000c58ae:
	push %RBP
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	jmp uuid_00000000000c58ab
	jmp uuid_00000000000c58ad
uuid_00000000000c58ab:
	movb $1, -2864(%rbp)
uuid_00000000000c58ad:
	mov -2928(%RBP),%RSP
	add $-2952, %RSP
uuid_00000000000c58b0:
	mov -2880(%RBP),%RSP
	add $-2952, %RSP
uuid_00000000000c58b3:
	mov -2872(%RBP),%RSP
	add $-2952, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c58b7
	jmp uuid_00000000000c58b9
uuid_00000000000c58b7:
	push %RBP
	mov -2776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2968(%rbp)
	pushq $uuid_00000000000c4cdf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c58b4
	jmp uuid_00000000000c58b6
uuid_00000000000c58b4:
	movb $1, -2800(%rbp)
uuid_00000000000c58b6:
	mov -2960(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000c58b9:
	mov -2816(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000c58bc:
	mov -2808(%RBP),%RSP
	add $-2968, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c58bd
	jmp uuid_00000000000c58bf
uuid_00000000000c58bd:
	movb $1, -2608(%rbp)
uuid_00000000000c58bf:
	mov -2768(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000c58c2:
	mov -2624(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000c58c5:
	mov -2616(%RBP),%RSP
	add $-2968, %RSP
	mov -2608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c58c9
	jmp uuid_00000000000c58cb
uuid_00000000000c58c9:
	push %RBP
	mov -2520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2984(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c58c6
	jmp uuid_00000000000c58c8
uuid_00000000000c58c6:
	movb $1, -2544(%rbp)
uuid_00000000000c58c8:
	mov -2976(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000c58cb:
	mov -2560(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000c58ce:
	mov -2552(%RBP),%RSP
	add $-2984, %RSP
	mov -2544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c58cf
	jmp uuid_00000000000c58d1
uuid_00000000000c58cf:
	movb $1, -2464(%rbp)
uuid_00000000000c58d1:
	mov -2512(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000c58d4:
	mov -2480(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000c58d7:
	mov -2472(%RBP),%RSP
	add $-2984, %RSP
	mov -2464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c59b4
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -3048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c590e
	jmp uuid_00000000000c5910
uuid_00000000000c590e:
	push %RBP
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq $0
	push %RBP
	mov -3096(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c58f3
	jmp uuid_00000000000c58f5
uuid_00000000000c58f3:
	push %RBP
	mov -3088(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c58ea
	jmp uuid_00000000000c58ec
uuid_00000000000c58ea:
	push %RBP
	mov -3152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c58e1
	jmp uuid_00000000000c58e3
uuid_00000000000c58e1:
	push %RBP
	mov -3216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c58de
	jmp uuid_00000000000c58e0
uuid_00000000000c58de:
	push %RBP
	pushq -3192(%RBP)
	pushq -3200(%RBP)
	pushq -3208(%RBP)
	jmp uuid_00000000000c58db
	jmp uuid_00000000000c58dd
uuid_00000000000c58db:
	movb $1, -3232(%rbp)
uuid_00000000000c58dd:
	mov -3296(%RBP),%RSP
	add $-3320, %RSP
uuid_00000000000c58e0:
	mov -3248(%RBP),%RSP
	add $-3320, %RSP
uuid_00000000000c58e3:
	mov -3240(%RBP),%RSP
	add $-3320, %RSP
	mov -3232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c58e7
	jmp uuid_00000000000c58e9
uuid_00000000000c58e7:
	push %RBP
	pushq -3128(%RBP)
	pushq -3136(%RBP)
	pushq -3144(%RBP)
	jmp uuid_00000000000c58e4
	jmp uuid_00000000000c58e6
uuid_00000000000c58e4:
	movb $1, -3168(%rbp)
uuid_00000000000c58e6:
	mov -3328(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000c58e9:
	mov -3184(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000c58ec:
	mov -3176(%RBP),%RSP
	add $-3352, %RSP
	mov -3168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c58f0
	jmp uuid_00000000000c58f2
uuid_00000000000c58f0:
	push %RBP
	mov -3080(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3368(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c58ed
	jmp uuid_00000000000c58ef
uuid_00000000000c58ed:
	movb $1, -3104(%rbp)
uuid_00000000000c58ef:
	mov -3360(%RBP),%RSP
	add $-3368, %RSP
uuid_00000000000c58f2:
	mov -3120(%RBP),%RSP
	add $-3368, %RSP
uuid_00000000000c58f5:
	mov -3112(%RBP),%RSP
	add $-3368, %RSP
	mov -3104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c590b
	jmp uuid_00000000000c590d
uuid_00000000000c590b:
	push %RBP
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq $0
	push %RBP
	mov -3400(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5905
	jmp uuid_00000000000c5907
uuid_00000000000c5905:
	push %RBP
	mov -3392(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c58fc
	jmp uuid_00000000000c58fe
uuid_00000000000c58fc:
	push %RBP
	mov -3456(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3528(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c58f9
	jmp uuid_00000000000c58fb
uuid_00000000000c58f9:
	push %RBP
	pushq -3432(%RBP)
	pushq -3440(%RBP)
	pushq -3448(%RBP)
	jmp uuid_00000000000c58f6
	jmp uuid_00000000000c58f8
uuid_00000000000c58f6:
	movb $1, -3472(%rbp)
uuid_00000000000c58f8:
	mov -3536(%RBP),%RSP
	add $-3560, %RSP
uuid_00000000000c58fb:
	mov -3488(%RBP),%RSP
	add $-3560, %RSP
uuid_00000000000c58fe:
	mov -3480(%RBP),%RSP
	add $-3560, %RSP
	mov -3472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5902
	jmp uuid_00000000000c5904
uuid_00000000000c5902:
	push %RBP
	mov -3384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3576(%rbp)
	pushq $uuid_00000000000c4cdf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c58ff
	jmp uuid_00000000000c5901
uuid_00000000000c58ff:
	movb $1, -3408(%rbp)
uuid_00000000000c5901:
	mov -3568(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000c5904:
	mov -3424(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000c5907:
	mov -3416(%RBP),%RSP
	add $-3576, %RSP
	mov -3408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5908
	jmp uuid_00000000000c590a
uuid_00000000000c5908:
	movb $1, -3056(%rbp)
uuid_00000000000c590a:
	mov -3376(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000c590d:
	mov -3072(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000c5910:
	mov -3064(%RBP),%RSP
	add $-3576, %RSP
	mov -3056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c59b1
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -3640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5935
	jmp uuid_00000000000c5937
uuid_00000000000c5935:
	push %RBP
	pushq -3616(%RBP)
	pushq -3624(%RBP)
	pushq -3632(%RBP)
	pushq $0
	push %RBP
	mov -3688(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c591a
	jmp uuid_00000000000c591c
uuid_00000000000c591a:
	push %RBP
	mov -3680(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5917
	jmp uuid_00000000000c5919
uuid_00000000000c5917:
	push %RBP
	mov -3672(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3768(%rbp)
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5914
	jmp uuid_00000000000c5916
uuid_00000000000c5914:
	movb $1, -3696(%rbp)
uuid_00000000000c5916:
	mov -3760(%RBP),%RSP
	add $-3768, %RSP
uuid_00000000000c5919:
	mov -3712(%RBP),%RSP
	add $-3768, %RSP
uuid_00000000000c591c:
	mov -3704(%RBP),%RSP
	add $-3768, %RSP
	mov -3696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5932
	jmp uuid_00000000000c5934
uuid_00000000000c5932:
	push %RBP
	pushq -3592(%RBP)
	pushq -3600(%RBP)
	pushq -3608(%RBP)
	pushq $0
	push %RBP
	mov -3800(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c592c
	jmp uuid_00000000000c592e
uuid_00000000000c592c:
	push %RBP
	mov -3792(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5923
	jmp uuid_00000000000c5925
uuid_00000000000c5923:
	push %RBP
	mov -3856(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3928(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5920
	jmp uuid_00000000000c5922
uuid_00000000000c5920:
	push %RBP
	pushq -3832(%RBP)
	pushq -3840(%RBP)
	pushq -3848(%RBP)
	jmp uuid_00000000000c591d
	jmp uuid_00000000000c591f
uuid_00000000000c591d:
	movb $1, -3872(%rbp)
uuid_00000000000c591f:
	mov -3936(%RBP),%RSP
	add $-3960, %RSP
uuid_00000000000c5922:
	mov -3888(%RBP),%RSP
	add $-3960, %RSP
uuid_00000000000c5925:
	mov -3880(%RBP),%RSP
	add $-3960, %RSP
	mov -3872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5929
	jmp uuid_00000000000c592b
uuid_00000000000c5929:
	push %RBP
	mov -3784(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3976(%rbp)
	pushq $uuid_00000000000c4cdf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5926
	jmp uuid_00000000000c5928
uuid_00000000000c5926:
	movb $1, -3808(%rbp)
uuid_00000000000c5928:
	mov -3968(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000c592b:
	mov -3824(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000c592e:
	mov -3816(%RBP),%RSP
	add $-3976, %RSP
	mov -3808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c592f
	jmp uuid_00000000000c5931
uuid_00000000000c592f:
	movb $1, -3648(%rbp)
uuid_00000000000c5931:
	mov -3776(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000c5934:
	mov -3664(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000c5937:
	mov -3656(%RBP),%RSP
	add $-3976, %RSP
	mov -3648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c59ae
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -4040(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5950
	jmp uuid_00000000000c5952
uuid_00000000000c5950:
	push %RBP
	pushq -4016(%RBP)
	pushq -4024(%RBP)
	pushq -4032(%RBP)
	jmp uuid_00000000000c594d
	jmp uuid_00000000000c594f
uuid_00000000000c594d:
	push %RBP
	pushq -3992(%RBP)
	pushq -4000(%RBP)
	pushq -4008(%RBP)
	pushq $0
	push %RBP
	mov -4120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5947
	jmp uuid_00000000000c5949
uuid_00000000000c5947:
	push %RBP
	mov -4112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c593e
	jmp uuid_00000000000c5940
uuid_00000000000c593e:
	push %RBP
	mov -4176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c593b
	jmp uuid_00000000000c593d
uuid_00000000000c593b:
	push %RBP
	pushq -4152(%RBP)
	pushq -4160(%RBP)
	pushq -4168(%RBP)
	jmp uuid_00000000000c5938
	jmp uuid_00000000000c593a
uuid_00000000000c5938:
	movb $1, -4192(%rbp)
uuid_00000000000c593a:
	mov -4256(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c593d:
	mov -4208(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c5940:
	mov -4200(%RBP),%RSP
	add $-4280, %RSP
	mov -4192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5944
	jmp uuid_00000000000c5946
uuid_00000000000c5944:
	push %RBP
	mov -4104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4296(%rbp)
	pushq $uuid_00000000000c4cdf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5941
	jmp uuid_00000000000c5943
uuid_00000000000c5941:
	movb $1, -4128(%rbp)
uuid_00000000000c5943:
	mov -4288(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000c5946:
	mov -4144(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000c5949:
	mov -4136(%RBP),%RSP
	add $-4296, %RSP
	mov -4128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c594a
	jmp uuid_00000000000c594c
uuid_00000000000c594a:
	movb $1, -4048(%rbp)
uuid_00000000000c594c:
	mov -4096(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000c594f:
	mov -4064(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000c5952:
	mov -4056(%RBP),%RSP
	add $-4296, %RSP
	mov -4048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c59ab
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -4360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c597d
	jmp uuid_00000000000c597f
uuid_00000000000c597d:
	push %RBP
	pushq -4336(%RBP)
	pushq -4344(%RBP)
	pushq -4352(%RBP)
	pushq $0
	push %RBP
	mov -4408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5959
	jmp uuid_00000000000c595b
uuid_00000000000c5959:
	push %RBP
	mov -4400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5956
	jmp uuid_00000000000c5958
uuid_00000000000c5956:
	push %RBP
	mov -4392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5953
	jmp uuid_00000000000c5955
uuid_00000000000c5953:
	movb $1, -4416(%rbp)
uuid_00000000000c5955:
	mov -4480(%RBP),%RSP
	add $-4488, %RSP
uuid_00000000000c5958:
	mov -4432(%RBP),%RSP
	add $-4488, %RSP
uuid_00000000000c595b:
	mov -4424(%RBP),%RSP
	add $-4488, %RSP
	mov -4416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c597a
	jmp uuid_00000000000c597c
uuid_00000000000c597a:
	push %RBP
	pushq -4312(%RBP)
	pushq -4320(%RBP)
	pushq -4328(%RBP)
	pushq $0
	push %RBP
	mov -4520(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5974
	jmp uuid_00000000000c5976
uuid_00000000000c5974:
	push %RBP
	mov -4512(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4584(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c596b
	jmp uuid_00000000000c596d
uuid_00000000000c596b:
	push %RBP
	mov -4576(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4648(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5968
	jmp uuid_00000000000c596a
uuid_00000000000c5968:
	push %RBP
	pushq -4552(%RBP)
	pushq -4560(%RBP)
	pushq -4568(%RBP)
	pushq $0
	push %RBP
	mov -4680(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5962
	jmp uuid_00000000000c5964
uuid_00000000000c5962:
	push %RBP
	mov -4672(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4744(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c595f
	jmp uuid_00000000000c5961
uuid_00000000000c595f:
	push %RBP
	mov -4664(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c595c
	jmp uuid_00000000000c595e
uuid_00000000000c595c:
	movb $1, -4688(%rbp)
uuid_00000000000c595e:
	mov -4752(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000c5961:
	mov -4704(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000c5964:
	mov -4696(%RBP),%RSP
	add $-4760, %RSP
	mov -4688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5965
	jmp uuid_00000000000c5967
uuid_00000000000c5965:
	movb $1, -4592(%rbp)
uuid_00000000000c5967:
	mov -4656(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000c596a:
	mov -4608(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000c596d:
	mov -4600(%RBP),%RSP
	add $-4760, %RSP
	mov -4592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5971
	jmp uuid_00000000000c5973
uuid_00000000000c5971:
	push %RBP
	mov -4504(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4776(%rbp)
	pushq $uuid_00000000000c572a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c596e
	jmp uuid_00000000000c5970
uuid_00000000000c596e:
	movb $1, -4528(%rbp)
uuid_00000000000c5970:
	mov -4768(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000c5973:
	mov -4544(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000c5976:
	mov -4536(%RBP),%RSP
	add $-4776, %RSP
	mov -4528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5977
	jmp uuid_00000000000c5979
uuid_00000000000c5977:
	movb $1, -4368(%rbp)
uuid_00000000000c5979:
	mov -4496(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000c597c:
	mov -4384(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000c597f:
	mov -4376(%RBP),%RSP
	add $-4776, %RSP
	mov -4368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c59a8
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -4840(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c599b
	jmp uuid_00000000000c599d
uuid_00000000000c599b:
	push %RBP
	pushq -4816(%RBP)
	pushq -4824(%RBP)
	pushq -4832(%RBP)
	pushq $0
	push %RBP
	mov -4888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5989
	jmp uuid_00000000000c598b
uuid_00000000000c5989:
	push %RBP
	mov -4880(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5986
	jmp uuid_00000000000c5988
uuid_00000000000c5986:
	push %RBP
	mov -4872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5983
	jmp uuid_00000000000c5985
uuid_00000000000c5983:
	movb $1, -4896(%rbp)
uuid_00000000000c5985:
	mov -4960(%RBP),%RSP
	add $-4968, %RSP
uuid_00000000000c5988:
	mov -4912(%RBP),%RSP
	add $-4968, %RSP
uuid_00000000000c598b:
	mov -4904(%RBP),%RSP
	add $-4968, %RSP
	mov -4896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5998
	jmp uuid_00000000000c599a
uuid_00000000000c5998:
	push %RBP
	pushq -4792(%RBP)
	pushq -4800(%RBP)
	pushq -4808(%RBP)
	pushq $0
	push %RBP
	mov -5000(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5992
	jmp uuid_00000000000c5994
uuid_00000000000c5992:
	push %RBP
	mov -4992(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c598f
	jmp uuid_00000000000c5991
uuid_00000000000c598f:
	push %RBP
	mov -4984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c598c
	jmp uuid_00000000000c598e
uuid_00000000000c598c:
	movb $1, -5008(%rbp)
uuid_00000000000c598e:
	mov -5072(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000c5991:
	mov -5024(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000c5994:
	mov -5016(%RBP),%RSP
	add $-5080, %RSP
	mov -5008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5995
	jmp uuid_00000000000c5997
uuid_00000000000c5995:
	movb $1, -4848(%rbp)
uuid_00000000000c5997:
	mov -4976(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000c599a:
	mov -4864(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000c599d:
	mov -4856(%RBP),%RSP
	add $-5080, %RSP
	mov -4848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c59a5
	push %RBP
	jmp uuid_00000000000c59a2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c59a1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c59a4
uuid_00000000000c59a2:
uuid_00000000000c59a4:
	mov -5088(%RBP),%RSP
	add $-5088, %RSP
	jmp uuid_00000000000c59a7
uuid_00000000000c59a5:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5080(%rbp)
	pushq -4968(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c599e
	jmp uuid_00000000000c59a0
uuid_00000000000c599e:
#call function unify : Arrow<Cons<List<Type>,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c59a0:
	mov -5088(%RBP),%RSP
	add $-5088, %RSP
uuid_00000000000c59a7:
	mov -4784(%RBP),%RSP
	add $-5088, %RSP
	jmp uuid_00000000000c59aa
uuid_00000000000c59a8:
	push %RBP
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4760(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4488(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5980
	jmp uuid_00000000000c5982
uuid_00000000000c5980:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c5982:
	mov -4784(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000c59aa:
	mov -4304(%RBP),%RSP
	add $-4784, %RSP
	jmp uuid_00000000000c59ad
uuid_00000000000c59ab:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c59ad:
	mov -3984(%RBP),%RSP
	add $-4296, %RSP
	jmp uuid_00000000000c59b0
uuid_00000000000c59ae:
uuid_00000000000c59b0:
	mov -3584(%RBP),%RSP
	add $-3976, %RSP
	jmp uuid_00000000000c59b3
uuid_00000000000c59b1:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5911
	jmp uuid_00000000000c5913
uuid_00000000000c5911:
#call function and : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -3304(%rbp)
	pushq -3312(%rbp)
	pushq -3320(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c5913:
	mov -3584(%RBP),%RSP
	add $-3584, %RSP
uuid_00000000000c59b3:
	mov -2992(%RBP),%RSP
	add $-3584, %RSP
	jmp uuid_00000000000c59b6
uuid_00000000000c59b4:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c58d8
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c58da
uuid_00000000000c58d8:
#call function and : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c58da:
	mov -2992(%RBP),%RSP
	add $-2992, %RSP
uuid_00000000000c59b6:
	mov -2400(%RBP),%RSP
	add $-2992, %RSP
	jmp uuid_00000000000c59b9
uuid_00000000000c59b7:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c589f
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c58a1
uuid_00000000000c589f:
#call function and : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c58a1:
	mov -2400(%RBP),%RSP
	add $-2400, %RSP
uuid_00000000000c59b9:
	mov -1536(%RBP),%RSP
	add $-2400, %RSP
	jmp uuid_00000000000c59bc
uuid_00000000000c59ba:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -2032(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5823
	jmp uuid_00000000000c5825
uuid_00000000000c5823:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	mov -2176(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5820
	jmp uuid_00000000000c5822
uuid_00000000000c5820:
	push %RBP
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	mov -2304(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c581d
	jmp uuid_00000000000c581f
uuid_00000000000c581d:
	movb $1, -2040(%rbp)
uuid_00000000000c581f:
	mov -2184(%RBP),%RSP
	add $-2304, %RSP
uuid_00000000000c5822:
	mov -2056(%RBP),%RSP
	add $-2304, %RSP
uuid_00000000000c5825:
	mov -2048(%RBP),%RSP
	add $-2304, %RSP
	mov -2040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c584b
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c582c
	jmp uuid_00000000000c582e
uuid_00000000000c582c:
	push %RBP
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	mov -2704(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5829
	jmp uuid_00000000000c582b
uuid_00000000000c5829:
	push %RBP
	pushq -2320(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	jmp uuid_00000000000c5826
	jmp uuid_00000000000c5828
uuid_00000000000c5826:
	movb $1, -2568(%rbp)
uuid_00000000000c5828:
	mov -2712(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c582b:
	mov -2584(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c582e:
	mov -2576(%RBP),%RSP
	add $-2832, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5848
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -3088(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5835
	jmp uuid_00000000000c5837
uuid_00000000000c5835:
	push %RBP
	pushq -2968(%RBP)
	pushq -2976(%RBP)
	pushq -2984(%RBP)
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq -3048(%RBP)
	pushq -3056(%RBP)
	pushq -3064(%RBP)
	pushq -3072(%RBP)
	pushq -3080(%RBP)
	jmp uuid_00000000000c5832
	jmp uuid_00000000000c5834
uuid_00000000000c5832:
	push %RBP
	pushq -2848(%RBP)
	pushq -2856(%RBP)
	pushq -2864(%RBP)
	pushq -2872(%RBP)
	pushq -2880(%RBP)
	pushq -2888(%RBP)
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq -2952(%RBP)
	pushq -2960(%RBP)
	mov -3360(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c582f
	jmp uuid_00000000000c5831
uuid_00000000000c582f:
	movb $1, -3096(%rbp)
uuid_00000000000c5831:
	mov -3240(%RBP),%RSP
	add $-3360, %RSP
uuid_00000000000c5834:
	mov -3112(%RBP),%RSP
	add $-3360, %RSP
uuid_00000000000c5837:
	mov -3104(%RBP),%RSP
	add $-3360, %RSP
	mov -3096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5845
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -3616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c583e
	jmp uuid_00000000000c5840
uuid_00000000000c583e:
	push %RBP
	pushq -3496(%RBP)
	pushq -3504(%RBP)
	pushq -3512(%RBP)
	pushq -3520(%RBP)
	pushq -3528(%RBP)
	pushq -3536(%RBP)
	pushq -3544(%RBP)
	pushq -3552(%RBP)
	pushq -3560(%RBP)
	pushq -3568(%RBP)
	pushq -3576(%RBP)
	pushq -3584(%RBP)
	pushq -3592(%RBP)
	pushq -3600(%RBP)
	pushq -3608(%RBP)
	jmp uuid_00000000000c583b
	jmp uuid_00000000000c583d
uuid_00000000000c583b:
	push %RBP
	pushq -3376(%RBP)
	pushq -3384(%RBP)
	pushq -3392(%RBP)
	pushq -3400(%RBP)
	pushq -3408(%RBP)
	pushq -3416(%RBP)
	pushq -3424(%RBP)
	pushq -3432(%RBP)
	pushq -3440(%RBP)
	pushq -3448(%RBP)
	pushq -3456(%RBP)
	pushq -3464(%RBP)
	pushq -3472(%RBP)
	pushq -3480(%RBP)
	pushq -3488(%RBP)
	jmp uuid_00000000000c5838
	jmp uuid_00000000000c583a
uuid_00000000000c5838:
	movb $1, -3624(%rbp)
uuid_00000000000c583a:
	mov -3768(%RBP),%RSP
	add $-3888, %RSP
uuid_00000000000c583d:
	mov -3640(%RBP),%RSP
	add $-3888, %RSP
uuid_00000000000c5840:
	mov -3632(%RBP),%RSP
	add $-3888, %RSP
	mov -3624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5842
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5841
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5844
uuid_00000000000c5842:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -3800(%rbp)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3648(%rbp)
	pushq -3656(%rbp)
	pushq -3664(%rbp)
	pushq -3672(%rbp)
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	pushq -3752(%rbp)
	pushq -3760(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c5844:
	mov -3368(%RBP),%RSP
	add $-3888, %RSP
	jmp uuid_00000000000c5847
uuid_00000000000c5845:
	movq -3232(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -3224(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -3216(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -3208(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -3200(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -3192(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -3184(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -3176(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -3168(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -3160(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -3152(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -3144(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -3136(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -3128(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -3120(%rbp), %r15
	movq %r15, -64(%rbp)
uuid_00000000000c5847:
	mov -2840(%RBP),%RSP
	add $-3360, %RSP
	jmp uuid_00000000000c584a
uuid_00000000000c5848:
	movq -2832(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -2824(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -2816(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -2808(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -2800(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -2792(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -2784(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -2776(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2768(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2760(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2752(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2744(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -2736(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -2728(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2720(%rbp), %r15
	movq %r15, -64(%rbp)
uuid_00000000000c584a:
	mov -2312(%RBP),%RSP
	add $-2832, %RSP
	jmp uuid_00000000000c584d
uuid_00000000000c584b:
uuid_00000000000c584d:
	mov -1784(%RBP),%RSP
	add $-2304, %RSP
uuid_00000000000c59bc:
	mov -1312(%RBP),%RSP
	add $-2304, %RSP
	jmp uuid_00000000000c59bf
uuid_00000000000c59bd:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	push %RBP
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	push %RBP
	mov -1808(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c57ec
	jmp uuid_00000000000c57ee
uuid_00000000000c57ec:
	push %RBP
	jmp uuid_00000000000c57e9
	jmp uuid_00000000000c57eb
uuid_00000000000c57e9:
	push %RBP
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	mov -1960(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c57e6
	jmp uuid_00000000000c57e8
uuid_00000000000c57e6:
	movb $1, -1816(%rbp)
uuid_00000000000c57e8:
	mov -1840(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c57eb:
	mov -1832(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c57ee:
	mov -1824(%RBP),%RSP
	add $-1960, %RSP
	mov -1816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5808
	push %RBP
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	push %RBP
	mov -2216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c57f5
	jmp uuid_00000000000c57f7
uuid_00000000000c57f5:
	push %RBP
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	mov -2360(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c57f2
	jmp uuid_00000000000c57f4
uuid_00000000000c57f2:
	push %RBP
	jmp uuid_00000000000c57ef
	jmp uuid_00000000000c57f1
uuid_00000000000c57ef:
	movb $1, -2224(%rbp)
uuid_00000000000c57f1:
	mov -2368(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000c57f4:
	mov -2240(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000c57f7:
	mov -2232(%RBP),%RSP
	add $-2368, %RSP
	mov -2224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5805
	push %RBP
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	push %RBP
	mov -2624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c57fe
	jmp uuid_00000000000c5800
uuid_00000000000c57fe:
	push %RBP
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	jmp uuid_00000000000c57fb
	jmp uuid_00000000000c57fd
uuid_00000000000c57fb:
	push %RBP
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	jmp uuid_00000000000c57f8
	jmp uuid_00000000000c57fa
uuid_00000000000c57f8:
	movb $1, -2632(%rbp)
uuid_00000000000c57fa:
	mov -2776(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c57fd:
	mov -2648(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c5800:
	mov -2640(%RBP),%RSP
	add $-2896, %RSP
	mov -2632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5802
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5801
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5804
uuid_00000000000c5802:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	pushq -2856(%rbp)
	pushq -2864(%rbp)
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	pushq -2696(%rbp)
	pushq -2704(%rbp)
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c5804:
	mov -2376(%RBP),%RSP
	add $-2896, %RSP
	jmp uuid_00000000000c5807
uuid_00000000000c5805:
uuid_00000000000c5807:
	mov -1968(%RBP),%RSP
	add $-2368, %RSP
	jmp uuid_00000000000c580a
uuid_00000000000c5808:
uuid_00000000000c580a:
	mov -1560(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c59bf:
	mov -1088(%RBP),%RSP
	add $-1960, %RSP
	jmp uuid_00000000000c59c2
uuid_00000000000c59c0:
#call function close : Arrow<TContext+CaseNumber<2>,Array<TContext+CaseNumber<2>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextCaseNumber2TContextCaseNumber2
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1080(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c59c2:
	mov -912(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000c59c5
uuid_00000000000c59c3:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c59c5:
	mov -616(%RBP),%RSP
	add $-904, %RSP
	jmp uuid_00000000000c59c8
uuid_00000000000c59c6:
#call function close : Arrow<TContext+CaseNumber<2>,Array<TContext+CaseNumber<2>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextCaseNumber2TContextCaseNumber2
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -608(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -544(%rbp)
#call function token::new : Arrow<String,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	mov %RBX, %RBP
	call token_CL__CL_new_CL_ArrowTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $6
	pushq $0
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c59c8:
	mov -360(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000c59cb
uuid_00000000000c59c9:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c59cb:
	mov -240(%RBP),%RSP
	add $-352, %RSP
	subq $120, %rsp
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_CL_ArrowTContextConsListTypeListType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c59db
	jmp uuid_00000000000c59dd
uuid_00000000000c59db:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c59d8
	jmp uuid_00000000000c59da
uuid_00000000000c59d8:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c59d5
	jmp uuid_00000000000c59d7
uuid_00000000000c59d5:
	movb $1, -400(%rbp)
uuid_00000000000c59d7:
	mov -464(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c59da:
	mov -416(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c59dd:
	mov -408(%RBP),%RSP
	add $-504, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a03
	push %RBP
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c59f6
	jmp uuid_00000000000c59f8
uuid_00000000000c59f6:
	push %RBP
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c59e4
	jmp uuid_00000000000c59e6
uuid_00000000000c59e4:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c59e1
	jmp uuid_00000000000c59e3
uuid_00000000000c59e1:
	push %RBP
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	jmp uuid_00000000000c59de
	jmp uuid_00000000000c59e0
uuid_00000000000c59de:
	movb $1, -672(%rbp)
uuid_00000000000c59e0:
	mov -736(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c59e3:
	mov -688(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c59e6:
	mov -680(%RBP),%RSP
	add $-760, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c59f3
	jmp uuid_00000000000c59f5
uuid_00000000000c59f3:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq $0
	push %RBP
	mov -808(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c59ed
	jmp uuid_00000000000c59ef
uuid_00000000000c59ed:
	push %RBP
	mov -800(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c59ea
	jmp uuid_00000000000c59ec
uuid_00000000000c59ea:
	push %RBP
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	jmp uuid_00000000000c59e7
	jmp uuid_00000000000c59e9
uuid_00000000000c59e7:
	movb $1, -816(%rbp)
uuid_00000000000c59e9:
	mov -880(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c59ec:
	mov -832(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c59ef:
	mov -824(%RBP),%RSP
	add $-904, %RSP
	mov -816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c59f0
	jmp uuid_00000000000c59f2
uuid_00000000000c59f0:
	movb $1, -608(%rbp)
uuid_00000000000c59f2:
	mov -768(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c59f5:
	mov -624(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c59f8:
	mov -616(%RBP),%RSP
	add $-904, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a00
	push %RBP
	jmp uuid_00000000000c59fd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c59fc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c59ff
uuid_00000000000c59fd:
uuid_00000000000c59ff:
	mov -912(%RBP),%RSP
	add $-912, %RSP
	jmp uuid_00000000000c5a02
uuid_00000000000c5a00:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	push %RBP
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c59f9
	jmp uuid_00000000000c59fb
uuid_00000000000c59f9:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
#call function unify : Arrow<Cons<List<Type>,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
uuid_00000000000c59fb:
	mov -912(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c5a02:
	mov -512(%RBP),%RSP
	add $-912, %RSP
	jmp uuid_00000000000c5a05
uuid_00000000000c5a03:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
uuid_00000000000c5a05:
	mov -304(%RBP),%RSP
	add $-504, %RSP
	subq $120, %rsp
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
fields_SB_of_SB_type_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a38
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a1e
	jmp uuid_00000000000c5a20
uuid_00000000000c5a1e:
	push %RBP
	mov -112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a15
	jmp uuid_00000000000c5a17
uuid_00000000000c5a15:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a0c
	jmp uuid_00000000000c5a0e
uuid_00000000000c5a0c:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a09
	jmp uuid_00000000000c5a0b
uuid_00000000000c5a09:
	push %RBP
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	jmp uuid_00000000000c5a06
	jmp uuid_00000000000c5a08
uuid_00000000000c5a06:
	movb $1, -256(%rbp)
uuid_00000000000c5a08:
	mov -320(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c5a0b:
	mov -272(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c5a0e:
	mov -264(%RBP),%RSP
	add $-344, %RSP
	mov -256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a12
	jmp uuid_00000000000c5a14
uuid_00000000000c5a12:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000c5a0f
	jmp uuid_00000000000c5a11
uuid_00000000000c5a0f:
	movb $1, -192(%rbp)
uuid_00000000000c5a11:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c5a14:
	mov -208(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c5a17:
	mov -200(%RBP),%RSP
	add $-376, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a1b
	jmp uuid_00000000000c5a1d
uuid_00000000000c5a1b:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5a18
	jmp uuid_00000000000c5a1a
uuid_00000000000c5a18:
	movb $1, -128(%rbp)
uuid_00000000000c5a1a:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c5a1d:
	mov -144(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c5a20:
	mov -136(%RBP),%RSP
	add $-392, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a35
	push %RBP
	jmp uuid_00000000000c5a32
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5a31
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5a34
uuid_00000000000c5a32:
	pushq $uuid_00000000000c4d94
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5a34:
	mov -400(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c5a37
uuid_00000000000c5a35:
	pushq $uuid_00000000000c4d94
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fields-of-type : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call fields_SB_of_SB_type_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5a37:
	mov -96(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c5a3a
uuid_00000000000c5a38:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5a3a:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
sizeof_SB_type_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b0a
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a3e
	jmp uuid_00000000000c5a40
uuid_00000000000c5a3e:
	push %RBP
	jmp uuid_00000000000c5a3b
	jmp uuid_00000000000c5a3d
uuid_00000000000c5a3b:
	movb $1, -136(%rbp)
uuid_00000000000c5a3d:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c5a40:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b07
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a47
	jmp uuid_00000000000c5a49
uuid_00000000000c5a47:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a44
	jmp uuid_00000000000c5a46
uuid_00000000000c5a44:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5a41
	jmp uuid_00000000000c5a43
uuid_00000000000c5a41:
	movb $1, -192(%rbp)
uuid_00000000000c5a43:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c5a46:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c5a49:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b04
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a62
	jmp uuid_00000000000c5a64
uuid_00000000000c5a62:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a59
	jmp uuid_00000000000c5a5b
uuid_00000000000c5a59:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a56
	jmp uuid_00000000000c5a58
uuid_00000000000c5a56:
	push %RBP
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a50
	jmp uuid_00000000000c5a52
uuid_00000000000c5a50:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a4d
	jmp uuid_00000000000c5a4f
uuid_00000000000c5a4d:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5a4a
	jmp uuid_00000000000c5a4c
uuid_00000000000c5a4a:
	movb $1, -464(%rbp)
uuid_00000000000c5a4c:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c5a4f:
	mov -480(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c5a52:
	mov -472(%RBP),%RSP
	add $-536, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a53
	jmp uuid_00000000000c5a55
uuid_00000000000c5a53:
	movb $1, -368(%rbp)
uuid_00000000000c5a55:
	mov -432(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c5a58:
	mov -384(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c5a5b:
	mov -376(%RBP),%RSP
	add $-536, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a5f
	jmp uuid_00000000000c5a61
uuid_00000000000c5a5f:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq $uuid_00000000000c4fce
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5a5c
	jmp uuid_00000000000c5a5e
uuid_00000000000c5a5c:
	movb $1, -304(%rbp)
uuid_00000000000c5a5e:
	mov -544(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c5a61:
	mov -320(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c5a64:
	mov -312(%RBP),%RSP
	add $-552, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b01
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a7d
	jmp uuid_00000000000c5a7f
uuid_00000000000c5a7d:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a74
	jmp uuid_00000000000c5a76
uuid_00000000000c5a74:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a6b
	jmp uuid_00000000000c5a6d
uuid_00000000000c5a6b:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a68
	jmp uuid_00000000000c5a6a
uuid_00000000000c5a68:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	jmp uuid_00000000000c5a65
	jmp uuid_00000000000c5a67
uuid_00000000000c5a65:
	movb $1, -720(%rbp)
uuid_00000000000c5a67:
	mov -784(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c5a6a:
	mov -736(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c5a6d:
	mov -728(%RBP),%RSP
	add $-808, %RSP
	mov -720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a71
	jmp uuid_00000000000c5a73
uuid_00000000000c5a71:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	mov -840(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a6e
	jmp uuid_00000000000c5a70
uuid_00000000000c5a6e:
	movb $1, -656(%rbp)
uuid_00000000000c5a70:
	mov -816(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c5a73:
	mov -672(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c5a76:
	mov -664(%RBP),%RSP
	add $-840, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a7a
	jmp uuid_00000000000c5a7c
uuid_00000000000c5a7a:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq $uuid_00000000000c4ae9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5a77
	jmp uuid_00000000000c5a79
uuid_00000000000c5a77:
	movb $1, -592(%rbp)
uuid_00000000000c5a79:
	mov -848(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000c5a7c:
	mov -608(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000c5a7f:
	mov -600(%RBP),%RSP
	add $-856, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5afe
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a98
	jmp uuid_00000000000c5a9a
uuid_00000000000c5a98:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a8f
	jmp uuid_00000000000c5a91
uuid_00000000000c5a8f:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a86
	jmp uuid_00000000000c5a88
uuid_00000000000c5a86:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1080(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a83
	jmp uuid_00000000000c5a85
uuid_00000000000c5a83:
	push %RBP
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	jmp uuid_00000000000c5a80
	jmp uuid_00000000000c5a82
uuid_00000000000c5a80:
	movb $1, -1024(%rbp)
uuid_00000000000c5a82:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c5a85:
	mov -1040(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c5a88:
	mov -1032(%RBP),%RSP
	add $-1112, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a8c
	jmp uuid_00000000000c5a8e
uuid_00000000000c5a8c:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000c5a89
	jmp uuid_00000000000c5a8b
uuid_00000000000c5a89:
	movb $1, -960(%rbp)
uuid_00000000000c5a8b:
	mov -1120(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000c5a8e:
	mov -976(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000c5a91:
	mov -968(%RBP),%RSP
	add $-1144, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a95
	jmp uuid_00000000000c5a97
uuid_00000000000c5a95:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5a92
	jmp uuid_00000000000c5a94
uuid_00000000000c5a92:
	movb $1, -896(%rbp)
uuid_00000000000c5a94:
	mov -1152(%RBP),%RSP
	add $-1160, %RSP
uuid_00000000000c5a97:
	mov -912(%RBP),%RSP
	add $-1160, %RSP
uuid_00000000000c5a9a:
	mov -904(%RBP),%RSP
	add $-1160, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5afb
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5abc
	jmp uuid_00000000000c5abe
uuid_00000000000c5abc:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ab3
	jmp uuid_00000000000c5ab5
uuid_00000000000c5ab3:
	push %RBP
	mov -1248(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5aa1
	jmp uuid_00000000000c5aa3
uuid_00000000000c5aa1:
	push %RBP
	mov -1312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5a9e
	jmp uuid_00000000000c5aa0
uuid_00000000000c5a9e:
	push %RBP
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	jmp uuid_00000000000c5a9b
	jmp uuid_00000000000c5a9d
uuid_00000000000c5a9b:
	movb $1, -1328(%rbp)
uuid_00000000000c5a9d:
	mov -1392(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000c5aa0:
	mov -1344(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000c5aa3:
	mov -1336(%RBP),%RSP
	add $-1416, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ab0
	jmp uuid_00000000000c5ab2
uuid_00000000000c5ab0:
	push %RBP
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq $0
	push %RBP
	mov -1448(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5aaa
	jmp uuid_00000000000c5aac
uuid_00000000000c5aaa:
	push %RBP
	mov -1440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5aa7
	jmp uuid_00000000000c5aa9
uuid_00000000000c5aa7:
	push %RBP
	mov -1432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5aa4
	jmp uuid_00000000000c5aa6
uuid_00000000000c5aa4:
	movb $1, -1456(%rbp)
uuid_00000000000c5aa6:
	mov -1520(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c5aa9:
	mov -1472(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c5aac:
	mov -1464(%RBP),%RSP
	add $-1528, %RSP
	mov -1456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5aad
	jmp uuid_00000000000c5aaf
uuid_00000000000c5aad:
	movb $1, -1264(%rbp)
uuid_00000000000c5aaf:
	mov -1424(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c5ab2:
	mov -1280(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c5ab5:
	mov -1272(%RBP),%RSP
	add $-1528, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ab9
	jmp uuid_00000000000c5abb
uuid_00000000000c5ab9:
	push %RBP
	mov -1176(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1544(%rbp)
	pushq $uuid_00000000000c52c0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5ab6
	jmp uuid_00000000000c5ab8
uuid_00000000000c5ab6:
	movb $1, -1200(%rbp)
uuid_00000000000c5ab8:
	mov -1536(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c5abb:
	mov -1216(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c5abe:
	mov -1208(%RBP),%RSP
	add $-1544, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5af8
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1576(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ac5
	jmp uuid_00000000000c5ac7
uuid_00000000000c5ac5:
	push %RBP
	jmp uuid_00000000000c5ac2
	jmp uuid_00000000000c5ac4
uuid_00000000000c5ac2:
	push %RBP
	mov -1560(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5abf
	jmp uuid_00000000000c5ac1
uuid_00000000000c5abf:
	movb $1, -1584(%rbp)
uuid_00000000000c5ac1:
	mov -1608(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c5ac4:
	mov -1600(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c5ac7:
	mov -1592(%RBP),%RSP
	add $-1616, %RSP
	mov -1584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5af5
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1648(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ae7
	jmp uuid_00000000000c5ae9
uuid_00000000000c5ae7:
	push %RBP
	mov -1640(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5ae4
	jmp uuid_00000000000c5ae6
uuid_00000000000c5ae4:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5ae1
	jmp uuid_00000000000c5ae3
uuid_00000000000c5ae1:
	movb $1, -1656(%rbp)
uuid_00000000000c5ae3:
	mov -1704(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c5ae6:
	mov -1672(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c5ae9:
	mov -1664(%RBP),%RSP
	add $-1728, %RSP
	mov -1656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5af2
	push %RBP
	jmp uuid_00000000000c5aef
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5aee
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5af1
uuid_00000000000c5aef:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5aed
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c5af1:
	mov -1736(%RBP),%RSP
	add $-1736, %RSP
	jmp uuid_00000000000c5af4
uuid_00000000000c5af2:
	push %RBP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5aea
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	jmp uuid_00000000000c5aec
uuid_00000000000c5aea:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c5aec:
	mov -1736(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c5af4:
	mov -1624(%RBP),%RSP
	add $-1736, %RSP
	jmp uuid_00000000000c5af7
uuid_00000000000c5af5:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_complex_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -1616(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push %RBP
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq $0
	push %RBP
	mov -1736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ace
	jmp uuid_00000000000c5ad0
uuid_00000000000c5ace:
	push %RBP
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5acb
	jmp uuid_00000000000c5acd
uuid_00000000000c5acb:
	push %RBP
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	mov -1816(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ac8
	jmp uuid_00000000000c5aca
uuid_00000000000c5ac8:
	movb $1, -1744(%rbp)
uuid_00000000000c5aca:
	mov -1792(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c5acd:
	mov -1760(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c5ad0:
	mov -1752(%RBP),%RSP
	add $-1816, %RSP
	mov -1744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ade
	push %RBP
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq $0
	push %RBP
	mov -1880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ad7
	jmp uuid_00000000000c5ad9
uuid_00000000000c5ad7:
	push %RBP
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	jmp uuid_00000000000c5ad4
	jmp uuid_00000000000c5ad6
uuid_00000000000c5ad4:
	push %RBP
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	jmp uuid_00000000000c5ad1
	jmp uuid_00000000000c5ad3
uuid_00000000000c5ad1:
	movb $1, -1888(%rbp)
uuid_00000000000c5ad3:
	mov -1936(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c5ad6:
	mov -1904(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c5ad9:
	mov -1896(%RBP),%RSP
	add $-1960, %RSP
	mov -1888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5adb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5ada
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5add
uuid_00000000000c5adb:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov $8, %RAX
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c5add:
	mov -1824(%RBP),%RSP
	add $-2104, %RSP
	jmp uuid_00000000000c5ae0
uuid_00000000000c5ade:
uuid_00000000000c5ae0:
	mov -1680(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c5af7:
	mov -1552(%RBP),%RSP
	add $-1816, %RSP
	jmp uuid_00000000000c5afa
uuid_00000000000c5af8:
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1528(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	mul %R14
	movq %RAX, -40(%rbp)
uuid_00000000000c5afa:
	mov -1168(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000c5afd
uuid_00000000000c5afb:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c5afd:
	mov -864(%RBP),%RSP
	add $-1160, %RSP
	jmp uuid_00000000000c5b00
uuid_00000000000c5afe:
	movq $8, -40(%rbp)
uuid_00000000000c5b00:
	mov -560(%RBP),%RSP
	add $-856, %RSP
	jmp uuid_00000000000c5b03
uuid_00000000000c5b01:
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c5b03:
	mov -272(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000c5b06
uuid_00000000000c5b04:
#call function size-of-class : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call size_SB_of_SB_class_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c5b06:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c5b09
uuid_00000000000c5b07:
uuid_00000000000c5b09:
	mov -104(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c5b0c
uuid_00000000000c5b0a:
uuid_00000000000c5b0c:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
sizeof_SB_aligned_CL_ArrowU64Type:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b0d
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $8
	pushq -40(%rbp)
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	jmp uuid_00000000000c5b0f
uuid_00000000000c5b0d:
uuid_00000000000c5b0f:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
has_SB_infinite_CL_ArrowU64ConsU64ConsListTypeConsU64ConsStringType:
	pushq $0
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b28
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b1b
	jmp uuid_00000000000c5b1d
uuid_00000000000c5b1b:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5b18
	jmp uuid_00000000000c5b1a
uuid_00000000000c5b18:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000c5b15
	jmp uuid_00000000000c5b17
uuid_00000000000c5b15:
	movb $1, -248(%rbp)
uuid_00000000000c5b17:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c5b1a:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c5b1d:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b25
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5b24
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5b27
uuid_00000000000c5b25:
	push %RBP
#call function is-parameter-flat : Arrow<Cons<Cons<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_SB_parameter_SB_flat_CL_ArrowU64ConsU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5b21
	jmp uuid_00000000000c5b23
uuid_00000000000c5b21:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5b1e
	jmp uuid_00000000000c5b20
uuid_00000000000c5b1e:
	movq $1, -104(%rbp)
uuid_00000000000c5b20:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c5b23:
	mov -344(%RBP),%RSP
	add $-352, %RSP
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-infinite : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -104(%rbp)
uuid_00000000000c5b27:
	mov -200(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c5b2a
uuid_00000000000c5b28:
uuid_00000000000c5b2a:
	mov -152(%RBP),%RSP
	add $-192, %RSP
	mov -104(%rbp), %RAX
	mov %rbp, %rsp
	sub $96, %rsp
	ret
has_SB_infinite_CL_ArrowU64ConsTypeType:
	pushq $0
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b31
	jmp uuid_00000000000c5b33
uuid_00000000000c5b31:
	push %RBP
	jmp uuid_00000000000c5b2e
	jmp uuid_00000000000c5b30
uuid_00000000000c5b2e:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000c4ae9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5b2b
	jmp uuid_00000000000c5b2d
uuid_00000000000c5b2b:
	movb $1, -128(%rbp)
uuid_00000000000c5b2d:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c5b30:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c5b33:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b8c
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b4c
	jmp uuid_00000000000c5b4e
uuid_00000000000c5b4c:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b43
	jmp uuid_00000000000c5b45
uuid_00000000000c5b43:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b3a
	jmp uuid_00000000000c5b3c
uuid_00000000000c5b3a:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b37
	jmp uuid_00000000000c5b39
uuid_00000000000c5b37:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	jmp uuid_00000000000c5b34
	jmp uuid_00000000000c5b36
uuid_00000000000c5b34:
	movb $1, -328(%rbp)
uuid_00000000000c5b36:
	mov -392(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c5b39:
	mov -344(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c5b3c:
	mov -336(%RBP),%RSP
	add $-416, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b40
	jmp uuid_00000000000c5b42
uuid_00000000000c5b40:
	push %RBP
	jmp uuid_00000000000c5b3d
	jmp uuid_00000000000c5b3f
uuid_00000000000c5b3d:
	movb $1, -264(%rbp)
uuid_00000000000c5b3f:
	mov -424(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c5b42:
	mov -280(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c5b45:
	mov -272(%RBP),%RSP
	add $-424, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b49
	jmp uuid_00000000000c5b4b
uuid_00000000000c5b49:
	push %RBP
	mov -176(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq $uuid_00000000000c52c0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5b46
	jmp uuid_00000000000c5b48
uuid_00000000000c5b46:
	movb $1, -200(%rbp)
uuid_00000000000c5b48:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c5b4b:
	mov -216(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c5b4e:
	mov -208(%RBP),%RSP
	add $-440, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b89
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b67
	jmp uuid_00000000000c5b69
uuid_00000000000c5b67:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b5e
	jmp uuid_00000000000c5b60
uuid_00000000000c5b5e:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b55
	jmp uuid_00000000000c5b57
uuid_00000000000c5b55:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b52
	jmp uuid_00000000000c5b54
uuid_00000000000c5b52:
	push %RBP
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	jmp uuid_00000000000c5b4f
	jmp uuid_00000000000c5b51
uuid_00000000000c5b4f:
	movb $1, -608(%rbp)
uuid_00000000000c5b51:
	mov -672(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000c5b54:
	mov -624(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000c5b57:
	mov -616(%RBP),%RSP
	add $-696, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b5b
	jmp uuid_00000000000c5b5d
uuid_00000000000c5b5b:
	push %RBP
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	jmp uuid_00000000000c5b58
	jmp uuid_00000000000c5b5a
uuid_00000000000c5b58:
	movb $1, -544(%rbp)
uuid_00000000000c5b5a:
	mov -704(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c5b5d:
	mov -560(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c5b60:
	mov -552(%RBP),%RSP
	add $-728, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b64
	jmp uuid_00000000000c5b66
uuid_00000000000c5b64:
	push %RBP
	mov -456(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -744(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5b61
	jmp uuid_00000000000c5b63
uuid_00000000000c5b61:
	movb $1, -480(%rbp)
uuid_00000000000c5b63:
	mov -736(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000c5b66:
	mov -496(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000c5b69:
	mov -488(%RBP),%RSP
	add $-744, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b86
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b70
	jmp uuid_00000000000c5b72
uuid_00000000000c5b70:
	push %RBP
	mov -768(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5b6d
	jmp uuid_00000000000c5b6f
uuid_00000000000c5b6d:
	push %RBP
	mov -760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5b6a
	jmp uuid_00000000000c5b6c
uuid_00000000000c5b6a:
	movb $1, -784(%rbp)
uuid_00000000000c5b6c:
	mov -848(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000c5b6f:
	mov -800(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000c5b72:
	mov -792(%RBP),%RSP
	add $-856, %RSP
	mov -784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b83
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b79
	jmp uuid_00000000000c5b7b
uuid_00000000000c5b79:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5b76
	jmp uuid_00000000000c5b78
uuid_00000000000c5b76:
	push %RBP
	mov -872(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5b73
	jmp uuid_00000000000c5b75
uuid_00000000000c5b73:
	movb $1, -896(%rbp)
uuid_00000000000c5b75:
	mov -944(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c5b78:
	mov -912(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c5b7b:
	mov -904(%RBP),%RSP
	add $-968, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b80
	push %RBP
	jmp uuid_00000000000c5b7d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5b7c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5b7f
uuid_00000000000c5b7d:
uuid_00000000000c5b7f:
	mov -976(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000c5b82
uuid_00000000000c5b80:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c5b82:
	mov -864(%RBP),%RSP
	add $-968, %RSP
	jmp uuid_00000000000c5b85
uuid_00000000000c5b83:
#call function has-infinite : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq $1
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c5b85:
	mov -752(%RBP),%RSP
	add $-856, %RSP
	jmp uuid_00000000000c5b88
uuid_00000000000c5b86:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c5b88:
	mov -448(%RBP),%RSP
	add $-744, %RSP
	jmp uuid_00000000000c5b8b
uuid_00000000000c5b89:
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000c5b8b:
	mov -168(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000c5b8e
uuid_00000000000c5b8c:
uuid_00000000000c5b8e:
	mov -96(%RBP),%RSP
	add $-160, %RSP
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5b8f
	jmp uuid_00000000000c5b91
uuid_00000000000c5b8f:
	movq $1, -64(%rbp)
uuid_00000000000c5b91:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
has_SB_forward_CL_ArrowU64ListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ba3
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5b9c
	jmp uuid_00000000000c5b9e
uuid_00000000000c5b9c:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5b99
	jmp uuid_00000000000c5b9b
uuid_00000000000c5b99:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000c5b96
	jmp uuid_00000000000c5b98
uuid_00000000000c5b96:
	movb $1, -200(%rbp)
uuid_00000000000c5b98:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c5b9b:
	mov -216(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c5b9e:
	mov -208(%RBP),%RSP
	add $-288, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ba0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5b9f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5ba2
uuid_00000000000c5ba0:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-forward : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -56(%rbp)
uuid_00000000000c5ba2:
	mov -152(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c5ba5
uuid_00000000000c5ba3:
uuid_00000000000c5ba5:
	mov -104(%RBP),%RSP
	add $-144, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
has_SB_forward_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5bac
	jmp uuid_00000000000c5bae
uuid_00000000000c5bac:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5ba9
	jmp uuid_00000000000c5bab
uuid_00000000000c5ba9:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000c4ae9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5ba6
	jmp uuid_00000000000c5ba8
uuid_00000000000c5ba6:
	movb $1, -104(%rbp)
uuid_00000000000c5ba8:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5bab:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5bae:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5bf8
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5bb5
	jmp uuid_00000000000c5bb7
uuid_00000000000c5bb5:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5bb2
	jmp uuid_00000000000c5bb4
uuid_00000000000c5bb2:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5baf
	jmp uuid_00000000000c5bb1
uuid_00000000000c5baf:
	movb $1, -216(%rbp)
uuid_00000000000c5bb1:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c5bb4:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c5bb7:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5bf5
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5bd0
	jmp uuid_00000000000c5bd2
uuid_00000000000c5bd0:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5bc7
	jmp uuid_00000000000c5bc9
uuid_00000000000c5bc7:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5bbe
	jmp uuid_00000000000c5bc0
uuid_00000000000c5bbe:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5bbb
	jmp uuid_00000000000c5bbd
uuid_00000000000c5bbb:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000c5bb8
	jmp uuid_00000000000c5bba
uuid_00000000000c5bb8:
	movb $1, -456(%rbp)
uuid_00000000000c5bba:
	mov -520(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c5bbd:
	mov -472(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c5bc0:
	mov -464(%RBP),%RSP
	add $-544, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5bc4
	jmp uuid_00000000000c5bc6
uuid_00000000000c5bc4:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	jmp uuid_00000000000c5bc1
	jmp uuid_00000000000c5bc3
uuid_00000000000c5bc1:
	movb $1, -392(%rbp)
uuid_00000000000c5bc3:
	mov -552(%RBP),%RSP
	add $-576, %RSP
uuid_00000000000c5bc6:
	mov -408(%RBP),%RSP
	add $-576, %RSP
uuid_00000000000c5bc9:
	mov -400(%RBP),%RSP
	add $-576, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5bcd
	jmp uuid_00000000000c5bcf
uuid_00000000000c5bcd:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000c52c0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5bca
	jmp uuid_00000000000c5bcc
uuid_00000000000c5bca:
	movb $1, -328(%rbp)
uuid_00000000000c5bcc:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c5bcf:
	mov -344(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c5bd2:
	mov -336(%RBP),%RSP
	add $-592, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5bf2
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5bd9
	jmp uuid_00000000000c5bdb
uuid_00000000000c5bd9:
	push %RBP
	mov -616(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5bd6
	jmp uuid_00000000000c5bd8
uuid_00000000000c5bd6:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5bd3
	jmp uuid_00000000000c5bd5
uuid_00000000000c5bd3:
	movb $1, -632(%rbp)
uuid_00000000000c5bd5:
	mov -696(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000c5bd8:
	mov -648(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000c5bdb:
	mov -640(%RBP),%RSP
	add $-704, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5bef
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5be5
	jmp uuid_00000000000c5be7
uuid_00000000000c5be5:
	push %RBP
	mov -728(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5be2
	jmp uuid_00000000000c5be4
uuid_00000000000c5be2:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5bdf
	jmp uuid_00000000000c5be1
uuid_00000000000c5bdf:
	movb $1, -744(%rbp)
uuid_00000000000c5be1:
	mov -792(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c5be4:
	mov -760(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c5be7:
	mov -752(%RBP),%RSP
	add $-816, %RSP
	mov -744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5bec
	push %RBP
	jmp uuid_00000000000c5be9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5be8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5beb
uuid_00000000000c5be9:
uuid_00000000000c5beb:
	mov -824(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000c5bee
uuid_00000000000c5bec:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c5bee:
	mov -712(%RBP),%RSP
	add $-816, %RSP
	jmp uuid_00000000000c5bf1
uuid_00000000000c5bef:
#call function has-forward : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	push %RBP
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -704(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5bdc
	jmp uuid_00000000000c5bde
uuid_00000000000c5bdc:
	movq $1, -40(%rbp)
uuid_00000000000c5bde:
	mov -712(%RBP),%RSP
	add $-712, %RSP
uuid_00000000000c5bf1:
	mov -600(%RBP),%RSP
	add $-712, %RSP
	jmp uuid_00000000000c5bf4
uuid_00000000000c5bf2:
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c5bf4:
	mov -296(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000c5bf7
uuid_00000000000c5bf5:
#call function has-forward : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c5bf7:
	mov -184(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c5bfa
uuid_00000000000c5bf8:
uuid_00000000000c5bfa:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg8_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000c5bfb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c3c
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000c5bfc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c39
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000c5bfd
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c36
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000c5bfe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c33
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000c5bff
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c30
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000c5c00
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c2d
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000c5c01
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c2a
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000c5c02
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c27
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000c5c03
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c24
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000c5c04
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c21
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c5c05
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c1e
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000c5c06
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c1b
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c5c07
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c18
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000c5c08
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c15
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000c5c09
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c12
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000c5c0a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c0f
	push %RBP
	jmp uuid_00000000000c5c0c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5c0b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5c0e
uuid_00000000000c5c0c:
uuid_00000000000c5c0e:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c5c11
uuid_00000000000c5c0f:
	movq $1, -24(%rbp)
uuid_00000000000c5c11:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c5c14
uuid_00000000000c5c12:
	movq $1, -24(%rbp)
uuid_00000000000c5c14:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c5c17
uuid_00000000000c5c15:
	movq $1, -24(%rbp)
uuid_00000000000c5c17:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c5c1a
uuid_00000000000c5c18:
	movq $1, -24(%rbp)
uuid_00000000000c5c1a:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c5c1d
uuid_00000000000c5c1b:
	movq $1, -24(%rbp)
uuid_00000000000c5c1d:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c5c20
uuid_00000000000c5c1e:
	movq $1, -24(%rbp)
uuid_00000000000c5c20:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c5c23
uuid_00000000000c5c21:
	movq $1, -24(%rbp)
uuid_00000000000c5c23:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c5c26
uuid_00000000000c5c24:
	movq $1, -24(%rbp)
uuid_00000000000c5c26:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c5c29
uuid_00000000000c5c27:
	movq $1, -24(%rbp)
uuid_00000000000c5c29:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c5c2c
uuid_00000000000c5c2a:
	movq $1, -24(%rbp)
uuid_00000000000c5c2c:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c5c2f
uuid_00000000000c5c2d:
	movq $1, -24(%rbp)
uuid_00000000000c5c2f:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c5c32
uuid_00000000000c5c30:
	movq $1, -24(%rbp)
uuid_00000000000c5c32:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c5c35
uuid_00000000000c5c33:
	movq $1, -24(%rbp)
uuid_00000000000c5c35:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c5c38
uuid_00000000000c5c36:
	movq $1, -24(%rbp)
uuid_00000000000c5c38:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c5c3b
uuid_00000000000c5c39:
	movq $1, -24(%rbp)
uuid_00000000000c5c3b:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c5c3e
uuid_00000000000c5c3c:
	movq $1, -24(%rbp)
uuid_00000000000c5c3e:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg8_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5c45
	jmp uuid_00000000000c5c47
uuid_00000000000c5c45:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5c42
	jmp uuid_00000000000c5c44
uuid_00000000000c5c42:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5c3f
	jmp uuid_00000000000c5c41
uuid_00000000000c5c3f:
	movb $1, -104(%rbp)
uuid_00000000000c5c41:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5c44:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5c47:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5c58
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5c4e
	jmp uuid_00000000000c5c50
uuid_00000000000c5c4e:
	push %RBP
	jmp uuid_00000000000c5c4b
	jmp uuid_00000000000c5c4d
uuid_00000000000c5c4b:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c4ea1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c48
	jmp uuid_00000000000c5c4a
uuid_00000000000c5c48:
	movb $1, -216(%rbp)
uuid_00000000000c5c4a:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c5c4d:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c5c50:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5c55
	push %RBP
	jmp uuid_00000000000c5c52
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5c51
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5c54
uuid_00000000000c5c52:
uuid_00000000000c5c54:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c5c57
uuid_00000000000c5c55:
	movq $1, -40(%rbp)
uuid_00000000000c5c57:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c5c5a
uuid_00000000000c5c58:
#call function is-reg8 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg8 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c5c5a:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg16_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000c5c5b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c9c
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000c5c5c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c99
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000c5c5d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c96
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000c5c5e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c93
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000c5c5f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c90
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000c5c60
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c8d
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000c5c61
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c8a
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000c5c62
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c87
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000c5c63
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c84
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000c5c64
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c81
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c5c65
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c7e
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000c5c66
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c7b
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c5c67
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c78
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000c5c68
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c75
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000c5c69
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c72
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000c5c6a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5c6f
	push %RBP
	jmp uuid_00000000000c5c6c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5c6b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5c6e
uuid_00000000000c5c6c:
uuid_00000000000c5c6e:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c5c71
uuid_00000000000c5c6f:
	movq $1, -24(%rbp)
uuid_00000000000c5c71:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c5c74
uuid_00000000000c5c72:
	movq $1, -24(%rbp)
uuid_00000000000c5c74:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c5c77
uuid_00000000000c5c75:
	movq $1, -24(%rbp)
uuid_00000000000c5c77:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c5c7a
uuid_00000000000c5c78:
	movq $1, -24(%rbp)
uuid_00000000000c5c7a:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c5c7d
uuid_00000000000c5c7b:
	movq $1, -24(%rbp)
uuid_00000000000c5c7d:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c5c80
uuid_00000000000c5c7e:
	movq $1, -24(%rbp)
uuid_00000000000c5c80:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c5c83
uuid_00000000000c5c81:
	movq $1, -24(%rbp)
uuid_00000000000c5c83:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c5c86
uuid_00000000000c5c84:
	movq $1, -24(%rbp)
uuid_00000000000c5c86:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c5c89
uuid_00000000000c5c87:
	movq $1, -24(%rbp)
uuid_00000000000c5c89:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c5c8c
uuid_00000000000c5c8a:
	movq $1, -24(%rbp)
uuid_00000000000c5c8c:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c5c8f
uuid_00000000000c5c8d:
	movq $1, -24(%rbp)
uuid_00000000000c5c8f:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c5c92
uuid_00000000000c5c90:
	movq $1, -24(%rbp)
uuid_00000000000c5c92:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c5c95
uuid_00000000000c5c93:
	movq $1, -24(%rbp)
uuid_00000000000c5c95:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c5c98
uuid_00000000000c5c96:
	movq $1, -24(%rbp)
uuid_00000000000c5c98:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c5c9b
uuid_00000000000c5c99:
	movq $1, -24(%rbp)
uuid_00000000000c5c9b:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c5c9e
uuid_00000000000c5c9c:
	movq $1, -24(%rbp)
uuid_00000000000c5c9e:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg16_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ca5
	jmp uuid_00000000000c5ca7
uuid_00000000000c5ca5:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5ca2
	jmp uuid_00000000000c5ca4
uuid_00000000000c5ca2:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5c9f
	jmp uuid_00000000000c5ca1
uuid_00000000000c5c9f:
	movb $1, -104(%rbp)
uuid_00000000000c5ca1:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5ca4:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5ca7:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5cb8
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5cae
	jmp uuid_00000000000c5cb0
uuid_00000000000c5cae:
	push %RBP
	jmp uuid_00000000000c5cab
	jmp uuid_00000000000c5cad
uuid_00000000000c5cab:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c4ea5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5ca8
	jmp uuid_00000000000c5caa
uuid_00000000000c5ca8:
	movb $1, -216(%rbp)
uuid_00000000000c5caa:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c5cad:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c5cb0:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5cb5
	push %RBP
	jmp uuid_00000000000c5cb2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5cb1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5cb4
uuid_00000000000c5cb2:
uuid_00000000000c5cb4:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c5cb7
uuid_00000000000c5cb5:
	movq $1, -40(%rbp)
uuid_00000000000c5cb7:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c5cba
uuid_00000000000c5cb8:
#call function is-reg16 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg16 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c5cba:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg32_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000c5cbb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5cfc
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000c5cbc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5cf9
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000c5cbd
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5cf6
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000c5cbe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5cf3
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000c5cbf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5cf0
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000c5cc0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5ced
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000c5cc1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5cea
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000c5cc2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5ce7
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000c5cc3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5ce4
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000c5cc4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5ce1
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c5cc5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5cde
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000c5cc6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5cdb
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c5cc7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5cd8
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000c5cc8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5cd5
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000c5cc9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5cd2
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000c5cca
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5ccf
	push %RBP
	jmp uuid_00000000000c5ccc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5ccb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5cce
uuid_00000000000c5ccc:
uuid_00000000000c5cce:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c5cd1
uuid_00000000000c5ccf:
	movq $1, -24(%rbp)
uuid_00000000000c5cd1:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c5cd4
uuid_00000000000c5cd2:
	movq $1, -24(%rbp)
uuid_00000000000c5cd4:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c5cd7
uuid_00000000000c5cd5:
	movq $1, -24(%rbp)
uuid_00000000000c5cd7:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c5cda
uuid_00000000000c5cd8:
	movq $1, -24(%rbp)
uuid_00000000000c5cda:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c5cdd
uuid_00000000000c5cdb:
	movq $1, -24(%rbp)
uuid_00000000000c5cdd:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c5ce0
uuid_00000000000c5cde:
	movq $1, -24(%rbp)
uuid_00000000000c5ce0:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c5ce3
uuid_00000000000c5ce1:
	movq $1, -24(%rbp)
uuid_00000000000c5ce3:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c5ce6
uuid_00000000000c5ce4:
	movq $1, -24(%rbp)
uuid_00000000000c5ce6:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c5ce9
uuid_00000000000c5ce7:
	movq $1, -24(%rbp)
uuid_00000000000c5ce9:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c5cec
uuid_00000000000c5cea:
	movq $1, -24(%rbp)
uuid_00000000000c5cec:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c5cef
uuid_00000000000c5ced:
	movq $1, -24(%rbp)
uuid_00000000000c5cef:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c5cf2
uuid_00000000000c5cf0:
	movq $1, -24(%rbp)
uuid_00000000000c5cf2:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c5cf5
uuid_00000000000c5cf3:
	movq $1, -24(%rbp)
uuid_00000000000c5cf5:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c5cf8
uuid_00000000000c5cf6:
	movq $1, -24(%rbp)
uuid_00000000000c5cf8:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c5cfb
uuid_00000000000c5cf9:
	movq $1, -24(%rbp)
uuid_00000000000c5cfb:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c5cfe
uuid_00000000000c5cfc:
	movq $1, -24(%rbp)
uuid_00000000000c5cfe:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg32_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5d05
	jmp uuid_00000000000c5d07
uuid_00000000000c5d05:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5d02
	jmp uuid_00000000000c5d04
uuid_00000000000c5d02:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5cff
	jmp uuid_00000000000c5d01
uuid_00000000000c5cff:
	movb $1, -104(%rbp)
uuid_00000000000c5d01:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5d04:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5d07:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5d18
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5d0e
	jmp uuid_00000000000c5d10
uuid_00000000000c5d0e:
	push %RBP
	jmp uuid_00000000000c5d0b
	jmp uuid_00000000000c5d0d
uuid_00000000000c5d0b:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c4ea9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d08
	jmp uuid_00000000000c5d0a
uuid_00000000000c5d08:
	movb $1, -216(%rbp)
uuid_00000000000c5d0a:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c5d0d:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c5d10:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5d15
	push %RBP
	jmp uuid_00000000000c5d12
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5d11
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5d14
uuid_00000000000c5d12:
uuid_00000000000c5d14:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c5d17
uuid_00000000000c5d15:
	movq $1, -40(%rbp)
uuid_00000000000c5d17:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c5d1a
uuid_00000000000c5d18:
#call function is-reg32 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg32 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c5d1a:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg64_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000c5d1b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d5c
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000c5d1c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d59
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000c5d1d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d56
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000c5d1e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d53
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000c5d1f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d50
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000c5d20
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d4d
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000c5d21
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d4a
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000c5d22
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d47
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000c5d23
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d44
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000c5d24
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d41
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c5d25
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d3e
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000c5d26
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d3b
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c5d27
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d38
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000c5d28
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d35
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000c5d29
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d32
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000c5d2a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d2f
	push %RBP
	jmp uuid_00000000000c5d2c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5d2b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5d2e
uuid_00000000000c5d2c:
uuid_00000000000c5d2e:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c5d31
uuid_00000000000c5d2f:
	movq $1, -24(%rbp)
uuid_00000000000c5d31:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c5d34
uuid_00000000000c5d32:
	movq $1, -24(%rbp)
uuid_00000000000c5d34:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c5d37
uuid_00000000000c5d35:
	movq $1, -24(%rbp)
uuid_00000000000c5d37:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c5d3a
uuid_00000000000c5d38:
	movq $1, -24(%rbp)
uuid_00000000000c5d3a:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c5d3d
uuid_00000000000c5d3b:
	movq $1, -24(%rbp)
uuid_00000000000c5d3d:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c5d40
uuid_00000000000c5d3e:
	movq $1, -24(%rbp)
uuid_00000000000c5d40:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c5d43
uuid_00000000000c5d41:
	movq $1, -24(%rbp)
uuid_00000000000c5d43:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c5d46
uuid_00000000000c5d44:
	movq $1, -24(%rbp)
uuid_00000000000c5d46:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c5d49
uuid_00000000000c5d47:
	movq $1, -24(%rbp)
uuid_00000000000c5d49:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c5d4c
uuid_00000000000c5d4a:
	movq $1, -24(%rbp)
uuid_00000000000c5d4c:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c5d4f
uuid_00000000000c5d4d:
	movq $1, -24(%rbp)
uuid_00000000000c5d4f:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c5d52
uuid_00000000000c5d50:
	movq $1, -24(%rbp)
uuid_00000000000c5d52:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c5d55
uuid_00000000000c5d53:
	movq $1, -24(%rbp)
uuid_00000000000c5d55:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c5d58
uuid_00000000000c5d56:
	movq $1, -24(%rbp)
uuid_00000000000c5d58:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000c5d5b
uuid_00000000000c5d59:
	movq $1, -24(%rbp)
uuid_00000000000c5d5b:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c5d5e
uuid_00000000000c5d5c:
	movq $1, -24(%rbp)
uuid_00000000000c5d5e:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg64_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5d65
	jmp uuid_00000000000c5d67
uuid_00000000000c5d65:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5d62
	jmp uuid_00000000000c5d64
uuid_00000000000c5d62:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5d5f
	jmp uuid_00000000000c5d61
uuid_00000000000c5d5f:
	movb $1, -104(%rbp)
uuid_00000000000c5d61:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5d64:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5d67:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5d78
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5d6e
	jmp uuid_00000000000c5d70
uuid_00000000000c5d6e:
	push %RBP
	jmp uuid_00000000000c5d6b
	jmp uuid_00000000000c5d6d
uuid_00000000000c5d6b:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c4ead
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d68
	jmp uuid_00000000000c5d6a
uuid_00000000000c5d68:
	movb $1, -216(%rbp)
uuid_00000000000c5d6a:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c5d6d:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c5d70:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5d75
	push %RBP
	jmp uuid_00000000000c5d72
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5d71
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5d74
uuid_00000000000c5d72:
uuid_00000000000c5d74:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c5d77
uuid_00000000000c5d75:
	movq $1, -40(%rbp)
uuid_00000000000c5d77:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c5d7a
uuid_00000000000c5d78:
#call function is-reg64 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg64 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c5d7a:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_tag_CL_ArrowTypeType:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5d8e
	jmp uuid_00000000000c5d90
uuid_00000000000c5d8e:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5d81
	jmp uuid_00000000000c5d83
uuid_00000000000c5d81:
	push %RBP
	jmp uuid_00000000000c5d7e
	jmp uuid_00000000000c5d80
uuid_00000000000c5d7e:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5d7b
	jmp uuid_00000000000c5d7d
uuid_00000000000c5d7b:
	movb $1, -128(%rbp)
uuid_00000000000c5d7d:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c5d80:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c5d83:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5d8b
	push %RBP
	jmp uuid_00000000000c5d88
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5d87
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5d8a
uuid_00000000000c5d88:
uuid_00000000000c5d8a:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c5d8d
uuid_00000000000c5d8b:
#call function get-only-child : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call get_SB_only_SB_child_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -168(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c5d84
	jmp uuid_00000000000c5d86
uuid_00000000000c5d84:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5183
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5d86:
	mov -176(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5d8d:
	mov -96(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c5d90:
	mov -64(%RBP),%RSP
	add $-176, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_size_CL_ArrowTypeType:
	push %RBP
#call function is-sized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call is_SB_sized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5d91
	jmp uuid_00000000000c5d93
uuid_00000000000c5d91:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function with-size-recurse : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_size_SB_recurse_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fce
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5d93:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5dac
	jmp uuid_00000000000c5dae
uuid_00000000000c5dac:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5da3
	jmp uuid_00000000000c5da5
uuid_00000000000c5da3:
	push %RBP
	mov -160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5d9a
	jmp uuid_00000000000c5d9c
uuid_00000000000c5d9a:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5d97
	jmp uuid_00000000000c5d99
uuid_00000000000c5d97:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	jmp uuid_00000000000c5d94
	jmp uuid_00000000000c5d96
uuid_00000000000c5d94:
	movb $1, -240(%rbp)
uuid_00000000000c5d96:
	mov -304(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c5d99:
	mov -256(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c5d9c:
	mov -248(%RBP),%RSP
	add $-328, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5da0
	jmp uuid_00000000000c5da2
uuid_00000000000c5da0:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	jmp uuid_00000000000c5d9d
	jmp uuid_00000000000c5d9f
uuid_00000000000c5d9d:
	movb $1, -176(%rbp)
uuid_00000000000c5d9f:
	mov -336(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c5da2:
	mov -192(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c5da5:
	mov -184(%RBP),%RSP
	add $-360, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5da9
	jmp uuid_00000000000c5dab
uuid_00000000000c5da9:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5da6
	jmp uuid_00000000000c5da8
uuid_00000000000c5da6:
	movb $1, -112(%rbp)
uuid_00000000000c5da8:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c5dab:
	mov -128(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c5dae:
	mov -120(%RBP),%RSP
	add $-376, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5db3
	push %RBP
	jmp uuid_00000000000c5db0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5daf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5db2
uuid_00000000000c5db0:
uuid_00000000000c5db2:
	mov -384(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c5db5
uuid_00000000000c5db3:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d94
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5db5:
	mov -80(%RBP),%RSP
	add $-376, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_size_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5dc7
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5dc0
	jmp uuid_00000000000c5dc2
uuid_00000000000c5dc0:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5dbd
	jmp uuid_00000000000c5dbf
uuid_00000000000c5dbd:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000c5dba
	jmp uuid_00000000000c5dbc
uuid_00000000000c5dba:
	movb $1, -192(%rbp)
uuid_00000000000c5dbc:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c5dbf:
	mov -208(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c5dc2:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5dc4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5dc3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5dc6
uuid_00000000000c5dc4:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5dc6:
	mov -144(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c5dc9
uuid_00000000000c5dc7:
uuid_00000000000c5dc9:
	mov -96(%RBP),%RSP
	add $-136, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
with_SB_size_SB_recurse_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5dd0
	jmp uuid_00000000000c5dd2
uuid_00000000000c5dd0:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5dcd
	jmp uuid_00000000000c5dcf
uuid_00000000000c5dcd:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5dca
	jmp uuid_00000000000c5dcc
uuid_00000000000c5dca:
	movb $1, -96(%rbp)
uuid_00000000000c5dcc:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5dcf:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5dd2:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e1f
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5dd9
	jmp uuid_00000000000c5ddb
uuid_00000000000c5dd9:
	push %RBP
	jmp uuid_00000000000c5dd6
	jmp uuid_00000000000c5dd8
uuid_00000000000c5dd6:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c5183
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5dd3
	jmp uuid_00000000000c5dd5
uuid_00000000000c5dd3:
	movb $1, -208(%rbp)
uuid_00000000000c5dd5:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c5dd8:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c5ddb:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e1c
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5de2
	jmp uuid_00000000000c5de4
uuid_00000000000c5de2:
	push %RBP
	jmp uuid_00000000000c5ddf
	jmp uuid_00000000000c5de1
uuid_00000000000c5ddf:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000c4fce
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5ddc
	jmp uuid_00000000000c5dde
uuid_00000000000c5ddc:
	movb $1, -280(%rbp)
uuid_00000000000c5dde:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c5de1:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c5de4:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e19
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5deb
	jmp uuid_00000000000c5ded
uuid_00000000000c5deb:
	push %RBP
	jmp uuid_00000000000c5de8
	jmp uuid_00000000000c5dea
uuid_00000000000c5de8:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000c4fcd
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5de5
	jmp uuid_00000000000c5de7
uuid_00000000000c5de5:
	movb $1, -352(%rbp)
uuid_00000000000c5de7:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c5dea:
	mov -368(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c5ded:
	mov -360(%RBP),%RSP
	add $-384, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e16
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5df4
	jmp uuid_00000000000c5df6
uuid_00000000000c5df4:
	push %RBP
	jmp uuid_00000000000c5df1
	jmp uuid_00000000000c5df3
uuid_00000000000c5df1:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq $uuid_00000000000c51ae
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5dee
	jmp uuid_00000000000c5df0
uuid_00000000000c5dee:
	movb $1, -424(%rbp)
uuid_00000000000c5df0:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c5df3:
	mov -440(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c5df6:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e13
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5dfd
	jmp uuid_00000000000c5dff
uuid_00000000000c5dfd:
	push %RBP
	jmp uuid_00000000000c5dfa
	jmp uuid_00000000000c5dfc
uuid_00000000000c5dfa:
	push %RBP
	mov -472(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq $uuid_00000000000c4fcf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5df7
	jmp uuid_00000000000c5df9
uuid_00000000000c5df7:
	movb $1, -496(%rbp)
uuid_00000000000c5df9:
	mov -520(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000c5dfc:
	mov -512(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000c5dff:
	mov -504(%RBP),%RSP
	add $-528, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e10
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e06
	jmp uuid_00000000000c5e08
uuid_00000000000c5e06:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5e03
	jmp uuid_00000000000c5e05
uuid_00000000000c5e03:
	push %RBP
	mov -544(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5e00
	jmp uuid_00000000000c5e02
uuid_00000000000c5e00:
	movb $1, -568(%rbp)
uuid_00000000000c5e02:
	mov -632(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c5e05:
	mov -584(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c5e08:
	mov -576(%RBP),%RSP
	add $-640, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e0d
	push %RBP
	jmp uuid_00000000000c5e0a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5e09
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5e0c
uuid_00000000000c5e0a:
uuid_00000000000c5e0c:
	mov -648(%RBP),%RSP
	add $-648, %RSP
	jmp uuid_00000000000c5e0f
uuid_00000000000c5e0d:
	pushq -640(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5e0f:
	mov -536(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000c5e12
uuid_00000000000c5e10:
uuid_00000000000c5e12:
	mov -464(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000c5e15
uuid_00000000000c5e13:
uuid_00000000000c5e15:
	mov -392(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000c5e18
uuid_00000000000c5e16:
uuid_00000000000c5e18:
	mov -320(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c5e1b
uuid_00000000000c5e19:
uuid_00000000000c5e1b:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c5e1e
uuid_00000000000c5e1c:
uuid_00000000000c5e1e:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c5e21
uuid_00000000000c5e1f:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-size-recurse : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call with_SB_size_SB_recurse_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-size-recurse : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call with_SB_size_SB_recurse_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5e21:
	mov -64(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_fields_CL_ArrowTypeType:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000c51ae
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e28
	jmp uuid_00000000000c5e2a
uuid_00000000000c5e28:
	push %RBP
	jmp uuid_00000000000c5e25
	jmp uuid_00000000000c5e27
uuid_00000000000c5e25:
	push %RBP
	mov -72(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000c51ae
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5e22
	jmp uuid_00000000000c5e24
uuid_00000000000c5e22:
	movb $1, -96(%rbp)
uuid_00000000000c5e24:
	mov -120(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000c5e27:
	mov -112(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000c5e2a:
	mov -104(%RBP),%RSP
	add $-128, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e32
	push %RBP
	jmp uuid_00000000000c5e2f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5e2e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5e31
uuid_00000000000c5e2f:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-only-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e2b
	jmp uuid_00000000000c5e2d
uuid_00000000000c5e2b:
#call function fields-of-tag : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call fields_SB_of_SB_tag_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5e2d:
	mov -192(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c5e31:
	mov -136(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000c5e34
uuid_00000000000c5e32:
uuid_00000000000c5e34:
	mov -64(%RBP),%RSP
	add $-128, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_platform_SB_props_CL_ArrowTypeType:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5e49
	jmp uuid_00000000000c5e4b
uuid_00000000000c5e49:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e3b
	jmp uuid_00000000000c5e3d
uuid_00000000000c5e3b:
	push %RBP
	jmp uuid_00000000000c5e38
	jmp uuid_00000000000c5e3a
uuid_00000000000c5e38:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5e35
	jmp uuid_00000000000c5e37
uuid_00000000000c5e35:
	movb $1, -128(%rbp)
uuid_00000000000c5e37:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c5e3a:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c5e3d:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e46
	push %RBP
	jmp uuid_00000000000c5e43
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5e42
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5e45
uuid_00000000000c5e43:
uuid_00000000000c5e45:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c5e48
uuid_00000000000c5e46:
	push %RBP
#call function is-lm-struct : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call is_SB_lm_SB_struct_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5e3f
	jmp uuid_00000000000c5e41
uuid_00000000000c5e3f:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5e3e
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5e41:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5e48:
	mov -96(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5e4b:
	mov -64(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_tag_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e52
	jmp uuid_00000000000c5e54
uuid_00000000000c5e52:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5e4f
	jmp uuid_00000000000c5e51
uuid_00000000000c5e4f:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5e4c
	jmp uuid_00000000000c5e4e
uuid_00000000000c5e4c:
	movb $1, -96(%rbp)
uuid_00000000000c5e4e:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5e51:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5e54:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5eae
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e80
	jmp uuid_00000000000c5e82
uuid_00000000000c5e80:
	push %RBP
	jmp uuid_00000000000c5e7d
	jmp uuid_00000000000c5e7f
uuid_00000000000c5e7d:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c4fcc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5e7a
	jmp uuid_00000000000c5e7c
uuid_00000000000c5e7a:
	movb $1, -208(%rbp)
uuid_00000000000c5e7c:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c5e7f:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c5e82:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5eab
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e89
	jmp uuid_00000000000c5e8b
uuid_00000000000c5e89:
	push %RBP
	jmp uuid_00000000000c5e86
	jmp uuid_00000000000c5e88
uuid_00000000000c5e86:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000c5183
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5e83
	jmp uuid_00000000000c5e85
uuid_00000000000c5e83:
	movb $1, -280(%rbp)
uuid_00000000000c5e85:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c5e88:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c5e8b:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ea8
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e92
	jmp uuid_00000000000c5e94
uuid_00000000000c5e92:
	push %RBP
	jmp uuid_00000000000c5e8f
	jmp uuid_00000000000c5e91
uuid_00000000000c5e8f:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000c51ae
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5e8c
	jmp uuid_00000000000c5e8e
uuid_00000000000c5e8c:
	movb $1, -352(%rbp)
uuid_00000000000c5e8e:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c5e91:
	mov -368(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c5e94:
	mov -360(%RBP),%RSP
	add $-384, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ea5
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e9b
	jmp uuid_00000000000c5e9d
uuid_00000000000c5e9b:
	push %RBP
	jmp uuid_00000000000c5e98
	jmp uuid_00000000000c5e9a
uuid_00000000000c5e98:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq $uuid_00000000000c4fcf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5e95
	jmp uuid_00000000000c5e97
uuid_00000000000c5e95:
	movb $1, -424(%rbp)
uuid_00000000000c5e97:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c5e9a:
	mov -440(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c5e9d:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ea2
	push %RBP
	jmp uuid_00000000000c5e9f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5e9e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5ea1
uuid_00000000000c5e9f:
uuid_00000000000c5ea1:
	mov -464(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000c5ea4
uuid_00000000000c5ea2:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5ea4:
	mov -392(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000c5ea7
uuid_00000000000c5ea5:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5ea7:
	mov -320(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c5eaa
uuid_00000000000c5ea8:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5eaa:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c5ead
uuid_00000000000c5eab:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5ead:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c5eb0
uuid_00000000000c5eae:
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e5b
	jmp uuid_00000000000c5e5d
uuid_00000000000c5e5b:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	jmp uuid_00000000000c5e58
	jmp uuid_00000000000c5e5a
uuid_00000000000c5e58:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e55
	jmp uuid_00000000000c5e57
uuid_00000000000c5e55:
	movb $1, -344(%rbp)
uuid_00000000000c5e57:
	mov -392(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c5e5a:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c5e5d:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e77
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e64
	jmp uuid_00000000000c5e66
uuid_00000000000c5e64:
	push %RBP
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e61
	jmp uuid_00000000000c5e63
uuid_00000000000c5e61:
	push %RBP
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	jmp uuid_00000000000c5e5e
	jmp uuid_00000000000c5e60
uuid_00000000000c5e5e:
	movb $1, -488(%rbp)
uuid_00000000000c5e60:
	mov -536(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c5e63:
	mov -504(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c5e66:
	mov -496(%RBP),%RSP
	add $-560, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e74
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e6d
	jmp uuid_00000000000c5e6f
uuid_00000000000c5e6d:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	jmp uuid_00000000000c5e6a
	jmp uuid_00000000000c5e6c
uuid_00000000000c5e6a:
	push %RBP
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	jmp uuid_00000000000c5e67
	jmp uuid_00000000000c5e69
uuid_00000000000c5e67:
	movb $1, -632(%rbp)
uuid_00000000000c5e69:
	mov -680(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000c5e6c:
	mov -648(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000c5e6f:
	mov -640(%RBP),%RSP
	add $-704, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5e71
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5e70
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5e73
uuid_00000000000c5e71:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5e73:
	mov -568(%RBP),%RSP
	add $-704, %RSP
	jmp uuid_00000000000c5e76
uuid_00000000000c5e74:
	movq -560(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -544(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c5e76:
	mov -424(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c5e79
uuid_00000000000c5e77:
	movq -384(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c5e79:
	mov -280(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c5eb0:
	mov -64(%RBP),%RSP
	add $-416, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_tag_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ebb
	jmp uuid_00000000000c5ebd
uuid_00000000000c5ebb:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5eb8
	jmp uuid_00000000000c5eba
uuid_00000000000c5eb8:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000c5eb5
	jmp uuid_00000000000c5eb7
uuid_00000000000c5eb5:
	movb $1, -144(%rbp)
uuid_00000000000c5eb7:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c5eba:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c5ebd:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ec2
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ebf
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5ebe
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5ec1
uuid_00000000000c5ebf:
uuid_00000000000c5ec1:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c5ec4
uuid_00000000000c5ec2:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-tag : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5ec4:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_constructor_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ecb
	jmp uuid_00000000000c5ecd
uuid_00000000000c5ecb:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5ec8
	jmp uuid_00000000000c5eca
uuid_00000000000c5ec8:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5ec5
	jmp uuid_00000000000c5ec7
uuid_00000000000c5ec5:
	movb $1, -96(%rbp)
uuid_00000000000c5ec7:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5eca:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5ecd:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ef0
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5eda
	jmp uuid_00000000000c5edc
uuid_00000000000c5eda:
	push %RBP
	jmp uuid_00000000000c5ed7
	jmp uuid_00000000000c5ed9
uuid_00000000000c5ed7:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c4fcc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5ed4
	jmp uuid_00000000000c5ed6
uuid_00000000000c5ed4:
	movb $1, -208(%rbp)
uuid_00000000000c5ed6:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c5ed9:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c5edc:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5eed
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ee3
	jmp uuid_00000000000c5ee5
uuid_00000000000c5ee3:
	push %RBP
	jmp uuid_00000000000c5ee0
	jmp uuid_00000000000c5ee2
uuid_00000000000c5ee0:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000c4fcd
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5edd
	jmp uuid_00000000000c5edf
uuid_00000000000c5edd:
	movb $1, -280(%rbp)
uuid_00000000000c5edf:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c5ee2:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c5ee5:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5eea
	push %RBP
	jmp uuid_00000000000c5ee7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5ee6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5ee9
uuid_00000000000c5ee7:
uuid_00000000000c5ee9:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000c5eec
uuid_00000000000c5eea:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5eec:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c5eef
uuid_00000000000c5eed:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5eef:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c5ef2
uuid_00000000000c5ef0:
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5ed1
	movq -136(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -128(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -120(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c5ed3
uuid_00000000000c5ed1:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5ece
	movq -168(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -160(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -152(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c5ed0
uuid_00000000000c5ece:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5ed0:
	mov -184(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c5ed3:
	mov -176(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c5ef2:
	mov -64(%RBP),%RSP
	add $-184, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_representation_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5efd
	jmp uuid_00000000000c5eff
uuid_00000000000c5efd:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5efa
	jmp uuid_00000000000c5efc
uuid_00000000000c5efa:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000c5ef7
	jmp uuid_00000000000c5ef9
uuid_00000000000c5ef7:
	movb $1, -144(%rbp)
uuid_00000000000c5ef9:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c5efc:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c5eff:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f04
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f01
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5f00
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5f03
uuid_00000000000c5f01:
uuid_00000000000c5f03:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c5f06
uuid_00000000000c5f04:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-representation : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5f06:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_representation_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f0d
	jmp uuid_00000000000c5f0f
uuid_00000000000c5f0d:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5f0a
	jmp uuid_00000000000c5f0c
uuid_00000000000c5f0a:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5f07
	jmp uuid_00000000000c5f09
uuid_00000000000c5f07:
	movb $1, -96(%rbp)
uuid_00000000000c5f09:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5f0c:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5f0f:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f9f
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f1f
	jmp uuid_00000000000c5f21
uuid_00000000000c5f1f:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f1c
	jmp uuid_00000000000c5f1e
uuid_00000000000c5f1c:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq $uuid_00000000000c5383
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5f19
	jmp uuid_00000000000c5f1b
uuid_00000000000c5f19:
	movb $1, -208(%rbp)
uuid_00000000000c5f1b:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c5f1e:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c5f21:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f9c
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f29
	jmp uuid_00000000000c5f2b
uuid_00000000000c5f29:
	push %RBP
	mov -304(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f26
	jmp uuid_00000000000c5f28
uuid_00000000000c5f26:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000c5f22
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5f23
	jmp uuid_00000000000c5f25
uuid_00000000000c5f23:
	movb $1, -320(%rbp)
uuid_00000000000c5f25:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c5f28:
	mov -336(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c5f2b:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f99
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f32
	jmp uuid_00000000000c5f34
uuid_00000000000c5f32:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f2f
	jmp uuid_00000000000c5f31
uuid_00000000000c5f2f:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -504(%rbp)
	pushq $uuid_00000000000c4f44
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5f2c
	jmp uuid_00000000000c5f2e
uuid_00000000000c5f2c:
	movb $1, -432(%rbp)
uuid_00000000000c5f2e:
	mov -496(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c5f31:
	mov -448(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c5f34:
	mov -440(%RBP),%RSP
	add $-504, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f96
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f3b
	jmp uuid_00000000000c5f3d
uuid_00000000000c5f3b:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f38
	jmp uuid_00000000000c5f3a
uuid_00000000000c5f38:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq $uuid_00000000000c51f3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5f35
	jmp uuid_00000000000c5f37
uuid_00000000000c5f35:
	movb $1, -544(%rbp)
uuid_00000000000c5f37:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c5f3a:
	mov -560(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c5f3d:
	mov -552(%RBP),%RSP
	add $-616, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f93
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f44
	jmp uuid_00000000000c5f46
uuid_00000000000c5f44:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f41
	jmp uuid_00000000000c5f43
uuid_00000000000c5f41:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq $uuid_00000000000c4d92
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5f3e
	jmp uuid_00000000000c5f40
uuid_00000000000c5f3e:
	movb $1, -656(%rbp)
uuid_00000000000c5f40:
	mov -720(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c5f43:
	mov -672(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c5f46:
	mov -664(%RBP),%RSP
	add $-728, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f90
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f4d
	jmp uuid_00000000000c5f4f
uuid_00000000000c5f4d:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f4a
	jmp uuid_00000000000c5f4c
uuid_00000000000c5f4a:
	push %RBP
	mov -744(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq $uuid_00000000000c4ea1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5f47
	jmp uuid_00000000000c5f49
uuid_00000000000c5f47:
	movb $1, -768(%rbp)
uuid_00000000000c5f49:
	mov -832(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c5f4c:
	mov -784(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c5f4f:
	mov -776(%RBP),%RSP
	add $-840, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f8d
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f56
	jmp uuid_00000000000c5f58
uuid_00000000000c5f56:
	push %RBP
	mov -864(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -936(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f53
	jmp uuid_00000000000c5f55
uuid_00000000000c5f53:
	push %RBP
	mov -856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq $uuid_00000000000c4ea5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5f50
	jmp uuid_00000000000c5f52
uuid_00000000000c5f50:
	movb $1, -880(%rbp)
uuid_00000000000c5f52:
	mov -944(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c5f55:
	mov -896(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c5f58:
	mov -888(%RBP),%RSP
	add $-952, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f8a
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -984(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f5f
	jmp uuid_00000000000c5f61
uuid_00000000000c5f5f:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f5c
	jmp uuid_00000000000c5f5e
uuid_00000000000c5f5c:
	push %RBP
	mov -968(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq $uuid_00000000000c4ea9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5f59
	jmp uuid_00000000000c5f5b
uuid_00000000000c5f59:
	movb $1, -992(%rbp)
uuid_00000000000c5f5b:
	mov -1056(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c5f5e:
	mov -1008(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c5f61:
	mov -1000(%RBP),%RSP
	add $-1064, %RSP
	mov -992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f87
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -1096(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f68
	jmp uuid_00000000000c5f6a
uuid_00000000000c5f68:
	push %RBP
	mov -1088(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f65
	jmp uuid_00000000000c5f67
uuid_00000000000c5f65:
	push %RBP
	mov -1080(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq $uuid_00000000000c4ead
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5f62
	jmp uuid_00000000000c5f64
uuid_00000000000c5f62:
	movb $1, -1104(%rbp)
uuid_00000000000c5f64:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c5f67:
	mov -1120(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c5f6a:
	mov -1112(%RBP),%RSP
	add $-1176, %RSP
	mov -1104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f84
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f71
	jmp uuid_00000000000c5f73
uuid_00000000000c5f71:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5f6e
	jmp uuid_00000000000c5f70
uuid_00000000000c5f6e:
	push %RBP
	mov -1192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5f6b
	jmp uuid_00000000000c5f6d
uuid_00000000000c5f6b:
	movb $1, -1216(%rbp)
uuid_00000000000c5f6d:
	mov -1280(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c5f70:
	mov -1232(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c5f73:
	mov -1224(%RBP),%RSP
	add $-1288, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f81
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f7e
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f77
	jmp uuid_00000000000c5f79
uuid_00000000000c5f77:
	push %RBP
	jmp uuid_00000000000c5f74
	jmp uuid_00000000000c5f76
uuid_00000000000c5f74:
	movb $1, -1360(%rbp)
uuid_00000000000c5f76:
	mov -1376(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c5f79:
	mov -1368(%RBP),%RSP
	add $-1376, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5f7b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5f7a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5f7d
uuid_00000000000c5f7b:
uuid_00000000000c5f7d:
	mov -1328(%RBP),%RSP
	add $-1376, %RSP
	jmp uuid_00000000000c5f80
uuid_00000000000c5f7e:
uuid_00000000000c5f80:
	mov -1296(%RBP),%RSP
	add $-1320, %RSP
	jmp uuid_00000000000c5f83
uuid_00000000000c5f81:
	pushq -1288(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5f83:
	mov -1184(%RBP),%RSP
	add $-1288, %RSP
	jmp uuid_00000000000c5f86
uuid_00000000000c5f84:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5f86:
	mov -1072(%RBP),%RSP
	add $-1176, %RSP
	jmp uuid_00000000000c5f89
uuid_00000000000c5f87:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5f89:
	mov -960(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000c5f8c
uuid_00000000000c5f8a:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5f8c:
	mov -848(%RBP),%RSP
	add $-952, %RSP
	jmp uuid_00000000000c5f8f
uuid_00000000000c5f8d:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5f8f:
	mov -736(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000c5f92
uuid_00000000000c5f90:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5f92:
	mov -624(%RBP),%RSP
	add $-728, %RSP
	jmp uuid_00000000000c5f95
uuid_00000000000c5f93:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5f95:
	mov -512(%RBP),%RSP
	add $-616, %RSP
	jmp uuid_00000000000c5f98
uuid_00000000000c5f96:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5f98:
	mov -400(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000c5f9b
uuid_00000000000c5f99:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5f9b:
	mov -288(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c5f9e
uuid_00000000000c5f9c:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5f9e:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c5fa1
uuid_00000000000c5f9f:
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5f16
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5f13
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c5f15
uuid_00000000000c5f13:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c5f15:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c5f18
uuid_00000000000c5f16:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5f10
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c5f12
uuid_00000000000c5f10:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5f12:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c5f18:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c5fa1:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5fac
	jmp uuid_00000000000c5fae
uuid_00000000000c5fac:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5fa9
	jmp uuid_00000000000c5fab
uuid_00000000000c5fa9:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000c5fa6
	jmp uuid_00000000000c5fa8
uuid_00000000000c5fa6:
	movb $1, -144(%rbp)
uuid_00000000000c5fa8:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c5fab:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c5fae:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5fb3
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5fb0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5faf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5fb2
uuid_00000000000c5fb0:
uuid_00000000000c5fb2:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c5fb5
uuid_00000000000c5fb3:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size-unless-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size-unless-class : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5fb5:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_size_SB_unless_SB_class_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5fbc
	jmp uuid_00000000000c5fbe
uuid_00000000000c5fbc:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5fb9
	jmp uuid_00000000000c5fbb
uuid_00000000000c5fb9:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5fb6
	jmp uuid_00000000000c5fb8
uuid_00000000000c5fb6:
	movb $1, -96(%rbp)
uuid_00000000000c5fb8:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5fbb:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5fbe:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5fe1
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5fce
	jmp uuid_00000000000c5fd0
uuid_00000000000c5fce:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5fcb
	jmp uuid_00000000000c5fcd
uuid_00000000000c5fcb:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c5fc8
	jmp uuid_00000000000c5fca
uuid_00000000000c5fc8:
	movb $1, -208(%rbp)
uuid_00000000000c5fca:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c5fcd:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c5fd0:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5fde
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5fdb
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5fd4
	jmp uuid_00000000000c5fd6
uuid_00000000000c5fd4:
	push %RBP
	jmp uuid_00000000000c5fd1
	jmp uuid_00000000000c5fd3
uuid_00000000000c5fd1:
	movb $1, -352(%rbp)
uuid_00000000000c5fd3:
	mov -368(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c5fd6:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c5fd8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c5fd7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c5fda
uuid_00000000000c5fd8:
uuid_00000000000c5fda:
	mov -320(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000c5fdd
uuid_00000000000c5fdb:
uuid_00000000000c5fdd:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c5fe0
uuid_00000000000c5fde:
	pushq -280(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size-unless-class : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5fe0:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c5fe3
uuid_00000000000c5fe1:
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5fc5
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5fc2
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c5fc4
uuid_00000000000c5fc2:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c5fc4:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c5fc7
uuid_00000000000c5fc5:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5fbf
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c5fc1
uuid_00000000000c5fbf:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5fc1:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c5fc7:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c5fe3:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5fea
	jmp uuid_00000000000c5fec
uuid_00000000000c5fea:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5fe7
	jmp uuid_00000000000c5fe9
uuid_00000000000c5fe7:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c5fe4
	jmp uuid_00000000000c5fe6
uuid_00000000000c5fe4:
	movb $1, -96(%rbp)
uuid_00000000000c5fe6:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5fe9:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c5fec:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6027
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c5ffc
	jmp uuid_00000000000c5ffe
uuid_00000000000c5ffc:
	push %RBP
	jmp uuid_00000000000c5ff9
	jmp uuid_00000000000c5ffb
uuid_00000000000c5ff9:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c4fcf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5ff6
	jmp uuid_00000000000c5ff8
uuid_00000000000c5ff6:
	movb $1, -208(%rbp)
uuid_00000000000c5ff8:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c5ffb:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c5ffe:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6024
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6005
	jmp uuid_00000000000c6007
uuid_00000000000c6005:
	push %RBP
	jmp uuid_00000000000c6002
	jmp uuid_00000000000c6004
uuid_00000000000c6002:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000c4fce
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5fff
	jmp uuid_00000000000c6001
uuid_00000000000c5fff:
	movb $1, -280(%rbp)
uuid_00000000000c6001:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c6004:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c6007:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6021
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c600e
	jmp uuid_00000000000c6010
uuid_00000000000c600e:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c600b
	jmp uuid_00000000000c600d
uuid_00000000000c600b:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6008
	jmp uuid_00000000000c600a
uuid_00000000000c6008:
	movb $1, -352(%rbp)
uuid_00000000000c600a:
	mov -416(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c600d:
	mov -368(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c6010:
	mov -360(%RBP),%RSP
	add $-424, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c601e
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c601b
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6014
	jmp uuid_00000000000c6016
uuid_00000000000c6014:
	push %RBP
	jmp uuid_00000000000c6011
	jmp uuid_00000000000c6013
uuid_00000000000c6011:
	movb $1, -496(%rbp)
uuid_00000000000c6013:
	mov -512(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c6016:
	mov -504(%RBP),%RSP
	add $-512, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6018
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6017
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c601a
uuid_00000000000c6018:
uuid_00000000000c601a:
	mov -464(%RBP),%RSP
	add $-512, %RSP
	jmp uuid_00000000000c601d
uuid_00000000000c601b:
uuid_00000000000c601d:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000c6020
uuid_00000000000c601e:
	pushq -424(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size-unless-class : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6020:
	mov -320(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000c6023
uuid_00000000000c6021:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6023:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c6026
uuid_00000000000c6024:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6026:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c6029
uuid_00000000000c6027:
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5ff3
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5ff0
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c5ff2
uuid_00000000000c5ff0:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c5ff2:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c5ff5
uuid_00000000000c5ff3:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c5fed
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c5fef
uuid_00000000000c5fed:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c5fef:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c5ff5:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c6029:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_size_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6034
	jmp uuid_00000000000c6036
uuid_00000000000c6034:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6031
	jmp uuid_00000000000c6033
uuid_00000000000c6031:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000c602e
	jmp uuid_00000000000c6030
uuid_00000000000c602e:
	movb $1, -144(%rbp)
uuid_00000000000c6030:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c6033:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c6036:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c603b
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6038
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6037
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c603a
uuid_00000000000c6038:
uuid_00000000000c603a:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c603d
uuid_00000000000c603b:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c603d:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_size_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6044
	jmp uuid_00000000000c6046
uuid_00000000000c6044:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6041
	jmp uuid_00000000000c6043
uuid_00000000000c6041:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c603e
	jmp uuid_00000000000c6040
uuid_00000000000c603e:
	movb $1, -96(%rbp)
uuid_00000000000c6040:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c6043:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c6046:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6081
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6056
	jmp uuid_00000000000c6058
uuid_00000000000c6056:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6053
	jmp uuid_00000000000c6055
uuid_00000000000c6053:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq $uuid_00000000000c4fce
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6050
	jmp uuid_00000000000c6052
uuid_00000000000c6050:
	movb $1, -208(%rbp)
uuid_00000000000c6052:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c6055:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c6058:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c607e
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c605f
	jmp uuid_00000000000c6061
uuid_00000000000c605f:
	push %RBP
	mov -304(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c605c
	jmp uuid_00000000000c605e
uuid_00000000000c605c:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000c4fcf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6059
	jmp uuid_00000000000c605b
uuid_00000000000c6059:
	movb $1, -320(%rbp)
uuid_00000000000c605b:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c605e:
	mov -336(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c6061:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c607b
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6068
	jmp uuid_00000000000c606a
uuid_00000000000c6068:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6065
	jmp uuid_00000000000c6067
uuid_00000000000c6065:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6062
	jmp uuid_00000000000c6064
uuid_00000000000c6062:
	movb $1, -432(%rbp)
uuid_00000000000c6064:
	mov -496(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c6067:
	mov -448(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c606a:
	mov -440(%RBP),%RSP
	add $-504, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6078
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6075
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c606e
	jmp uuid_00000000000c6070
uuid_00000000000c606e:
	push %RBP
	jmp uuid_00000000000c606b
	jmp uuid_00000000000c606d
uuid_00000000000c606b:
	movb $1, -576(%rbp)
uuid_00000000000c606d:
	mov -592(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c6070:
	mov -584(%RBP),%RSP
	add $-592, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6072
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6071
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6074
uuid_00000000000c6072:
uuid_00000000000c6074:
	mov -544(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000c6077
uuid_00000000000c6075:
uuid_00000000000c6077:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000c607a
uuid_00000000000c6078:
	pushq -504(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c607a:
	mov -400(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000c607d
uuid_00000000000c607b:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c607d:
	mov -288(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c6080
uuid_00000000000c607e:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6080:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c6083
uuid_00000000000c6081:
#call function without-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c604d
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c604a
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c604c
uuid_00000000000c604a:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c604c:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c604f
uuid_00000000000c604d:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6047
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c6049
uuid_00000000000c6047:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6049:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c604f:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c6083:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_platform_SB_props_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c608a
	jmp uuid_00000000000c608c
uuid_00000000000c608a:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6087
	jmp uuid_00000000000c6089
uuid_00000000000c6087:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6084
	jmp uuid_00000000000c6086
uuid_00000000000c6084:
	movb $1, -96(%rbp)
uuid_00000000000c6086:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c6089:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c608c:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c60bb
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c609c
	jmp uuid_00000000000c609e
uuid_00000000000c609c:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6099
	jmp uuid_00000000000c609b
uuid_00000000000c6099:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq $uuid_00000000000c5e3e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6096
	jmp uuid_00000000000c6098
uuid_00000000000c6096:
	movb $1, -208(%rbp)
uuid_00000000000c6098:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c609b:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c609e:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c60b8
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c60a5
	jmp uuid_00000000000c60a7
uuid_00000000000c60a5:
	push %RBP
	jmp uuid_00000000000c60a2
	jmp uuid_00000000000c60a4
uuid_00000000000c60a2:
	push %RBP
	jmp uuid_00000000000c609f
	jmp uuid_00000000000c60a1
uuid_00000000000c609f:
	movb $1, -320(%rbp)
uuid_00000000000c60a1:
	mov -344(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c60a4:
	mov -336(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c60a7:
	mov -328(%RBP),%RSP
	add $-344, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c60b5
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c60b2
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c60ab
	jmp uuid_00000000000c60ad
uuid_00000000000c60ab:
	push %RBP
	jmp uuid_00000000000c60a8
	jmp uuid_00000000000c60aa
uuid_00000000000c60a8:
	movb $1, -416(%rbp)
uuid_00000000000c60aa:
	mov -432(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000c60ad:
	mov -424(%RBP),%RSP
	add $-432, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c60af
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c60ae
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c60b1
uuid_00000000000c60af:
uuid_00000000000c60b1:
	mov -384(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000c60b4
uuid_00000000000c60b2:
uuid_00000000000c60b4:
	mov -352(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000c60b7
uuid_00000000000c60b5:
uuid_00000000000c60b7:
	mov -288(%RBP),%RSP
	add $-344, %RSP
	jmp uuid_00000000000c60ba
uuid_00000000000c60b8:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c60ba:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c60bd
uuid_00000000000c60bb:
#call function without-platform-props : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_platform_SB_props_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-platform-props : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_platform_SB_props_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6093
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6090
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c6092
uuid_00000000000c6090:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c6092:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c6095
uuid_00000000000c6093:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c608d
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c608f
uuid_00000000000c608d:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c608f:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c6095:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c60bd:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_only_SB_tag_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c60c4
	jmp uuid_00000000000c60c6
uuid_00000000000c60c4:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c60c1
	jmp uuid_00000000000c60c3
uuid_00000000000c60c1:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c60be
	jmp uuid_00000000000c60c0
uuid_00000000000c60be:
	movb $1, -120(%rbp)
uuid_00000000000c60c0:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c60c3:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c60c6:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c60dd
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c60d3
	jmp uuid_00000000000c60d5
uuid_00000000000c60d3:
	push %RBP
	jmp uuid_00000000000c60d0
	jmp uuid_00000000000c60d2
uuid_00000000000c60d0:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq $uuid_00000000000c5183
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c60cd
	jmp uuid_00000000000c60cf
uuid_00000000000c60cd:
	movb $1, -232(%rbp)
uuid_00000000000c60cf:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c60d2:
	mov -248(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c60d5:
	mov -240(%RBP),%RSP
	add $-264, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c60da
	push %RBP
	jmp uuid_00000000000c60d7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c60d6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c60d9
uuid_00000000000c60d7:
uuid_00000000000c60d9:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c60dc
uuid_00000000000c60da:
	movq -24(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c60dc:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c60df
uuid_00000000000c60dd:
#call function with-only-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c60ca
#call function with-only-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c60c7
	jmp uuid_00000000000c60c9
uuid_00000000000c60c7:
	movq -248(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -240(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c60c9:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c60cc
uuid_00000000000c60ca:
	movq -216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c60cc:
	mov -224(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000c60df:
	mov -88(%RBP),%RSP
	add $-224, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_only_SB_class_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c60e6
	jmp uuid_00000000000c60e8
uuid_00000000000c60e6:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c60e3
	jmp uuid_00000000000c60e5
uuid_00000000000c60e3:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c60e0
	jmp uuid_00000000000c60e2
uuid_00000000000c60e0:
	movb $1, -120(%rbp)
uuid_00000000000c60e2:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c60e5:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c60e8:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6105
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c60f5
	jmp uuid_00000000000c60f7
uuid_00000000000c60f5:
	push %RBP
	jmp uuid_00000000000c60f2
	jmp uuid_00000000000c60f4
uuid_00000000000c60f2:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c60ef
	jmp uuid_00000000000c60f1
uuid_00000000000c60ef:
	movb $1, -232(%rbp)
uuid_00000000000c60f1:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c60f4:
	mov -248(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c60f7:
	mov -240(%RBP),%RSP
	add $-264, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6102
	push %RBP
	jmp uuid_00000000000c60ff
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c60fe
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6101
uuid_00000000000c60ff:
uuid_00000000000c6101:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c6104
uuid_00000000000c6102:
	push %RBP
#call function is-class : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call is_SB_class_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c60fb
	jmp uuid_00000000000c60fd
uuid_00000000000c60fb:
	push %RBP
#call function is-fragment : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call is_SB_fragment_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c60f8
	jmp uuid_00000000000c60fa
uuid_00000000000c60f8:
	movq -24(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c60fa:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c60fd:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c6104:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c6107
uuid_00000000000c6105:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c60e9
	jmp uuid_00000000000c60eb
uuid_00000000000c60e9:
	movq -216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c60eb:
	mov -224(%RBP),%RSP
	add $-224, %RSP
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c60ec
	jmp uuid_00000000000c60ee
uuid_00000000000c60ec:
	movq -248(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -240(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c60ee:
	mov -256(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c6107:
	mov -88(%RBP),%RSP
	add $-256, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_only_SB_representation_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6112
	jmp uuid_00000000000c6114
uuid_00000000000c6112:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c610f
	jmp uuid_00000000000c6111
uuid_00000000000c610f:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c610c
	jmp uuid_00000000000c610e
uuid_00000000000c610c:
	movb $1, -184(%rbp)
uuid_00000000000c610e:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c6111:
	mov -200(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c6114:
	mov -192(%RBP),%RSP
	add $-272, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6119
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6116
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6115
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6118
uuid_00000000000c6116:
uuid_00000000000c6118:
	mov -280(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000c611b
uuid_00000000000c6119:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-only-representation : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c611b:
	mov -136(%RBP),%RSP
	add $-272, %RSP
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
with_SB_only_SB_representation_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6122
	jmp uuid_00000000000c6124
uuid_00000000000c6122:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c611f
	jmp uuid_00000000000c6121
uuid_00000000000c611f:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c611c
	jmp uuid_00000000000c611e
uuid_00000000000c611c:
	movb $1, -120(%rbp)
uuid_00000000000c611e:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c6121:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c6124:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c61b3
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6134
	jmp uuid_00000000000c6136
uuid_00000000000c6134:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6131
	jmp uuid_00000000000c6133
uuid_00000000000c6131:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq $uuid_00000000000c5383
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c612e
	jmp uuid_00000000000c6130
uuid_00000000000c612e:
	movb $1, -232(%rbp)
uuid_00000000000c6130:
	mov -296(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c6133:
	mov -248(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c6136:
	mov -240(%RBP),%RSP
	add $-304, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c61b0
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c613d
	jmp uuid_00000000000c613f
uuid_00000000000c613d:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c613a
	jmp uuid_00000000000c613c
uuid_00000000000c613a:
	push %RBP
	mov -320(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -416(%rbp)
	pushq $uuid_00000000000c5f22
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6137
	jmp uuid_00000000000c6139
uuid_00000000000c6137:
	movb $1, -344(%rbp)
uuid_00000000000c6139:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c613c:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c613f:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c61ad
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6146
	jmp uuid_00000000000c6148
uuid_00000000000c6146:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6143
	jmp uuid_00000000000c6145
uuid_00000000000c6143:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq $uuid_00000000000c4f44
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6140
	jmp uuid_00000000000c6142
uuid_00000000000c6140:
	movb $1, -456(%rbp)
uuid_00000000000c6142:
	mov -520(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000c6145:
	mov -472(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000c6148:
	mov -464(%RBP),%RSP
	add $-528, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c61aa
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c614f
	jmp uuid_00000000000c6151
uuid_00000000000c614f:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c614c
	jmp uuid_00000000000c614e
uuid_00000000000c614c:
	push %RBP
	mov -544(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -640(%rbp)
	pushq $uuid_00000000000c51f3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6149
	jmp uuid_00000000000c614b
uuid_00000000000c6149:
	movb $1, -568(%rbp)
uuid_00000000000c614b:
	mov -632(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c614e:
	mov -584(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c6151:
	mov -576(%RBP),%RSP
	add $-640, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c61a7
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6158
	jmp uuid_00000000000c615a
uuid_00000000000c6158:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6155
	jmp uuid_00000000000c6157
uuid_00000000000c6155:
	push %RBP
	mov -656(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -752(%rbp)
	pushq $uuid_00000000000c4d92
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6152
	jmp uuid_00000000000c6154
uuid_00000000000c6152:
	movb $1, -680(%rbp)
uuid_00000000000c6154:
	mov -744(%RBP),%RSP
	add $-752, %RSP
uuid_00000000000c6157:
	mov -696(%RBP),%RSP
	add $-752, %RSP
uuid_00000000000c615a:
	mov -688(%RBP),%RSP
	add $-752, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c61a4
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -784(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6161
	jmp uuid_00000000000c6163
uuid_00000000000c6161:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c615e
	jmp uuid_00000000000c6160
uuid_00000000000c615e:
	push %RBP
	mov -768(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq $uuid_00000000000c4ea1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c615b
	jmp uuid_00000000000c615d
uuid_00000000000c615b:
	movb $1, -792(%rbp)
uuid_00000000000c615d:
	mov -856(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c6160:
	mov -808(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c6163:
	mov -800(%RBP),%RSP
	add $-864, %RSP
	mov -792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c61a1
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c616a
	jmp uuid_00000000000c616c
uuid_00000000000c616a:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6167
	jmp uuid_00000000000c6169
uuid_00000000000c6167:
	push %RBP
	mov -880(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq $uuid_00000000000c4ea5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6164
	jmp uuid_00000000000c6166
uuid_00000000000c6164:
	movb $1, -904(%rbp)
uuid_00000000000c6166:
	mov -968(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c6169:
	mov -920(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c616c:
	mov -912(%RBP),%RSP
	add $-976, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c619e
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1008(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6173
	jmp uuid_00000000000c6175
uuid_00000000000c6173:
	push %RBP
	mov -1000(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1072(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6170
	jmp uuid_00000000000c6172
uuid_00000000000c6170:
	push %RBP
	mov -992(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1088(%rbp)
	pushq $uuid_00000000000c4ea9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c616d
	jmp uuid_00000000000c616f
uuid_00000000000c616d:
	movb $1, -1016(%rbp)
uuid_00000000000c616f:
	mov -1080(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c6172:
	mov -1032(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c6175:
	mov -1024(%RBP),%RSP
	add $-1088, %RSP
	mov -1016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c619b
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c617c
	jmp uuid_00000000000c617e
uuid_00000000000c617c:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6179
	jmp uuid_00000000000c617b
uuid_00000000000c6179:
	push %RBP
	mov -1104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1200(%rbp)
	pushq $uuid_00000000000c4ead
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6176
	jmp uuid_00000000000c6178
uuid_00000000000c6176:
	movb $1, -1128(%rbp)
uuid_00000000000c6178:
	mov -1192(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c617b:
	mov -1144(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c617e:
	mov -1136(%RBP),%RSP
	add $-1200, %RSP
	mov -1128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6198
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6185
	jmp uuid_00000000000c6187
uuid_00000000000c6185:
	push %RBP
	mov -1224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6182
	jmp uuid_00000000000c6184
uuid_00000000000c6182:
	push %RBP
	mov -1216(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c617f
	jmp uuid_00000000000c6181
uuid_00000000000c617f:
	movb $1, -1240(%rbp)
uuid_00000000000c6181:
	mov -1304(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c6184:
	mov -1256(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c6187:
	mov -1248(%RBP),%RSP
	add $-1312, %RSP
	mov -1240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6195
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -1344(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6192
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c618b
	jmp uuid_00000000000c618d
uuid_00000000000c618b:
	push %RBP
	jmp uuid_00000000000c6188
	jmp uuid_00000000000c618a
uuid_00000000000c6188:
	movb $1, -1384(%rbp)
uuid_00000000000c618a:
	mov -1400(%RBP),%RSP
	add $-1400, %RSP
uuid_00000000000c618d:
	mov -1392(%RBP),%RSP
	add $-1400, %RSP
	mov -1384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c618f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c618e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6191
uuid_00000000000c618f:
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c6191:
	mov -1352(%RBP),%RSP
	add $-1400, %RSP
	jmp uuid_00000000000c6194
uuid_00000000000c6192:
uuid_00000000000c6194:
	mov -1320(%RBP),%RSP
	add $-1344, %RSP
	jmp uuid_00000000000c6197
uuid_00000000000c6195:
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c6197:
	mov -1208(%RBP),%RSP
	add $-1312, %RSP
	jmp uuid_00000000000c619a
uuid_00000000000c6198:
uuid_00000000000c619a:
	mov -1096(%RBP),%RSP
	add $-1200, %RSP
	jmp uuid_00000000000c619d
uuid_00000000000c619b:
uuid_00000000000c619d:
	mov -984(%RBP),%RSP
	add $-1088, %RSP
	jmp uuid_00000000000c61a0
uuid_00000000000c619e:
uuid_00000000000c61a0:
	mov -872(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000c61a3
uuid_00000000000c61a1:
uuid_00000000000c61a3:
	mov -760(%RBP),%RSP
	add $-864, %RSP
	jmp uuid_00000000000c61a6
uuid_00000000000c61a4:
uuid_00000000000c61a6:
	mov -648(%RBP),%RSP
	add $-752, %RSP
	jmp uuid_00000000000c61a9
uuid_00000000000c61a7:
uuid_00000000000c61a9:
	mov -536(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000c61ac
uuid_00000000000c61aa:
uuid_00000000000c61ac:
	mov -424(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000c61af
uuid_00000000000c61ad:
uuid_00000000000c61af:
	mov -312(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000c61b2
uuid_00000000000c61b0:
uuid_00000000000c61b2:
	mov -200(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000c61b5
uuid_00000000000c61b3:
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c612b
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6128
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	jmp uuid_00000000000c612a
uuid_00000000000c6128:
	movq -240(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c612a:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c612d
uuid_00000000000c612b:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6125
	movq -216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -40(%rbp)
	jmp uuid_00000000000c6127
uuid_00000000000c6125:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c6127:
	mov -256(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c612d:
	mov -248(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c61b5:
	mov -88(%RBP),%RSP
	add $-256, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
normalize_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function without-platform-props : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_platform_SB_props_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function without-size-unless-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
normalize_CL_ArrowTContextTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c61cc
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c61c9
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c61c2
	jmp uuid_00000000000c61c4
uuid_00000000000c61c2:
	push %RBP
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000c61bf
	jmp uuid_00000000000c61c1
uuid_00000000000c61bf:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000c61bc
	jmp uuid_00000000000c61be
uuid_00000000000c61bc:
	push %RBP
	mov -528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c61b9
	jmp uuid_00000000000c61bb
uuid_00000000000c61b9:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c61b6
	jmp uuid_00000000000c61b8
uuid_00000000000c61b6:
	movb $1, -640(%rbp)
uuid_00000000000c61b8:
	mov -784(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c61bb:
	mov -768(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c61be:
	mov -736(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c61c1:
	mov -656(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000c61c4:
	mov -648(%RBP),%RSP
	add $-904, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c61c6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c61c5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c61c8
uuid_00000000000c61c6:
#call function normalize : Arrow<TContext,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -776(%rbp)
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c61c8:
	mov -512(%RBP),%RSP
	add $-904, %RSP
	jmp uuid_00000000000c61cb
uuid_00000000000c61c9:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c61cb:
	mov -384(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000c61ce
uuid_00000000000c61cc:
uuid_00000000000c61ce:
	mov -256(%RBP),%RSP
	add $-376, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $128, %rsp
	ret
denormalize_CL_ArrowTypeType:
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function with-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function with-fields : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_fields_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function with-platform-props : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_platform_SB_props_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
enrich_CL_ArrowTypeConsTypeType:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c61cf
	jmp uuid_00000000000c61d1
uuid_00000000000c61cf:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c61d1:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
type_SB_of_SB_s_CL_ArrowTypeAST:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c61d8
	jmp uuid_00000000000c61da
uuid_00000000000c61d8:
	push %RBP
	jmp uuid_00000000000c61d5
	jmp uuid_00000000000c61d7
uuid_00000000000c61d5:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c61d2
	jmp uuid_00000000000c61d4
uuid_00000000000c61d2:
	movb $1, -264(%rbp)
uuid_00000000000c61d4:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c61d7:
	mov -280(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c61da:
	mov -272(%RBP),%RSP
	add $-296, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c620a
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c61e1
	jmp uuid_00000000000c61e3
uuid_00000000000c61e1:
	push %RBP
	jmp uuid_00000000000c61de
	jmp uuid_00000000000c61e0
uuid_00000000000c61de:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c61db
	jmp uuid_00000000000c61dd
uuid_00000000000c61db:
	movb $1, -384(%rbp)
uuid_00000000000c61dd:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c61e0:
	mov -400(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c61e3:
	mov -392(%RBP),%RSP
	add $-416, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6207
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c61fc
	jmp uuid_00000000000c61fe
uuid_00000000000c61fc:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c61f9
	jmp uuid_00000000000c61fb
uuid_00000000000c61f9:
	push %RBP
	mov -480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c61f3
	jmp uuid_00000000000c61f5
uuid_00000000000c61f3:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c61ea
	jmp uuid_00000000000c61ec
uuid_00000000000c61ea:
	push %RBP
	jmp uuid_00000000000c61e7
	jmp uuid_00000000000c61e9
uuid_00000000000c61e7:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq $uuid_00000000000c4cb2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c61e4
	jmp uuid_00000000000c61e6
uuid_00000000000c61e4:
	movb $1, -776(%rbp)
uuid_00000000000c61e6:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c61e9:
	mov -792(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c61ec:
	mov -784(%RBP),%RSP
	add $-808, %RSP
	mov -776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c61f0
	jmp uuid_00000000000c61f2
uuid_00000000000c61f0:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c61ed
	jmp uuid_00000000000c61ef
uuid_00000000000c61ed:
	movb $1, -680(%rbp)
uuid_00000000000c61ef:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c61f2:
	mov -696(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c61f5:
	mov -688(%RBP),%RSP
	add $-888, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c61f6
	jmp uuid_00000000000c61f8
uuid_00000000000c61f6:
	movb $1, -504(%rbp)
uuid_00000000000c61f8:
	mov -600(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c61fb:
	mov -520(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c61fe:
	mov -512(%RBP),%RSP
	add $-888, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6204
	push %RBP
	jmp uuid_00000000000c6201
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6200
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6203
uuid_00000000000c6201:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c61ff
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6203:
	mov -896(%RBP),%RSP
	add $-896, %RSP
	jmp uuid_00000000000c6206
uuid_00000000000c6204:
#call function type-of-s : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function type-of-s : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d94
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c6206:
	mov -424(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000c6209
uuid_00000000000c6207:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -416(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -440(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c6209:
	mov -304(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000c620c
uuid_00000000000c620a:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -320(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c620c:
	mov -184(%RBP),%RSP
	add $-320, %RSP
	subq $24, %rsp
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType:
	pushq $0
	pushq $0
	pushq $3
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6213
	jmp uuid_00000000000c6215
uuid_00000000000c6213:
	push %RBP
	jmp uuid_00000000000c6210
	jmp uuid_00000000000c6212
uuid_00000000000c6210:
	push %RBP
	mov -232(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c620d
	jmp uuid_00000000000c620f
uuid_00000000000c620d:
	movb $1, -304(%rbp)
uuid_00000000000c620f:
	mov -328(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c6212:
	mov -320(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c6215:
	mov -312(%RBP),%RSP
	add $-336, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6277
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6236
	jmp uuid_00000000000c6238
uuid_00000000000c6236:
	push %RBP
	jmp uuid_00000000000c6233
	jmp uuid_00000000000c6235
uuid_00000000000c6233:
	push %RBP
	mov -352(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6230
	jmp uuid_00000000000c6232
uuid_00000000000c6230:
	movb $1, -424(%rbp)
uuid_00000000000c6232:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c6235:
	mov -440(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c6238:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6274
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c626a
	jmp uuid_00000000000c626c
uuid_00000000000c626a:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6267
	jmp uuid_00000000000c6269
uuid_00000000000c6267:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6261
	jmp uuid_00000000000c6263
uuid_00000000000c6261:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -808(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6258
	jmp uuid_00000000000c625a
uuid_00000000000c6258:
	push %RBP
	jmp uuid_00000000000c6255
	jmp uuid_00000000000c6257
uuid_00000000000c6255:
	push %RBP
	mov -744(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq $uuid_00000000000c4cb2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6252
	jmp uuid_00000000000c6254
uuid_00000000000c6252:
	movb $1, -816(%rbp)
uuid_00000000000c6254:
	mov -840(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000c6257:
	mov -832(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000c625a:
	mov -824(%RBP),%RSP
	add $-848, %RSP
	mov -816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c625e
	jmp uuid_00000000000c6260
uuid_00000000000c625e:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c625b
	jmp uuid_00000000000c625d
uuid_00000000000c625b:
	movb $1, -720(%rbp)
uuid_00000000000c625d:
	mov -856(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c6260:
	mov -736(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c6263:
	mov -728(%RBP),%RSP
	add $-928, %RSP
	mov -720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6264
	jmp uuid_00000000000c6266
uuid_00000000000c6264:
	movb $1, -544(%rbp)
uuid_00000000000c6266:
	mov -640(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c6269:
	mov -560(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c626c:
	mov -552(%RBP),%RSP
	add $-928, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6271
	push %RBP
	jmp uuid_00000000000c626e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c626d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6270
uuid_00000000000c626e:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c61ff
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6270:
	mov -936(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000c6273
uuid_00000000000c6271:
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d94
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c6273:
	mov -464(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000c6276
uuid_00000000000c6274:
	pushq $0
	pushq $0
	pushq $3
#call function parse-field-of : Arrow<String,Tuple<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	mov %RBX, %RBP
	call parse_SB_field_SB_of_CL_ArrowTupleTypeStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c623f
	jmp uuid_00000000000c6241
uuid_00000000000c623f:
	push %RBP
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	jmp uuid_00000000000c623c
	jmp uuid_00000000000c623e
uuid_00000000000c623c:
	push %RBP
	mov -536(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq $uuid_00000000000c4960
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6239
	jmp uuid_00000000000c623b
uuid_00000000000c6239:
	movb $1, -576(%rbp)
uuid_00000000000c623b:
	mov -624(%RBP),%RSP
	add $-632, %RSP
uuid_00000000000c623e:
	mov -592(%RBP),%RSP
	add $-632, %RSP
uuid_00000000000c6241:
	mov -584(%RBP),%RSP
	add $-632, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c624f
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -680(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6248
	jmp uuid_00000000000c624a
uuid_00000000000c6248:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000c6245
	jmp uuid_00000000000c6247
uuid_00000000000c6245:
	push %RBP
	mov -648(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6242
	jmp uuid_00000000000c6244
uuid_00000000000c6242:
	movb $1, -688(%rbp)
uuid_00000000000c6244:
	mov -736(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000c6247:
	mov -704(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000c624a:
	mov -696(%RBP),%RSP
	add $-744, %RSP
	mov -688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c624c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c624b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c624e
uuid_00000000000c624c:
#call function add-alias : Arrow<Cons<Cons<String,String>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4be5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -744(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4be5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c500f
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call add_SB_alias_CL_ArrowNilConsTypeConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -728(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -472(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -464(%rbp)
uuid_00000000000c624e:
	mov -640(%RBP),%RSP
	add $-744, %RSP
	jmp uuid_00000000000c6251
uuid_00000000000c624f:
	movq -616(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -472(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -464(%rbp)
uuid_00000000000c6251:
	mov -528(%RBP),%RSP
	add $-632, %RSP
	movq -480(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -128(%rbp)
uuid_00000000000c6276:
	mov -344(%RBP),%RSP
	add $-632, %RSP
	jmp uuid_00000000000c6279
uuid_00000000000c6277:
	pushq $0
	pushq $0
	pushq $3
#call function parse-field-of : Arrow<String,Tuple<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	mov %RBX, %RBP
	call parse_SB_field_SB_of_CL_ArrowTupleTypeStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c621c
	jmp uuid_00000000000c621e
uuid_00000000000c621c:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	jmp uuid_00000000000c6219
	jmp uuid_00000000000c621b
uuid_00000000000c6219:
	push %RBP
	mov -416(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq $uuid_00000000000c4960
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6216
	jmp uuid_00000000000c6218
uuid_00000000000c6216:
	movb $1, -456(%rbp)
uuid_00000000000c6218:
	mov -504(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c621b:
	mov -472(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c621e:
	mov -464(%RBP),%RSP
	add $-512, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c622d
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6225
	jmp uuid_00000000000c6227
uuid_00000000000c6225:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000c6222
	jmp uuid_00000000000c6224
uuid_00000000000c6222:
	push %RBP
	mov -528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c621f
	jmp uuid_00000000000c6221
uuid_00000000000c621f:
	movb $1, -568(%rbp)
uuid_00000000000c6221:
	mov -616(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c6224:
	mov -584(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c6227:
	mov -576(%RBP),%RSP
	add $-624, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c622a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6229
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c622c
uuid_00000000000c622a:
#call function add-alias : Arrow<Cons<Cons<String,String>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4be5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -624(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4be5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c500f
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call add_SB_alias_CL_ArrowNilConsTypeConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6228
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5144
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -608(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -344(%rbp)
uuid_00000000000c622c:
	mov -520(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c622f
uuid_00000000000c622d:
	movq -496(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -344(%rbp)
uuid_00000000000c622f:
	mov -408(%RBP),%RSP
	add $-512, %RSP
	movq -360(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -128(%rbp)
uuid_00000000000c6279:
	mov -224(%RBP),%RSP
	add $-512, %RSP
	subq $24, %rsp
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $120, %rsp
	ret
typeof_SB_lhs_CL_ArrowTypeAST:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6298
	jmp uuid_00000000000c629a
uuid_00000000000c6298:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6286
	jmp uuid_00000000000c6288
uuid_00000000000c6286:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c627d
	jmp uuid_00000000000c627f
uuid_00000000000c627d:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	jmp uuid_00000000000c627a
	jmp uuid_00000000000c627c
uuid_00000000000c627a:
	movb $1, -456(%rbp)
uuid_00000000000c627c:
	mov -472(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c627f:
	mov -464(%RBP),%RSP
	add $-496, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6283
	jmp uuid_00000000000c6285
uuid_00000000000c6283:
	push %RBP
	jmp uuid_00000000000c6280
	jmp uuid_00000000000c6282
uuid_00000000000c6280:
	movb $1, -360(%rbp)
uuid_00000000000c6282:
	mov -504(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c6285:
	mov -376(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c6288:
	mov -368(%RBP),%RSP
	add $-504, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6295
	jmp uuid_00000000000c6297
uuid_00000000000c6295:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c628f
	jmp uuid_00000000000c6291
uuid_00000000000c628f:
	push %RBP
	jmp uuid_00000000000c628c
	jmp uuid_00000000000c628e
uuid_00000000000c628c:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6289
	jmp uuid_00000000000c628b
uuid_00000000000c6289:
	movb $1, -592(%rbp)
uuid_00000000000c628b:
	mov -616(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c628e:
	mov -608(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c6291:
	mov -600(%RBP),%RSP
	add $-624, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6292
	jmp uuid_00000000000c6294
uuid_00000000000c6292:
	movb $1, -264(%rbp)
uuid_00000000000c6294:
	mov -512(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c6297:
	mov -280(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c629a:
	mov -272(%RBP),%RSP
	add $-624, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c62d0
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c62c2
	jmp uuid_00000000000c62c4
uuid_00000000000c62c2:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c62b9
	jmp uuid_00000000000c62bb
uuid_00000000000c62b9:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c62a7
	jmp uuid_00000000000c62a9
uuid_00000000000c62a7:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c629e
	jmp uuid_00000000000c62a0
uuid_00000000000c629e:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000c629b
	jmp uuid_00000000000c629d
uuid_00000000000c629b:
	movb $1, -1000(%rbp)
uuid_00000000000c629d:
	mov -1016(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c62a0:
	mov -1008(%RBP),%RSP
	add $-1040, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c62a4
	jmp uuid_00000000000c62a6
uuid_00000000000c62a4:
	push %RBP
	jmp uuid_00000000000c62a1
	jmp uuid_00000000000c62a3
uuid_00000000000c62a1:
	movb $1, -904(%rbp)
uuid_00000000000c62a3:
	mov -1048(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c62a6:
	mov -920(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c62a9:
	mov -912(%RBP),%RSP
	add $-1048, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c62b6
	jmp uuid_00000000000c62b8
uuid_00000000000c62b6:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c62b0
	jmp uuid_00000000000c62b2
uuid_00000000000c62b0:
	push %RBP
	jmp uuid_00000000000c62ad
	jmp uuid_00000000000c62af
uuid_00000000000c62ad:
	push %RBP
	mov -1064(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1168(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c62aa
	jmp uuid_00000000000c62ac
uuid_00000000000c62aa:
	movb $1, -1136(%rbp)
uuid_00000000000c62ac:
	mov -1160(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c62af:
	mov -1152(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c62b2:
	mov -1144(%RBP),%RSP
	add $-1168, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c62b3
	jmp uuid_00000000000c62b5
uuid_00000000000c62b3:
	movb $1, -808(%rbp)
uuid_00000000000c62b5:
	mov -1056(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c62b8:
	mov -824(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c62bb:
	mov -816(%RBP),%RSP
	add $-1168, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c62bf
	jmp uuid_00000000000c62c1
uuid_00000000000c62bf:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c62bc
	jmp uuid_00000000000c62be
uuid_00000000000c62bc:
	movb $1, -712(%rbp)
uuid_00000000000c62be:
	mov -1176(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c62c1:
	mov -728(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c62c4:
	mov -720(%RBP),%RSP
	add $-1248, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c62cd
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov -1328(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c62ca
	push %RBP
	jmp uuid_00000000000c62c7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c62c6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c62c9
uuid_00000000000c62c7:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c62c5
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c62c9:
	mov -1336(%RBP),%RSP
	add $-1336, %RSP
	jmp uuid_00000000000c62cc
uuid_00000000000c62ca:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c62cc:
	mov -1256(%RBP),%RSP
	add $-1328, %RSP
	jmp uuid_00000000000c62cf
uuid_00000000000c62cd:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d94
#call function typeof-lhs : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	mov %RBX, %RBP
	call typeof_SB_lhs_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c62cf:
	mov -632(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000c62d2
uuid_00000000000c62d0:
	movq -496(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c62d2:
	mov -184(%RBP),%RSP
	add $-624, %RSP
	subq $24, %rsp
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
typeof_SB_tag_CL_ArrowTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTypeConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
cons_SB_head_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c62eb
	jmp uuid_00000000000c62ed
uuid_00000000000c62eb:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c62e2
	jmp uuid_00000000000c62e4
uuid_00000000000c62e2:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c62d9
	jmp uuid_00000000000c62db
uuid_00000000000c62d9:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c62d6
	jmp uuid_00000000000c62d8
uuid_00000000000c62d6:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000c62d3
	jmp uuid_00000000000c62d5
uuid_00000000000c62d3:
	movb $1, -248(%rbp)
uuid_00000000000c62d5:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c62d8:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c62db:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c62df
	jmp uuid_00000000000c62e1
uuid_00000000000c62df:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c62dc
	jmp uuid_00000000000c62de
uuid_00000000000c62dc:
	movb $1, -184(%rbp)
uuid_00000000000c62de:
	mov -344(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c62e1:
	mov -200(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c62e4:
	mov -192(%RBP),%RSP
	add $-368, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c62e8
	jmp uuid_00000000000c62ea
uuid_00000000000c62e8:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c62e5
	jmp uuid_00000000000c62e7
uuid_00000000000c62e5:
	movb $1, -120(%rbp)
uuid_00000000000c62e7:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c62ea:
	mov -136(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c62ed:
	mov -128(%RBP),%RSP
	add $-384, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c62f2
	push %RBP
	jmp uuid_00000000000c62ef
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c62ee
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c62f1
uuid_00000000000c62ef:
uuid_00000000000c62f1:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c62f4
uuid_00000000000c62f2:
	movq -336(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c62f4:
	mov -88(%RBP),%RSP
	add $-384, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
cons_SB_tail_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c630d
	jmp uuid_00000000000c630f
uuid_00000000000c630d:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6304
	jmp uuid_00000000000c6306
uuid_00000000000c6304:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c62fb
	jmp uuid_00000000000c62fd
uuid_00000000000c62fb:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c62f8
	jmp uuid_00000000000c62fa
uuid_00000000000c62f8:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000c62f5
	jmp uuid_00000000000c62f7
uuid_00000000000c62f5:
	movb $1, -248(%rbp)
uuid_00000000000c62f7:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c62fa:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c62fd:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6301
	jmp uuid_00000000000c6303
uuid_00000000000c6301:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c62fe
	jmp uuid_00000000000c6300
uuid_00000000000c62fe:
	movb $1, -184(%rbp)
uuid_00000000000c6300:
	mov -344(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c6303:
	mov -200(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c6306:
	mov -192(%RBP),%RSP
	add $-368, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c630a
	jmp uuid_00000000000c630c
uuid_00000000000c630a:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6307
	jmp uuid_00000000000c6309
uuid_00000000000c6307:
	movb $1, -120(%rbp)
uuid_00000000000c6309:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c630c:
	mov -136(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c630f:
	mov -128(%RBP),%RSP
	add $-384, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6314
	push %RBP
	jmp uuid_00000000000c6311
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6310
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6313
uuid_00000000000c6311:
uuid_00000000000c6313:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c6316
uuid_00000000000c6314:
	movq -368(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c6316:
	mov -88(%RBP),%RSP
	add $-384, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
parameter_SB_number_CL_ArrowU64ConsStringType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c631d
	jmp uuid_00000000000c631f
uuid_00000000000c631d:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c631a
	jmp uuid_00000000000c631c
uuid_00000000000c631a:
	push %RBP
	jmp uuid_00000000000c6317
	jmp uuid_00000000000c6319
uuid_00000000000c6317:
	movb $1, -112(%rbp)
uuid_00000000000c6319:
	mov -176(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c631c:
	mov -128(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c631f:
	mov -120(%RBP),%RSP
	add $-176, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6324
	push %RBP
	jmp uuid_00000000000c6321
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6320
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6323
uuid_00000000000c6321:
uuid_00000000000c6323:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000c6326
uuid_00000000000c6324:
#call function parameter-number : Arrow<Cons<Cons<List<Type>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -32(%rbp)
	pushq $1
	mov %RBX, %RBP
	call parameter_SB_number_CL_ArrowU64ConsU64ConsStringListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -48(%rbp)
uuid_00000000000c6326:
	mov -80(%RBP),%RSP
	add $-176, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
parameter_SB_number_CL_ArrowU64ConsU64ConsStringListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6339
	jmp uuid_00000000000c633b
uuid_00000000000c6339:
	push %RBP
	mov -152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6336
	jmp uuid_00000000000c6338
uuid_00000000000c6336:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6330
	jmp uuid_00000000000c6332
uuid_00000000000c6330:
	push %RBP
	mov -248(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c632d
	jmp uuid_00000000000c632f
uuid_00000000000c632d:
	movb $1, -264(%rbp)
uuid_00000000000c632f:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c6332:
	mov -272(%RBP),%RSP
	add $-288, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6333
	jmp uuid_00000000000c6335
uuid_00000000000c6333:
	movb $1, -168(%rbp)
uuid_00000000000c6335:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c6338:
	mov -184(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c633b:
	mov -176(%RBP),%RSP
	add $-288, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6343
	push %RBP
	jmp uuid_00000000000c6340
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c633f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6342
uuid_00000000000c6340:
uuid_00000000000c6342:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c6345
uuid_00000000000c6343:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c633c
#call function parameter-number : Arrow<Cons<Cons<List<Type>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -48(%rbp)
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call parameter_SB_number_CL_ArrowU64ConsU64ConsStringListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -72(%rbp)
	jmp uuid_00000000000c633e
uuid_00000000000c633c:
	movq -56(%rbp), %r15
	movq %r15, -72(%rbp)
	mov -56(%rbp), %r15
	mov %r15, -72(%rbp)
uuid_00000000000c633e:
	mov -296(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c6345:
	mov -120(%RBP),%RSP
	add $-296, %RSP
	mov -72(%rbp), %RAX
	mov %rbp, %rsp
	sub $64, %rsp
	ret
apply_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,U64>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq $1
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsU64ConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $144, %rsp
	ret
apply_CL_ArrowTupleTypeTypeConsU64ConsASTConsU64ConsTypeConsTypeString:
	pushq $0
	pushq $0
	pushq $3
#call function apply-plural : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6346
	jmp uuid_00000000000c6348
uuid_00000000000c6346:
#call function reduce-plural : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call reduce_SB_plural_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c6348:
	mov -224(%RBP),%RSP
	add $-224, %RSP
	push %RBP
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	mov -144(%RBP), %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c634c
	jmp uuid_00000000000c634e
uuid_00000000000c634c:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6349
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c634a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c634b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c634e:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6362
	jmp uuid_00000000000c6364
uuid_00000000000c6362:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c634f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5144
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6350
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
uuid_00000000000c635f:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6360
	jmp uuid_00000000000c6361
uuid_00000000000c6360:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6351
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -368(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6358
	jmp uuid_00000000000c635a
uuid_00000000000c6358:
	push %RBP
	mov -360(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6355
	jmp uuid_00000000000c6357
uuid_00000000000c6355:
	push %RBP
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	jmp uuid_00000000000c6352
	jmp uuid_00000000000c6354
uuid_00000000000c6352:
	movb $1, -376(%rbp)
uuid_00000000000c6354:
	mov -440(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c6357:
	mov -392(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c635a:
	mov -384(%RBP),%RSP
	add $-464, %RSP
	mov -376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c635c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c635b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c635e
uuid_00000000000c635c:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -432(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -248(%rbp)
uuid_00000000000c635e:
	mov -328(%RBP),%RSP
	add $-464, %RSP
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c635f
uuid_00000000000c6361:
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6364:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
uuid_00000000000c639e:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c639f
	jmp uuid_00000000000c63a0
uuid_00000000000c639f:
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c636b
	jmp uuid_00000000000c636d
uuid_00000000000c636b:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6368
	jmp uuid_00000000000c636a
uuid_00000000000c6368:
	push %RBP
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000c6365
	jmp uuid_00000000000c6367
uuid_00000000000c6365:
	movb $1, -416(%rbp)
uuid_00000000000c6367:
	mov -480(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c636a:
	mov -432(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c636d:
	mov -424(%RBP),%RSP
	add $-504, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c639b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c639a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c639d
uuid_00000000000c639b:
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	push %RBP
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6386
	jmp uuid_00000000000c6388
uuid_00000000000c6386:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c637d
	jmp uuid_00000000000c637f
uuid_00000000000c637d:
	push %RBP
	mov -616(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6374
	jmp uuid_00000000000c6376
uuid_00000000000c6374:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6371
	jmp uuid_00000000000c6373
uuid_00000000000c6371:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000c636e
	jmp uuid_00000000000c6370
uuid_00000000000c636e:
	movb $1, -696(%rbp)
uuid_00000000000c6370:
	mov -760(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c6373:
	mov -712(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c6376:
	mov -704(%RBP),%RSP
	add $-784, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c637a
	jmp uuid_00000000000c637c
uuid_00000000000c637a:
	push %RBP
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	jmp uuid_00000000000c6377
	jmp uuid_00000000000c6379
uuid_00000000000c6377:
	movb $1, -632(%rbp)
uuid_00000000000c6379:
	mov -792(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c637c:
	mov -648(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c637f:
	mov -640(%RBP),%RSP
	add $-816, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6383
	jmp uuid_00000000000c6385
uuid_00000000000c6383:
	push %RBP
	mov -544(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -832(%rbp)
	pushq $uuid_00000000000c500f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6380
	jmp uuid_00000000000c6382
uuid_00000000000c6380:
	movb $1, -568(%rbp)
uuid_00000000000c6382:
	mov -824(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c6385:
	mov -584(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c6388:
	mov -576(%RBP),%RSP
	add $-832, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6397
	push %RBP
	jmp uuid_00000000000c6394
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6393
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6396
uuid_00000000000c6394:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6392
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6396:
	mov -840(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000c6399
uuid_00000000000c6397:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function normalize : Arrow<TContext,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	movq -976(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -16(%rbp)
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -64(%RBP), %RAX
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c638f
	jmp uuid_00000000000c6391
uuid_00000000000c638f:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c638c
	jmp uuid_00000000000c638e
uuid_00000000000c638c:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6389
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c638a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5144
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c638b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c638e:
	mov -992(%RBP),%RSP
	add $-992, %RSP
#call function try-specialize : Arrow<Cons<Cons<Cons<String,Type>,TContext>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call try_SB_specialize_CL_ArrowNilConsTypeConsTContextConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6391:
	mov -984(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c6399:
	mov -536(%RBP),%RSP
	add $-992, %RSP
	movq -472(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -288(%rbp)
uuid_00000000000c639d:
	mov -368(%RBP),%RSP
	add $-992, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $120, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c639e
uuid_00000000000c63a0:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
apply_CL_ArrowASTConsASTContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c641e
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c641b
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c63a7
	jmp uuid_00000000000c63a9
uuid_00000000000c63a7:
	push %RBP
	jmp uuid_00000000000c63a4
	jmp uuid_00000000000c63a6
uuid_00000000000c63a4:
	push %RBP
	jmp uuid_00000000000c63a1
	jmp uuid_00000000000c63a3
uuid_00000000000c63a1:
	movb $1, -568(%rbp)
uuid_00000000000c63a3:
	mov -592(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c63a6:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c63a9:
	mov -576(%RBP),%RSP
	add $-592, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6418
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c63ad
	jmp uuid_00000000000c63af
uuid_00000000000c63ad:
	push %RBP
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000c63aa
	jmp uuid_00000000000c63ac
uuid_00000000000c63aa:
	movb $1, -680(%rbp)
uuid_00000000000c63ac:
	mov -696(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000c63af:
	mov -688(%RBP),%RSP
	add $-720, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6415
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c63b6
	jmp uuid_00000000000c63b8
uuid_00000000000c63b6:
	push %RBP
	jmp uuid_00000000000c63b3
	jmp uuid_00000000000c63b5
uuid_00000000000c63b3:
	push %RBP
	mov -736(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c63b0
	jmp uuid_00000000000c63b2
uuid_00000000000c63b0:
	movb $1, -808(%rbp)
uuid_00000000000c63b2:
	mov -832(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c63b5:
	mov -824(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c63b8:
	mov -816(%RBP),%RSP
	add $-840, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6412
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c63d8
	jmp uuid_00000000000c63da
uuid_00000000000c63d8:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c63d5
	jmp uuid_00000000000c63d7
uuid_00000000000c63d5:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c63d2
	jmp uuid_00000000000c63d4
uuid_00000000000c63d2:
	movb $1, -928(%rbp)
uuid_00000000000c63d4:
	mov -1024(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c63d7:
	mov -944(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c63da:
	mov -936(%RBP),%RSP
	add $-1096, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c640f
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1176(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c63e4
	jmp uuid_00000000000c63e6
uuid_00000000000c63e4:
	push %RBP
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	jmp uuid_00000000000c63e1
	jmp uuid_00000000000c63e3
uuid_00000000000c63e1:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c63de
	jmp uuid_00000000000c63e0
uuid_00000000000c63de:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c63db
	jmp uuid_00000000000c63dd
uuid_00000000000c63db:
	movb $1, -1184(%rbp)
uuid_00000000000c63dd:
	mov -1312(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c63e0:
	mov -1232(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c63e3:
	mov -1200(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c63e6:
	mov -1192(%RBP),%RSP
	add $-1384, %RSP
	mov -1184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c640c
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c63ed
	jmp uuid_00000000000c63ef
uuid_00000000000c63ed:
	push %RBP
	mov -1456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c63ea
	jmp uuid_00000000000c63ec
uuid_00000000000c63ea:
	push %RBP
	mov -1448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c63e7
	jmp uuid_00000000000c63e9
uuid_00000000000c63e7:
	movb $1, -1472(%rbp)
uuid_00000000000c63e9:
	mov -1568(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000c63ec:
	mov -1488(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000c63ef:
	mov -1480(%RBP),%RSP
	add $-1640, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6409
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1720(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c63f6
	jmp uuid_00000000000c63f8
uuid_00000000000c63f6:
	push %RBP
	mov -1712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c63f3
	jmp uuid_00000000000c63f5
uuid_00000000000c63f3:
	push %RBP
	mov -1704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c63f0
	jmp uuid_00000000000c63f2
uuid_00000000000c63f0:
	movb $1, -1728(%rbp)
uuid_00000000000c63f2:
	mov -1824(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c63f5:
	mov -1744(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c63f8:
	mov -1736(%RBP),%RSP
	add $-1896, %RSP
	mov -1728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6406
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1976(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c63ff
	jmp uuid_00000000000c6401
uuid_00000000000c63ff:
	push %RBP
	mov -1968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c63fc
	jmp uuid_00000000000c63fe
uuid_00000000000c63fc:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	jmp uuid_00000000000c63f9
	jmp uuid_00000000000c63fb
uuid_00000000000c63f9:
	movb $1, -1984(%rbp)
uuid_00000000000c63fb:
	mov -2080(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000c63fe:
	mov -2000(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000c6401:
	mov -1992(%RBP),%RSP
	add $-2136, %RSP
	mov -1984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6403
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6402
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6405
uuid_00000000000c6403:
#call function substitute : Arrow<Cons<Context,Token>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTokenConsTokenContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c6405:
	mov -1904(%RBP),%RSP
	add $-2136, %RSP
	jmp uuid_00000000000c6408
uuid_00000000000c6406:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c6408:
	mov -1648(%RBP),%RSP
	add $-1896, %RSP
	jmp uuid_00000000000c640b
uuid_00000000000c6409:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c640b:
	mov -1392(%RBP),%RSP
	add $-1640, %RSP
	jmp uuid_00000000000c640e
uuid_00000000000c640c:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $5
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c640e:
	mov -1104(%RBP),%RSP
	add $-1384, %RSP
	jmp uuid_00000000000c6411
uuid_00000000000c640f:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c6411:
	mov -848(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000c6414
uuid_00000000000c6412:
uuid_00000000000c63cf:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c63d0
	jmp uuid_00000000000c63d1
uuid_00000000000c63d0:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq $0
	push %RBP
	mov -1040(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c63c2
	jmp uuid_00000000000c63c4
uuid_00000000000c63c2:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	jmp uuid_00000000000c63bf
	jmp uuid_00000000000c63c1
uuid_00000000000c63bf:
	push %RBP
	mov -960(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c63bc
	jmp uuid_00000000000c63be
uuid_00000000000c63bc:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c63b9
	jmp uuid_00000000000c63bb
uuid_00000000000c63b9:
	movb $1, -1048(%rbp)
uuid_00000000000c63bb:
	mov -1160(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000c63be:
	mov -1144(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000c63c1:
	mov -1064(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000c63c4:
	mov -1056(%RBP),%RSP
	add $-1256, %RSP
	mov -1048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c63cc
	push %RBP
	jmp uuid_00000000000c63c9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c63c8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c63cb
uuid_00000000000c63c9:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c63cb:
	mov -1264(%RBP),%RSP
	add $-1264, %RSP
	jmp uuid_00000000000c63ce
uuid_00000000000c63cc:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1152(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c63c5
	movq -1256(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c63c7
uuid_00000000000c63c5:
	movq -1136(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -184(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c63c7:
	mov -1264(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c63ce:
	mov -944(%RBP),%RSP
	add $-1264, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c63cf
uuid_00000000000c63d1:
uuid_00000000000c6414:
	mov -728(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000c6417
uuid_00000000000c6415:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	pushq $4
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c6417:
	mov -600(%RBP),%RSP
	add $-720, %RSP
	jmp uuid_00000000000c641a
uuid_00000000000c6418:
uuid_00000000000c641a:
	mov -488(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000c641d
uuid_00000000000c641b:
uuid_00000000000c641d:
	mov -408(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000c6420
uuid_00000000000c641e:
uuid_00000000000c6420:
	mov -328(%RBP),%RSP
	add $-400, %RSP
	subq $72, %rsp
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
apply_SB_and_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	subq $24, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c642b
	jmp uuid_00000000000c642d
uuid_00000000000c642b:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6428
	jmp uuid_00000000000c642a
uuid_00000000000c6428:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6425
	jmp uuid_00000000000c6427
uuid_00000000000c6425:
	movb $1, -240(%rbp)
uuid_00000000000c6427:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c642a:
	mov -256(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c642d:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6453
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6446
	jmp uuid_00000000000c6448
uuid_00000000000c6446:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c643d
	jmp uuid_00000000000c643f
uuid_00000000000c643d:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6434
	jmp uuid_00000000000c6436
uuid_00000000000c6434:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6431
	jmp uuid_00000000000c6433
uuid_00000000000c6431:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c642e
	jmp uuid_00000000000c6430
uuid_00000000000c642e:
	movb $1, -480(%rbp)
uuid_00000000000c6430:
	mov -544(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000c6433:
	mov -496(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000c6436:
	mov -488(%RBP),%RSP
	add $-568, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c643a
	jmp uuid_00000000000c643c
uuid_00000000000c643a:
	push %RBP
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000c6437
	jmp uuid_00000000000c6439
uuid_00000000000c6437:
	movb $1, -416(%rbp)
uuid_00000000000c6439:
	mov -576(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c643c:
	mov -432(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c643f:
	mov -424(%RBP),%RSP
	add $-600, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6443
	jmp uuid_00000000000c6445
uuid_00000000000c6443:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq $uuid_00000000000c500f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6440
	jmp uuid_00000000000c6442
uuid_00000000000c6440:
	movb $1, -352(%rbp)
uuid_00000000000c6442:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c6445:
	mov -368(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c6448:
	mov -360(%RBP),%RSP
	add $-616, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6450
	push %RBP
	jmp uuid_00000000000c644d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c644c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c644f
uuid_00000000000c644d:
uuid_00000000000c644f:
	mov -624(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c6452
uuid_00000000000c6450:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6449
	jmp uuid_00000000000c644b
uuid_00000000000c6449:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000c644b:
	mov -624(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c6452:
	mov -320(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c6455
uuid_00000000000c6453:
#call function + : Arrow<Cons<List<Type>,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply-plural : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
#call function apply-plural : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowListTypeConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000c6455:
	mov -208(%RBP),%RSP
	add $-312, %RSP
	subq $40, %rsp
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
reduce_SB_plural_CL_ArrowListTypeListType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
uuid_00000000000c646e:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c646f
	jmp uuid_00000000000c6470
uuid_00000000000c646f:
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6464
	jmp uuid_00000000000c6466
uuid_00000000000c6464:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6461
	jmp uuid_00000000000c6463
uuid_00000000000c6461:
	push %RBP
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	jmp uuid_00000000000c645e
	jmp uuid_00000000000c6460
uuid_00000000000c645e:
	movb $1, -224(%rbp)
uuid_00000000000c6460:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c6463:
	mov -240(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c6466:
	mov -232(%RBP),%RSP
	add $-312, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c646b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c646a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c646d
uuid_00000000000c646b:
	push %RBP
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6467
	jmp uuid_00000000000c6469
uuid_00000000000c6467:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c6469:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	movq -280(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -248(%rbp), %r15
	movq %r15, -96(%rbp)
uuid_00000000000c646d:
	mov -176(%RBP),%RSP
	add $-320, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c646e
uuid_00000000000c6470:
	push %RBP
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6471
	jmp uuid_00000000000c6473
uuid_00000000000c6471:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6473:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c649a:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c649b
	jmp uuid_00000000000c649c
uuid_00000000000c649b:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c647a
	jmp uuid_00000000000c647c
uuid_00000000000c647a:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6477
	jmp uuid_00000000000c6479
uuid_00000000000c6477:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000c6474
	jmp uuid_00000000000c6476
uuid_00000000000c6474:
	movb $1, -232(%rbp)
uuid_00000000000c6476:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c6479:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c647c:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6497
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6496
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6499
uuid_00000000000c6497:
	movq -288(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -8(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
uuid_00000000000c6490:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6491
	jmp uuid_00000000000c6492
uuid_00000000000c6491:
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6483
	jmp uuid_00000000000c6485
uuid_00000000000c6483:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6480
	jmp uuid_00000000000c6482
uuid_00000000000c6480:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000c647d
	jmp uuid_00000000000c647f
uuid_00000000000c647d:
	movb $1, -456(%rbp)
uuid_00000000000c647f:
	mov -520(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c6482:
	mov -472(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c6485:
	mov -464(%RBP),%RSP
	add $-544, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c648d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c648c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c648f
uuid_00000000000c648d:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6489
	jmp uuid_00000000000c648b
uuid_00000000000c6489:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6486
	jmp uuid_00000000000c6488
uuid_00000000000c6486:
	pushq $0
	pushq $0
	pushq $3
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c6488:
	mov -560(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c648b:
	mov -552(%RBP),%RSP
	add $-560, %RSP
	movq -512(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -328(%rbp)
uuid_00000000000c648f:
	mov -408(%RBP),%RSP
	add $-560, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c6490
uuid_00000000000c6492:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6493
	jmp uuid_00000000000c6495
uuid_00000000000c6493:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c6495:
	mov -368(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c6499:
	mov -184(%RBP),%RSP
	add $-368, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c649a
uuid_00000000000c649c:
	movq -88(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -80(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -72(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -64(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -56(%rbp), %r15
	movq %r15, -8(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c64c3:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c64c4
	jmp uuid_00000000000c64c5
uuid_00000000000c64c4:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c64a3
	jmp uuid_00000000000c64a5
uuid_00000000000c64a3:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c64a0
	jmp uuid_00000000000c64a2
uuid_00000000000c64a0:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000c649d
	jmp uuid_00000000000c649f
uuid_00000000000c649d:
	movb $1, -232(%rbp)
uuid_00000000000c649f:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c64a2:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c64a5:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c64c0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c64bf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c64c2
uuid_00000000000c64c0:
	movq -288(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -8(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
uuid_00000000000c64b9:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c64ba
	jmp uuid_00000000000c64bb
uuid_00000000000c64ba:
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c64ac
	jmp uuid_00000000000c64ae
uuid_00000000000c64ac:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c64a9
	jmp uuid_00000000000c64ab
uuid_00000000000c64a9:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000c64a6
	jmp uuid_00000000000c64a8
uuid_00000000000c64a6:
	movb $1, -456(%rbp)
uuid_00000000000c64a8:
	mov -520(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c64ab:
	mov -472(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c64ae:
	mov -464(%RBP),%RSP
	add $-544, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c64b6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c64b5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c64b8
uuid_00000000000c64b6:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c64b2
	jmp uuid_00000000000c64b4
uuid_00000000000c64b2:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c64af
	jmp uuid_00000000000c64b1
uuid_00000000000c64af:
	pushq $0
	pushq $0
	pushq $3
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c64b1:
	mov -560(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c64b4:
	mov -552(%RBP),%RSP
	add $-560, %RSP
	movq -512(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -328(%rbp)
uuid_00000000000c64b8:
	mov -408(%RBP),%RSP
	add $-560, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c64b9
uuid_00000000000c64bb:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c64bc
	jmp uuid_00000000000c64be
uuid_00000000000c64bc:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c64be:
	mov -368(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c64c2:
	mov -184(%RBP),%RSP
	add $-368, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c64c3
uuid_00000000000c64c5:
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
apply_SB_or_SB_cons_SB_and_SB_specialize_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c64c9
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c64c6
	jmp uuid_00000000000c64c8
uuid_00000000000c64c6:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d94
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $0
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000c64c8:
	mov -208(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c64cb
uuid_00000000000c64c9:
#call function apply : Arrow<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000c64cb:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	subq $56, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
try_SB_specialize_CL_ArrowNilConsTypeConsTContextConsTypeString:
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c6512:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6513
	jmp uuid_00000000000c6514
uuid_00000000000c6513:
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c650f
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $0
	push %RBP
	mov -680(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c64d8
	jmp uuid_00000000000c64da
uuid_00000000000c64d8:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000c64d5
	jmp uuid_00000000000c64d7
uuid_00000000000c64d5:
	push %RBP
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	jmp uuid_00000000000c64d2
	jmp uuid_00000000000c64d4
uuid_00000000000c64d2:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c64cf
	jmp uuid_00000000000c64d1
uuid_00000000000c64cf:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c64cc
	jmp uuid_00000000000c64ce
uuid_00000000000c64cc:
	movb $1, -688(%rbp)
uuid_00000000000c64ce:
	mov -832(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c64d1:
	mov -816(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c64d4:
	mov -784(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c64d7:
	mov -704(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c64da:
	mov -696(%RBP),%RSP
	add $-952, %RSP
	mov -688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c650c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c650b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c650e
uuid_00000000000c650c:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -824(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6508
	jmp uuid_00000000000c650a
uuid_00000000000c6508:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c64db
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	jmp uuid_00000000000c64dd
uuid_00000000000c64db:
uuid_00000000000c64dd:
	mov -992(%RBP),%RSP
	add $-992, %RSP
	push %RBP
#call function is-special : Arrow<Cons<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	mov %RBX, %RBP
	call is_SB_special_CL_ArrowU64ConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6505
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq $uuid_00000000000c500f
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6502
	jmp uuid_00000000000c6504
uuid_00000000000c6502:
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	push %RBP
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c64f0
	jmp uuid_00000000000c64f2
uuid_00000000000c64f0:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c64e7
	jmp uuid_00000000000c64e9
uuid_00000000000c64e7:
	push %RBP
	jmp uuid_00000000000c64e4
	jmp uuid_00000000000c64e6
uuid_00000000000c64e4:
	push %RBP
	jmp uuid_00000000000c64e1
	jmp uuid_00000000000c64e3
uuid_00000000000c64e1:
	push %RBP
	jmp uuid_00000000000c64de
	jmp uuid_00000000000c64e0
uuid_00000000000c64de:
	movb $1, -1264(%rbp)
uuid_00000000000c64e0:
	mov -1296(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c64e3:
	mov -1288(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c64e6:
	mov -1280(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c64e9:
	mov -1272(%RBP),%RSP
	add $-1296, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c64ed
	jmp uuid_00000000000c64ef
uuid_00000000000c64ed:
	push %RBP
	jmp uuid_00000000000c64ea
	jmp uuid_00000000000c64ec
uuid_00000000000c64ea:
	movb $1, -1168(%rbp)
uuid_00000000000c64ec:
	mov -1304(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c64ef:
	mov -1184(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c64f2:
	mov -1176(%RBP),%RSP
	add $-1304, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c64ff
	push %RBP
	jmp uuid_00000000000c64fc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c64fb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c64fe
uuid_00000000000c64fc:
uuid_00000000000c64fe:
	mov -1312(%RBP),%RSP
	add $-1312, %RSP
	jmp uuid_00000000000c6501
uuid_00000000000c64ff:
#call function cons : Arrow<Cons<StackToSpecialize,List<StackToSpecialize>>,List<StackToSpecialize>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq $0
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListStackToSpecializeConsListStackToSpecializeStackToSpecialize
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000c6501:
	mov -1088(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c6504:
	mov -1008(%RBP),%RSP
	add $-1304, %RSP
	jmp uuid_00000000000c6507
uuid_00000000000c6505:
uuid_00000000000c6507:
	mov -1000(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000c650a:
	mov -960(%RBP),%RSP
	add $-1000, %RSP
	movq -952(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -192(%rbp)
uuid_00000000000c650e:
	mov -560(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000c6511
uuid_00000000000c650f:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c6511:
	mov -432(%RBP),%RSP
	add $-552, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c6512
uuid_00000000000c6514:
	mov %rbp, %rsp
	sub $184, %rsp
	ret
unify_SB_hint_CL_ArrowTypeConsTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c652d
	jmp uuid_00000000000c652f
uuid_00000000000c652d:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c651b
	jmp uuid_00000000000c651d
uuid_00000000000c651b:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6518
	jmp uuid_00000000000c651a
uuid_00000000000c6518:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6515
	jmp uuid_00000000000c6517
uuid_00000000000c6515:
	movb $1, -232(%rbp)
uuid_00000000000c6517:
	mov -296(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c651a:
	mov -248(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c651d:
	mov -240(%RBP),%RSP
	add $-304, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c652a
	jmp uuid_00000000000c652c
uuid_00000000000c652a:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6524
	jmp uuid_00000000000c6526
uuid_00000000000c6524:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6521
	jmp uuid_00000000000c6523
uuid_00000000000c6521:
	push %RBP
	mov -320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c651e
	jmp uuid_00000000000c6520
uuid_00000000000c651e:
	movb $1, -344(%rbp)
uuid_00000000000c6520:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c6523:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c6526:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6527
	jmp uuid_00000000000c6529
uuid_00000000000c6527:
	movb $1, -184(%rbp)
uuid_00000000000c6529:
	mov -312(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c652c:
	mov -200(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c652f:
	mov -192(%RBP),%RSP
	add $-416, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c654c
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6542
	jmp uuid_00000000000c6544
uuid_00000000000c6542:
	push %RBP
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6539
	jmp uuid_00000000000c653b
uuid_00000000000c6539:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6536
	jmp uuid_00000000000c6538
uuid_00000000000c6536:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6533
	jmp uuid_00000000000c6535
uuid_00000000000c6533:
	movb $1, -536(%rbp)
uuid_00000000000c6535:
	mov -584(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c6538:
	mov -552(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c653b:
	mov -544(%RBP),%RSP
	add $-608, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c653f
	jmp uuid_00000000000c6541
uuid_00000000000c653f:
	push %RBP
	jmp uuid_00000000000c653c
	jmp uuid_00000000000c653e
uuid_00000000000c653c:
	movb $1, -488(%rbp)
uuid_00000000000c653e:
	mov -616(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c6541:
	mov -504(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c6544:
	mov -496(%RBP),%RSP
	add $-616, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6549
	push %RBP
	jmp uuid_00000000000c6546
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6545
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6548
uuid_00000000000c6546:
uuid_00000000000c6548:
	mov -624(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c654b
uuid_00000000000c6549:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000c654b:
	mov -424(%RBP),%RSP
	add $-616, %RSP
	jmp uuid_00000000000c654e
uuid_00000000000c654c:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -416(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6530
	pushq -304(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	jmp uuid_00000000000c6532
uuid_00000000000c6530:
	movq -24(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000c6532:
	mov -424(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c654e:
	mov -120(%RBP),%RSP
	add $-424, %RSP
	subq $24, %rsp
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_SB_hint_CL_ArrowListTypeConsListTypeType:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6563
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6559
	jmp uuid_00000000000c655b
uuid_00000000000c6559:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6556
	jmp uuid_00000000000c6558
uuid_00000000000c6556:
	push %RBP
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	jmp uuid_00000000000c6553
	jmp uuid_00000000000c6555
uuid_00000000000c6553:
	movb $1, -216(%rbp)
uuid_00000000000c6555:
	mov -280(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c6558:
	mov -232(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c655b:
	mov -224(%RBP),%RSP
	add $-304, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6560
	push %RBP
	jmp uuid_00000000000c655d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c655c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c655f
uuid_00000000000c655d:
uuid_00000000000c655f:
	mov -312(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c6562
uuid_00000000000c6560:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-hint : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000c6562:
	mov -168(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000c6565
uuid_00000000000c6563:
uuid_00000000000c6565:
	mov -120(%RBP),%RSP
	add $-160, %RSP
	subq $40, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
infer_SB_type_SB_definition_CL_ArrowU64ConsU64ConsASTType:
#call function mark-class-exists : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_class_SB_exists_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function mark-is-lm-struct : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_is_SB_lm_SB_struct_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c657f
	jmp uuid_00000000000c6581
uuid_00000000000c657f:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c657c
	jmp uuid_00000000000c657e
uuid_00000000000c657c:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6576
	jmp uuid_00000000000c6578
uuid_00000000000c6576:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c656d
	jmp uuid_00000000000c656f
uuid_00000000000c656d:
	push %RBP
	jmp uuid_00000000000c656a
	jmp uuid_00000000000c656c
uuid_00000000000c656a:
	push %RBP
	mov -480(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -584(%rbp)
	pushq $uuid_00000000000c6566
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6567
	jmp uuid_00000000000c6569
uuid_00000000000c6567:
	movb $1, -552(%rbp)
uuid_00000000000c6569:
	mov -576(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c656c:
	mov -568(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c656f:
	mov -560(%RBP),%RSP
	add $-584, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6573
	jmp uuid_00000000000c6575
uuid_00000000000c6573:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6570
	jmp uuid_00000000000c6572
uuid_00000000000c6570:
	movb $1, -456(%rbp)
uuid_00000000000c6572:
	mov -592(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c6575:
	mov -472(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c6578:
	mov -464(%RBP),%RSP
	add $-664, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6579
	jmp uuid_00000000000c657b
uuid_00000000000c6579:
	movb $1, -280(%rbp)
uuid_00000000000c657b:
	mov -376(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c657e:
	mov -296(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c6581:
	mov -288(%RBP),%RSP
	add $-664, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c65be
	push %RBP
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	jmp uuid_00000000000c65bb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c65ba
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c65bd
uuid_00000000000c65bb:
#call function infer-type-constructor : Arrow<Cons<Type,AST>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call infer_SB_type_SB_constructor_CL_ArrowU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -120(%rbp)
	push %RBP
	mov -104(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c65b7
	jmp uuid_00000000000c65b9
uuid_00000000000c65b7:
	pushq $uuid_00000000000c4960
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	push %RBP
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq $0
	push %RBP
	mov -912(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6588
	jmp uuid_00000000000c658a
uuid_00000000000c6588:
	push %RBP
	jmp uuid_00000000000c6585
	jmp uuid_00000000000c6587
uuid_00000000000c6585:
	push %RBP
	mov -848(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6582
	jmp uuid_00000000000c6584
uuid_00000000000c6582:
	movb $1, -920(%rbp)
uuid_00000000000c6584:
	mov -944(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c6587:
	mov -936(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c658a:
	mov -928(%RBP),%RSP
	add $-952, %RSP
	mov -920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c65a4
	push %RBP
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq $0
	push %RBP
	mov -1032(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c659a
	jmp uuid_00000000000c659c
uuid_00000000000c659a:
	push %RBP
	mov -1024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6597
	jmp uuid_00000000000c6599
uuid_00000000000c6597:
	push %RBP
	mov -1016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6591
	jmp uuid_00000000000c6593
uuid_00000000000c6591:
	push %RBP
	jmp uuid_00000000000c658e
	jmp uuid_00000000000c6590
uuid_00000000000c658e:
	push %RBP
	mov -1144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c658b
	jmp uuid_00000000000c658d
uuid_00000000000c658b:
	movb $1, -1216(%rbp)
uuid_00000000000c658d:
	mov -1240(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c6590:
	mov -1232(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c6593:
	mov -1224(%RBP),%RSP
	add $-1248, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6594
	jmp uuid_00000000000c6596
uuid_00000000000c6594:
	movb $1, -1040(%rbp)
uuid_00000000000c6596:
	mov -1136(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c6599:
	mov -1056(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c659c:
	mov -1048(%RBP),%RSP
	add $-1248, %RSP
	mov -1040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c65a1
	push %RBP
	jmp uuid_00000000000c659e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c659d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c65a0
uuid_00000000000c659e:
uuid_00000000000c65a0:
	mov -1256(%RBP),%RSP
	add $-1256, %RSP
	jmp uuid_00000000000c65a3
uuid_00000000000c65a1:
	movq -1248(%rbp), %r15
	movq %r15, -760(%rbp)
	mov -1248(%rbp), %r15
	mov %r15, -760(%rbp)
uuid_00000000000c65a3:
	mov -960(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000c65a6
uuid_00000000000c65a4:
	movq -952(%rbp), %r15
	movq %r15, -760(%rbp)
	mov -952(%rbp), %r15
	mov %r15, -760(%rbp)
uuid_00000000000c65a6:
	mov -840(%RBP),%RSP
	add $-952, %RSP
	push %RBP
	mov -760(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c65b4
	jmp uuid_00000000000c65b6
uuid_00000000000c65b4:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c65ad
	jmp uuid_00000000000c65af
uuid_00000000000c65ad:
	push %RBP
	jmp uuid_00000000000c65aa
	jmp uuid_00000000000c65ac
uuid_00000000000c65aa:
	push %RBP
	mov -1000(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c65a7
	jmp uuid_00000000000c65a9
uuid_00000000000c65a7:
	movb $1, -1024(%rbp)
uuid_00000000000c65a9:
	mov -1048(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c65ac:
	mov -1040(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c65af:
	mov -1032(%RBP),%RSP
	add $-1056, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c65b1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c65b0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c65b3
uuid_00000000000c65b1:
#call function has-only-child : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1056(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call has_SB_only_SB_child_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c65b3:
	mov -992(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c65b6:
	mov -960(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c65b9:
	mov -752(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c65bd:
	mov -672(%RBP),%RSP
	add $-1056, %RSP
	jmp uuid_00000000000c65c0
uuid_00000000000c65be:
#call function infer-type-definition : Arrow<Cons<Cons<Type,AST>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov -104(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call infer_SB_type_SB_definition_CL_ArrowU64ConsU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function infer-type-constructor : Arrow<Cons<Type,AST>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call infer_SB_type_SB_constructor_CL_ArrowU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -120(%rbp)
uuid_00000000000c65c0:
	mov -200(%RBP),%RSP
	add $-680, %RSP
	mov -120(%rbp), %RAX
	mov %rbp, %rsp
	sub $112, %rsp
	ret
arity_CL_ArrowU64ListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c65d2
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c65cb
	jmp uuid_00000000000c65cd
uuid_00000000000c65cb:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c65c8
	jmp uuid_00000000000c65ca
uuid_00000000000c65c8:
	push %RBP
	jmp uuid_00000000000c65c5
	jmp uuid_00000000000c65c7
uuid_00000000000c65c5:
	movb $1, -200(%rbp)
uuid_00000000000c65c7:
	mov -264(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c65ca:
	mov -216(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c65cd:
	mov -208(%RBP),%RSP
	add $-264, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c65cf
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c65ce
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c65d1
uuid_00000000000c65cf:
#call function arity : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000c65d1:
	mov -152(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c65d4
uuid_00000000000c65d2:
uuid_00000000000c65d4:
	mov -104(%RBP),%RSP
	add $-144, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
arity_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c65db
	jmp uuid_00000000000c65dd
uuid_00000000000c65db:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c65d8
	jmp uuid_00000000000c65da
uuid_00000000000c65d8:
	push %RBP
	jmp uuid_00000000000c65d5
	jmp uuid_00000000000c65d7
uuid_00000000000c65d5:
	movb $1, -104(%rbp)
uuid_00000000000c65d7:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c65da:
	mov -120(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c65dd:
	mov -112(%RBP),%RSP
	add $-168, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c65e2
	push %RBP
	jmp uuid_00000000000c65df
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c65de
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c65e1
uuid_00000000000c65df:
uuid_00000000000c65e1:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c65e4
uuid_00000000000c65e2:
#call function arity : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c65e4:
	mov -72(%RBP),%RSP
	add $-168, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
cons_SB_arity_CL_ArrowU64Type:
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c65fd
	jmp uuid_00000000000c65ff
uuid_00000000000c65fd:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c65f4
	jmp uuid_00000000000c65f6
uuid_00000000000c65f4:
	push %RBP
	mov -152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c65eb
	jmp uuid_00000000000c65ed
uuid_00000000000c65eb:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c65e8
	jmp uuid_00000000000c65ea
uuid_00000000000c65e8:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000c65e5
	jmp uuid_00000000000c65e7
uuid_00000000000c65e5:
	movb $1, -232(%rbp)
uuid_00000000000c65e7:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c65ea:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c65ed:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c65f1
	jmp uuid_00000000000c65f3
uuid_00000000000c65f1:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	jmp uuid_00000000000c65ee
	jmp uuid_00000000000c65f0
uuid_00000000000c65ee:
	movb $1, -168(%rbp)
uuid_00000000000c65f0:
	mov -328(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c65f3:
	mov -184(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c65f6:
	mov -176(%RBP),%RSP
	add $-352, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c65fa
	jmp uuid_00000000000c65fc
uuid_00000000000c65fa:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c65f7
	jmp uuid_00000000000c65f9
uuid_00000000000c65f7:
	movb $1, -104(%rbp)
uuid_00000000000c65f9:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c65fc:
	mov -120(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c65ff:
	mov -112(%RBP),%RSP
	add $-368, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6604
	push %RBP
	jmp uuid_00000000000c6601
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6600
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6603
uuid_00000000000c6601:
uuid_00000000000c6603:
	mov -376(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000c6606
uuid_00000000000c6604:
#call function cons-arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call cons_SB_arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c6606:
	mov -72(%RBP),%RSP
	add $-368, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
parse_SB_field_SB_of_CL_ArrowTupleTypeStringString:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $uuid_00000000000c4960
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c660a:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c660b
	jmp uuid_00000000000c660c
uuid_00000000000c660b:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6607
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c6609
uuid_00000000000c6607:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -48(%rbp)
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	inc %RAX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	movq $uuid_00000000000c4960, -8(%rbp)
uuid_00000000000c6609:
	mov -80(%RBP),%RSP
	add $-80, %RSP
	add $8, %RSP
	jmp uuid_00000000000c660a
uuid_00000000000c660c:
	pushq -48(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	subq $40, %rsp
	pushq 40(%rsp)
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
implicit_SB_tail_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6625
	jmp uuid_00000000000c6627
uuid_00000000000c6625:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c661c
	jmp uuid_00000000000c661e
uuid_00000000000c661c:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6613
	jmp uuid_00000000000c6615
uuid_00000000000c6613:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6610
	jmp uuid_00000000000c6612
uuid_00000000000c6610:
	push %RBP
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	jmp uuid_00000000000c660d
	jmp uuid_00000000000c660f
uuid_00000000000c660d:
	movb $1, -224(%rbp)
uuid_00000000000c660f:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c6612:
	mov -240(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c6615:
	mov -232(%RBP),%RSP
	add $-312, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6619
	jmp uuid_00000000000c661b
uuid_00000000000c6619:
	push %RBP
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	jmp uuid_00000000000c6616
	jmp uuid_00000000000c6618
uuid_00000000000c6616:
	movb $1, -160(%rbp)
uuid_00000000000c6618:
	mov -320(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c661b:
	mov -176(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c661e:
	mov -168(%RBP),%RSP
	add $-344, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6622
	jmp uuid_00000000000c6624
uuid_00000000000c6622:
	push %RBP
	mov -72(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c661f
	jmp uuid_00000000000c6621
uuid_00000000000c661f:
	movb $1, -96(%rbp)
uuid_00000000000c6621:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c6624:
	mov -112(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c6627:
	mov -104(%RBP),%RSP
	add $-360, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c662c
	push %RBP
	jmp uuid_00000000000c6629
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6628
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c662b
uuid_00000000000c6629:
uuid_00000000000c662b:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000c662e
uuid_00000000000c662c:
	movq -344(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c662e:
	mov -64(%RBP),%RSP
	add $-360, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
typeof_SB_var_CL_ArrowTypeConsStringConsTContextAST:
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6630
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c662f
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6632
uuid_00000000000c6630:
uuid_00000000000c6632:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	subq $24, %rsp
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $208, %rsp
	ret
typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST:
#call function find-alias-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	mov %RBX, %RBP
	call find_SB_alias_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
uuid_00000000000c6655:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6656
	jmp uuid_00000000000c6657
uuid_00000000000c6656:
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6652
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -608(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c663f
	jmp uuid_00000000000c6641
uuid_00000000000c663f:
	push %RBP
	jmp uuid_00000000000c663c
	jmp uuid_00000000000c663e
uuid_00000000000c663c:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	jmp uuid_00000000000c6639
	jmp uuid_00000000000c663b
uuid_00000000000c6639:
	push %RBP
	mov -504(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6636
	jmp uuid_00000000000c6638
uuid_00000000000c6636:
	push %RBP
	mov -496(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6633
	jmp uuid_00000000000c6635
uuid_00000000000c6633:
	movb $1, -616(%rbp)
uuid_00000000000c6635:
	mov -688(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c6638:
	mov -672(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c663b:
	mov -640(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c663e:
	mov -632(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c6641:
	mov -624(%RBP),%RSP
	add $-808, %RSP
	mov -616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c664f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c664e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6651
uuid_00000000000c664f:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c664b
	movq -808(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -80(%rbp)
	jmp uuid_00000000000c664d
uuid_00000000000c664b:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6645
	movq -664(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -216(%rbp)
	jmp uuid_00000000000c6647
uuid_00000000000c6645:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6642
	movq -664(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -216(%rbp)
	jmp uuid_00000000000c6644
uuid_00000000000c6642:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
uuid_00000000000c6644:
	mov -832(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c6647:
	mov -824(%RBP),%RSP
	add $-832, %RSP
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6648
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	jmp uuid_00000000000c664a
uuid_00000000000c6648:
	movq -808(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -80(%rbp)
uuid_00000000000c664a:
	mov -840(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c664d:
	mov -816(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c6651:
	mov -488(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000c6654
uuid_00000000000c6652:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
uuid_00000000000c6654:
	mov -360(%RBP),%RSP
	add $-480, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c6655
uuid_00000000000c6657:
	subq $24, %rsp
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $208, %rsp
	ret
typecheck_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
uuid_00000000000c6665:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6666
	jmp uuid_00000000000c6667
uuid_00000000000c6666:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c665e
	jmp uuid_00000000000c6660
uuid_00000000000c665e:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c665b
	jmp uuid_00000000000c665d
uuid_00000000000c665b:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6658
	jmp uuid_00000000000c665a
uuid_00000000000c6658:
	movb $1, -312(%rbp)
uuid_00000000000c665a:
	mov -408(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000c665d:
	mov -328(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000c6660:
	mov -320(%RBP),%RSP
	add $-480, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6662
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6661
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6664
uuid_00000000000c6662:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -480(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c6664:
	mov -232(%RBP),%RSP
	add $-480, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c6665
uuid_00000000000c6667:
uuid_00000000000c6675:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6676
	jmp uuid_00000000000c6677
uuid_00000000000c6676:
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c666e
	jmp uuid_00000000000c6670
uuid_00000000000c666e:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c666b
	jmp uuid_00000000000c666d
uuid_00000000000c666b:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6668
	jmp uuid_00000000000c666a
uuid_00000000000c6668:
	movb $1, -312(%rbp)
uuid_00000000000c666a:
	mov -408(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000c666d:
	mov -328(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000c6670:
	mov -320(%RBP),%RSP
	add $-480, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6672
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6671
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6674
uuid_00000000000c6672:
#call function infer-global-context : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call infer_SB_global_SB_context_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -480(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c6674:
	mov -232(%RBP),%RSP
	add $-480, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c6675
uuid_00000000000c6677:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c66a4:
#call function non-zero : Arrow<List<StackToSpecialize>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListStackToSpecialize
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c66a5
	jmp uuid_00000000000c66a6
uuid_00000000000c66a5:
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c669d
	jmp uuid_00000000000c669f
uuid_00000000000c669d:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c669a
	jmp uuid_00000000000c669c
uuid_00000000000c669a:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6694
	jmp uuid_00000000000c6696
uuid_00000000000c6694:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000c6691
	jmp uuid_00000000000c6693
uuid_00000000000c6691:
	push %RBP
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	jmp uuid_00000000000c668e
	jmp uuid_00000000000c6690
uuid_00000000000c668e:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000c668b
	jmp uuid_00000000000c668d
uuid_00000000000c668b:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6688
	jmp uuid_00000000000c668a
uuid_00000000000c6688:
	movb $1, -984(%rbp)
uuid_00000000000c668a:
	mov -1192(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c668d:
	mov -1160(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c6690:
	mov -1032(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c6693:
	mov -1000(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c6696:
	mov -992(%RBP),%RSP
	add $-1200, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6697
	jmp uuid_00000000000c6699
uuid_00000000000c6697:
	movb $1, -568(%rbp)
uuid_00000000000c6699:
	mov -792(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c669c:
	mov -584(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c669f:
	mov -576(%RBP),%RSP
	add $-1200, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c66a1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c66a0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c66a3
uuid_00000000000c66a1:
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %r14
	movq -784(%rbp), %r15
	movq %r15, 0(%r14)
	movq -776(%rbp), %r15
	movq %r15, 8(%r14)
	movq -768(%rbp), %r15
	movq %r15, 16(%r14)
	movq -760(%rbp), %r15
	movq %r15, 24(%r14)
	movq -752(%rbp), %r15
	movq %r15, 32(%r14)
	movq -744(%rbp), %r15
	movq %r15, 40(%r14)
	movq -736(%rbp), %r15
	movq %r15, 48(%r14)
	movq -728(%rbp), %r15
	movq %r15, 56(%r14)
	movq -720(%rbp), %r15
	movq %r15, 64(%r14)
	movq -712(%rbp), %r15
	movq %r15, 72(%r14)
	movq -704(%rbp), %r15
	movq %r15, 80(%r14)
	movq -696(%rbp), %r15
	movq %r15, 88(%r14)
	movq -688(%rbp), %r15
	movq %r15, 96(%r14)
	movq -680(%rbp), %r15
	movq %r15, 104(%r14)
	movq -672(%rbp), %r15
	movq %r15, 112(%r14)
	movq -664(%rbp), %r15
	movq %r15, 120(%r14)
	movq -656(%rbp), %r15
	movq %r15, 128(%r14)
	movq -648(%rbp), %r15
	movq %r15, 136(%r14)
	movq -640(%rbp), %r15
	movq %r15, 144(%r14)
	movq -632(%rbp), %r15
	movq %r15, 152(%r14)
	movq -624(%rbp), %r15
	movq %r15, 160(%r14)
	movq -616(%rbp), %r15
	movq %r15, 168(%r14)
	movq -608(%rbp), %r15
	movq %r15, 176(%r14)
	movq -600(%rbp), %r15
	movq %r15, 184(%r14)
	movq -592(%rbp), %r15
	movq %r15, 192(%r14)
#call function specialize : Arrow<Cons<Cons<Cons<String,Type>,TContext>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1200(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call specialize_CL_ArrowNilConsTypeConsTContextConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c66a3:
	mov -360(%RBP),%RSP
	add $-1200, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $200, %rsp
	add $184, %rsp
	add $8, %rsp
	add $24, %rsp
	add $120, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c66a4
uuid_00000000000c66a6:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
substitute_CL_ArrowTokenConsTokenContext:
	mov -104(%RBP), %RAX
	push %RAX
uuid_00000000000c66f0:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c66f1
	jmp uuid_00000000000c66f2
uuid_00000000000c66f1:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov -368(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c66ed
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c66b9
	jmp uuid_00000000000c66bb
uuid_00000000000c66b9:
	push %RBP
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c66ad
	jmp uuid_00000000000c66af
uuid_00000000000c66ad:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	jmp uuid_00000000000c66aa
	jmp uuid_00000000000c66ac
uuid_00000000000c66aa:
	push %RBP
	jmp uuid_00000000000c66a7
	jmp uuid_00000000000c66a9
uuid_00000000000c66a7:
	movb $1, -576(%rbp)
uuid_00000000000c66a9:
	mov -656(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c66ac:
	mov -592(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c66af:
	mov -584(%RBP),%RSP
	add $-656, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c66b6
	jmp uuid_00000000000c66b8
uuid_00000000000c66b6:
	push %RBP
	mov -392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c66b3
	jmp uuid_00000000000c66b5
uuid_00000000000c66b3:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c66b0
	jmp uuid_00000000000c66b2
uuid_00000000000c66b0:
	movb $1, -480(%rbp)
uuid_00000000000c66b2:
	mov -680(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c66b5:
	mov -664(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c66b8:
	mov -496(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c66bb:
	mov -488(%RBP),%RSP
	add $-776, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c66ea
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c66d1
	jmp uuid_00000000000c66d3
uuid_00000000000c66d1:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c66c5
	jmp uuid_00000000000c66c7
uuid_00000000000c66c5:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000c66c2
	jmp uuid_00000000000c66c4
uuid_00000000000c66c2:
	push %RBP
	jmp uuid_00000000000c66bf
	jmp uuid_00000000000c66c1
uuid_00000000000c66bf:
	movb $1, -984(%rbp)
uuid_00000000000c66c1:
	mov -1064(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c66c4:
	mov -1000(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c66c7:
	mov -992(%RBP),%RSP
	add $-1064, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c66ce
	jmp uuid_00000000000c66d0
uuid_00000000000c66ce:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c66cb
	jmp uuid_00000000000c66cd
uuid_00000000000c66cb:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c66c8
	jmp uuid_00000000000c66ca
uuid_00000000000c66c8:
	movb $1, -888(%rbp)
uuid_00000000000c66ca:
	mov -1088(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000c66cd:
	mov -1072(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000c66d0:
	mov -904(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000c66d3:
	mov -896(%RBP),%RSP
	add $-1184, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c66e7
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq $0
	push %RBP
	mov -1288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c66e0
	jmp uuid_00000000000c66e2
uuid_00000000000c66e0:
	push %RBP
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	jmp uuid_00000000000c66dd
	jmp uuid_00000000000c66df
uuid_00000000000c66dd:
	push %RBP
	mov -1208(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c66da
	jmp uuid_00000000000c66dc
uuid_00000000000c66da:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c66d7
	jmp uuid_00000000000c66d9
uuid_00000000000c66d7:
	movb $1, -1296(%rbp)
uuid_00000000000c66d9:
	mov -1408(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000c66dc:
	mov -1392(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000c66df:
	mov -1312(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000c66e2:
	mov -1304(%RBP),%RSP
	add $-1504, %RSP
	mov -1296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c66e4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c66e3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c66e6
uuid_00000000000c66e4:
	movq -1504(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c66e6:
	mov -1192(%RBP),%RSP
	add $-1504, %RSP
	jmp uuid_00000000000c66e9
uuid_00000000000c66e7:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c66d4
	movq -1184(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c66d6
uuid_00000000000c66d4:
	movq -1056(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -104(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c66d6:
	mov -1192(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000c66e9:
	mov -784(%RBP),%RSP
	add $-1192, %RSP
	jmp uuid_00000000000c66ec
uuid_00000000000c66ea:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c66bc
	movq -776(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -688(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c66be
uuid_00000000000c66bc:
	movq -648(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -640(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -616(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -104(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c66be:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c66ec:
	mov -376(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c66ef
uuid_00000000000c66ed:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c66ef:
	mov -272(%RBP),%RSP
	add $-368, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %RSP
	jmp uuid_00000000000c66f0
uuid_00000000000c66f2:
	subq $56, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $160, %rsp
	ret
substitute_CL_ArrowListTypeConsListTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6704
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c66fd
	jmp uuid_00000000000c66ff
uuid_00000000000c66fd:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c66fa
	jmp uuid_00000000000c66fc
uuid_00000000000c66fa:
	push %RBP
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	jmp uuid_00000000000c66f7
	jmp uuid_00000000000c66f9
uuid_00000000000c66f7:
	movb $1, -312(%rbp)
uuid_00000000000c66f9:
	mov -376(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c66fc:
	mov -328(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c66ff:
	mov -320(%RBP),%RSP
	add $-400, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6701
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6700
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6703
uuid_00000000000c6701:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
#call function substitute : Arrow<Cons<TContext,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c6703:
	mov -264(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c6706
uuid_00000000000c6704:
uuid_00000000000c6706:
	mov -216(%RBP),%RSP
	add $-256, %RSP
	subq $40, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
substitute_CL_ArrowTypeConsTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c670a
	jmp uuid_00000000000c670c
uuid_00000000000c670a:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6707
	jmp uuid_00000000000c6709
uuid_00000000000c6707:
	movb $1, -216(%rbp)
uuid_00000000000c6709:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c670c:
	mov -224(%RBP),%RSP
	add $-240, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6745
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c672f
	jmp uuid_00000000000c6731
uuid_00000000000c672f:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c672c
	jmp uuid_00000000000c672e
uuid_00000000000c672c:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6729
	jmp uuid_00000000000c672b
uuid_00000000000c6729:
	movb $1, -280(%rbp)
uuid_00000000000c672b:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c672e:
	mov -296(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c6731:
	mov -288(%RBP),%RSP
	add $-352, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6742
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6738
	jmp uuid_00000000000c673a
uuid_00000000000c6738:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6735
	jmp uuid_00000000000c6737
uuid_00000000000c6735:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6732
	jmp uuid_00000000000c6734
uuid_00000000000c6732:
	movb $1, -392(%rbp)
uuid_00000000000c6734:
	mov -440(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c6737:
	mov -408(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c673a:
	mov -400(%RBP),%RSP
	add $-464, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c673f
	push %RBP
	jmp uuid_00000000000c673c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c673b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c673e
uuid_00000000000c673c:
uuid_00000000000c673e:
	mov -472(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000c6741
uuid_00000000000c673f:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c6741:
	mov -360(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000c6744
uuid_00000000000c6742:
	pushq -352(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c6744:
	mov -248(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c6747
uuid_00000000000c6745:
uuid_00000000000c6726:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6727
	jmp uuid_00000000000c6728
uuid_00000000000c6727:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6723
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6719
	jmp uuid_00000000000c671b
uuid_00000000000c6719:
	push %RBP
	jmp uuid_00000000000c6716
	jmp uuid_00000000000c6718
uuid_00000000000c6716:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c6713
	jmp uuid_00000000000c6715
uuid_00000000000c6713:
	push %RBP
	mov -512(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6710
	jmp uuid_00000000000c6712
uuid_00000000000c6710:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c670d
	jmp uuid_00000000000c670f
uuid_00000000000c670d:
	movb $1, -624(%rbp)
uuid_00000000000c670f:
	mov -696(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c6712:
	mov -680(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c6715:
	mov -648(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c6718:
	mov -640(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c671b:
	mov -632(%RBP),%RSP
	add $-816, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6720
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c671f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6722
uuid_00000000000c6720:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c671c
	movq -816(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c671e
uuid_00000000000c671c:
	movq -672(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -664(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -128(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c671e:
	mov -824(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000c6722:
	mov -496(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000c6725
uuid_00000000000c6723:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6725:
	mov -368(%RBP),%RSP
	add $-488, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c6726
uuid_00000000000c6728:
uuid_00000000000c6747:
	mov -184(%RBP),%RSP
	add $-240, %RSP
	subq $24, %rsp
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
substitute_CL_ArrowListTypeConsListTypeContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6759
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6752
	jmp uuid_00000000000c6754
uuid_00000000000c6752:
	push %RBP
	mov -272(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c674f
	jmp uuid_00000000000c6751
uuid_00000000000c674f:
	push %RBP
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	jmp uuid_00000000000c674c
	jmp uuid_00000000000c674e
uuid_00000000000c674c:
	movb $1, -288(%rbp)
uuid_00000000000c674e:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c6751:
	mov -304(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c6754:
	mov -296(%RBP),%RSP
	add $-376, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6756
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6755
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6758
uuid_00000000000c6756:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
#call function substitute : Arrow<Cons<Context,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000c6758:
	mov -240(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000c675b
uuid_00000000000c6759:
uuid_00000000000c675b:
	mov -192(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $144, %rsp
	ret
substitute_CL_ArrowTypeConsTypeContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c675f
	jmp uuid_00000000000c6761
uuid_00000000000c675f:
	push %RBP
	mov -176(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c675c
	jmp uuid_00000000000c675e
uuid_00000000000c675c:
	movb $1, -192(%rbp)
uuid_00000000000c675e:
	mov -208(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c6761:
	mov -200(%RBP),%RSP
	add $-216, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c67ca
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c67b4
	jmp uuid_00000000000c67b6
uuid_00000000000c67b4:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c67b1
	jmp uuid_00000000000c67b3
uuid_00000000000c67b1:
	push %RBP
	mov -232(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c67ae
	jmp uuid_00000000000c67b0
uuid_00000000000c67ae:
	movb $1, -256(%rbp)
uuid_00000000000c67b0:
	mov -320(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c67b3:
	mov -272(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c67b6:
	mov -264(%RBP),%RSP
	add $-328, %RSP
	mov -256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c67c7
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c67bd
	jmp uuid_00000000000c67bf
uuid_00000000000c67bd:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c67ba
	jmp uuid_00000000000c67bc
uuid_00000000000c67ba:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c67b7
	jmp uuid_00000000000c67b9
uuid_00000000000c67b7:
	movb $1, -368(%rbp)
uuid_00000000000c67b9:
	mov -416(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c67bc:
	mov -384(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c67bf:
	mov -376(%RBP),%RSP
	add $-440, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c67c4
	push %RBP
	jmp uuid_00000000000c67c1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c67c0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c67c3
uuid_00000000000c67c1:
uuid_00000000000c67c3:
	mov -448(%RBP),%RSP
	add $-448, %RSP
	jmp uuid_00000000000c67c6
uuid_00000000000c67c4:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000c67c6:
	mov -336(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000c67c9
uuid_00000000000c67c7:
	pushq -328(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000c67c9:
	mov -224(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000c67cc
uuid_00000000000c67ca:
uuid_00000000000c67ab:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c67ac
	jmp uuid_00000000000c67ad
uuid_00000000000c67ac:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c67a8
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6774
	jmp uuid_00000000000c6776
uuid_00000000000c6774:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6768
	jmp uuid_00000000000c676a
uuid_00000000000c6768:
	push %RBP
	jmp uuid_00000000000c6765
	jmp uuid_00000000000c6767
uuid_00000000000c6765:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6762
	jmp uuid_00000000000c6764
uuid_00000000000c6762:
	movb $1, -624(%rbp)
uuid_00000000000c6764:
	mov -648(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c6767:
	mov -640(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c676a:
	mov -632(%RBP),%RSP
	add $-656, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6771
	jmp uuid_00000000000c6773
uuid_00000000000c6771:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c676e
	jmp uuid_00000000000c6770
uuid_00000000000c676e:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c676b
	jmp uuid_00000000000c676d
uuid_00000000000c676b:
	movb $1, -528(%rbp)
uuid_00000000000c676d:
	mov -680(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c6770:
	mov -664(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c6773:
	mov -544(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c6776:
	mov -536(%RBP),%RSP
	add $-776, %RSP
	mov -528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c67a5
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c678c
	jmp uuid_00000000000c678e
uuid_00000000000c678c:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6780
	jmp uuid_00000000000c6782
uuid_00000000000c6780:
	push %RBP
	jmp uuid_00000000000c677d
	jmp uuid_00000000000c677f
uuid_00000000000c677d:
	push %RBP
	mov -912(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c677a
	jmp uuid_00000000000c677c
uuid_00000000000c677a:
	movb $1, -984(%rbp)
uuid_00000000000c677c:
	mov -1008(%RBP),%RSP
	add $-1016, %RSP
uuid_00000000000c677f:
	mov -1000(%RBP),%RSP
	add $-1016, %RSP
uuid_00000000000c6782:
	mov -992(%RBP),%RSP
	add $-1016, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6789
	jmp uuid_00000000000c678b
uuid_00000000000c6789:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6786
	jmp uuid_00000000000c6788
uuid_00000000000c6786:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6783
	jmp uuid_00000000000c6785
uuid_00000000000c6783:
	movb $1, -888(%rbp)
uuid_00000000000c6785:
	mov -1040(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c6788:
	mov -1024(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c678b:
	mov -904(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c678e:
	mov -896(%RBP),%RSP
	add $-1136, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c67a2
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -1240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c679b
	jmp uuid_00000000000c679d
uuid_00000000000c679b:
	push %RBP
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	jmp uuid_00000000000c6798
	jmp uuid_00000000000c679a
uuid_00000000000c6798:
	push %RBP
	mov -1160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6795
	jmp uuid_00000000000c6797
uuid_00000000000c6795:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6792
	jmp uuid_00000000000c6794
uuid_00000000000c6792:
	movb $1, -1248(%rbp)
uuid_00000000000c6794:
	mov -1360(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c6797:
	mov -1344(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c679a:
	mov -1264(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c679d:
	mov -1256(%RBP),%RSP
	add $-1456, %RSP
	mov -1248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c679f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c679e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c67a1
uuid_00000000000c679f:
	movq -1456(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c67a1:
	mov -1144(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000c67a4
uuid_00000000000c67a2:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c678f
	movq -1136(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c6791
uuid_00000000000c678f:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6791:
	mov -1144(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000c67a4:
	mov -784(%RBP),%RSP
	add $-1144, %RSP
	jmp uuid_00000000000c67a7
uuid_00000000000c67a5:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6777
	movq -776(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -688(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c6779
uuid_00000000000c6777:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6779:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c67a7:
	mov -424(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c67aa
uuid_00000000000c67a8:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c67aa:
	mov -320(%RBP),%RSP
	add $-416, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %RSP
	jmp uuid_00000000000c67ab
uuid_00000000000c67ad:
uuid_00000000000c67cc:
	mov -160(%RBP),%RSP
	add $-216, %RSP
	subq $24, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $128, %rsp
	ret
substitute_SB_lhs_CL_ArrowASTConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c67fd
	jmp uuid_00000000000c67ff
uuid_00000000000c67fd:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c67f4
	jmp uuid_00000000000c67f6
uuid_00000000000c67f4:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c67e2
	jmp uuid_00000000000c67e4
uuid_00000000000c67e2:
	push %RBP
	mov -536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c67d0
	jmp uuid_00000000000c67d2
uuid_00000000000c67d0:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	jmp uuid_00000000000c67cd
	jmp uuid_00000000000c67cf
uuid_00000000000c67cd:
	movb $1, -648(%rbp)
uuid_00000000000c67cf:
	mov -664(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000c67d2:
	mov -656(%RBP),%RSP
	add $-688, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c67df
	jmp uuid_00000000000c67e1
uuid_00000000000c67df:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c67d9
	jmp uuid_00000000000c67db
uuid_00000000000c67d9:
	push %RBP
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	jmp uuid_00000000000c67d6
	jmp uuid_00000000000c67d8
uuid_00000000000c67d6:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c67d3
	jmp uuid_00000000000c67d5
uuid_00000000000c67d3:
	movb $1, -776(%rbp)
uuid_00000000000c67d5:
	mov -856(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c67d8:
	mov -792(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c67db:
	mov -784(%RBP),%RSP
	add $-864, %RSP
	mov -776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c67dc
	jmp uuid_00000000000c67de
uuid_00000000000c67dc:
	movb $1, -552(%rbp)
uuid_00000000000c67de:
	mov -696(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c67e1:
	mov -568(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c67e4:
	mov -560(%RBP),%RSP
	add $-864, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c67f1
	jmp uuid_00000000000c67f3
uuid_00000000000c67f1:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c67eb
	jmp uuid_00000000000c67ed
uuid_00000000000c67eb:
	push %RBP
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000c67e8
	jmp uuid_00000000000c67ea
uuid_00000000000c67e8:
	push %RBP
	mov -880(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c67e5
	jmp uuid_00000000000c67e7
uuid_00000000000c67e5:
	movb $1, -952(%rbp)
uuid_00000000000c67e7:
	mov -1032(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c67ea:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c67ed:
	mov -960(%RBP),%RSP
	add $-1040, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c67ee
	jmp uuid_00000000000c67f0
uuid_00000000000c67ee:
	movb $1, -456(%rbp)
uuid_00000000000c67f0:
	mov -872(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c67f3:
	mov -472(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c67f6:
	mov -464(%RBP),%RSP
	add $-1040, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c67fa
	jmp uuid_00000000000c67fc
uuid_00000000000c67fa:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c67f7
	jmp uuid_00000000000c67f9
uuid_00000000000c67f7:
	movb $1, -360(%rbp)
uuid_00000000000c67f9:
	mov -1048(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000c67fc:
	mov -376(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000c67ff:
	mov -368(%RBP),%RSP
	add $-1120, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6856
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6827
	jmp uuid_00000000000c6829
uuid_00000000000c6827:
	push %RBP
	mov -1192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1296(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6815
	jmp uuid_00000000000c6817
uuid_00000000000c6815:
	push %RBP
	mov -1288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6803
	jmp uuid_00000000000c6805
uuid_00000000000c6803:
	push %RBP
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	jmp uuid_00000000000c6800
	jmp uuid_00000000000c6802
uuid_00000000000c6800:
	movb $1, -1400(%rbp)
uuid_00000000000c6802:
	mov -1416(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c6805:
	mov -1408(%RBP),%RSP
	add $-1440, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6812
	jmp uuid_00000000000c6814
uuid_00000000000c6812:
	push %RBP
	mov -1280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1520(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c680c
	jmp uuid_00000000000c680e
uuid_00000000000c680c:
	push %RBP
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	jmp uuid_00000000000c6809
	jmp uuid_00000000000c680b
uuid_00000000000c6809:
	push %RBP
	mov -1456(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6806
	jmp uuid_00000000000c6808
uuid_00000000000c6806:
	movb $1, -1528(%rbp)
uuid_00000000000c6808:
	mov -1608(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c680b:
	mov -1544(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c680e:
	mov -1536(%RBP),%RSP
	add $-1616, %RSP
	mov -1528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c680f
	jmp uuid_00000000000c6811
uuid_00000000000c680f:
	movb $1, -1304(%rbp)
uuid_00000000000c6811:
	mov -1448(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c6814:
	mov -1320(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c6817:
	mov -1312(%RBP),%RSP
	add $-1616, %RSP
	mov -1304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6824
	jmp uuid_00000000000c6826
uuid_00000000000c6824:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1696(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c681e
	jmp uuid_00000000000c6820
uuid_00000000000c681e:
	push %RBP
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	jmp uuid_00000000000c681b
	jmp uuid_00000000000c681d
uuid_00000000000c681b:
	push %RBP
	mov -1632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1792(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6818
	jmp uuid_00000000000c681a
uuid_00000000000c6818:
	movb $1, -1704(%rbp)
uuid_00000000000c681a:
	mov -1784(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000c681d:
	mov -1720(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000c6820:
	mov -1712(%RBP),%RSP
	add $-1792, %RSP
	mov -1704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6821
	jmp uuid_00000000000c6823
uuid_00000000000c6821:
	movb $1, -1208(%rbp)
uuid_00000000000c6823:
	mov -1624(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000c6826:
	mov -1224(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000c6829:
	mov -1216(%RBP),%RSP
	add $-1792, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6853
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6839
	jmp uuid_00000000000c683b
uuid_00000000000c6839:
	push %RBP
	mov -1864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1968(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6830
	jmp uuid_00000000000c6832
uuid_00000000000c6830:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	jmp uuid_00000000000c682d
	jmp uuid_00000000000c682f
uuid_00000000000c682d:
	push %RBP
	mov -1904(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c682a
	jmp uuid_00000000000c682c
uuid_00000000000c682a:
	movb $1, -1976(%rbp)
uuid_00000000000c682c:
	mov -2056(%RBP),%RSP
	add $-2064, %RSP
uuid_00000000000c682f:
	mov -1992(%RBP),%RSP
	add $-2064, %RSP
uuid_00000000000c6832:
	mov -1984(%RBP),%RSP
	add $-2064, %RSP
	mov -1976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6836
	jmp uuid_00000000000c6838
uuid_00000000000c6836:
	push %RBP
	mov -1856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6833
	jmp uuid_00000000000c6835
uuid_00000000000c6833:
	movb $1, -1880(%rbp)
uuid_00000000000c6835:
	mov -2072(%RBP),%RSP
	add $-2144, %RSP
uuid_00000000000c6838:
	mov -1896(%RBP),%RSP
	add $-2144, %RSP
uuid_00000000000c683b:
	mov -1888(%RBP),%RSP
	add $-2144, %RSP
	mov -1880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6850
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2224(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6842
	jmp uuid_00000000000c6844
uuid_00000000000c6842:
	push %RBP
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	jmp uuid_00000000000c683f
	jmp uuid_00000000000c6841
uuid_00000000000c683f:
	push %RBP
	mov -2160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c683c
	jmp uuid_00000000000c683e
uuid_00000000000c683c:
	movb $1, -2232(%rbp)
uuid_00000000000c683e:
	mov -2312(%RBP),%RSP
	add $-2320, %RSP
uuid_00000000000c6841:
	mov -2248(%RBP),%RSP
	add $-2320, %RSP
uuid_00000000000c6844:
	mov -2240(%RBP),%RSP
	add $-2320, %RSP
	mov -2232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c684d
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -2400(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c684a
	push %RBP
	jmp uuid_00000000000c6847
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6846
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6849
uuid_00000000000c6847:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6845
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6849:
	mov -2408(%RBP),%RSP
	add $-2408, %RSP
	jmp uuid_00000000000c684c
uuid_00000000000c684a:
uuid_00000000000c684c:
	mov -2328(%RBP),%RSP
	add $-2400, %RSP
	jmp uuid_00000000000c684f
uuid_00000000000c684d:
	pushq -2320(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c684f:
	mov -2152(%RBP),%RSP
	add $-2320, %RSP
	jmp uuid_00000000000c6852
uuid_00000000000c6850:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-lhs : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	mov %RBX, %RBP
	call substitute_SB_lhs_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2064(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c6852:
	mov -1800(%RBP),%RSP
	add $-2144, %RSP
	jmp uuid_00000000000c6855
uuid_00000000000c6853:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1616(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c6855:
	mov -1128(%RBP),%RSP
	add $-1792, %RSP
	jmp uuid_00000000000c6858
uuid_00000000000c6856:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-lhs : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	mov %RBX, %RBP
	call substitute_SB_lhs_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c6858:
	mov -280(%RBP),%RSP
	add $-1120, %RSP
	subq $72, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
substitute_CL_ArrowASTConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6953
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6950
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6880
	jmp uuid_00000000000c6882
uuid_00000000000c6880:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -608(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c686e
	jmp uuid_00000000000c6870
uuid_00000000000c686e:
	push %RBP
	mov -600(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c685c
	jmp uuid_00000000000c685e
uuid_00000000000c685c:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	jmp uuid_00000000000c6859
	jmp uuid_00000000000c685b
uuid_00000000000c6859:
	movb $1, -712(%rbp)
uuid_00000000000c685b:
	mov -728(%RBP),%RSP
	add $-752, %RSP
uuid_00000000000c685e:
	mov -720(%RBP),%RSP
	add $-752, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c686b
	jmp uuid_00000000000c686d
uuid_00000000000c686b:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -832(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6865
	jmp uuid_00000000000c6867
uuid_00000000000c6865:
	push %RBP
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000c6862
	jmp uuid_00000000000c6864
uuid_00000000000c6862:
	push %RBP
	mov -768(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c685f
	jmp uuid_00000000000c6861
uuid_00000000000c685f:
	movb $1, -840(%rbp)
uuid_00000000000c6861:
	mov -920(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c6864:
	mov -856(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c6867:
	mov -848(%RBP),%RSP
	add $-928, %RSP
	mov -840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6868
	jmp uuid_00000000000c686a
uuid_00000000000c6868:
	movb $1, -616(%rbp)
uuid_00000000000c686a:
	mov -760(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c686d:
	mov -632(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c6870:
	mov -624(%RBP),%RSP
	add $-928, %RSP
	mov -616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c687d
	jmp uuid_00000000000c687f
uuid_00000000000c687d:
	push %RBP
	mov -496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1008(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6877
	jmp uuid_00000000000c6879
uuid_00000000000c6877:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	jmp uuid_00000000000c6874
	jmp uuid_00000000000c6876
uuid_00000000000c6874:
	push %RBP
	mov -944(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1104(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6871
	jmp uuid_00000000000c6873
uuid_00000000000c6871:
	movb $1, -1016(%rbp)
uuid_00000000000c6873:
	mov -1096(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c6876:
	mov -1032(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c6879:
	mov -1024(%RBP),%RSP
	add $-1104, %RSP
	mov -1016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c687a
	jmp uuid_00000000000c687c
uuid_00000000000c687a:
	movb $1, -520(%rbp)
uuid_00000000000c687c:
	mov -936(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c687f:
	mov -536(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c6882:
	mov -528(%RBP),%RSP
	add $-1104, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c694d
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1184(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c68c6
	jmp uuid_00000000000c68c8
uuid_00000000000c68c6:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1280(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c68b4
	jmp uuid_00000000000c68b6
uuid_00000000000c68b4:
	push %RBP
	mov -1272(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1376(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c68a2
	jmp uuid_00000000000c68a4
uuid_00000000000c68a2:
	push %RBP
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	jmp uuid_00000000000c689f
	jmp uuid_00000000000c68a1
uuid_00000000000c689f:
	movb $1, -1384(%rbp)
uuid_00000000000c68a1:
	mov -1400(%RBP),%RSP
	add $-1424, %RSP
uuid_00000000000c68a4:
	mov -1392(%RBP),%RSP
	add $-1424, %RSP
	mov -1384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c68b1
	jmp uuid_00000000000c68b3
uuid_00000000000c68b1:
	push %RBP
	mov -1264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1504(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c68ab
	jmp uuid_00000000000c68ad
uuid_00000000000c68ab:
	push %RBP
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	jmp uuid_00000000000c68a8
	jmp uuid_00000000000c68aa
uuid_00000000000c68a8:
	push %RBP
	mov -1440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c68a5
	jmp uuid_00000000000c68a7
uuid_00000000000c68a5:
	movb $1, -1512(%rbp)
uuid_00000000000c68a7:
	mov -1592(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c68aa:
	mov -1528(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c68ad:
	mov -1520(%RBP),%RSP
	add $-1600, %RSP
	mov -1512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c68ae
	jmp uuid_00000000000c68b0
uuid_00000000000c68ae:
	movb $1, -1288(%rbp)
uuid_00000000000c68b0:
	mov -1432(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c68b3:
	mov -1304(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c68b6:
	mov -1296(%RBP),%RSP
	add $-1600, %RSP
	mov -1288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c68c3
	jmp uuid_00000000000c68c5
uuid_00000000000c68c3:
	push %RBP
	mov -1168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1680(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c68bd
	jmp uuid_00000000000c68bf
uuid_00000000000c68bd:
	push %RBP
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	jmp uuid_00000000000c68ba
	jmp uuid_00000000000c68bc
uuid_00000000000c68ba:
	push %RBP
	mov -1616(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1776(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c68b7
	jmp uuid_00000000000c68b9
uuid_00000000000c68b7:
	movb $1, -1688(%rbp)
uuid_00000000000c68b9:
	mov -1768(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c68bc:
	mov -1704(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c68bf:
	mov -1696(%RBP),%RSP
	add $-1776, %RSP
	mov -1688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c68c0
	jmp uuid_00000000000c68c2
uuid_00000000000c68c0:
	movb $1, -1192(%rbp)
uuid_00000000000c68c2:
	mov -1608(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c68c5:
	mov -1208(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c68c8:
	mov -1200(%RBP),%RSP
	add $-1776, %RSP
	mov -1192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c694a
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1856(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c68eb
	jmp uuid_00000000000c68ed
uuid_00000000000c68eb:
	push %RBP
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	jmp uuid_00000000000c68e8
	jmp uuid_00000000000c68ea
uuid_00000000000c68e8:
	push %RBP
	mov -1792(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c68e5
	jmp uuid_00000000000c68e7
uuid_00000000000c68e5:
	movb $1, -1864(%rbp)
uuid_00000000000c68e7:
	mov -1944(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000c68ea:
	mov -1880(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000c68ed:
	mov -1872(%RBP),%RSP
	add $-1952, %RSP
	mov -1864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6947
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2032(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c68f4
	jmp uuid_00000000000c68f6
uuid_00000000000c68f4:
	push %RBP
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	jmp uuid_00000000000c68f1
	jmp uuid_00000000000c68f3
uuid_00000000000c68f1:
	push %RBP
	mov -1968(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c68ee
	jmp uuid_00000000000c68f0
uuid_00000000000c68ee:
	movb $1, -2040(%rbp)
uuid_00000000000c68f0:
	mov -2120(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c68f3:
	mov -2056(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c68f6:
	mov -2048(%RBP),%RSP
	add $-2128, %RSP
	mov -2040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6944
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2208(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6900
	jmp uuid_00000000000c6902
uuid_00000000000c6900:
	push %RBP
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	jmp uuid_00000000000c68fd
	jmp uuid_00000000000c68ff
uuid_00000000000c68fd:
	push %RBP
	mov -2176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c68fa
	jmp uuid_00000000000c68fc
uuid_00000000000c68fa:
	push %RBP
	mov -2168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c68f7
	jmp uuid_00000000000c68f9
uuid_00000000000c68f7:
	movb $1, -2216(%rbp)
uuid_00000000000c68f9:
	mov -2344(%RBP),%RSP
	add $-2416, %RSP
uuid_00000000000c68fc:
	mov -2264(%RBP),%RSP
	add $-2416, %RSP
uuid_00000000000c68ff:
	mov -2232(%RBP),%RSP
	add $-2416, %RSP
uuid_00000000000c6902:
	mov -2224(%RBP),%RSP
	add $-2416, %RSP
	mov -2216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6941
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2496(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6906
	jmp uuid_00000000000c6908
uuid_00000000000c6906:
	push %RBP
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	jmp uuid_00000000000c6903
	jmp uuid_00000000000c6905
uuid_00000000000c6903:
	movb $1, -2504(%rbp)
uuid_00000000000c6905:
	mov -2520(%RBP),%RSP
	add $-2544, %RSP
uuid_00000000000c6908:
	mov -2512(%RBP),%RSP
	add $-2544, %RSP
	mov -2504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c693e
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2624(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c690f
	jmp uuid_00000000000c6911
uuid_00000000000c690f:
	push %RBP
	mov -2616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c690c
	jmp uuid_00000000000c690e
uuid_00000000000c690c:
	push %RBP
	mov -2608(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6909
	jmp uuid_00000000000c690b
uuid_00000000000c6909:
	movb $1, -2632(%rbp)
uuid_00000000000c690b:
	mov -2728(%RBP),%RSP
	add $-2800, %RSP
uuid_00000000000c690e:
	mov -2648(%RBP),%RSP
	add $-2800, %RSP
uuid_00000000000c6911:
	mov -2640(%RBP),%RSP
	add $-2800, %RSP
	mov -2632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c693b
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2880(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6918
	jmp uuid_00000000000c691a
uuid_00000000000c6918:
	push %RBP
	mov -2872(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6915
	jmp uuid_00000000000c6917
uuid_00000000000c6915:
	push %RBP
	mov -2864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6912
	jmp uuid_00000000000c6914
uuid_00000000000c6912:
	movb $1, -2888(%rbp)
uuid_00000000000c6914:
	mov -2984(%RBP),%RSP
	add $-3056, %RSP
uuid_00000000000c6917:
	mov -2904(%RBP),%RSP
	add $-3056, %RSP
uuid_00000000000c691a:
	mov -2896(%RBP),%RSP
	add $-3056, %RSP
	mov -2888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6938
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -3136(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6921
	jmp uuid_00000000000c6923
uuid_00000000000c6921:
	push %RBP
	mov -3128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c691e
	jmp uuid_00000000000c6920
uuid_00000000000c691e:
	push %RBP
	pushq -3072(%RBP)
	pushq -3080(%RBP)
	pushq -3088(%RBP)
	pushq -3096(%RBP)
	pushq -3104(%RBP)
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	jmp uuid_00000000000c691b
	jmp uuid_00000000000c691d
uuid_00000000000c691b:
	movb $1, -3144(%rbp)
uuid_00000000000c691d:
	mov -3240(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c6920:
	mov -3160(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c6923:
	mov -3152(%RBP),%RSP
	add $-3296, %RSP
	mov -3144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6935
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -3376(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c692a
	jmp uuid_00000000000c692c
uuid_00000000000c692a:
	push %RBP
	mov -3368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6927
	jmp uuid_00000000000c6929
uuid_00000000000c6927:
	push %RBP
	mov -3360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6924
	jmp uuid_00000000000c6926
uuid_00000000000c6924:
	movb $1, -3384(%rbp)
uuid_00000000000c6926:
	mov -3480(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c6929:
	mov -3400(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c692c:
	mov -3392(%RBP),%RSP
	add $-3552, %RSP
	mov -3384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6932
	push %RBP
	jmp uuid_00000000000c692f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c692e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6931
uuid_00000000000c692f:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c692d
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6931:
	mov -3560(%RBP),%RSP
	add $-3560, %RSP
	jmp uuid_00000000000c6934
uuid_00000000000c6932:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3488(%rbp)
	pushq -3496(%rbp)
	pushq -3504(%rbp)
	pushq -3512(%rbp)
	pushq -3520(%rbp)
	pushq -3528(%rbp)
	pushq -3536(%rbp)
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3408(%rbp)
	pushq -3416(%rbp)
	pushq -3424(%rbp)
	pushq -3432(%rbp)
	pushq -3440(%rbp)
	pushq -3448(%rbp)
	pushq -3456(%rbp)
	pushq -3464(%rbp)
	pushq -3472(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c6934:
	mov -3304(%RBP),%RSP
	add $-3552, %RSP
	jmp uuid_00000000000c6937
uuid_00000000000c6935:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3248(%rbp)
	pushq -3256(%rbp)
	pushq -3264(%rbp)
	pushq -3272(%rbp)
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	pushq -3184(%rbp)
	pushq -3192(%rbp)
	pushq -3200(%rbp)
	pushq -3208(%rbp)
	pushq -3216(%rbp)
	pushq -3224(%rbp)
	pushq -3232(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c6937:
	mov -3064(%RBP),%RSP
	add $-3296, %RSP
	jmp uuid_00000000000c693a
uuid_00000000000c6938:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq -3008(%rbp)
	pushq -3016(%rbp)
	pushq -3024(%rbp)
	pushq -3032(%rbp)
	pushq -3040(%rbp)
	pushq -3048(%rbp)
	pushq -3056(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2960(%rbp)
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c693a:
	mov -2808(%RBP),%RSP
	add $-3056, %RSP
	jmp uuid_00000000000c693d
uuid_00000000000c693b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	pushq -2776(%rbp)
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	pushq -2696(%rbp)
	pushq -2704(%rbp)
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c693d:
	mov -2552(%RBP),%RSP
	add $-2800, %RSP
	jmp uuid_00000000000c6940
uuid_00000000000c693e:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c6940:
	mov -2424(%RBP),%RSP
	add $-2544, %RSP
	jmp uuid_00000000000c6943
uuid_00000000000c6941:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-lhs : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	mov %RBX, %RBP
	call substitute_SB_lhs_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $5
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c6943:
	mov -2136(%RBP),%RSP
	add $-2416, %RSP
	jmp uuid_00000000000c6946
uuid_00000000000c6944:
	pushq -2128(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c6946:
	mov -1960(%RBP),%RSP
	add $-2128, %RSP
	jmp uuid_00000000000c6949
uuid_00000000000c6947:
	pushq -1952(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c6949:
	mov -1784(%RBP),%RSP
	add $-1952, %RSP
	jmp uuid_00000000000c694c
uuid_00000000000c694a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1600(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c68e2:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c68e3
	jmp uuid_00000000000c68e4
uuid_00000000000c68e3:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov -2024(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c68df
	push %RBP
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq $0
	push %RBP
	mov -2152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c68d5
	jmp uuid_00000000000c68d7
uuid_00000000000c68d5:
	push %RBP
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	jmp uuid_00000000000c68d2
	jmp uuid_00000000000c68d4
uuid_00000000000c68d2:
	push %RBP
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	jmp uuid_00000000000c68cf
	jmp uuid_00000000000c68d1
uuid_00000000000c68cf:
	push %RBP
	mov -2048(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c68cc
	jmp uuid_00000000000c68ce
uuid_00000000000c68cc:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c68c9
	jmp uuid_00000000000c68cb
uuid_00000000000c68c9:
	movb $1, -2160(%rbp)
uuid_00000000000c68cb:
	mov -2304(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000c68ce:
	mov -2288(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000c68d1:
	mov -2256(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000c68d4:
	mov -2176(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000c68d7:
	mov -2168(%RBP),%RSP
	add $-2424, %RSP
	mov -2160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c68dc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c68db
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c68de
uuid_00000000000c68dc:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2296(%rbp)
	pushq -1600(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c68d8
	movq -2424(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2416(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2408(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2400(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2392(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -2384(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -2376(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2368(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2360(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2352(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2344(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2336(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c68da
uuid_00000000000c68d8:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c68da:
	mov -2432(%RBP),%RSP
	add $-2432, %RSP
uuid_00000000000c68de:
	mov -2032(%RBP),%RSP
	add $-2432, %RSP
	jmp uuid_00000000000c68e1
uuid_00000000000c68df:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c68e1:
	mov -1904(%RBP),%RSP
	add $-2024, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c68e2
uuid_00000000000c68e4:
uuid_00000000000c694c:
	mov -1112(%RBP),%RSP
	add $-1776, %RSP
	jmp uuid_00000000000c694f
uuid_00000000000c694d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c689c:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c689d
	jmp uuid_00000000000c689e
uuid_00000000000c689d:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6899
	push %RBP
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c688f
	jmp uuid_00000000000c6891
uuid_00000000000c688f:
	push %RBP
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	jmp uuid_00000000000c688c
	jmp uuid_00000000000c688e
uuid_00000000000c688c:
	push %RBP
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	jmp uuid_00000000000c6889
	jmp uuid_00000000000c688b
uuid_00000000000c6889:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6886
	jmp uuid_00000000000c6888
uuid_00000000000c6886:
	push %RBP
	mov -1368(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6883
	jmp uuid_00000000000c6885
uuid_00000000000c6883:
	movb $1, -1488(%rbp)
uuid_00000000000c6885:
	mov -1632(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000c6888:
	mov -1616(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000c688b:
	mov -1584(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000c688e:
	mov -1504(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000c6891:
	mov -1496(%RBP),%RSP
	add $-1752, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6896
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6895
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6898
uuid_00000000000c6896:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1624(%rbp)
	pushq -928(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6892
	movq -1752(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1744(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1736(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1728(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1720(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1712(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c6894
uuid_00000000000c6892:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6894:
	mov -1760(%RBP),%RSP
	add $-1760, %RSP
uuid_00000000000c6898:
	mov -1360(%RBP),%RSP
	add $-1760, %RSP
	jmp uuid_00000000000c689b
uuid_00000000000c6899:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c689b:
	mov -1232(%RBP),%RSP
	add $-1352, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c689c
uuid_00000000000c689e:
uuid_00000000000c694f:
	mov -440(%RBP),%RSP
	add $-1104, %RSP
	jmp uuid_00000000000c6952
uuid_00000000000c6950:
uuid_00000000000c6952:
	mov -360(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000c6955
uuid_00000000000c6953:
uuid_00000000000c6955:
	mov -280(%RBP),%RSP
	add $-352, %RSP
	subq $72, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
substitute_CL_ArrowSConsSStringSList:
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6982
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6959
	jmp uuid_00000000000c695b
uuid_00000000000c6959:
	push %RBP
	mov -160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6956
	jmp uuid_00000000000c6958
uuid_00000000000c6956:
	movb $1, -176(%rbp)
uuid_00000000000c6958:
	mov -192(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000c695b:
	mov -184(%RBP),%RSP
	add $-200, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c697f
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6978
	jmp uuid_00000000000c697a
uuid_00000000000c6978:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6975
	jmp uuid_00000000000c6977
uuid_00000000000c6975:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6972
	jmp uuid_00000000000c6974
uuid_00000000000c6972:
	movb $1, -240(%rbp)
uuid_00000000000c6974:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c6977:
	mov -256(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c697a:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c697c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c697b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c697e
uuid_00000000000c697c:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<StringSList,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowSConsSStringSList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<StringSList,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowSConsSStringSList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c697e:
	mov -208(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c6981
uuid_00000000000c697f:
uuid_00000000000c696f:
#call function non-zero : Arrow<StringSList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64StringSList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6970
	jmp uuid_00000000000c6971
uuid_00000000000c6970:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6965
	jmp uuid_00000000000c6967
uuid_00000000000c6965:
	push %RBP
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	jmp uuid_00000000000c6962
	jmp uuid_00000000000c6964
uuid_00000000000c6962:
	push %RBP
	mov -272(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c695f
	jmp uuid_00000000000c6961
uuid_00000000000c695f:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c695c
	jmp uuid_00000000000c695e
uuid_00000000000c695c:
	movb $1, -312(%rbp)
uuid_00000000000c695e:
	mov -376(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c6961:
	mov -360(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c6964:
	mov -328(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c6967:
	mov -320(%RBP),%RSP
	add $-424, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c696c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c696b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c696e
uuid_00000000000c696c:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6968
	jmp uuid_00000000000c696a
uuid_00000000000c6968:
	movq -352(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000c696a:
	mov -432(%RBP),%RSP
	add $-432, %RSP
	movq -424(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c696e:
	mov -256(%RBP),%RSP
	add $-432, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c696f
uuid_00000000000c6971:
uuid_00000000000c6981:
	mov -144(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c6984
uuid_00000000000c6982:
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c6984:
	mov -112(%RBP),%RSP
	add $-136, %RSP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	subq $24, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
specialize_CL_ArrowNilConsTypeConsTContextConsTypeString:
	push %RBP
#call function is-special : Arrow<Cons<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_special_CL_ArrowU64ConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c69c3
#call function normalize : Arrow<TContext,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c69bd:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c69be
	jmp uuid_00000000000c69bf
uuid_00000000000c69be:
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	push %RBP
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c69ba
	push %RBP
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6991
	jmp uuid_00000000000c6993
uuid_00000000000c6991:
	push %RBP
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	jmp uuid_00000000000c698e
	jmp uuid_00000000000c6990
uuid_00000000000c698e:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000c698b
	jmp uuid_00000000000c698d
uuid_00000000000c698b:
	push %RBP
	mov -656(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6988
	jmp uuid_00000000000c698a
uuid_00000000000c6988:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6985
	jmp uuid_00000000000c6987
uuid_00000000000c6985:
	movb $1, -768(%rbp)
uuid_00000000000c6987:
	mov -912(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c698a:
	mov -896(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c698d:
	mov -864(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c6990:
	mov -784(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c6993:
	mov -776(%RBP),%RSP
	add $-1032, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c69b7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c69b6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c69b9
uuid_00000000000c69b7:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $uuid_00000000000c500f
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c69b3
	jmp uuid_00000000000c69b5
uuid_00000000000c69b3:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c69b0
	jmp uuid_00000000000c69b2
uuid_00000000000c69b0:
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	push %RBP
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c69a6
	jmp uuid_00000000000c69a8
uuid_00000000000c69a6:
	push %RBP
	mov -1192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1296(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c699d
	jmp uuid_00000000000c699f
uuid_00000000000c699d:
	push %RBP
	jmp uuid_00000000000c699a
	jmp uuid_00000000000c699c
uuid_00000000000c699a:
	push %RBP
	jmp uuid_00000000000c6997
	jmp uuid_00000000000c6999
uuid_00000000000c6997:
	push %RBP
	jmp uuid_00000000000c6994
	jmp uuid_00000000000c6996
uuid_00000000000c6994:
	movb $1, -1304(%rbp)
uuid_00000000000c6996:
	mov -1336(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000c6999:
	mov -1328(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000c699c:
	mov -1320(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000c699f:
	mov -1312(%RBP),%RSP
	add $-1336, %RSP
	mov -1304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c69a3
	jmp uuid_00000000000c69a5
uuid_00000000000c69a3:
	push %RBP
	jmp uuid_00000000000c69a0
	jmp uuid_00000000000c69a2
uuid_00000000000c69a0:
	movb $1, -1208(%rbp)
uuid_00000000000c69a2:
	mov -1344(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c69a5:
	mov -1224(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c69a8:
	mov -1216(%RBP),%RSP
	add $-1344, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c69ad
	push %RBP
	jmp uuid_00000000000c69aa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c69a9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c69ac
uuid_00000000000c69aa:
uuid_00000000000c69ac:
	mov -1352(%RBP),%RSP
	add $-1352, %RSP
	jmp uuid_00000000000c69af
uuid_00000000000c69ad:
	movq -856(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -832(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -824(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -816(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -200(%rbp)
uuid_00000000000c69af:
	mov -1128(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c69b2:
	mov -1048(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c69b5:
	mov -1040(%RBP),%RSP
	add $-1344, %RSP
	movq -1032(%rbp), %r15
	movq %r15, -384(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -376(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -368(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -272(%rbp)
uuid_00000000000c69b9:
	mov -640(%RBP),%RSP
	add $-1344, %RSP
	jmp uuid_00000000000c69bc
uuid_00000000000c69ba:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
uuid_00000000000c69bc:
	mov -512(%RBP),%RSP
	add $-632, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c69bd
uuid_00000000000c69bf:
#call function mark-as-special : Arrow<Cons<String,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mark_SB_as_SB_special_CL_ArrowNilConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c69c0
	jmp uuid_00000000000c69c2
uuid_00000000000c69c0:
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
#call function infer-global-context : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call infer_SB_global_SB_context_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
uuid_00000000000c69c2:
	mov -392(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000c69c5
uuid_00000000000c69c3:
uuid_00000000000c69c5:
	mov -192(%RBP),%RSP
	add $-192, %RSP
	mov %rbp, %rsp
	sub $184, %rsp
	ret
mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsU64ConsListTypeConsU64ConsStringType:
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c69db
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c69d1
	jmp uuid_00000000000c69d3
uuid_00000000000c69d1:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c69ce
	jmp uuid_00000000000c69d0
uuid_00000000000c69ce:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	jmp uuid_00000000000c69cb
	jmp uuid_00000000000c69cd
uuid_00000000000c69cb:
	movb $1, -240(%rbp)
uuid_00000000000c69cd:
	mov -304(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c69d0:
	mov -256(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c69d3:
	mov -248(%RBP),%RSP
	add $-328, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c69d8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c69d7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c69da
uuid_00000000000c69d8:
	push %RBP
#call function is-parameter-flat : Arrow<Cons<Cons<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_SB_parameter_SB_flat_CL_ArrowU64ConsU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c69d4
	jmp uuid_00000000000c69d6
uuid_00000000000c69d4:
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c69d6:
	mov -336(%RBP),%RSP
	add $-336, %RSP
#call function mark-constructor-flat-parameters : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c69da:
	mov -192(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000c69dd
uuid_00000000000c69db:
uuid_00000000000c69dd:
	mov -144(%RBP),%RSP
	add $-184, %RSP
	mov %rbp, %rsp
	sub $96, %rsp
	ret
mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c69f6
	jmp uuid_00000000000c69f8
uuid_00000000000c69f6:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c69ed
	jmp uuid_00000000000c69ef
uuid_00000000000c69ed:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c69e4
	jmp uuid_00000000000c69e6
uuid_00000000000c69e4:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c69e1
	jmp uuid_00000000000c69e3
uuid_00000000000c69e1:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000c69de
	jmp uuid_00000000000c69e0
uuid_00000000000c69de:
	movb $1, -248(%rbp)
uuid_00000000000c69e0:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c69e3:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c69e6:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c69ea
	jmp uuid_00000000000c69ec
uuid_00000000000c69ea:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c69e7
	jmp uuid_00000000000c69e9
uuid_00000000000c69e7:
	movb $1, -184(%rbp)
uuid_00000000000c69e9:
	mov -344(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c69ec:
	mov -200(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c69ef:
	mov -192(%RBP),%RSP
	add $-368, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c69f3
	jmp uuid_00000000000c69f5
uuid_00000000000c69f3:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c69f0
	jmp uuid_00000000000c69f2
uuid_00000000000c69f0:
	movb $1, -120(%rbp)
uuid_00000000000c69f2:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c69f5:
	mov -136(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c69f8:
	mov -128(%RBP),%RSP
	add $-384, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a12
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c69ff
	jmp uuid_00000000000c6a01
uuid_00000000000c69ff:
	push %RBP
	mov -408(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c69fc
	jmp uuid_00000000000c69fe
uuid_00000000000c69fc:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c69f9
	jmp uuid_00000000000c69fb
uuid_00000000000c69f9:
	movb $1, -424(%rbp)
uuid_00000000000c69fb:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c69fe:
	mov -440(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c6a01:
	mov -432(%RBP),%RSP
	add $-496, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a0f
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a05
	jmp uuid_00000000000c6a07
uuid_00000000000c6a05:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6a02
	jmp uuid_00000000000c6a04
uuid_00000000000c6a02:
	movb $1, -536(%rbp)
uuid_00000000000c6a04:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c6a07:
	mov -544(%RBP),%RSP
	add $-560, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a0c
	push %RBP
	jmp uuid_00000000000c6a09
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6a08
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6a0b
uuid_00000000000c6a09:
uuid_00000000000c6a0b:
	mov -568(%RBP),%RSP
	add $-568, %RSP
	jmp uuid_00000000000c6a0e
uuid_00000000000c6a0c:
#call function mark-parameter-flat : Arrow<Cons<Cons<String,U64>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function parameter-number : Arrow<Cons<Type,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call parameter_SB_number_CL_ArrowU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_parameter_SB_flat_CL_ArrowNilConsU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6a0e:
	mov -504(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c6a11
uuid_00000000000c6a0f:
#call function mark-constructor-flat-parameters : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -496(%rbp)
#call function arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $1
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6a11:
	mov -392(%RBP),%RSP
	add $-496, %RSP
	jmp uuid_00000000000c6a14
uuid_00000000000c6a12:
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6a14:
	mov -88(%RBP),%RSP
	add $-384, %RSP
	mov %rbp, %rsp
	sub $56, %rsp
	ret
infer_SB_type_SB_constructor_CL_ArrowU64ConsASTType:
	pushq $0
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a1b
	jmp uuid_00000000000c6a1d
uuid_00000000000c6a1b:
	push %RBP
	jmp uuid_00000000000c6a18
	jmp uuid_00000000000c6a1a
uuid_00000000000c6a18:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6a15
	jmp uuid_00000000000c6a17
uuid_00000000000c6a15:
	movb $1, -272(%rbp)
uuid_00000000000c6a17:
	mov -296(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c6a1a:
	mov -288(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c6a1d:
	mov -280(%RBP),%RSP
	add $-304, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a3f
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a2d
	jmp uuid_00000000000c6a2f
uuid_00000000000c6a2d:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6a2a
	jmp uuid_00000000000c6a2c
uuid_00000000000c6a2a:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a24
	jmp uuid_00000000000c6a26
uuid_00000000000c6a24:
	push %RBP
	jmp uuid_00000000000c6a21
	jmp uuid_00000000000c6a23
uuid_00000000000c6a21:
	push %RBP
	mov -496(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6a1e
	jmp uuid_00000000000c6a20
uuid_00000000000c6a1e:
	movb $1, -568(%rbp)
uuid_00000000000c6a20:
	mov -592(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c6a23:
	mov -584(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c6a26:
	mov -576(%RBP),%RSP
	add $-600, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a27
	jmp uuid_00000000000c6a29
uuid_00000000000c6a27:
	movb $1, -392(%rbp)
uuid_00000000000c6a29:
	mov -488(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c6a2c:
	mov -408(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c6a2f:
	mov -400(%RBP),%RSP
	add $-600, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a3c
	push %RBP
	jmp uuid_00000000000c6a39
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6a38
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6a3b
uuid_00000000000c6a39:
uuid_00000000000c6a3b:
	mov -608(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000c6a3e
uuid_00000000000c6a3c:
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -600(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $1
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6a31
	jmp uuid_00000000000c6a33
uuid_00000000000c6a31:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6a30
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6a33:
	mov -632(%RBP),%RSP
	add $-632, %RSP
	push %RBP
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6a35
	jmp uuid_00000000000c6a37
uuid_00000000000c6a35:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6a34
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6a37:
	mov -640(%RBP),%RSP
	add $-640, %RSP
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5183
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function set-type-fields : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call set_SB_type_SB_fields_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-class-of-tag : Arrow<Cons<String,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call index_SB_class_SB_of_SB_tag_CL_ArrowNilConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-fields-of-tag : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call index_SB_fields_SB_of_SB_tag_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,HashtableEq<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -600(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c500f
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTypeStringConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -112(%rbp)
	mov -112(%RBP), %RAX
	mov $8, %R14
	addq %R14,%RAX
	movq %RAX, -112(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fcc
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
uuid_00000000000c6a3e:
	mov -312(%RBP),%RSP
	add $-688, %RSP
	jmp uuid_00000000000c6a41
uuid_00000000000c6a3f:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5183
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5383
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fcc
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fcd
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fcf
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48e4
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function index-class-of-tag : Arrow<Cons<String,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call index_SB_class_SB_of_SB_tag_CL_ArrowNilConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-fields-of-tag : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call index_SB_fields_SB_of_SB_tag_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,HashtableEq<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTypeStringConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	movq $8, -112(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fcc
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
uuid_00000000000c6a41:
	mov -192(%RBP),%RSP
	add $-352, %RSP
	mov -112(%rbp), %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
infer_SB_global_SB_context_CL_ArrowNilAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a51
	jmp uuid_00000000000c6a53
uuid_00000000000c6a51:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6a4e
	jmp uuid_00000000000c6a50
uuid_00000000000c6a4e:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a48
	jmp uuid_00000000000c6a4a
uuid_00000000000c6a48:
	push %RBP
	jmp uuid_00000000000c6a45
	jmp uuid_00000000000c6a47
uuid_00000000000c6a45:
	push %RBP
	mov -344(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6a42
	jmp uuid_00000000000c6a44
uuid_00000000000c6a42:
	movb $1, -416(%rbp)
uuid_00000000000c6a44:
	mov -440(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c6a47:
	mov -432(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c6a4a:
	mov -424(%RBP),%RSP
	add $-448, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a4b
	jmp uuid_00000000000c6a4d
uuid_00000000000c6a4b:
	movb $1, -240(%rbp)
uuid_00000000000c6a4d:
	mov -336(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c6a50:
	mov -256(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c6a53:
	mov -248(%RBP),%RSP
	add $-448, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6afa
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6aa3
	jmp uuid_00000000000c6aa5
uuid_00000000000c6aa3:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a8e
	jmp uuid_00000000000c6a90
uuid_00000000000c6a8e:
	push %RBP
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000c6a8b
	jmp uuid_00000000000c6a8d
uuid_00000000000c6a8b:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a82
	jmp uuid_00000000000c6a84
uuid_00000000000c6a82:
	push %RBP
	mov -816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a70
	jmp uuid_00000000000c6a72
uuid_00000000000c6a70:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a67
	jmp uuid_00000000000c6a69
uuid_00000000000c6a67:
	push %RBP
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	jmp uuid_00000000000c6a64
	jmp uuid_00000000000c6a66
uuid_00000000000c6a64:
	movb $1, -1024(%rbp)
uuid_00000000000c6a66:
	mov -1040(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c6a69:
	mov -1032(%RBP),%RSP
	add $-1064, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a6d
	jmp uuid_00000000000c6a6f
uuid_00000000000c6a6d:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6a6a
	jmp uuid_00000000000c6a6c
uuid_00000000000c6a6a:
	movb $1, -928(%rbp)
uuid_00000000000c6a6c:
	mov -1072(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000c6a6f:
	mov -944(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000c6a72:
	mov -936(%RBP),%RSP
	add $-1144, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a7f
	jmp uuid_00000000000c6a81
uuid_00000000000c6a7f:
	push %RBP
	mov -808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1224(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a79
	jmp uuid_00000000000c6a7b
uuid_00000000000c6a79:
	push %RBP
	jmp uuid_00000000000c6a76
	jmp uuid_00000000000c6a78
uuid_00000000000c6a76:
	push %RBP
	mov -1160(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1264(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6a73
	jmp uuid_00000000000c6a75
uuid_00000000000c6a73:
	movb $1, -1232(%rbp)
uuid_00000000000c6a75:
	mov -1256(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c6a78:
	mov -1248(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c6a7b:
	mov -1240(%RBP),%RSP
	add $-1264, %RSP
	mov -1232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a7c
	jmp uuid_00000000000c6a7e
uuid_00000000000c6a7c:
	movb $1, -832(%rbp)
uuid_00000000000c6a7e:
	mov -1152(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c6a81:
	mov -848(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c6a84:
	mov -840(%RBP),%RSP
	add $-1264, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a88
	jmp uuid_00000000000c6a8a
uuid_00000000000c6a88:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6a85
	jmp uuid_00000000000c6a87
uuid_00000000000c6a85:
	movb $1, -704(%rbp)
uuid_00000000000c6a87:
	mov -1272(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c6a8a:
	mov -752(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c6a8d:
	mov -720(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c6a90:
	mov -712(%RBP),%RSP
	add $-1344, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6aa0
	jmp uuid_00000000000c6aa2
uuid_00000000000c6aa0:
	push %RBP
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq $0
	push %RBP
	mov -1408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a9a
	jmp uuid_00000000000c6a9c
uuid_00000000000c6a9a:
	push %RBP
	jmp uuid_00000000000c6a97
	jmp uuid_00000000000c6a99
uuid_00000000000c6a97:
	push %RBP
	jmp uuid_00000000000c6a94
	jmp uuid_00000000000c6a96
uuid_00000000000c6a94:
	push %RBP
	mov -1360(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6a91
	jmp uuid_00000000000c6a93
uuid_00000000000c6a91:
	movb $1, -1416(%rbp)
uuid_00000000000c6a93:
	mov -1448(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c6a96:
	mov -1440(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c6a99:
	mov -1432(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c6a9c:
	mov -1424(%RBP),%RSP
	add $-1456, %RSP
	mov -1416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a9d
	jmp uuid_00000000000c6a9f
uuid_00000000000c6a9d:
	movb $1, -536(%rbp)
uuid_00000000000c6a9f:
	mov -1352(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c6aa2:
	mov -552(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c6aa5:
	mov -544(%RBP),%RSP
	add $-1456, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6af7
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ae0
	jmp uuid_00000000000c6ae2
uuid_00000000000c6ae0:
	push %RBP
	mov -1528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1632(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6acb
	jmp uuid_00000000000c6acd
uuid_00000000000c6acb:
	push %RBP
	mov -1624(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1728(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ab9
	jmp uuid_00000000000c6abb
uuid_00000000000c6ab9:
	push %RBP
	mov -1720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1824(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ab0
	jmp uuid_00000000000c6ab2
uuid_00000000000c6ab0:
	push %RBP
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	jmp uuid_00000000000c6aad
	jmp uuid_00000000000c6aaf
uuid_00000000000c6aad:
	movb $1, -1832(%rbp)
uuid_00000000000c6aaf:
	mov -1848(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c6ab2:
	mov -1840(%RBP),%RSP
	add $-1872, %RSP
	mov -1832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ab6
	jmp uuid_00000000000c6ab8
uuid_00000000000c6ab6:
	push %RBP
	mov -1712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6ab3
	jmp uuid_00000000000c6ab5
uuid_00000000000c6ab3:
	movb $1, -1736(%rbp)
uuid_00000000000c6ab5:
	mov -1880(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000c6ab8:
	mov -1752(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000c6abb:
	mov -1744(%RBP),%RSP
	add $-1952, %RSP
	mov -1736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ac8
	jmp uuid_00000000000c6aca
uuid_00000000000c6ac8:
	push %RBP
	mov -1616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2032(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ac2
	jmp uuid_00000000000c6ac4
uuid_00000000000c6ac2:
	push %RBP
	jmp uuid_00000000000c6abf
	jmp uuid_00000000000c6ac1
uuid_00000000000c6abf:
	push %RBP
	mov -1968(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2072(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6abc
	jmp uuid_00000000000c6abe
uuid_00000000000c6abc:
	movb $1, -2040(%rbp)
uuid_00000000000c6abe:
	mov -2064(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c6ac1:
	mov -2056(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c6ac4:
	mov -2048(%RBP),%RSP
	add $-2072, %RSP
	mov -2040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ac5
	jmp uuid_00000000000c6ac7
uuid_00000000000c6ac5:
	movb $1, -1640(%rbp)
uuid_00000000000c6ac7:
	mov -1960(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c6aca:
	mov -1656(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c6acd:
	mov -1648(%RBP),%RSP
	add $-2072, %RSP
	mov -1640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6add
	jmp uuid_00000000000c6adf
uuid_00000000000c6add:
	push %RBP
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq $0
	push %RBP
	mov -2136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ad7
	jmp uuid_00000000000c6ad9
uuid_00000000000c6ad7:
	push %RBP
	jmp uuid_00000000000c6ad4
	jmp uuid_00000000000c6ad6
uuid_00000000000c6ad4:
	push %RBP
	jmp uuid_00000000000c6ad1
	jmp uuid_00000000000c6ad3
uuid_00000000000c6ad1:
	push %RBP
	mov -2088(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6ace
	jmp uuid_00000000000c6ad0
uuid_00000000000c6ace:
	movb $1, -2144(%rbp)
uuid_00000000000c6ad0:
	mov -2176(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000c6ad3:
	mov -2168(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000c6ad6:
	mov -2160(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000c6ad9:
	mov -2152(%RBP),%RSP
	add $-2184, %RSP
	mov -2144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ada
	jmp uuid_00000000000c6adc
uuid_00000000000c6ada:
	movb $1, -1544(%rbp)
uuid_00000000000c6adc:
	mov -2080(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000c6adf:
	mov -1560(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000c6ae2:
	mov -1552(%RBP),%RSP
	add $-2184, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6af4
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2264(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ae9
	jmp uuid_00000000000c6aeb
uuid_00000000000c6ae9:
	push %RBP
	jmp uuid_00000000000c6ae6
	jmp uuid_00000000000c6ae8
uuid_00000000000c6ae6:
	push %RBP
	jmp uuid_00000000000c6ae3
	jmp uuid_00000000000c6ae5
uuid_00000000000c6ae3:
	movb $1, -2272(%rbp)
uuid_00000000000c6ae5:
	mov -2296(%RBP),%RSP
	add $-2296, %RSP
uuid_00000000000c6ae8:
	mov -2288(%RBP),%RSP
	add $-2296, %RSP
uuid_00000000000c6aeb:
	mov -2280(%RBP),%RSP
	add $-2296, %RSP
	mov -2272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6af1
	push %RBP
	jmp uuid_00000000000c6aee
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6aed
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6af0
uuid_00000000000c6aee:
uuid_00000000000c6af0:
	mov -2304(%RBP),%RSP
	add $-2304, %RSP
	jmp uuid_00000000000c6af3
uuid_00000000000c6af1:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6aec
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6af3:
	mov -2192(%RBP),%RSP
	add $-2296, %RSP
	jmp uuid_00000000000c6af6
uuid_00000000000c6af4:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d92
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
#call function mark-global-as-seen : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call mark_SB_global_SB_as_SB_seen_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6af6:
	mov -1464(%RBP),%RSP
	add $-2208, %RSP
	jmp uuid_00000000000c6af9
uuid_00000000000c6af7:
#call function typeof-lhs : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	mov %RBX, %RBP
	call typeof_SB_lhs_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6aa6
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1504(%RBP)
	popq -1496(%RBP)
	popq -1488(%RBP)
	jmp uuid_00000000000c6aa8
uuid_00000000000c6aa6:
uuid_00000000000c6aa8:
	mov -1512(%RBP),%RSP
	add $-1512, %RSP
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c500f
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function enrich : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call enrich_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -1536(%RBP)
	popq -1528(%RBP)
	popq -1520(%RBP)
	push %RBP
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6aaa
	jmp uuid_00000000000c6aac
uuid_00000000000c6aaa:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6aa9
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6aac:
	mov -1544(%RBP),%RSP
	add $-1544, %RSP
#call function mark-global-as-seen : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call mark_SB_global_SB_as_SB_seen_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1456(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
uuid_00000000000c6af9:
	mov -456(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000c6afc
uuid_00000000000c6afa:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function infer-type-definition : Arrow<Cons<Cons<Type,AST>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $0
	mov %RBX, %RBP
	call infer_SB_type_SB_definition_CL_ArrowU64ConsU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a5a
	jmp uuid_00000000000c6a5c
uuid_00000000000c6a5a:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a57
	jmp uuid_00000000000c6a59
uuid_00000000000c6a57:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6a54
	jmp uuid_00000000000c6a56
uuid_00000000000c6a54:
	movb $1, -544(%rbp)
uuid_00000000000c6a56:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c6a59:
	mov -560(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c6a5c:
	mov -552(%RBP),%RSP
	add $-616, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6a61
	push %RBP
	jmp uuid_00000000000c6a5e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6a5d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6a60
uuid_00000000000c6a5e:
uuid_00000000000c6a60:
	mov -624(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c6a63
uuid_00000000000c6a61:
#call function index-size-of-class : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call index_SB_size_SB_of_SB_class_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6a63:
	mov -512(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c6afc:
	mov -160(%RBP),%RSP
	add $-616, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
assert_SB_well_SB_typed_CL_ArrowNilAST:
uuid_00000000000c6b0a:
#call function is-seq : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call is_SB_seq_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6b0b
	jmp uuid_00000000000c6b0c
uuid_00000000000c6b0b:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b03
	jmp uuid_00000000000c6b05
uuid_00000000000c6b03:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6b00
	jmp uuid_00000000000c6b02
uuid_00000000000c6b00:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6afd
	jmp uuid_00000000000c6aff
uuid_00000000000c6afd:
	movb $1, -240(%rbp)
uuid_00000000000c6aff:
	mov -336(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c6b02:
	mov -256(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c6b05:
	mov -248(%RBP),%RSP
	add $-408, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b07
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6b06
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6b09
uuid_00000000000c6b07:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -408(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c6b09:
	mov -160(%RBP),%RSP
	add $-408, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c6b0a
uuid_00000000000c6b0c:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c8d
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c8a
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b13
	jmp uuid_00000000000c6b15
uuid_00000000000c6b13:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6b10
	jmp uuid_00000000000c6b12
uuid_00000000000c6b10:
	push %RBP
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	jmp uuid_00000000000c6b0d
	jmp uuid_00000000000c6b0f
uuid_00000000000c6b0d:
	movb $1, -400(%rbp)
uuid_00000000000c6b0f:
	mov -496(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c6b12:
	mov -416(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c6b15:
	mov -408(%RBP),%RSP
	add $-552, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c87
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b1f
	jmp uuid_00000000000c6b21
uuid_00000000000c6b1f:
	push %RBP
	jmp uuid_00000000000c6b1c
	jmp uuid_00000000000c6b1e
uuid_00000000000c6b1c:
	push %RBP
	jmp uuid_00000000000c6b19
	jmp uuid_00000000000c6b1b
uuid_00000000000c6b19:
	movb $1, -640(%rbp)
uuid_00000000000c6b1b:
	mov -664(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c6b1e:
	mov -656(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c6b21:
	mov -648(%RBP),%RSP
	add $-664, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c84
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b3d
	jmp uuid_00000000000c6b3f
uuid_00000000000c6b3d:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6b3a
	jmp uuid_00000000000c6b3c
uuid_00000000000c6b3a:
	push %RBP
	mov -728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b34
	jmp uuid_00000000000c6b36
uuid_00000000000c6b34:
	push %RBP
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	jmp uuid_00000000000c6b31
	jmp uuid_00000000000c6b33
uuid_00000000000c6b31:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b2e
	jmp uuid_00000000000c6b30
uuid_00000000000c6b2e:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b28
	jmp uuid_00000000000c6b2a
uuid_00000000000c6b28:
	push %RBP
	jmp uuid_00000000000c6b25
	jmp uuid_00000000000c6b27
uuid_00000000000c6b25:
	push %RBP
	mov -1064(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6b22
	jmp uuid_00000000000c6b24
uuid_00000000000c6b22:
	movb $1, -1136(%rbp)
uuid_00000000000c6b24:
	mov -1160(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c6b27:
	mov -1152(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c6b2a:
	mov -1144(%RBP),%RSP
	add $-1168, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b2b
	jmp uuid_00000000000c6b2d
uuid_00000000000c6b2b:
	movb $1, -928(%rbp)
uuid_00000000000c6b2d:
	mov -1056(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c6b30:
	mov -976(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c6b33:
	mov -944(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c6b36:
	mov -936(%RBP),%RSP
	add $-1168, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b37
	jmp uuid_00000000000c6b39
uuid_00000000000c6b37:
	movb $1, -752(%rbp)
uuid_00000000000c6b39:
	mov -848(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c6b3c:
	mov -768(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c6b3f:
	mov -760(%RBP),%RSP
	add $-1168, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c81
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1248(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b4f
	jmp uuid_00000000000c6b51
uuid_00000000000c6b4f:
	push %RBP
	jmp uuid_00000000000c6b4c
	jmp uuid_00000000000c6b4e
uuid_00000000000c6b4c:
	push %RBP
	mov -1232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b46
	jmp uuid_00000000000c6b48
uuid_00000000000c6b46:
	push %RBP
	jmp uuid_00000000000c6b43
	jmp uuid_00000000000c6b45
uuid_00000000000c6b43:
	push %RBP
	mov -1288(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq $uuid_00000000000c4e1f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6b40
	jmp uuid_00000000000c6b42
uuid_00000000000c6b40:
	movb $1, -1360(%rbp)
uuid_00000000000c6b42:
	mov -1384(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c6b45:
	mov -1376(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c6b48:
	mov -1368(%RBP),%RSP
	add $-1392, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b49
	jmp uuid_00000000000c6b4b
uuid_00000000000c6b49:
	movb $1, -1256(%rbp)
uuid_00000000000c6b4b:
	mov -1280(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c6b4e:
	mov -1272(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c6b51:
	mov -1264(%RBP),%RSP
	add $-1392, %RSP
	mov -1256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c7e
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1472(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b6a
	jmp uuid_00000000000c6b6c
uuid_00000000000c6b6a:
	push %RBP
	mov -1464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1568(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b58
	jmp uuid_00000000000c6b5a
uuid_00000000000c6b58:
	push %RBP
	jmp uuid_00000000000c6b55
	jmp uuid_00000000000c6b57
uuid_00000000000c6b55:
	push %RBP
	jmp uuid_00000000000c6b52
	jmp uuid_00000000000c6b54
uuid_00000000000c6b52:
	movb $1, -1576(%rbp)
uuid_00000000000c6b54:
	mov -1600(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c6b57:
	mov -1592(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c6b5a:
	mov -1584(%RBP),%RSP
	add $-1600, %RSP
	mov -1576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b67
	jmp uuid_00000000000c6b69
uuid_00000000000c6b67:
	push %RBP
	mov -1456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1680(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b61
	jmp uuid_00000000000c6b63
uuid_00000000000c6b61:
	push %RBP
	jmp uuid_00000000000c6b5e
	jmp uuid_00000000000c6b60
uuid_00000000000c6b5e:
	push %RBP
	mov -1616(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1720(%rbp)
	pushq $uuid_00000000000c4e3c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6b5b
	jmp uuid_00000000000c6b5d
uuid_00000000000c6b5b:
	movb $1, -1688(%rbp)
uuid_00000000000c6b5d:
	mov -1712(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000c6b60:
	mov -1704(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000c6b63:
	mov -1696(%RBP),%RSP
	add $-1720, %RSP
	mov -1688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b64
	jmp uuid_00000000000c6b66
uuid_00000000000c6b64:
	movb $1, -1480(%rbp)
uuid_00000000000c6b66:
	mov -1608(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000c6b69:
	mov -1496(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000c6b6c:
	mov -1488(%RBP),%RSP
	add $-1720, %RSP
	mov -1480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c7b
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1800(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b8b
	jmp uuid_00000000000c6b8d
uuid_00000000000c6b8b:
	push %RBP
	mov -1792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b79
	jmp uuid_00000000000c6b7b
uuid_00000000000c6b79:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1992(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b70
	jmp uuid_00000000000c6b72
uuid_00000000000c6b70:
	push %RBP
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	jmp uuid_00000000000c6b6d
	jmp uuid_00000000000c6b6f
uuid_00000000000c6b6d:
	movb $1, -2000(%rbp)
uuid_00000000000c6b6f:
	mov -2016(%RBP),%RSP
	add $-2040, %RSP
uuid_00000000000c6b72:
	mov -2008(%RBP),%RSP
	add $-2040, %RSP
	mov -2000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b76
	jmp uuid_00000000000c6b78
uuid_00000000000c6b76:
	push %RBP
	mov -1880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6b73
	jmp uuid_00000000000c6b75
uuid_00000000000c6b73:
	movb $1, -1904(%rbp)
uuid_00000000000c6b75:
	mov -2048(%RBP),%RSP
	add $-2120, %RSP
uuid_00000000000c6b78:
	mov -1920(%RBP),%RSP
	add $-2120, %RSP
uuid_00000000000c6b7b:
	mov -1912(%RBP),%RSP
	add $-2120, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b88
	jmp uuid_00000000000c6b8a
uuid_00000000000c6b88:
	push %RBP
	mov -1784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2200(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b82
	jmp uuid_00000000000c6b84
uuid_00000000000c6b82:
	push %RBP
	jmp uuid_00000000000c6b7f
	jmp uuid_00000000000c6b81
uuid_00000000000c6b7f:
	push %RBP
	mov -2136(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2240(%rbp)
	pushq $uuid_00000000000c4bba
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6b7c
	jmp uuid_00000000000c6b7e
uuid_00000000000c6b7c:
	movb $1, -2208(%rbp)
uuid_00000000000c6b7e:
	mov -2232(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000c6b81:
	mov -2224(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000c6b84:
	mov -2216(%RBP),%RSP
	add $-2240, %RSP
	mov -2208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b85
	jmp uuid_00000000000c6b87
uuid_00000000000c6b85:
	movb $1, -1808(%rbp)
uuid_00000000000c6b87:
	mov -2128(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000c6b8a:
	mov -1824(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000c6b8d:
	mov -1816(%RBP),%RSP
	add $-2240, %RSP
	mov -1808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c78
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2320(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6bac
	jmp uuid_00000000000c6bae
uuid_00000000000c6bac:
	push %RBP
	mov -2312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2416(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b9a
	jmp uuid_00000000000c6b9c
uuid_00000000000c6b9a:
	push %RBP
	mov -2408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2512(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b91
	jmp uuid_00000000000c6b93
uuid_00000000000c6b91:
	push %RBP
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	jmp uuid_00000000000c6b8e
	jmp uuid_00000000000c6b90
uuid_00000000000c6b8e:
	movb $1, -2520(%rbp)
uuid_00000000000c6b90:
	mov -2536(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c6b93:
	mov -2528(%RBP),%RSP
	add $-2560, %RSP
	mov -2520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6b97
	jmp uuid_00000000000c6b99
uuid_00000000000c6b97:
	push %RBP
	mov -2400(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6b94
	jmp uuid_00000000000c6b96
uuid_00000000000c6b94:
	movb $1, -2424(%rbp)
uuid_00000000000c6b96:
	mov -2568(%RBP),%RSP
	add $-2640, %RSP
uuid_00000000000c6b99:
	mov -2440(%RBP),%RSP
	add $-2640, %RSP
uuid_00000000000c6b9c:
	mov -2432(%RBP),%RSP
	add $-2640, %RSP
	mov -2424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ba9
	jmp uuid_00000000000c6bab
uuid_00000000000c6ba9:
	push %RBP
	mov -2304(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2720(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ba3
	jmp uuid_00000000000c6ba5
uuid_00000000000c6ba3:
	push %RBP
	jmp uuid_00000000000c6ba0
	jmp uuid_00000000000c6ba2
uuid_00000000000c6ba0:
	push %RBP
	mov -2656(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2760(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6b9d
	jmp uuid_00000000000c6b9f
uuid_00000000000c6b9d:
	movb $1, -2728(%rbp)
uuid_00000000000c6b9f:
	mov -2752(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c6ba2:
	mov -2744(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c6ba5:
	mov -2736(%RBP),%RSP
	add $-2760, %RSP
	mov -2728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ba6
	jmp uuid_00000000000c6ba8
uuid_00000000000c6ba6:
	movb $1, -2328(%rbp)
uuid_00000000000c6ba8:
	mov -2648(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c6bab:
	mov -2344(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c6bae:
	mov -2336(%RBP),%RSP
	add $-2760, %RSP
	mov -2328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c75
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2840(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6bd0
	jmp uuid_00000000000c6bd2
uuid_00000000000c6bd0:
	push %RBP
	mov -2832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6bcd
	jmp uuid_00000000000c6bcf
uuid_00000000000c6bcd:
	push %RBP
	mov -2824(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3016(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6bc7
	jmp uuid_00000000000c6bc9
uuid_00000000000c6bc7:
	push %RBP
	mov -3008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6bc4
	jmp uuid_00000000000c6bc6
uuid_00000000000c6bc4:
	push %RBP
	mov -3000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6bbe
	jmp uuid_00000000000c6bc0
uuid_00000000000c6bbe:
	push %RBP
	mov -3184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6bbb
	jmp uuid_00000000000c6bbd
uuid_00000000000c6bbb:
	push %RBP
	mov -3176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6bb5
	jmp uuid_00000000000c6bb7
uuid_00000000000c6bb5:
	push %RBP
	jmp uuid_00000000000c6bb2
	jmp uuid_00000000000c6bb4
uuid_00000000000c6bb2:
	push %RBP
	mov -3304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3408(%rbp)
	pushq $uuid_00000000000c4e4f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6baf
	jmp uuid_00000000000c6bb1
uuid_00000000000c6baf:
	movb $1, -3376(%rbp)
uuid_00000000000c6bb1:
	mov -3400(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c6bb4:
	mov -3392(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c6bb7:
	mov -3384(%RBP),%RSP
	add $-3408, %RSP
	mov -3376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6bb8
	jmp uuid_00000000000c6bba
uuid_00000000000c6bb8:
	movb $1, -3200(%rbp)
uuid_00000000000c6bba:
	mov -3296(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c6bbd:
	mov -3216(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c6bc0:
	mov -3208(%RBP),%RSP
	add $-3408, %RSP
	mov -3200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6bc1
	jmp uuid_00000000000c6bc3
uuid_00000000000c6bc1:
	movb $1, -3024(%rbp)
uuid_00000000000c6bc3:
	mov -3120(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c6bc6:
	mov -3040(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c6bc9:
	mov -3032(%RBP),%RSP
	add $-3408, %RSP
	mov -3024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6bca
	jmp uuid_00000000000c6bcc
uuid_00000000000c6bca:
	movb $1, -2848(%rbp)
uuid_00000000000c6bcc:
	mov -2944(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c6bcf:
	mov -2864(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c6bd2:
	mov -2856(%RBP),%RSP
	add $-3408, %RSP
	mov -2848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c72
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -3488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6bec
	jmp uuid_00000000000c6bee
uuid_00000000000c6bec:
	push %RBP
	mov -3480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6be9
	jmp uuid_00000000000c6beb
uuid_00000000000c6be9:
	push %RBP
	mov -3472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3664(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6be3
	jmp uuid_00000000000c6be5
uuid_00000000000c6be3:
	push %RBP
	mov -3656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6be0
	jmp uuid_00000000000c6be2
uuid_00000000000c6be0:
	push %RBP
	mov -3648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3840(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6bda
	jmp uuid_00000000000c6bdc
uuid_00000000000c6bda:
	push %RBP
	jmp uuid_00000000000c6bd7
	jmp uuid_00000000000c6bd9
uuid_00000000000c6bd7:
	push %RBP
	mov -3776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3880(%rbp)
	pushq $uuid_00000000000c6bd3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6bd4
	jmp uuid_00000000000c6bd6
uuid_00000000000c6bd4:
	movb $1, -3848(%rbp)
uuid_00000000000c6bd6:
	mov -3872(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c6bd9:
	mov -3864(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c6bdc:
	mov -3856(%RBP),%RSP
	add $-3880, %RSP
	mov -3848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6bdd
	jmp uuid_00000000000c6bdf
uuid_00000000000c6bdd:
	movb $1, -3672(%rbp)
uuid_00000000000c6bdf:
	mov -3768(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c6be2:
	mov -3688(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c6be5:
	mov -3680(%RBP),%RSP
	add $-3880, %RSP
	mov -3672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6be6
	jmp uuid_00000000000c6be8
uuid_00000000000c6be6:
	movb $1, -3496(%rbp)
uuid_00000000000c6be8:
	mov -3592(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c6beb:
	mov -3512(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c6bee:
	mov -3504(%RBP),%RSP
	add $-3880, %RSP
	mov -3496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c6f
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -3960(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6bf2
	jmp uuid_00000000000c6bf4
uuid_00000000000c6bf2:
	push %RBP
	jmp uuid_00000000000c6bef
	jmp uuid_00000000000c6bf1
uuid_00000000000c6bef:
	movb $1, -3968(%rbp)
uuid_00000000000c6bf1:
	mov -3984(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c6bf4:
	mov -3976(%RBP),%RSP
	add $-3984, %RSP
	mov -3968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c6c
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4064(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c04
	jmp uuid_00000000000c6c06
uuid_00000000000c6c04:
	push %RBP
	mov -4056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6c01
	jmp uuid_00000000000c6c03
uuid_00000000000c6c01:
	push %RBP
	mov -4048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4240(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6bfb
	jmp uuid_00000000000c6bfd
uuid_00000000000c6bfb:
	push %RBP
	jmp uuid_00000000000c6bf8
	jmp uuid_00000000000c6bfa
uuid_00000000000c6bf8:
	push %RBP
	mov -4176(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4280(%rbp)
	pushq $uuid_00000000000c4efa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6bf5
	jmp uuid_00000000000c6bf7
uuid_00000000000c6bf5:
	movb $1, -4248(%rbp)
uuid_00000000000c6bf7:
	mov -4272(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c6bfa:
	mov -4264(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c6bfd:
	mov -4256(%RBP),%RSP
	add $-4280, %RSP
	mov -4248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6bfe
	jmp uuid_00000000000c6c00
uuid_00000000000c6bfe:
	movb $1, -4072(%rbp)
uuid_00000000000c6c00:
	mov -4168(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c6c03:
	mov -4088(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c6c06:
	mov -4080(%RBP),%RSP
	add $-4280, %RSP
	mov -4072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c69
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4360(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c16
	jmp uuid_00000000000c6c18
uuid_00000000000c6c16:
	push %RBP
	mov -4352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6c13
	jmp uuid_00000000000c6c15
uuid_00000000000c6c13:
	push %RBP
	mov -4344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4536(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c0d
	jmp uuid_00000000000c6c0f
uuid_00000000000c6c0d:
	push %RBP
	jmp uuid_00000000000c6c0a
	jmp uuid_00000000000c6c0c
uuid_00000000000c6c0a:
	push %RBP
	mov -4472(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4576(%rbp)
	pushq $uuid_00000000000c4ee7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6c07
	jmp uuid_00000000000c6c09
uuid_00000000000c6c07:
	movb $1, -4544(%rbp)
uuid_00000000000c6c09:
	mov -4568(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000c6c0c:
	mov -4560(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000c6c0f:
	mov -4552(%RBP),%RSP
	add $-4576, %RSP
	mov -4544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c10
	jmp uuid_00000000000c6c12
uuid_00000000000c6c10:
	movb $1, -4368(%rbp)
uuid_00000000000c6c12:
	mov -4464(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000c6c15:
	mov -4384(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000c6c18:
	mov -4376(%RBP),%RSP
	add $-4576, %RSP
	mov -4368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c66
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4656(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c1f
	jmp uuid_00000000000c6c21
uuid_00000000000c6c1f:
	push %RBP
	jmp uuid_00000000000c6c1c
	jmp uuid_00000000000c6c1e
uuid_00000000000c6c1c:
	push %RBP
	mov -4592(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6c19
	jmp uuid_00000000000c6c1b
uuid_00000000000c6c19:
	movb $1, -4664(%rbp)
uuid_00000000000c6c1b:
	mov -4688(%RBP),%RSP
	add $-4696, %RSP
uuid_00000000000c6c1e:
	mov -4680(%RBP),%RSP
	add $-4696, %RSP
uuid_00000000000c6c21:
	mov -4672(%RBP),%RSP
	add $-4696, %RSP
	mov -4664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c63
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4776(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c28
	jmp uuid_00000000000c6c2a
uuid_00000000000c6c28:
	push %RBP
	jmp uuid_00000000000c6c25
	jmp uuid_00000000000c6c27
uuid_00000000000c6c25:
	push %RBP
	mov -4712(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6c22
	jmp uuid_00000000000c6c24
uuid_00000000000c6c22:
	movb $1, -4784(%rbp)
uuid_00000000000c6c24:
	mov -4808(%RBP),%RSP
	add $-4816, %RSP
uuid_00000000000c6c27:
	mov -4800(%RBP),%RSP
	add $-4816, %RSP
uuid_00000000000c6c2a:
	mov -4792(%RBP),%RSP
	add $-4816, %RSP
	mov -4784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c60
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4896(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c34
	jmp uuid_00000000000c6c36
uuid_00000000000c6c34:
	push %RBP
	pushq -4872(%RBP)
	pushq -4880(%RBP)
	pushq -4888(%RBP)
	jmp uuid_00000000000c6c31
	jmp uuid_00000000000c6c33
uuid_00000000000c6c31:
	push %RBP
	mov -4864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6c2e
	jmp uuid_00000000000c6c30
uuid_00000000000c6c2e:
	push %RBP
	mov -4856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6c2b
	jmp uuid_00000000000c6c2d
uuid_00000000000c6c2b:
	movb $1, -4904(%rbp)
uuid_00000000000c6c2d:
	mov -5032(%RBP),%RSP
	add $-5104, %RSP
uuid_00000000000c6c30:
	mov -4952(%RBP),%RSP
	add $-5104, %RSP
uuid_00000000000c6c33:
	mov -4920(%RBP),%RSP
	add $-5104, %RSP
uuid_00000000000c6c36:
	mov -4912(%RBP),%RSP
	add $-5104, %RSP
	mov -4904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c5d
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -5184(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c3d
	jmp uuid_00000000000c6c3f
uuid_00000000000c6c3d:
	push %RBP
	mov -5176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6c3a
	jmp uuid_00000000000c6c3c
uuid_00000000000c6c3a:
	push %RBP
	mov -5168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6c37
	jmp uuid_00000000000c6c39
uuid_00000000000c6c37:
	movb $1, -5192(%rbp)
uuid_00000000000c6c39:
	mov -5288(%RBP),%RSP
	add $-5360, %RSP
uuid_00000000000c6c3c:
	mov -5208(%RBP),%RSP
	add $-5360, %RSP
uuid_00000000000c6c3f:
	mov -5200(%RBP),%RSP
	add $-5360, %RSP
	mov -5192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c5a
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -5440(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c46
	jmp uuid_00000000000c6c48
uuid_00000000000c6c46:
	push %RBP
	mov -5432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6c43
	jmp uuid_00000000000c6c45
uuid_00000000000c6c43:
	push %RBP
	mov -5424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6c40
	jmp uuid_00000000000c6c42
uuid_00000000000c6c40:
	movb $1, -5448(%rbp)
uuid_00000000000c6c42:
	mov -5544(%RBP),%RSP
	add $-5616, %RSP
uuid_00000000000c6c45:
	mov -5464(%RBP),%RSP
	add $-5616, %RSP
uuid_00000000000c6c48:
	mov -5456(%RBP),%RSP
	add $-5616, %RSP
	mov -5448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c57
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -5696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c4c
	jmp uuid_00000000000c6c4e
uuid_00000000000c6c4c:
	push %RBP
	jmp uuid_00000000000c6c49
	jmp uuid_00000000000c6c4b
uuid_00000000000c6c49:
	movb $1, -5704(%rbp)
uuid_00000000000c6c4b:
	mov -5720(%RBP),%RSP
	add $-5720, %RSP
uuid_00000000000c6c4e:
	mov -5712(%RBP),%RSP
	add $-5720, %RSP
	mov -5704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c54
	push %RBP
	jmp uuid_00000000000c6c51
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6c50
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6c53
uuid_00000000000c6c51:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6c4f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6c53:
	mov -5728(%RBP),%RSP
	add $-5728, %RSP
	jmp uuid_00000000000c6c56
uuid_00000000000c6c54:
uuid_00000000000c6c56:
	mov -5624(%RBP),%RSP
	add $-5720, %RSP
	jmp uuid_00000000000c6c59
uuid_00000000000c6c57:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6c59:
	mov -5368(%RBP),%RSP
	add $-5616, %RSP
	jmp uuid_00000000000c6c5c
uuid_00000000000c6c5a:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6c5c:
	mov -5112(%RBP),%RSP
	add $-5360, %RSP
	jmp uuid_00000000000c6c5f
uuid_00000000000c6c5d:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6c5f:
	mov -4824(%RBP),%RSP
	add $-5104, %RSP
	jmp uuid_00000000000c6c62
uuid_00000000000c6c60:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6c62:
	mov -4704(%RBP),%RSP
	add $-4816, %RSP
	jmp uuid_00000000000c6c65
uuid_00000000000c6c63:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6c65:
	mov -4584(%RBP),%RSP
	add $-4696, %RSP
	jmp uuid_00000000000c6c68
uuid_00000000000c6c66:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6c68:
	mov -4288(%RBP),%RSP
	add $-4576, %RSP
	jmp uuid_00000000000c6c6b
uuid_00000000000c6c69:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	pushq -4120(%rbp)
	pushq -4128(%rbp)
	pushq -4136(%rbp)
	pushq -4144(%rbp)
	pushq -4152(%rbp)
	pushq -4160(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6c6b:
	mov -3992(%RBP),%RSP
	add $-4280, %RSP
	jmp uuid_00000000000c6c6e
uuid_00000000000c6c6c:
uuid_00000000000c6c6e:
	mov -3888(%RBP),%RSP
	add $-3984, %RSP
	jmp uuid_00000000000c6c71
uuid_00000000000c6c6f:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3520(%rbp)
	pushq -3528(%rbp)
	pushq -3536(%rbp)
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3568(%rbp)
	pushq -3576(%rbp)
	pushq -3584(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6c71:
	mov -3416(%RBP),%RSP
	add $-3880, %RSP
	jmp uuid_00000000000c6c74
uuid_00000000000c6c72:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3224(%rbp)
	pushq -3232(%rbp)
	pushq -3240(%rbp)
	pushq -3248(%rbp)
	pushq -3256(%rbp)
	pushq -3264(%rbp)
	pushq -3272(%rbp)
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3048(%rbp)
	pushq -3056(%rbp)
	pushq -3064(%rbp)
	pushq -3072(%rbp)
	pushq -3080(%rbp)
	pushq -3088(%rbp)
	pushq -3096(%rbp)
	pushq -3104(%rbp)
	pushq -3112(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	pushq -2936(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6c74:
	mov -2768(%RBP),%RSP
	add $-3408, %RSP
	jmp uuid_00000000000c6c77
uuid_00000000000c6c75:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -2592(%rbp)
	pushq -2600(%rbp)
	pushq -2608(%rbp)
	pushq -2616(%rbp)
	pushq -2624(%rbp)
	pushq -2632(%rbp)
	pushq -2640(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6c77:
	mov -2248(%RBP),%RSP
	add $-2760, %RSP
	jmp uuid_00000000000c6c7a
uuid_00000000000c6c78:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6c7a:
	mov -1728(%RBP),%RSP
	add $-2240, %RSP
	jmp uuid_00000000000c6c7d
uuid_00000000000c6c7b:
uuid_00000000000c6c7d:
	mov -1400(%RBP),%RSP
	add $-1720, %RSP
	jmp uuid_00000000000c6c80
uuid_00000000000c6c7e:
uuid_00000000000c6c80:
	mov -1176(%RBP),%RSP
	add $-1392, %RSP
	jmp uuid_00000000000c6c83
uuid_00000000000c6c81:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6c83:
	mov -672(%RBP),%RSP
	add $-1168, %RSP
	jmp uuid_00000000000c6c86
uuid_00000000000c6c84:
uuid_00000000000c6c86:
	mov -560(%RBP),%RSP
	add $-664, %RSP
	jmp uuid_00000000000c6c89
uuid_00000000000c6c87:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6b16
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6b18
uuid_00000000000c6b16:
uuid_00000000000c6b18:
	mov -560(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c6c89:
	mov -320(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c6c8c
uuid_00000000000c6c8a:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6c8c:
	mov -240(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c6c8f
uuid_00000000000c6c8d:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6c8f:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
assert_SB_one_SB_typed_CL_ArrowNilAST:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6c90
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4f74
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6c92
uuid_00000000000c6c90:
uuid_00000000000c6c92:
	mov -88(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
infer_SB_ctx_CL_ArrowTContextConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6cba
	jmp uuid_00000000000c6cbc
uuid_00000000000c6cba:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ca8
	jmp uuid_00000000000c6caa
uuid_00000000000c6ca8:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c96
	jmp uuid_00000000000c6c98
uuid_00000000000c6c96:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c6c93
	jmp uuid_00000000000c6c95
uuid_00000000000c6c93:
	movb $1, -552(%rbp)
uuid_00000000000c6c95:
	mov -568(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c6c98:
	mov -560(%RBP),%RSP
	add $-592, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ca5
	jmp uuid_00000000000c6ca7
uuid_00000000000c6ca5:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6c9f
	jmp uuid_00000000000c6ca1
uuid_00000000000c6c9f:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000c6c9c
	jmp uuid_00000000000c6c9e
uuid_00000000000c6c9c:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6c99
	jmp uuid_00000000000c6c9b
uuid_00000000000c6c99:
	movb $1, -680(%rbp)
uuid_00000000000c6c9b:
	mov -760(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c6c9e:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c6ca1:
	mov -688(%RBP),%RSP
	add $-768, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ca2
	jmp uuid_00000000000c6ca4
uuid_00000000000c6ca2:
	movb $1, -456(%rbp)
uuid_00000000000c6ca4:
	mov -600(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c6ca7:
	mov -472(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c6caa:
	mov -464(%RBP),%RSP
	add $-768, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6cb7
	jmp uuid_00000000000c6cb9
uuid_00000000000c6cb7:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6cb1
	jmp uuid_00000000000c6cb3
uuid_00000000000c6cb1:
	push %RBP
	jmp uuid_00000000000c6cae
	jmp uuid_00000000000c6cb0
uuid_00000000000c6cae:
	push %RBP
	mov -784(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6cab
	jmp uuid_00000000000c6cad
uuid_00000000000c6cab:
	movb $1, -856(%rbp)
uuid_00000000000c6cad:
	mov -880(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c6cb0:
	mov -872(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c6cb3:
	mov -864(%RBP),%RSP
	add $-888, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6cb4
	jmp uuid_00000000000c6cb6
uuid_00000000000c6cb4:
	movb $1, -360(%rbp)
uuid_00000000000c6cb6:
	mov -776(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c6cb9:
	mov -376(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c6cbc:
	mov -368(%RBP),%RSP
	add $-888, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6cfb
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ced
	jmp uuid_00000000000c6cef
uuid_00000000000c6ced:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1064(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ce4
	jmp uuid_00000000000c6ce6
uuid_00000000000c6ce4:
	push %RBP
	mov -1056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6cd2
	jmp uuid_00000000000c6cd4
uuid_00000000000c6cd2:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6cc0
	jmp uuid_00000000000c6cc2
uuid_00000000000c6cc0:
	push %RBP
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	jmp uuid_00000000000c6cbd
	jmp uuid_00000000000c6cbf
uuid_00000000000c6cbd:
	movb $1, -1264(%rbp)
uuid_00000000000c6cbf:
	mov -1280(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c6cc2:
	mov -1272(%RBP),%RSP
	add $-1304, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ccf
	jmp uuid_00000000000c6cd1
uuid_00000000000c6ccf:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6cc9
	jmp uuid_00000000000c6ccb
uuid_00000000000c6cc9:
	push %RBP
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	jmp uuid_00000000000c6cc6
	jmp uuid_00000000000c6cc8
uuid_00000000000c6cc6:
	push %RBP
	mov -1320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6cc3
	jmp uuid_00000000000c6cc5
uuid_00000000000c6cc3:
	movb $1, -1392(%rbp)
uuid_00000000000c6cc5:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c6cc8:
	mov -1408(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c6ccb:
	mov -1400(%RBP),%RSP
	add $-1480, %RSP
	mov -1392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ccc
	jmp uuid_00000000000c6cce
uuid_00000000000c6ccc:
	movb $1, -1168(%rbp)
uuid_00000000000c6cce:
	mov -1312(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c6cd1:
	mov -1184(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c6cd4:
	mov -1176(%RBP),%RSP
	add $-1480, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ce1
	jmp uuid_00000000000c6ce3
uuid_00000000000c6ce1:
	push %RBP
	mov -1048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6cdb
	jmp uuid_00000000000c6cdd
uuid_00000000000c6cdb:
	push %RBP
	jmp uuid_00000000000c6cd8
	jmp uuid_00000000000c6cda
uuid_00000000000c6cd8:
	push %RBP
	mov -1496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1600(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6cd5
	jmp uuid_00000000000c6cd7
uuid_00000000000c6cd5:
	movb $1, -1568(%rbp)
uuid_00000000000c6cd7:
	mov -1592(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c6cda:
	mov -1584(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c6cdd:
	mov -1576(%RBP),%RSP
	add $-1600, %RSP
	mov -1568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6cde
	jmp uuid_00000000000c6ce0
uuid_00000000000c6cde:
	movb $1, -1072(%rbp)
uuid_00000000000c6ce0:
	mov -1488(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c6ce3:
	mov -1088(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c6ce6:
	mov -1080(%RBP),%RSP
	add $-1600, %RSP
	mov -1072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6cea
	jmp uuid_00000000000c6cec
uuid_00000000000c6cea:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6ce7
	jmp uuid_00000000000c6ce9
uuid_00000000000c6ce7:
	movb $1, -976(%rbp)
uuid_00000000000c6ce9:
	mov -1608(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c6cec:
	mov -992(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c6cef:
	mov -984(%RBP),%RSP
	add $-1680, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6cf8
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -1760(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6cf5
	push %RBP
	jmp uuid_00000000000c6cf2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6cf1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6cf4
uuid_00000000000c6cf2:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6cf0
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6cf4:
	mov -1768(%RBP),%RSP
	add $-1768, %RSP
	jmp uuid_00000000000c6cf7
uuid_00000000000c6cf5:
uuid_00000000000c6cf7:
	mov -1688(%RBP),%RSP
	add $-1760, %RSP
	jmp uuid_00000000000c6cfa
uuid_00000000000c6cf8:
#call function maybe-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call maybe_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1480(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1480(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq $7
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-ctx : Arrow<Cons<TContext,AST>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	mov %RBX, %RBP
	call infer_SB_ctx_CL_ArrowTContextConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6cfa:
	mov -896(%RBP),%RSP
	add $-1680, %RSP
	jmp uuid_00000000000c6cfd
uuid_00000000000c6cfb:
#call function maybe-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call maybe_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -768(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -768(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq $7
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6cfd:
	mov -280(%RBP),%RSP
	add $-888, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
infer_SB_tctx_CL_ArrowTContextConsListTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d0f
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d08
	jmp uuid_00000000000c6d0a
uuid_00000000000c6d08:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6d05
	jmp uuid_00000000000c6d07
uuid_00000000000c6d05:
	push %RBP
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	jmp uuid_00000000000c6d02
	jmp uuid_00000000000c6d04
uuid_00000000000c6d02:
	movb $1, -312(%rbp)
uuid_00000000000c6d04:
	mov -376(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c6d07:
	mov -328(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c6d0a:
	mov -320(%RBP),%RSP
	add $-400, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d0c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6d0b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6d0e
uuid_00000000000c6d0c:
#call function infer-tctx : Arrow<Cons<TContext,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6d0e:
	mov -264(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c6d11
uuid_00000000000c6d0f:
uuid_00000000000c6d11:
	mov -216(%RBP),%RSP
	add $-256, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
infer_SB_tctx_CL_ArrowTContextConsTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d18
	jmp uuid_00000000000c6d1a
uuid_00000000000c6d18:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6d15
	jmp uuid_00000000000c6d17
uuid_00000000000c6d15:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6d12
	jmp uuid_00000000000c6d14
uuid_00000000000c6d12:
	movb $1, -216(%rbp)
uuid_00000000000c6d14:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c6d17:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c6d1a:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d34
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d1e
	jmp uuid_00000000000c6d20
uuid_00000000000c6d1e:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6d1b
	jmp uuid_00000000000c6d1d
uuid_00000000000c6d1b:
	movb $1, -328(%rbp)
uuid_00000000000c6d1d:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c6d20:
	mov -336(%RBP),%RSP
	add $-352, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d31
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d27
	jmp uuid_00000000000c6d29
uuid_00000000000c6d27:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6d24
	jmp uuid_00000000000c6d26
uuid_00000000000c6d24:
	push %RBP
	jmp uuid_00000000000c6d21
	jmp uuid_00000000000c6d23
uuid_00000000000c6d21:
	movb $1, -392(%rbp)
uuid_00000000000c6d23:
	mov -456(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c6d26:
	mov -408(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c6d29:
	mov -400(%RBP),%RSP
	add $-456, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d2e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d2b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6d2a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6d2d
uuid_00000000000c6d2b:
uuid_00000000000c6d2d:
	mov -464(%RBP),%RSP
	add $-488, %RSP
	jmp uuid_00000000000c6d30
uuid_00000000000c6d2e:
#call function infer-tctx : Arrow<Cons<TContext,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6d30:
	mov -360(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000c6d33
uuid_00000000000c6d31:
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -352(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5383
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6d33:
	mov -296(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c6d36
uuid_00000000000c6d34:
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c6d36:
	mov -184(%RBP),%RSP
	add $-288, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
compile_SB_exit_SB_cleanup_CL_ArrowSNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d37
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d38
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d39
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_data_SB_header_CL_ArrowSNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d3a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_text_SB_header_CL_ArrowSNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d3b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d3c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d3d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_init_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6d40
	jmp uuid_00000000000c6d42
uuid_00000000000c6d40:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d3e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_init_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d3f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000c6d42:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	push %RBP
	mov $main_SB_with_SB_argv_CL_U8, %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c6d45
	jmp uuid_00000000000c6d47
uuid_00000000000c6d45:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d43
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d44
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000c6d47:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	push %RBP
	mov $main_SB_with_CL_U8, %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c6d52
	jmp uuid_00000000000c6d54
uuid_00000000000c6d52:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d48
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d49
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	push %RBP
	mov $main_SB_with_SB_argv_CL_U8, %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c6d4c
	jmp uuid_00000000000c6d4e
uuid_00000000000c6d4c:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d4a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d4b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000c6d4e:
	mov -64(%RBP),%RSP
	add $-64, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d4f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d50
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d51
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000c6d54:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_CL_ArrowNilNil:
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %r15
	pushq 0(%r15)
	push %RBP
	pushq -16(%rbp)
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d5c
	push %RBP
	pushq -16(%rbp)
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d59
	push %RBP
	pushq -16(%rbp)
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d56
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6d55
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6d58
uuid_00000000000c6d56:
#call function compile-c : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_c_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6d58:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c6d5b
uuid_00000000000c6d59:
#call function compile-blob : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_blob_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6d5b:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	jmp uuid_00000000000c6d5e
uuid_00000000000c6d5c:
#call function compile-gnu : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_gnu_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6d5e:
	mov -24(%RBP),%RSP
	add $-32, %RSP
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_c_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c6db2:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6db3
	jmp uuid_00000000000c6db4
uuid_00000000000c6db3:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d7a
	jmp uuid_00000000000c6d7c
uuid_00000000000c6d7a:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d71
	jmp uuid_00000000000c6d73
uuid_00000000000c6d71:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6d6e
	jmp uuid_00000000000c6d70
uuid_00000000000c6d6e:
	push %RBP
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d68
	jmp uuid_00000000000c6d6a
uuid_00000000000c6d68:
	push %RBP
	jmp uuid_00000000000c6d65
	jmp uuid_00000000000c6d67
uuid_00000000000c6d65:
	push %RBP
	jmp uuid_00000000000c6d62
	jmp uuid_00000000000c6d64
uuid_00000000000c6d62:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6d5f
	jmp uuid_00000000000c6d61
uuid_00000000000c6d5f:
	movb $1, -496(%rbp)
uuid_00000000000c6d61:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c6d64:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c6d67:
	mov -512(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c6d6a:
	mov -504(%RBP),%RSP
	add $-536, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d6b
	jmp uuid_00000000000c6d6d
uuid_00000000000c6d6b:
	movb $1, -336(%rbp)
uuid_00000000000c6d6d:
	mov -432(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c6d70:
	mov -352(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c6d73:
	mov -344(%RBP),%RSP
	add $-536, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d77
	jmp uuid_00000000000c6d79
uuid_00000000000c6d77:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6d74
	jmp uuid_00000000000c6d76
uuid_00000000000c6d74:
	movb $1, -240(%rbp)
uuid_00000000000c6d76:
	mov -544(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c6d79:
	mov -256(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c6d7c:
	mov -248(%RBP),%RSP
	add $-616, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6daf
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d9c
	jmp uuid_00000000000c6d9e
uuid_00000000000c6d9c:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d93
	jmp uuid_00000000000c6d95
uuid_00000000000c6d93:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6d90
	jmp uuid_00000000000c6d92
uuid_00000000000c6d90:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6d8d
	jmp uuid_00000000000c6d8f
uuid_00000000000c6d8d:
	movb $1, -800(%rbp)
uuid_00000000000c6d8f:
	mov -896(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c6d92:
	mov -816(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c6d95:
	mov -808(%RBP),%RSP
	add $-968, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6d99
	jmp uuid_00000000000c6d9b
uuid_00000000000c6d99:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6d96
	jmp uuid_00000000000c6d98
uuid_00000000000c6d96:
	movb $1, -704(%rbp)
uuid_00000000000c6d98:
	mov -976(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c6d9b:
	mov -720(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c6d9e:
	mov -712(%RBP),%RSP
	add $-1048, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6dac
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6da5
	jmp uuid_00000000000c6da7
uuid_00000000000c6da5:
	push %RBP
	jmp uuid_00000000000c6da2
	jmp uuid_00000000000c6da4
uuid_00000000000c6da2:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6d9f
	jmp uuid_00000000000c6da1
uuid_00000000000c6d9f:
	movb $1, -1136(%rbp)
uuid_00000000000c6da1:
	mov -1160(%RBP),%RSP
	add $-1232, %RSP
uuid_00000000000c6da4:
	mov -1152(%RBP),%RSP
	add $-1232, %RSP
uuid_00000000000c6da7:
	mov -1144(%RBP),%RSP
	add $-1232, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6da9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6da8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6dab
uuid_00000000000c6da9:
	movq -1232(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c6dab:
	mov -1056(%RBP),%RSP
	add $-1232, %RSP
	jmp uuid_00000000000c6dae
uuid_00000000000c6dac:
	movq -1048(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c6dae:
	mov -624(%RBP),%RSP
	add $-1048, %RSP
	jmp uuid_00000000000c6db1
uuid_00000000000c6daf:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq $uuid_00000000000c6d7d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6d7e
	jmp uuid_00000000000c6d80
uuid_00000000000c6d7e:
	mov $assemble_SB_argv_SB_referenced_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c6d80:
	mov -624(%RBP),%RSP
	add $-624, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6d8a
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6d87
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq $uuid_00000000000c6d81
	pushq $0
	pushq $uuid_00000000000c6d82
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6d84
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d92
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq $uuid_00000000000c6d83
	pushq $0
	pushq -880(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
	jmp uuid_00000000000c6d86
uuid_00000000000c6d84:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000c6d86:
	mov -824(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000c6d89
uuid_00000000000c6d87:
#call function fragment::set-term : Arrow<Cons<Fragment,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000c6d89:
	mov -816(%RBP),%RSP
	add $-816, %RSP
	jmp uuid_00000000000c6d8c
uuid_00000000000c6d8a:
uuid_00000000000c6d8c:
	mov -808(%RBP),%RSP
	add $-808, %RSP
	movq -616(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c6db1:
	mov -160(%RBP),%RSP
	add $-808, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c6db2
uuid_00000000000c6db4:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-finish : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-write : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_write_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_blob_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c6e0c:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6e0d
	jmp uuid_00000000000c6e0e
uuid_00000000000c6e0d:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6dc4
	jmp uuid_00000000000c6dc6
uuid_00000000000c6dc4:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6dbb
	jmp uuid_00000000000c6dbd
uuid_00000000000c6dbb:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6db8
	jmp uuid_00000000000c6dba
uuid_00000000000c6db8:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6db5
	jmp uuid_00000000000c6db7
uuid_00000000000c6db5:
	movb $1, -336(%rbp)
uuid_00000000000c6db7:
	mov -432(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c6dba:
	mov -352(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c6dbd:
	mov -344(%RBP),%RSP
	add $-504, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6dc1
	jmp uuid_00000000000c6dc3
uuid_00000000000c6dc1:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6dbe
	jmp uuid_00000000000c6dc0
uuid_00000000000c6dbe:
	movb $1, -240(%rbp)
uuid_00000000000c6dc0:
	mov -512(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c6dc3:
	mov -256(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c6dc6:
	mov -248(%RBP),%RSP
	add $-584, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e09
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6de2
	jmp uuid_00000000000c6de4
uuid_00000000000c6de2:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6dd9
	jmp uuid_00000000000c6ddb
uuid_00000000000c6dd9:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6dd6
	jmp uuid_00000000000c6dd8
uuid_00000000000c6dd6:
	push %RBP
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6dd0
	jmp uuid_00000000000c6dd2
uuid_00000000000c6dd0:
	push %RBP
	jmp uuid_00000000000c6dcd
	jmp uuid_00000000000c6dcf
uuid_00000000000c6dcd:
	push %RBP
	jmp uuid_00000000000c6dca
	jmp uuid_00000000000c6dcc
uuid_00000000000c6dca:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6dc7
	jmp uuid_00000000000c6dc9
uuid_00000000000c6dc7:
	movb $1, -928(%rbp)
uuid_00000000000c6dc9:
	mov -960(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c6dcc:
	mov -952(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c6dcf:
	mov -944(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c6dd2:
	mov -936(%RBP),%RSP
	add $-968, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6dd3
	jmp uuid_00000000000c6dd5
uuid_00000000000c6dd3:
	movb $1, -768(%rbp)
uuid_00000000000c6dd5:
	mov -864(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c6dd8:
	mov -784(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c6ddb:
	mov -776(%RBP),%RSP
	add $-968, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ddf
	jmp uuid_00000000000c6de1
uuid_00000000000c6ddf:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6ddc
	jmp uuid_00000000000c6dde
uuid_00000000000c6ddc:
	movb $1, -672(%rbp)
uuid_00000000000c6dde:
	mov -976(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c6de1:
	mov -688(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c6de4:
	mov -680(%RBP),%RSP
	add $-1048, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e06
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6dff
	jmp uuid_00000000000c6e01
uuid_00000000000c6dff:
	push %RBP
	mov -1120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6dfc
	jmp uuid_00000000000c6dfe
uuid_00000000000c6dfc:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6df9
	jmp uuid_00000000000c6dfb
uuid_00000000000c6df9:
	movb $1, -1136(%rbp)
uuid_00000000000c6dfb:
	mov -1232(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c6dfe:
	mov -1152(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c6e01:
	mov -1144(%RBP),%RSP
	add $-1304, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e03
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6e02
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6e05
uuid_00000000000c6e03:
	movq -1304(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c6e05:
	mov -1056(%RBP),%RSP
	add $-1304, %RSP
	jmp uuid_00000000000c6e08
uuid_00000000000c6e06:
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	push %RBP
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6dee
	jmp uuid_00000000000c6df0
uuid_00000000000c6dee:
	push %RBP
	jmp uuid_00000000000c6deb
	jmp uuid_00000000000c6ded
uuid_00000000000c6deb:
	push %RBP
	jmp uuid_00000000000c6de8
	jmp uuid_00000000000c6dea
uuid_00000000000c6de8:
	push %RBP
	jmp uuid_00000000000c6de5
	jmp uuid_00000000000c6de7
uuid_00000000000c6de5:
	movb $1, -1208(%rbp)
uuid_00000000000c6de7:
	mov -1240(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c6dea:
	mov -1232(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c6ded:
	mov -1224(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c6df0:
	mov -1216(%RBP),%RSP
	add $-1240, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6df6
	push %RBP
	jmp uuid_00000000000c6df3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6df2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6df5
uuid_00000000000c6df3:
uuid_00000000000c6df5:
	mov -1248(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000c6df8
uuid_00000000000c6df6:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq $uuid_00000000000c6d81
	pushq $0
	pushq $uuid_00000000000c6df1
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	popq -1320(%RBP)
	popq -1312(%RBP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
#call function fragment::set-term : Arrow<Cons<Fragment,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	popq -1320(%RBP)
	popq -1312(%RBP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	popq -1320(%RBP)
	popq -1312(%RBP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -968(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000c6df8:
	mov -1128(%RBP),%RSP
	add $-1392, %RSP
	movq -1048(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c6e08:
	mov -592(%RBP),%RSP
	add $-1392, %RSP
	jmp uuid_00000000000c6e0b
uuid_00000000000c6e09:
	movq -584(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -544(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -536(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -528(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -520(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c6e0b:
	mov -160(%RBP),%RSP
	add $-584, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c6e0c
uuid_00000000000c6e0e:
	pushq $0
	pushq $0
	pushq $3
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r14
	movq 0(%r14), %r15
	movq %r15, -80(%rbp)
	movq 8(%r14), %r15
	movq %r15, -72(%rbp)
	movq 16(%r14), %r15
	movq %r15, -64(%rbp)
	movq 24(%r14), %r15
	movq %r15, -56(%rbp)
	movq 32(%r14), %r15
	movq %r15, -48(%rbp)
	movq 40(%r14), %r15
	movq %r15, -40(%rbp)
	movq 48(%r14), %r15
	movq %r15, -32(%rbp)
	movq 56(%r14), %r15
	movq %r15, -24(%rbp)
	movq 64(%r14), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c6e64:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6e65
	jmp uuid_00000000000c6e66
uuid_00000000000c6e65:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e2a
	jmp uuid_00000000000c6e2c
uuid_00000000000c6e2a:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e21
	jmp uuid_00000000000c6e23
uuid_00000000000c6e21:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6e1e
	jmp uuid_00000000000c6e20
uuid_00000000000c6e1e:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e18
	jmp uuid_00000000000c6e1a
uuid_00000000000c6e18:
	push %RBP
	jmp uuid_00000000000c6e15
	jmp uuid_00000000000c6e17
uuid_00000000000c6e15:
	push %RBP
	jmp uuid_00000000000c6e12
	jmp uuid_00000000000c6e14
uuid_00000000000c6e12:
	push %RBP
	mov -464(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6e0f
	jmp uuid_00000000000c6e11
uuid_00000000000c6e0f:
	movb $1, -520(%rbp)
uuid_00000000000c6e11:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c6e14:
	mov -544(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c6e17:
	mov -536(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c6e1a:
	mov -528(%RBP),%RSP
	add $-560, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e1b
	jmp uuid_00000000000c6e1d
uuid_00000000000c6e1b:
	movb $1, -360(%rbp)
uuid_00000000000c6e1d:
	mov -456(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c6e20:
	mov -376(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c6e23:
	mov -368(%RBP),%RSP
	add $-560, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e27
	jmp uuid_00000000000c6e29
uuid_00000000000c6e27:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6e24
	jmp uuid_00000000000c6e26
uuid_00000000000c6e24:
	movb $1, -264(%rbp)
uuid_00000000000c6e26:
	mov -568(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c6e29:
	mov -280(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c6e2c:
	mov -272(%RBP),%RSP
	add $-640, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e61
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -720(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e3c
	jmp uuid_00000000000c6e3e
uuid_00000000000c6e3c:
	push %RBP
	mov -712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e33
	jmp uuid_00000000000c6e35
uuid_00000000000c6e33:
	push %RBP
	mov -808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6e30
	jmp uuid_00000000000c6e32
uuid_00000000000c6e30:
	push %RBP
	mov -800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6e2d
	jmp uuid_00000000000c6e2f
uuid_00000000000c6e2d:
	movb $1, -824(%rbp)
uuid_00000000000c6e2f:
	mov -920(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c6e32:
	mov -840(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c6e35:
	mov -832(%RBP),%RSP
	add $-992, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e39
	jmp uuid_00000000000c6e3b
uuid_00000000000c6e39:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6e36
	jmp uuid_00000000000c6e38
uuid_00000000000c6e36:
	movb $1, -728(%rbp)
uuid_00000000000c6e38:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c6e3b:
	mov -744(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c6e3e:
	mov -736(%RBP),%RSP
	add $-1072, %RSP
	mov -728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e5e
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e4b
	jmp uuid_00000000000c6e4d
uuid_00000000000c6e4b:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1248(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e42
	jmp uuid_00000000000c6e44
uuid_00000000000c6e42:
	push %RBP
	jmp uuid_00000000000c6e3f
	jmp uuid_00000000000c6e41
uuid_00000000000c6e3f:
	movb $1, -1256(%rbp)
uuid_00000000000c6e41:
	mov -1272(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c6e44:
	mov -1264(%RBP),%RSP
	add $-1272, %RSP
	mov -1256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e48
	jmp uuid_00000000000c6e4a
uuid_00000000000c6e48:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6e45
	jmp uuid_00000000000c6e47
uuid_00000000000c6e45:
	movb $1, -1160(%rbp)
uuid_00000000000c6e47:
	mov -1280(%RBP),%RSP
	add $-1352, %RSP
uuid_00000000000c6e4a:
	mov -1176(%RBP),%RSP
	add $-1352, %RSP
uuid_00000000000c6e4d:
	mov -1168(%RBP),%RSP
	add $-1352, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e5b
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1432(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e54
	jmp uuid_00000000000c6e56
uuid_00000000000c6e54:
	push %RBP
	mov -1424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6e51
	jmp uuid_00000000000c6e53
uuid_00000000000c6e51:
	push %RBP
	mov -1416(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6e4e
	jmp uuid_00000000000c6e50
uuid_00000000000c6e4e:
	movb $1, -1440(%rbp)
uuid_00000000000c6e50:
	mov -1536(%RBP),%RSP
	add $-1608, %RSP
uuid_00000000000c6e53:
	mov -1456(%RBP),%RSP
	add $-1608, %RSP
uuid_00000000000c6e56:
	mov -1448(%RBP),%RSP
	add $-1608, %RSP
	mov -1440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e58
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6e57
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6e5a
uuid_00000000000c6e58:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $uuid_00000000000c6d83
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq $0
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -1608(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c6e5a:
	mov -1360(%RBP),%RSP
	add $-1864, %RSP
	jmp uuid_00000000000c6e5d
uuid_00000000000c6e5b:
	movq -1352(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c6e5d:
	mov -1080(%RBP),%RSP
	add $-1352, %RSP
	jmp uuid_00000000000c6e60
uuid_00000000000c6e5e:
	movq -1072(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c6e60:
	mov -648(%RBP),%RSP
	add $-1072, %RSP
	jmp uuid_00000000000c6e63
uuid_00000000000c6e61:
	movq -640(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -616(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c6e63:
	mov -184(%RBP),%RSP
	add $-640, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c6e64
uuid_00000000000c6e66:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, %r15
	movq $assemble_SB_final_CL_String, %r14
	movq %r15, 0(%r14)
#call function compile-write : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_write_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_gnu_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c6eb6:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6eb7
	jmp uuid_00000000000c6eb8
uuid_00000000000c6eb7:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e82
	jmp uuid_00000000000c6e84
uuid_00000000000c6e82:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e79
	jmp uuid_00000000000c6e7b
uuid_00000000000c6e79:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6e76
	jmp uuid_00000000000c6e78
uuid_00000000000c6e76:
	push %RBP
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e70
	jmp uuid_00000000000c6e72
uuid_00000000000c6e70:
	push %RBP
	jmp uuid_00000000000c6e6d
	jmp uuid_00000000000c6e6f
uuid_00000000000c6e6d:
	push %RBP
	jmp uuid_00000000000c6e6a
	jmp uuid_00000000000c6e6c
uuid_00000000000c6e6a:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6e67
	jmp uuid_00000000000c6e69
uuid_00000000000c6e67:
	movb $1, -496(%rbp)
uuid_00000000000c6e69:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c6e6c:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c6e6f:
	mov -512(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c6e72:
	mov -504(%RBP),%RSP
	add $-536, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e73
	jmp uuid_00000000000c6e75
uuid_00000000000c6e73:
	movb $1, -336(%rbp)
uuid_00000000000c6e75:
	mov -432(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c6e78:
	mov -352(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c6e7b:
	mov -344(%RBP),%RSP
	add $-536, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e7f
	jmp uuid_00000000000c6e81
uuid_00000000000c6e7f:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6e7c
	jmp uuid_00000000000c6e7e
uuid_00000000000c6e7c:
	movb $1, -240(%rbp)
uuid_00000000000c6e7e:
	mov -544(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c6e81:
	mov -256(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c6e84:
	mov -248(%RBP),%RSP
	add $-616, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6eb3
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ea0
	jmp uuid_00000000000c6ea2
uuid_00000000000c6ea0:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e97
	jmp uuid_00000000000c6e99
uuid_00000000000c6e97:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6e94
	jmp uuid_00000000000c6e96
uuid_00000000000c6e94:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6e91
	jmp uuid_00000000000c6e93
uuid_00000000000c6e91:
	movb $1, -800(%rbp)
uuid_00000000000c6e93:
	mov -896(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c6e96:
	mov -816(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c6e99:
	mov -808(%RBP),%RSP
	add $-968, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6e9d
	jmp uuid_00000000000c6e9f
uuid_00000000000c6e9d:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6e9a
	jmp uuid_00000000000c6e9c
uuid_00000000000c6e9a:
	movb $1, -704(%rbp)
uuid_00000000000c6e9c:
	mov -976(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c6e9f:
	mov -720(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c6ea2:
	mov -712(%RBP),%RSP
	add $-1048, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6eb0
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ea9
	jmp uuid_00000000000c6eab
uuid_00000000000c6ea9:
	push %RBP
	jmp uuid_00000000000c6ea6
	jmp uuid_00000000000c6ea8
uuid_00000000000c6ea6:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6ea3
	jmp uuid_00000000000c6ea5
uuid_00000000000c6ea3:
	movb $1, -1136(%rbp)
uuid_00000000000c6ea5:
	mov -1160(%RBP),%RSP
	add $-1232, %RSP
uuid_00000000000c6ea8:
	mov -1152(%RBP),%RSP
	add $-1232, %RSP
uuid_00000000000c6eab:
	mov -1144(%RBP),%RSP
	add $-1232, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ead
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6eac
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6eaf
uuid_00000000000c6ead:
	movq -1232(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c6eaf:
	mov -1056(%RBP),%RSP
	add $-1232, %RSP
	jmp uuid_00000000000c6eb2
uuid_00000000000c6eb0:
	movq -1048(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c6eb2:
	mov -624(%RBP),%RSP
	add $-1048, %RSP
	jmp uuid_00000000000c6eb5
uuid_00000000000c6eb3:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq $uuid_00000000000c6d7d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6e85
	jmp uuid_00000000000c6e87
uuid_00000000000c6e85:
	mov $assemble_SB_argv_SB_referenced_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c6e87:
	mov -624(%RBP),%RSP
	add $-624, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6e8e
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6e8b
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq $uuid_00000000000c6d81
	pushq $0
	pushq $uuid_00000000000c6d82
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6e88
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d92
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq $uuid_00000000000c6d83
	pushq $0
	pushq -880(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
	jmp uuid_00000000000c6e8a
uuid_00000000000c6e88:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000c6e8a:
	mov -824(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000c6e8d
uuid_00000000000c6e8b:
#call function fragment::set-term : Arrow<Cons<Fragment,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000c6e8d:
	mov -816(%RBP),%RSP
	add $-816, %RSP
	jmp uuid_00000000000c6e90
uuid_00000000000c6e8e:
uuid_00000000000c6e90:
	mov -808(%RBP),%RSP
	add $-808, %RSP
	movq -616(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c6eb5:
	mov -160(%RBP),%RSP
	add $-808, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c6eb6
uuid_00000000000c6eb8:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-finish : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-write : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_write_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_finish_CL_ArrowNilNil:
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %r15
	pushq 0(%r15)
	push %RBP
	pushq -16(%rbp)
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ec0
	push %RBP
	pushq -16(%rbp)
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ebd
	push %RBP
	pushq -16(%rbp)
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6eba
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6eb9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6ebc
uuid_00000000000c6eba:
#call function compile-finish-gnu : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_SB_gnu_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6ebc:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000c6ebf
uuid_00000000000c6ebd:
#call function compile-finish-blob : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_SB_blob_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6ebf:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	jmp uuid_00000000000c6ec2
uuid_00000000000c6ec0:
#call function compile-finish-c : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_SB_c_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6ec2:
	mov -24(%RBP),%RSP
	add $-32, %RSP
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_finish_SB_c_CL_ArrowNilNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-c-text-header : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_c_SB_text_SB_header_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, %r15
	movq $assemble_SB_final_CL_String, %r14
	movq %r15, 0(%r14)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_finish_SB_gnu_CL_ArrowNilNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-text-header : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_text_SB_header_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_profile_SB_onexit_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-exit-cleanup : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_exit_SB_cleanup_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6ec3
	jmp uuid_00000000000c6ec5
uuid_00000000000c6ec3:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-data-header : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_data_SB_header_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000c6ec5:
	mov -40(%RBP),%RSP
	add $-40, %RSP
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, %r15
	movq $assemble_SB_final_CL_String, %r14
	movq %r15, 0(%r14)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_finish_SB_blob_CL_ArrowNilNil:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6ec6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext:
	pushq $0
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ecd
	jmp uuid_00000000000c6ecf
uuid_00000000000c6ecd:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6eca
	jmp uuid_00000000000c6ecc
uuid_00000000000c6eca:
	push %RBP
	jmp uuid_00000000000c6ec7
	jmp uuid_00000000000c6ec9
uuid_00000000000c6ec7:
	movb $1, -448(%rbp)
uuid_00000000000c6ec9:
	mov -544(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c6ecc:
	mov -464(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c6ecf:
	mov -456(%RBP),%RSP
	add $-544, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ed7
	push %RBP
	jmp uuid_00000000000c6ed4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6ed3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6ed6
uuid_00000000000c6ed4:
uuid_00000000000c6ed6:
	mov -552(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000c6ed9
uuid_00000000000c6ed7:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6ed0
	jmp uuid_00000000000c6ed2
uuid_00000000000c6ed0:
	movq $1, -288(%rbp)
uuid_00000000000c6ed2:
	mov -552(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c6ed9:
	mov -368(%RBP),%RSP
	add $-552, %RSP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ef5
	jmp uuid_00000000000c6ef7
uuid_00000000000c6ef5:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6eec
	jmp uuid_00000000000c6eee
uuid_00000000000c6eec:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6ee9
	jmp uuid_00000000000c6eeb
uuid_00000000000c6ee9:
	push %RBP
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ee3
	jmp uuid_00000000000c6ee5
uuid_00000000000c6ee3:
	push %RBP
	jmp uuid_00000000000c6ee0
	jmp uuid_00000000000c6ee2
uuid_00000000000c6ee0:
	push %RBP
	jmp uuid_00000000000c6edd
	jmp uuid_00000000000c6edf
uuid_00000000000c6edd:
	push %RBP
	mov -912(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6eda
	jmp uuid_00000000000c6edc
uuid_00000000000c6eda:
	movb $1, -968(%rbp)
uuid_00000000000c6edc:
	mov -1000(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c6edf:
	mov -992(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c6ee2:
	mov -984(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c6ee5:
	mov -976(%RBP),%RSP
	add $-1008, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ee6
	jmp uuid_00000000000c6ee8
uuid_00000000000c6ee6:
	movb $1, -808(%rbp)
uuid_00000000000c6ee8:
	mov -904(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c6eeb:
	mov -824(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c6eee:
	mov -816(%RBP),%RSP
	add $-1008, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ef2
	jmp uuid_00000000000c6ef4
uuid_00000000000c6ef2:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6eef
	jmp uuid_00000000000c6ef1
uuid_00000000000c6eef:
	movb $1, -712(%rbp)
uuid_00000000000c6ef1:
	mov -1016(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c6ef4:
	mov -728(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c6ef7:
	mov -720(%RBP),%RSP
	add $-1088, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f0b
	push %RBP
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq $0
	push %RBP
	mov -1168(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f01
	jmp uuid_00000000000c6f03
uuid_00000000000c6f01:
	push %RBP
	jmp uuid_00000000000c6efe
	jmp uuid_00000000000c6f00
uuid_00000000000c6efe:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6efb
	jmp uuid_00000000000c6efd
uuid_00000000000c6efb:
	movb $1, -1176(%rbp)
uuid_00000000000c6efd:
	mov -1200(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c6f00:
	mov -1192(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c6f03:
	mov -1184(%RBP),%RSP
	add $-1272, %RSP
	mov -1176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f08
	push %RBP
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f05
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6f04
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6f07
uuid_00000000000c6f05:
uuid_00000000000c6f07:
	mov -1280(%RBP),%RSP
	add $-1352, %RSP
	jmp uuid_00000000000c6f0a
uuid_00000000000c6f08:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6f0a:
	mov -1096(%RBP),%RSP
	add $-1272, %RSP
	jmp uuid_00000000000c6f0d
uuid_00000000000c6f0b:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
	mov -288(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ef8
#call function compile-global : Arrow<Cons<Cons<FContext,String>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1008(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call compile_SB_global_CL_ArrowNilConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6efa
uuid_00000000000c6ef8:
uuid_00000000000c6efa:
	mov -1096(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c6f0d:
	mov -632(%RBP),%RSP
	add $-1096, %RSP
	mov %rbp, %rsp
	sub $280, %rsp
	ret
compile_SB_write_CL_ArrowNilNil:
#call function write-file : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_target_CL_String, %r15
	pushq 0(%r15)
	mov $assemble_SB_final_CL_String, %r15
	pushq 0(%r15)
	mov %RBX, %RBP
	call write_SB_file_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_c_SB_function_SB_args_CL_ArrowSConsASTFContext:
	pushq $0
	pushq $0
	pushq $3
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f3e
	jmp uuid_00000000000c6f40
uuid_00000000000c6f3e:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f35
	jmp uuid_00000000000c6f37
uuid_00000000000c6f35:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f23
	jmp uuid_00000000000c6f25
uuid_00000000000c6f23:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f11
	jmp uuid_00000000000c6f13
uuid_00000000000c6f11:
	push %RBP
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	jmp uuid_00000000000c6f0e
	jmp uuid_00000000000c6f10
uuid_00000000000c6f0e:
	movb $1, -752(%rbp)
uuid_00000000000c6f10:
	mov -768(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c6f13:
	mov -760(%RBP),%RSP
	add $-792, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f20
	jmp uuid_00000000000c6f22
uuid_00000000000c6f20:
	push %RBP
	mov -632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f1a
	jmp uuid_00000000000c6f1c
uuid_00000000000c6f1a:
	push %RBP
	jmp uuid_00000000000c6f17
	jmp uuid_00000000000c6f19
uuid_00000000000c6f17:
	push %RBP
	mov -808(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6f14
	jmp uuid_00000000000c6f16
uuid_00000000000c6f14:
	movb $1, -880(%rbp)
uuid_00000000000c6f16:
	mov -904(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c6f19:
	mov -896(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c6f1c:
	mov -888(%RBP),%RSP
	add $-912, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f1d
	jmp uuid_00000000000c6f1f
uuid_00000000000c6f1d:
	movb $1, -656(%rbp)
uuid_00000000000c6f1f:
	mov -800(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c6f22:
	mov -672(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c6f25:
	mov -664(%RBP),%RSP
	add $-912, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f32
	jmp uuid_00000000000c6f34
uuid_00000000000c6f32:
	push %RBP
	mov -536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f2c
	jmp uuid_00000000000c6f2e
uuid_00000000000c6f2c:
	push %RBP
	jmp uuid_00000000000c6f29
	jmp uuid_00000000000c6f2b
uuid_00000000000c6f29:
	push %RBP
	mov -928(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6f26
	jmp uuid_00000000000c6f28
uuid_00000000000c6f26:
	movb $1, -1000(%rbp)
uuid_00000000000c6f28:
	mov -1024(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c6f2b:
	mov -1016(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c6f2e:
	mov -1008(%RBP),%RSP
	add $-1032, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f2f
	jmp uuid_00000000000c6f31
uuid_00000000000c6f2f:
	movb $1, -560(%rbp)
uuid_00000000000c6f31:
	mov -920(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c6f34:
	mov -576(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c6f37:
	mov -568(%RBP),%RSP
	add $-1032, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f3b
	jmp uuid_00000000000c6f3d
uuid_00000000000c6f3b:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6f38
	jmp uuid_00000000000c6f3a
uuid_00000000000c6f38:
	movb $1, -464(%rbp)
uuid_00000000000c6f3a:
	mov -1040(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c6f3d:
	mov -480(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c6f40:
	mov -472(%RBP),%RSP
	add $-1112, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f72
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f68
	jmp uuid_00000000000c6f6a
uuid_00000000000c6f68:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1288(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f56
	jmp uuid_00000000000c6f58
uuid_00000000000c6f56:
	push %RBP
	mov -1280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f44
	jmp uuid_00000000000c6f46
uuid_00000000000c6f44:
	push %RBP
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	jmp uuid_00000000000c6f41
	jmp uuid_00000000000c6f43
uuid_00000000000c6f41:
	movb $1, -1392(%rbp)
uuid_00000000000c6f43:
	mov -1408(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000c6f46:
	mov -1400(%RBP),%RSP
	add $-1432, %RSP
	mov -1392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f53
	jmp uuid_00000000000c6f55
uuid_00000000000c6f53:
	push %RBP
	mov -1272(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1512(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f4d
	jmp uuid_00000000000c6f4f
uuid_00000000000c6f4d:
	push %RBP
	jmp uuid_00000000000c6f4a
	jmp uuid_00000000000c6f4c
uuid_00000000000c6f4a:
	push %RBP
	mov -1448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6f47
	jmp uuid_00000000000c6f49
uuid_00000000000c6f47:
	movb $1, -1520(%rbp)
uuid_00000000000c6f49:
	mov -1544(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000c6f4c:
	mov -1536(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000c6f4f:
	mov -1528(%RBP),%RSP
	add $-1552, %RSP
	mov -1520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f50
	jmp uuid_00000000000c6f52
uuid_00000000000c6f50:
	movb $1, -1296(%rbp)
uuid_00000000000c6f52:
	mov -1440(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000c6f55:
	mov -1312(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000c6f58:
	mov -1304(%RBP),%RSP
	add $-1552, %RSP
	mov -1296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f65
	jmp uuid_00000000000c6f67
uuid_00000000000c6f65:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1632(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f5f
	jmp uuid_00000000000c6f61
uuid_00000000000c6f5f:
	push %RBP
	jmp uuid_00000000000c6f5c
	jmp uuid_00000000000c6f5e
uuid_00000000000c6f5c:
	push %RBP
	mov -1568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1672(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6f59
	jmp uuid_00000000000c6f5b
uuid_00000000000c6f59:
	movb $1, -1640(%rbp)
uuid_00000000000c6f5b:
	mov -1664(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000c6f5e:
	mov -1656(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000c6f61:
	mov -1648(%RBP),%RSP
	add $-1672, %RSP
	mov -1640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f62
	jmp uuid_00000000000c6f64
uuid_00000000000c6f62:
	movb $1, -1200(%rbp)
uuid_00000000000c6f64:
	mov -1560(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000c6f67:
	mov -1216(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000c6f6a:
	mov -1208(%RBP),%RSP
	add $-1672, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f6f
	push %RBP
	jmp uuid_00000000000c6f6c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6f6b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6f6e
uuid_00000000000c6f6c:
uuid_00000000000c6f6e:
	mov -1680(%RBP),%RSP
	add $-1680, %RSP
	jmp uuid_00000000000c6f71
uuid_00000000000c6f6f:
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	pushq $uuid_00000000000c4892
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1552(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
uuid_00000000000c6f71:
	mov -1120(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000c6f74
uuid_00000000000c6f72:
#call function compile-c-function-args : Arrow<Cons<FContext,AST>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_function_SB_args_CL_ArrowSConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -304(%RSP)
	push -304(%RSP)
	push -304(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	pushq $uuid_00000000000c4cb2
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	pushq $uuid_00000000000c4892
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -912(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
uuid_00000000000c6f74:
	mov -384(%RBP),%RSP
	add $-1264, %RSP
	subq $24, %rsp
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $280, %rsp
	ret
compile_SB_c_SB_text_SB_header_CL_ArrowSNil:
	pushq $0
	pushq $uuid_00000000000c6f75
	pushq $2
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
fragment_SB_context_CL__CL_new_CL_ArrowFContextNil:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	subq $200, %rsp
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,AST>,U8>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $1
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsU8ConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsU8ConsASTConsTypeConsStringFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function find-alias : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call find_SB_alias_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -208(%rbp)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c6f98:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6f99
	jmp uuid_00000000000c6f9a
uuid_00000000000c6f99:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq $0
	push %RBP
	mov -1104(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f82
	jmp uuid_00000000000c6f84
uuid_00000000000c6f82:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	jmp uuid_00000000000c6f7f
	jmp uuid_00000000000c6f81
uuid_00000000000c6f7f:
	push %RBP
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	jmp uuid_00000000000c6f7c
	jmp uuid_00000000000c6f7e
uuid_00000000000c6f7c:
	push %RBP
	mov -920(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6f79
	jmp uuid_00000000000c6f7b
uuid_00000000000c6f79:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6f76
	jmp uuid_00000000000c6f78
uuid_00000000000c6f76:
	movb $1, -1112(%rbp)
uuid_00000000000c6f78:
	mov -1336(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c6f7b:
	mov -1320(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c6f7e:
	mov -1288(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c6f81:
	mov -1128(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c6f84:
	mov -1120(%RBP),%RSP
	add $-1536, %RSP
	mov -1112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6f95
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6f94
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6f97
uuid_00000000000c6f95:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1328(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6f91
	movq -1536(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c6f93
uuid_00000000000c6f91:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6f8e
	movq -1280(%rbp), %r15
	movq %r15, -672(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -664(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -656(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -648(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -640(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -632(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -624(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -616(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -608(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -600(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -592(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -584(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -576(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -568(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -560(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -552(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -544(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -528(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c51f3
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c6f90
uuid_00000000000c6f8e:
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6f8b
	jmp uuid_00000000000c6f8d
uuid_00000000000c6f8b:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6f88
	movq -1280(%rbp), %r15
	movq %r15, -672(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -664(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -656(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -648(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -640(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -632(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -624(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -616(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -608(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -600(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -592(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -584(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -576(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -568(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -560(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -552(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -544(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -680(%rbp)
	jmp uuid_00000000000c6f8a
uuid_00000000000c6f88:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6f85
	jmp uuid_00000000000c6f87
uuid_00000000000c6f85:
	movq -1280(%rbp), %r15
	movq %r15, -672(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -664(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -656(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -648(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -640(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -632(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -624(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -616(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -608(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -600(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -592(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -584(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -576(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -568(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -560(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -552(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -544(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -680(%rbp)
uuid_00000000000c6f87:
	mov -1624(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000c6f8a:
	mov -1616(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000c6f8d:
	mov -1608(%RBP),%RSP
	add $-1624, %RSP
	movq -1536(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c6f90:
	mov -1552(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000c6f93:
	mov -1544(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000c6f97:
	mov -904(%RBP),%RSP
	add $-1624, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c6f98
uuid_00000000000c6f9a:
	push %RBP
	mov -312(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	push %RAX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6fb7
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6f9b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5144
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6f9c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -520(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -512(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c6fb3:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6fb4
	jmp uuid_00000000000c6fb5
uuid_00000000000c6fb4:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq $0
	push %RBP
	mov -1112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6fa9
	jmp uuid_00000000000c6fab
uuid_00000000000c6fa9:
	push %RBP
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000c6fa6
	jmp uuid_00000000000c6fa8
uuid_00000000000c6fa6:
	push %RBP
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	jmp uuid_00000000000c6fa3
	jmp uuid_00000000000c6fa5
uuid_00000000000c6fa3:
	push %RBP
	mov -928(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6fa0
	jmp uuid_00000000000c6fa2
uuid_00000000000c6fa0:
	push %RBP
	mov -920(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6f9d
	jmp uuid_00000000000c6f9f
uuid_00000000000c6f9d:
	movb $1, -1120(%rbp)
uuid_00000000000c6f9f:
	mov -1344(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c6fa2:
	mov -1328(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c6fa5:
	mov -1296(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c6fa8:
	mov -1136(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c6fab:
	mov -1128(%RBP),%RSP
	add $-1544, %RSP
	mov -1120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c6fb0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c6faf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6fb2
uuid_00000000000c6fb0:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1336(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6fac
	jmp uuid_00000000000c6fae
uuid_00000000000c6fac:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5144
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c6fae:
	mov -1552(%RBP),%RSP
	add $-1552, %RSP
	movq -1544(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c6fb2:
	mov -912(%RBP),%RSP
	add $-1552, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c6fb3
uuid_00000000000c6fb5:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6fb6
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c6fb9
uuid_00000000000c6fb7:
uuid_00000000000c6fb9:
	mov -704(%RBP),%RSP
	add $-704, %RSP
	subq $152, %rsp
	pushq -672(%rbp)
	pushq -664(%rbp)
	pushq -656(%rbp)
	pushq -648(%rbp)
	pushq -640(%rbp)
	pushq -632(%rbp)
	pushq -624(%rbp)
	pushq -616(%rbp)
	pushq -608(%rbp)
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $320, %rsp
	ret
fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,AST>,U8>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsU8ConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsASTConsTypeConsTypeConsStringFContext:
#call function fragment-context::lookups : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,U8>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $1
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsU8ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	subq $168, %rsp
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	pushq 456(%rsp)
	pushq 472(%rsp)
	pushq 488(%rsp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $336, %rsp
	ret
fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsU8ConsASTConsTypeConsTypeConsStringFContext:
#call function find-alias : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call find_SB_alias_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -208(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c700c:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c700d
	jmp uuid_00000000000c700e
uuid_00000000000c700d:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6fca
	jmp uuid_00000000000c6fcc
uuid_00000000000c6fca:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000c6fc7
	jmp uuid_00000000000c6fc9
uuid_00000000000c6fc7:
	push %RBP
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	jmp uuid_00000000000c6fc4
	jmp uuid_00000000000c6fc6
uuid_00000000000c6fc4:
	push %RBP
	mov -760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c6fc1
	jmp uuid_00000000000c6fc3
uuid_00000000000c6fc1:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c6fbe
	jmp uuid_00000000000c6fc0
uuid_00000000000c6fbe:
	movb $1, -952(%rbp)
uuid_00000000000c6fc0:
	mov -1176(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c6fc3:
	mov -1160(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c6fc6:
	mov -1128(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c6fc9:
	mov -968(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c6fcc:
	mov -960(%RBP),%RSP
	add $-1376, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7009
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7008
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c700b
uuid_00000000000c7009:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7005
	movq -1376(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c7007
uuid_00000000000c7005:
	push %RBP
#call function is : Arrow<Cons<Sized<24>,Sized<24>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized24Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7002
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6fff
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6ffc
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c51f3
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	jmp uuid_00000000000c6ffe
uuid_00000000000c6ffc:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
uuid_00000000000c6ffe:
	mov -1408(%RBP),%RSP
	add $-1408, %RSP
	jmp uuid_00000000000c7001
uuid_00000000000c6fff:
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6ff1
	jmp uuid_00000000000c6ff3
uuid_00000000000c6ff1:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6fee
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6feb
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	movq -1424(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -520(%rbp)
	jmp uuid_00000000000c6fed
uuid_00000000000c6feb:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
uuid_00000000000c6fed:
	mov -1472(%RBP),%RSP
	add $-1472, %RSP
	jmp uuid_00000000000c6ff0
uuid_00000000000c6fee:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c6fe0
	jmp uuid_00000000000c6fe2
uuid_00000000000c6fe0:
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c6fdd
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	movq -1424(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -520(%rbp)
	jmp uuid_00000000000c6fdf
uuid_00000000000c6fdd:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
uuid_00000000000c6fdf:
	mov -1480(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c6fe2:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c6ff0:
	mov -1464(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c6ff3:
	mov -1456(%RBP),%RSP
	add $-1480, %RSP
	movq -1376(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c7001:
	mov -1400(%RBP),%RSP
	add $-1480, %RSP
	jmp uuid_00000000000c7004
uuid_00000000000c7002:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c7004:
	mov -1392(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c7007:
	mov -1384(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c700b:
	mov -744(%RBP),%RSP
	add $-1392, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c700c
uuid_00000000000c700e:
	push %RBP
	mov -336(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	push %RAX
#call function .length : Arrow<List<Fragment>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7010
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c700f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5144
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c6fb6
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7012
uuid_00000000000c7010:
uuid_00000000000c7012:
	mov -544(%RBP),%RSP
	add $-544, %RSP
	subq $168, %rsp
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $344, %rsp
	ret
fragment_SB_context_CL__CL_lookup_SB_vararg_CL_ArrowFragmentListConsASTConsTypeConsStringFContext:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c7029:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c702a
	jmp uuid_00000000000c702b
uuid_00000000000c702a:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c701f
	jmp uuid_00000000000c7021
uuid_00000000000c701f:
	push %RBP
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	jmp uuid_00000000000c701c
	jmp uuid_00000000000c701e
uuid_00000000000c701c:
	push %RBP
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	jmp uuid_00000000000c7019
	jmp uuid_00000000000c701b
uuid_00000000000c7019:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7016
	jmp uuid_00000000000c7018
uuid_00000000000c7016:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7013
	jmp uuid_00000000000c7015
uuid_00000000000c7013:
	movb $1, -896(%rbp)
uuid_00000000000c7015:
	mov -1120(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c7018:
	mov -1104(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c701b:
	mov -1072(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c701e:
	mov -912(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c7021:
	mov -904(%RBP),%RSP
	add $-1320, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7026
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7025
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7028
uuid_00000000000c7026:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7022
	jmp uuid_00000000000c7024
uuid_00000000000c7022:
#call function close : Arrow<FragmentList,Array<FragmentList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentListFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq $0
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
uuid_00000000000c7024:
	mov -1328(%RBP),%RSP
	add $-1328, %RSP
	movq -1320(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c7028:
	mov -688(%RBP),%RSP
	add $-1328, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c7029
uuid_00000000000c702b:
	subq $168, %rsp
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext:
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	subq $200, %rsp
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $392, %rsp
	ret
bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext:
#call function fragment-context::lookup-soft : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::set-vararg : Arrow<Cons<Fragment,List<Array<Fragment,?>>>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
#call function cons : Arrow<Cons<Array<Fragment,?>,List<Array<Fragment,?>>>,List<Array<Fragment,?>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Fragment,Array<Fragment,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	mov %RBX, %RBP
	call cons_CL_ArrowListArray_QM_FragmentConsListArray_QM_FragmentArray_QM_Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_vararg_CL_ArrowFragmentConsListArray_QM_FragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $200, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $392, %rsp
	ret
with_SB_location_CL_ArrowASTConsSourceLocationAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7099
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7096
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7032
	jmp uuid_00000000000c7034
uuid_00000000000c7032:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	jmp uuid_00000000000c702f
	jmp uuid_00000000000c7031
uuid_00000000000c702f:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c702c
	jmp uuid_00000000000c702e
uuid_00000000000c702c:
	movb $1, -504(%rbp)
uuid_00000000000c702e:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c7031:
	mov -520(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c7034:
	mov -512(%RBP),%RSP
	add $-592, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7093
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c703e
	jmp uuid_00000000000c7040
uuid_00000000000c703e:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000c703b
	jmp uuid_00000000000c703d
uuid_00000000000c703b:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7038
	jmp uuid_00000000000c703a
uuid_00000000000c7038:
	movb $1, -680(%rbp)
uuid_00000000000c703a:
	mov -760(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c703d:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c7040:
	mov -688(%RBP),%RSP
	add $-768, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7090
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7047
	jmp uuid_00000000000c7049
uuid_00000000000c7047:
	push %RBP
	jmp uuid_00000000000c7044
	jmp uuid_00000000000c7046
uuid_00000000000c7044:
	movb $1, -856(%rbp)
uuid_00000000000c7046:
	mov -872(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c7049:
	mov -864(%RBP),%RSP
	add $-872, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c708d
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7050
	jmp uuid_00000000000c7052
uuid_00000000000c7050:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c704d
	jmp uuid_00000000000c704f
uuid_00000000000c704d:
	push %RBP
	mov -936(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c704a
	jmp uuid_00000000000c704c
uuid_00000000000c704a:
	movb $1, -960(%rbp)
uuid_00000000000c704c:
	mov -1056(%RBP),%RSP
	add $-1128, %RSP
uuid_00000000000c704f:
	mov -976(%RBP),%RSP
	add $-1128, %RSP
uuid_00000000000c7052:
	mov -968(%RBP),%RSP
	add $-1128, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c708a
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c705c
	jmp uuid_00000000000c705e
uuid_00000000000c705c:
	push %RBP
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	jmp uuid_00000000000c7059
	jmp uuid_00000000000c705b
uuid_00000000000c7059:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7056
	jmp uuid_00000000000c7058
uuid_00000000000c7056:
	push %RBP
	mov -1168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7053
	jmp uuid_00000000000c7055
uuid_00000000000c7053:
	movb $1, -1216(%rbp)
uuid_00000000000c7055:
	mov -1344(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000c7058:
	mov -1264(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000c705b:
	mov -1232(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000c705e:
	mov -1224(%RBP),%RSP
	add $-1416, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7087
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -1496(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7065
	jmp uuid_00000000000c7067
uuid_00000000000c7065:
	push %RBP
	mov -1488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7062
	jmp uuid_00000000000c7064
uuid_00000000000c7062:
	push %RBP
	mov -1480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c705f
	jmp uuid_00000000000c7061
uuid_00000000000c705f:
	movb $1, -1504(%rbp)
uuid_00000000000c7061:
	mov -1600(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000c7064:
	mov -1520(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000c7067:
	mov -1512(%RBP),%RSP
	add $-1672, %RSP
	mov -1504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7084
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -1752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c706e
	jmp uuid_00000000000c7070
uuid_00000000000c706e:
	push %RBP
	mov -1744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c706b
	jmp uuid_00000000000c706d
uuid_00000000000c706b:
	push %RBP
	mov -1736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7068
	jmp uuid_00000000000c706a
uuid_00000000000c7068:
	movb $1, -1760(%rbp)
uuid_00000000000c706a:
	mov -1856(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c706d:
	mov -1776(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c7070:
	mov -1768(%RBP),%RSP
	add $-1928, %RSP
	mov -1760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7081
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -2008(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7077
	jmp uuid_00000000000c7079
uuid_00000000000c7077:
	push %RBP
	mov -2000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7074
	jmp uuid_00000000000c7076
uuid_00000000000c7074:
	push %RBP
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	jmp uuid_00000000000c7071
	jmp uuid_00000000000c7073
uuid_00000000000c7071:
	movb $1, -2016(%rbp)
uuid_00000000000c7073:
	mov -2112(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000c7076:
	mov -2032(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000c7079:
	mov -2024(%RBP),%RSP
	add $-2168, %RSP
	mov -2016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c707e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c707d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7080
uuid_00000000000c707e:
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c707a
#call function with-location : Arrow<Cons<Token,SourceLocation>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowTokenConsSourceLocationToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	popq -2168(%RBP)
	popq -2160(%RBP)
	popq -2152(%RBP)
	popq -2144(%RBP)
	popq -2136(%RBP)
	popq -2128(%RBP)
	popq -2120(%RBP)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	popq -2104(%RBP)
	popq -2096(%RBP)
	popq -2088(%RBP)
	popq -2080(%RBP)
	popq -2072(%RBP)
	popq -2064(%RBP)
	popq -2056(%RBP)
	popq -2048(%RBP)
	popq -2040(%RBP)
	jmp uuid_00000000000c707c
uuid_00000000000c707a:
uuid_00000000000c707c:
	mov -2176(%RBP),%RSP
	add $-2176, %RSP
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000c7080:
	mov -1936(%RBP),%RSP
	add $-2176, %RSP
	jmp uuid_00000000000c7083
uuid_00000000000c7081:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000c7083:
	mov -1680(%RBP),%RSP
	add $-1928, %RSP
	jmp uuid_00000000000c7086
uuid_00000000000c7084:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000c7086:
	mov -1424(%RBP),%RSP
	add $-1672, %RSP
	jmp uuid_00000000000c7089
uuid_00000000000c7087:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $5
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000c7089:
	mov -1136(%RBP),%RSP
	add $-1416, %RSP
	jmp uuid_00000000000c708c
uuid_00000000000c708a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000c708c:
	mov -880(%RBP),%RSP
	add $-1128, %RSP
	jmp uuid_00000000000c708f
uuid_00000000000c708d:
uuid_00000000000c708f:
	mov -776(%RBP),%RSP
	add $-872, %RSP
	jmp uuid_00000000000c7092
uuid_00000000000c7090:
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7041
	pushq -768(%rbp)
#call function with-location : Arrow<Cons<Token,SourceLocation>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowTokenConsSourceLocationToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	pushq $6
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	jmp uuid_00000000000c7043
uuid_00000000000c7041:
uuid_00000000000c7043:
	mov -776(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c7092:
	mov -600(%RBP),%RSP
	add $-776, %RSP
	jmp uuid_00000000000c7095
uuid_00000000000c7093:
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7035
	pushq -592(%rbp)
#call function with-location : Arrow<Cons<Token,SourceLocation>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowTokenConsSourceLocationToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	pushq $7
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	jmp uuid_00000000000c7037
uuid_00000000000c7035:
uuid_00000000000c7037:
	mov -600(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c7095:
	mov -424(%RBP),%RSP
	add $-600, %RSP
	jmp uuid_00000000000c7098
uuid_00000000000c7096:
uuid_00000000000c7098:
	mov -344(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000c709b
uuid_00000000000c7099:
uuid_00000000000c709b:
	mov -264(%RBP),%RSP
	add $-336, %RSP
	subq $72, %rsp
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $112, %rsp
	ret
with_SB_location_CL_ArrowTokenConsSourceLocationToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c70a5
	jmp uuid_00000000000c70a7
uuid_00000000000c70a5:
	push %RBP
	jmp uuid_00000000000c70a2
	jmp uuid_00000000000c70a4
uuid_00000000000c70a2:
	push %RBP
	jmp uuid_00000000000c709f
	jmp uuid_00000000000c70a1
uuid_00000000000c709f:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c709c
	jmp uuid_00000000000c709e
uuid_00000000000c709c:
	movb $1, -224(%rbp)
uuid_00000000000c709e:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c70a1:
	mov -248(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c70a4:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c70a7:
	mov -232(%RBP),%RSP
	add $-264, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c70a9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c70a8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c70ab
uuid_00000000000c70a9:
	pushq -264(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c70ab:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $96, %rsp
	ret
without_SB_location_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7110
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c710d
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c70b2
	jmp uuid_00000000000c70b4
uuid_00000000000c70b2:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c70af
	jmp uuid_00000000000c70b1
uuid_00000000000c70af:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c70ac
	jmp uuid_00000000000c70ae
uuid_00000000000c70ac:
	movb $1, -472(%rbp)
uuid_00000000000c70ae:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c70b1:
	mov -488(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c70b4:
	mov -480(%RBP),%RSP
	add $-560, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c710a
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c70bb
	jmp uuid_00000000000c70bd
uuid_00000000000c70bb:
	push %RBP
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	jmp uuid_00000000000c70b8
	jmp uuid_00000000000c70ba
uuid_00000000000c70b8:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c70b5
	jmp uuid_00000000000c70b7
uuid_00000000000c70b5:
	movb $1, -648(%rbp)
uuid_00000000000c70b7:
	mov -728(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000c70ba:
	mov -664(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000c70bd:
	mov -656(%RBP),%RSP
	add $-736, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7107
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c70c1
	jmp uuid_00000000000c70c3
uuid_00000000000c70c1:
	push %RBP
	jmp uuid_00000000000c70be
	jmp uuid_00000000000c70c0
uuid_00000000000c70be:
	movb $1, -824(%rbp)
uuid_00000000000c70c0:
	mov -840(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c70c3:
	mov -832(%RBP),%RSP
	add $-840, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7104
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c70ca
	jmp uuid_00000000000c70cc
uuid_00000000000c70ca:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c70c7
	jmp uuid_00000000000c70c9
uuid_00000000000c70c7:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c70c4
	jmp uuid_00000000000c70c6
uuid_00000000000c70c4:
	movb $1, -928(%rbp)
uuid_00000000000c70c6:
	mov -1024(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c70c9:
	mov -944(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c70cc:
	mov -936(%RBP),%RSP
	add $-1096, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7101
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1176(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c70d6
	jmp uuid_00000000000c70d8
uuid_00000000000c70d6:
	push %RBP
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	jmp uuid_00000000000c70d3
	jmp uuid_00000000000c70d5
uuid_00000000000c70d3:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c70d0
	jmp uuid_00000000000c70d2
uuid_00000000000c70d0:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c70cd
	jmp uuid_00000000000c70cf
uuid_00000000000c70cd:
	movb $1, -1184(%rbp)
uuid_00000000000c70cf:
	mov -1312(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c70d2:
	mov -1232(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c70d5:
	mov -1200(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c70d8:
	mov -1192(%RBP),%RSP
	add $-1384, %RSP
	mov -1184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c70fe
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c70df
	jmp uuid_00000000000c70e1
uuid_00000000000c70df:
	push %RBP
	mov -1456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c70dc
	jmp uuid_00000000000c70de
uuid_00000000000c70dc:
	push %RBP
	mov -1448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c70d9
	jmp uuid_00000000000c70db
uuid_00000000000c70d9:
	movb $1, -1472(%rbp)
uuid_00000000000c70db:
	mov -1568(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000c70de:
	mov -1488(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000c70e1:
	mov -1480(%RBP),%RSP
	add $-1640, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c70fb
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1720(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c70e8
	jmp uuid_00000000000c70ea
uuid_00000000000c70e8:
	push %RBP
	mov -1712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c70e5
	jmp uuid_00000000000c70e7
uuid_00000000000c70e5:
	push %RBP
	mov -1704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c70e2
	jmp uuid_00000000000c70e4
uuid_00000000000c70e2:
	movb $1, -1728(%rbp)
uuid_00000000000c70e4:
	mov -1824(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c70e7:
	mov -1744(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c70ea:
	mov -1736(%RBP),%RSP
	add $-1896, %RSP
	mov -1728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c70f8
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1976(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c70f1
	jmp uuid_00000000000c70f3
uuid_00000000000c70f1:
	push %RBP
	mov -1968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c70ee
	jmp uuid_00000000000c70f0
uuid_00000000000c70ee:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	jmp uuid_00000000000c70eb
	jmp uuid_00000000000c70ed
uuid_00000000000c70eb:
	movb $1, -1984(%rbp)
uuid_00000000000c70ed:
	mov -2080(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000c70f0:
	mov -2000(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000c70f3:
	mov -1992(%RBP),%RSP
	add $-2136, %RSP
	mov -1984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c70f5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c70f4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c70f7
uuid_00000000000c70f5:
#call function without-location : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c70f7:
	mov -1904(%RBP),%RSP
	add $-2136, %RSP
	jmp uuid_00000000000c70fa
uuid_00000000000c70f8:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c70fa:
	mov -1648(%RBP),%RSP
	add $-1896, %RSP
	jmp uuid_00000000000c70fd
uuid_00000000000c70fb:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c70fd:
	mov -1392(%RBP),%RSP
	add $-1640, %RSP
	jmp uuid_00000000000c7100
uuid_00000000000c70fe:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c7100:
	mov -1104(%RBP),%RSP
	add $-1384, %RSP
	jmp uuid_00000000000c7103
uuid_00000000000c7101:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c7103:
	mov -848(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000c7106
uuid_00000000000c7104:
uuid_00000000000c7106:
	mov -744(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000c7109
uuid_00000000000c7107:
	pushq -736(%rbp)
#call function without-location : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c7109:
	mov -568(%RBP),%RSP
	add $-736, %RSP
	jmp uuid_00000000000c710c
uuid_00000000000c710a:
	pushq -560(%rbp)
#call function without-location : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c710c:
	mov -392(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c710f
uuid_00000000000c710d:
uuid_00000000000c710f:
	mov -312(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c7112
uuid_00000000000c7110:
uuid_00000000000c7112:
	mov -232(%RBP),%RSP
	add $-304, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
without_SB_location_CL_ArrowTokenToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c711c
	jmp uuid_00000000000c711e
uuid_00000000000c711c:
	push %RBP
	jmp uuid_00000000000c7119
	jmp uuid_00000000000c711b
uuid_00000000000c7119:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7116
	jmp uuid_00000000000c7118
uuid_00000000000c7116:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7113
	jmp uuid_00000000000c7115
uuid_00000000000c7113:
	movb $1, -192(%rbp)
uuid_00000000000c7115:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c7118:
	mov -216(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c711b:
	mov -208(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c711e:
	mov -200(%RBP),%RSP
	add $-240, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7120
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c711f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7122
uuid_00000000000c7120:
	pushq -240(%rbp)
	pushq -224(%rbp)
	pushq $uuid_00000000000c4960
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c7122:
	mov -128(%RBP),%RSP
	add $-240, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $64, %rsp
	ret
with_SB_key_CL_ArrowTokenConsStringToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c712c
	jmp uuid_00000000000c712e
uuid_00000000000c712c:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	jmp uuid_00000000000c7129
	jmp uuid_00000000000c712b
uuid_00000000000c7129:
	push %RBP
	jmp uuid_00000000000c7126
	jmp uuid_00000000000c7128
uuid_00000000000c7126:
	push %RBP
	jmp uuid_00000000000c7123
	jmp uuid_00000000000c7125
uuid_00000000000c7123:
	movb $1, -200(%rbp)
uuid_00000000000c7125:
	mov -264(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c7128:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c712b:
	mov -216(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c712e:
	mov -208(%RBP),%RSP
	add $-264, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7130
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c712f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7132
uuid_00000000000c7130:
	pushq -64(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c7132:
	mov -136(%RBP),%RSP
	add $-264, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
location_SB_of_CL_ArrowSourceLocationAST:
	pushq $uuid_00000000000c7133
	pushq $0
	pushq $0
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c713a
	jmp uuid_00000000000c713c
uuid_00000000000c713a:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	jmp uuid_00000000000c7137
	jmp uuid_00000000000c7139
uuid_00000000000c7137:
	push %RBP
	jmp uuid_00000000000c7134
	jmp uuid_00000000000c7136
uuid_00000000000c7134:
	movb $1, -272(%rbp)
uuid_00000000000c7136:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c7139:
	mov -288(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c713c:
	mov -280(%RBP),%RSP
	add $-352, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c719b
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7143
	jmp uuid_00000000000c7145
uuid_00000000000c7143:
	push %RBP
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000c7140
	jmp uuid_00000000000c7142
uuid_00000000000c7140:
	push %RBP
	jmp uuid_00000000000c713d
	jmp uuid_00000000000c713f
uuid_00000000000c713d:
	movb $1, -440(%rbp)
uuid_00000000000c713f:
	mov -520(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c7142:
	mov -456(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c7145:
	mov -448(%RBP),%RSP
	add $-520, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7198
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c714c
	jmp uuid_00000000000c714e
uuid_00000000000c714c:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7149
	jmp uuid_00000000000c714b
uuid_00000000000c7149:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7146
	jmp uuid_00000000000c7148
uuid_00000000000c7146:
	movb $1, -608(%rbp)
uuid_00000000000c7148:
	mov -704(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c714b:
	mov -624(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c714e:
	mov -616(%RBP),%RSP
	add $-776, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7195
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c715b
	jmp uuid_00000000000c715d
uuid_00000000000c715b:
	push %RBP
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	jmp uuid_00000000000c7158
	jmp uuid_00000000000c715a
uuid_00000000000c7158:
	push %RBP
	mov -824(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7155
	jmp uuid_00000000000c7157
uuid_00000000000c7155:
	push %RBP
	mov -816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7152
	jmp uuid_00000000000c7154
uuid_00000000000c7152:
	movb $1, -864(%rbp)
uuid_00000000000c7154:
	mov -992(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c7157:
	mov -912(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c715a:
	mov -880(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c715d:
	mov -872(%RBP),%RSP
	add $-1064, %RSP
	mov -864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7192
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -1144(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7167
	jmp uuid_00000000000c7169
uuid_00000000000c7167:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7164
	jmp uuid_00000000000c7166
uuid_00000000000c7164:
	push %RBP
	mov -1128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7161
	jmp uuid_00000000000c7163
uuid_00000000000c7161:
	movb $1, -1152(%rbp)
uuid_00000000000c7163:
	mov -1248(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c7166:
	mov -1168(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c7169:
	mov -1160(%RBP),%RSP
	add $-1320, %RSP
	mov -1152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c718f
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7173
	jmp uuid_00000000000c7175
uuid_00000000000c7173:
	push %RBP
	mov -1392(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7170
	jmp uuid_00000000000c7172
uuid_00000000000c7170:
	push %RBP
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	jmp uuid_00000000000c716d
	jmp uuid_00000000000c716f
uuid_00000000000c716d:
	movb $1, -1408(%rbp)
uuid_00000000000c716f:
	mov -1504(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c7172:
	mov -1424(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c7175:
	mov -1416(%RBP),%RSP
	add $-1560, %RSP
	mov -1408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c718c
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c717f
	jmp uuid_00000000000c7181
uuid_00000000000c717f:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c717c
	jmp uuid_00000000000c717e
uuid_00000000000c717c:
	push %RBP
	mov -1624(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7179
	jmp uuid_00000000000c717b
uuid_00000000000c7179:
	movb $1, -1648(%rbp)
uuid_00000000000c717b:
	mov -1744(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c717e:
	mov -1664(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c7181:
	mov -1656(%RBP),%RSP
	add $-1816, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7189
	push %RBP
	jmp uuid_00000000000c7186
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7185
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7188
uuid_00000000000c7186:
uuid_00000000000c7188:
	mov -1824(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000c718b
uuid_00000000000c7189:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7182
	jmp uuid_00000000000c7184
uuid_00000000000c7182:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c7184:
	mov -1824(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c718b:
	mov -1568(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000c718e
uuid_00000000000c718c:
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7176
	jmp uuid_00000000000c7178
uuid_00000000000c7176:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c7178:
	mov -1568(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000c718e:
	mov -1328(%RBP),%RSP
	add $-1568, %RSP
	jmp uuid_00000000000c7191
uuid_00000000000c718f:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c716a
	jmp uuid_00000000000c716c
uuid_00000000000c716a:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c716c:
	mov -1328(%RBP),%RSP
	add $-1328, %RSP
uuid_00000000000c7191:
	mov -1072(%RBP),%RSP
	add $-1328, %RSP
	jmp uuid_00000000000c7194
uuid_00000000000c7192:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c715e
	jmp uuid_00000000000c7160
uuid_00000000000c715e:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c7160:
	mov -1072(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c7194:
	mov -784(%RBP),%RSP
	add $-1072, %RSP
	jmp uuid_00000000000c7197
uuid_00000000000c7195:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c714f
	jmp uuid_00000000000c7151
uuid_00000000000c714f:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c7151:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c7197:
	mov -528(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c719a
uuid_00000000000c7198:
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c719a:
	mov -360(%RBP),%RSP
	add $-520, %RSP
	jmp uuid_00000000000c719d
uuid_00000000000c719b:
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c719d:
	mov -192(%RBP),%RSP
	add $-352, %RSP
	subq $32, %rsp
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
unique_CL_ArrowTokenToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c71a7
	jmp uuid_00000000000c71a9
uuid_00000000000c71a7:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000c71a4
	jmp uuid_00000000000c71a6
uuid_00000000000c71a4:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c71a1
	jmp uuid_00000000000c71a3
uuid_00000000000c71a1:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c719e
	jmp uuid_00000000000c71a0
uuid_00000000000c719e:
	movb $1, -192(%rbp)
uuid_00000000000c71a0:
	mov -264(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c71a3:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c71a6:
	mov -208(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c71a9:
	mov -200(%RBP),%RSP
	add $-272, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c71ab
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c71aa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c71ad
uuid_00000000000c71ab:
	pushq -272(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c71ad:
	mov -128(%RBP),%RSP
	add $-272, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $64, %rsp
	ret
print_SB_verbose_CL_ArrowNilToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c71b7
	jmp uuid_00000000000c71b9
uuid_00000000000c71b7:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000c71b4
	jmp uuid_00000000000c71b6
uuid_00000000000c71b4:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c71b1
	jmp uuid_00000000000c71b3
uuid_00000000000c71b1:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c71ae
	jmp uuid_00000000000c71b0
uuid_00000000000c71ae:
	movb $1, -192(%rbp)
uuid_00000000000c71b0:
	mov -264(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c71b3:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c71b6:
	mov -208(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c71b9:
	mov -200(%RBP),%RSP
	add $-272, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c71bb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c71ba
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c71bd
uuid_00000000000c71bb:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4b59
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c71bd:
	mov -128(%RBP),%RSP
	add $-272, %RSP
	mov %rbp, %rsp
	sub $64, %rsp
	ret
token_CL__CL_new_CL_ArrowTokenString:
	pushq -8(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function location::new : Arrow<Nil,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call location_CL__CL_new_CL_ArrowSourceLocationNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq $0
	subq $56, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
location_CL__CL_new_CL_ArrowSourceLocationNil:
	pushq $uuid_00000000000c7133
	pushq $0
	pushq $0
	pushq $0
	subq $32, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
non_SB_zero_CL_ArrowU64SourceLocation:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c71c7
	jmp uuid_00000000000c71c9
uuid_00000000000c71c7:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c71c4
	jmp uuid_00000000000c71c6
uuid_00000000000c71c4:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c71c1
	jmp uuid_00000000000c71c3
uuid_00000000000c71c1:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c71be
	jmp uuid_00000000000c71c0
uuid_00000000000c71be:
	movb $1, -128(%rbp)
uuid_00000000000c71c0:
	mov -176(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c71c3:
	mov -160(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c71c6:
	mov -144(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c71c9:
	mov -136(%RBP),%RSP
	add $-184, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c71ce
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c71cd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c71d0
uuid_00000000000c71ce:
	push %RBP
	mov -168(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c71ca
	jmp uuid_00000000000c71cc
uuid_00000000000c71ca:
	movq $1, -48(%rbp)
uuid_00000000000c71cc:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c71d0:
	mov -88(%RBP),%RSP
	add $-192, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
is_SB_already_SB_tokenized_CL_ArrowU64String:
	pushq $0
	mov $already_SB_tokenized_CL_ListStringListStringCaseNumber1, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c71ed:
#call function non-zero : Arrow<List<String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c71ee
	jmp uuid_00000000000c71ef
uuid_00000000000c71ee:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c71e3
	jmp uuid_00000000000c71e5
uuid_00000000000c71e3:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c71e0
	jmp uuid_00000000000c71e2
uuid_00000000000c71e0:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c71dd
	jmp uuid_00000000000c71df
uuid_00000000000c71dd:
	movb $1, -112(%rbp)
uuid_00000000000c71df:
	mov -160(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c71e2:
	mov -128(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c71e5:
	mov -120(%RBP),%RSP
	add $-168, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c71ea
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c71e9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c71ec
uuid_00000000000c71ea:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c71e6
	jmp uuid_00000000000c71e8
uuid_00000000000c71e6:
	movq $1, -24(%rbp)
uuid_00000000000c71e8:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -136(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000c71ec:
	mov -80(%RBP),%RSP
	add $-176, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c71ed
uuid_00000000000c71ef:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
tokenize_CL_ArrowNilString:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000c71f0
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c71f1
	jmp uuid_00000000000c71f3
uuid_00000000000c71f1:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	mov $config_SB_platform_SB_prefix_CL_String, %r15
	pushq 0(%r15)
	pushq $2
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
uuid_00000000000c71f3:
	mov -24(%RBP),%RSP
	add $-24, %RSP
	pushq $uuid_00000000000c4960
	push %RBP
#call function is-already-tokenized : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call is_SB_already_SB_tokenized_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c71fc
#call function read-file : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call read_SB_file_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -32(%rbp)
#call function cons : Arrow<Cons<String,List<String>>,List<String>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov $already_SB_tokenized_CL_ListStringListStringCaseNumber1, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListStringConsListStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov $already_SB_tokenized_CL_ListStringListStringCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	jmp uuid_00000000000c71fe
uuid_00000000000c71fc:
uuid_00000000000c71fe:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $1
	pushq $1
	pushq $1
	pushq $1
	pushq $0
uuid_00000000000c72b4:
	mov -32(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c72b5
	jmp uuid_00000000000c72b6
uuid_00000000000c72b5:
	mov -32(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -120(%rbp)
	mov -136(%RBP), %AL
	mov $10, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7203
	push %RBP
	jmp uuid_00000000000c7200
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c71ff
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7202
uuid_00000000000c7200:
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -88(%rbp)
uuid_00000000000c7202:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c7205
uuid_00000000000c7203:
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -80(%rbp)
	movq $1, -88(%rbp)
uuid_00000000000c7205:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	mov -32(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -144(%rbp)
	mov -160(%RBP), %AL
	mov $35, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c72b1
	push %RBP
	pushq -144(%rbp)
	mov -176(%RBP), %AL
	mov $10, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c72ae
	push %RBP
	pushq -144(%rbp)
	mov -192(%RBP), %AL
	mov $9, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c72ab
	push %RBP
	pushq -144(%rbp)
	mov -208(%RBP), %AL
	mov $32, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c72a8
	push %RBP
	pushq -144(%rbp)
	mov -224(%RBP), %AL
	mov $40, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c72a5
	push %RBP
	pushq -144(%rbp)
	mov -240(%RBP), %AL
	mov $41, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c72a2
	push %RBP
	pushq -144(%rbp)
	mov -256(%RBP), %AL
	mov $39, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c729f
	push %RBP
	pushq -144(%rbp)
	mov -272(%RBP), %AL
	mov $59, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c729c
	push %RBP
	pushq -144(%rbp)
	jmp uuid_00000000000c7299
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7298
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c729b
uuid_00000000000c7299:
	push %RBP
	mov -48(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000c7295
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4b57
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7292
	jmp uuid_00000000000c7294
uuid_00000000000c7292:
	pushq $uuid_00000000000c4b57
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c7294:
	mov -304(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000c7297
uuid_00000000000c7295:
uuid_00000000000c7297:
	mov -296(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c729b:
	mov -280(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c729e
uuid_00000000000c729c:
	push %RBP
	mov -48(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000c7287
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c727c
	jmp uuid_00000000000c727e
uuid_00000000000c727c:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c727e:
	mov -288(%RBP),%RSP
	add $-344, %RSP
	pushq $uuid_00000000000c4b54
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	jmp uuid_00000000000c7289
uuid_00000000000c7287:
uuid_00000000000c7289:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c729e:
	mov -264(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c72a1
uuid_00000000000c729f:
	push %RBP
	mov -48(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000c7271
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7266
	jmp uuid_00000000000c7268
uuid_00000000000c7266:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c7268:
	mov -272(%RBP),%RSP
	add $-328, %RSP
	pushq $uuid_00000000000c4b56
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	jmp uuid_00000000000c7273
uuid_00000000000c7271:
uuid_00000000000c7273:
	mov -264(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c72a1:
	mov -248(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c72a4
uuid_00000000000c72a2:
	push %RBP
	mov -48(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000c725b
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7250
	jmp uuid_00000000000c7252
uuid_00000000000c7250:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c7252:
	mov -256(%RBP),%RSP
	add $-312, %RSP
	mov -112(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -112(%rbp)
	pushq $uuid_00000000000c4893
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	jmp uuid_00000000000c725d
uuid_00000000000c725b:
uuid_00000000000c725d:
	mov -248(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c72a4:
	mov -232(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c72a7
uuid_00000000000c72a5:
	push %RBP
	mov -48(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000c7245
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c723a
	jmp uuid_00000000000c723c
uuid_00000000000c723a:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c723c:
	mov -240(%RBP),%RSP
	add $-296, %RSP
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -112(%rbp)
	pushq $uuid_00000000000c4891
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -88(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -88(%rbp), %r15
	mov %r15, -104(%rbp)
	jmp uuid_00000000000c7247
uuid_00000000000c7245:
uuid_00000000000c7247:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c72a7:
	mov -216(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c72aa
uuid_00000000000c72a8:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c722f
	jmp uuid_00000000000c7231
uuid_00000000000c722f:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c7231:
	mov -216(%RBP),%RSP
	add $-272, %RSP
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -88(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -88(%rbp), %r15
	mov %r15, -104(%rbp)
uuid_00000000000c72aa:
	mov -200(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c72ad
uuid_00000000000c72ab:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7224
	jmp uuid_00000000000c7226
uuid_00000000000c7224:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c7226:
	mov -200(%RBP),%RSP
	add $-256, %RSP
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -88(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -88(%rbp), %r15
	mov %r15, -104(%rbp)
uuid_00000000000c72ad:
	mov -184(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c72b0
uuid_00000000000c72ae:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7219
	jmp uuid_00000000000c721b
uuid_00000000000c7219:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c721b:
	mov -184(%RBP),%RSP
	add $-240, %RSP
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -88(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -88(%rbp), %r15
	mov %r15, -104(%rbp)
	movb $0, -48(%rbp)
uuid_00000000000c72b0:
	mov -168(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c72b3
uuid_00000000000c72b1:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c720e
	jmp uuid_00000000000c7210
uuid_00000000000c720e:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c7210:
	mov -168(%RBP),%RSP
	add $-224, %RSP
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -88(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -88(%rbp), %r15
	mov %r15, -104(%rbp)
	movb $1, -48(%rbp)
uuid_00000000000c72b3:
	mov -152(%RBP),%RSP
	add $-224, %RSP
	mov -32(%RBP), %RAX
	inc %RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %rsp
	add $8, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c72b4
uuid_00000000000c72b6:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c72bf
	jmp uuid_00000000000c72c1
uuid_00000000000c72bf:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
uuid_00000000000c72c1:
	mov -120(%RBP),%RSP
	add $-176, %RSP
#call function reverse : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	push %RBP
	mov -112(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c72cc
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c72ca
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c72cb
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c72ce
uuid_00000000000c72cc:
uuid_00000000000c72ce:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	mov %rbp, %rsp
	sub $16, %rsp
	ret
align_CL_ArrowI64I64:
#call function max : Arrow<Cons<I64,I64>,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $8
	mov %RBX, %RBP
	call max_CL_ArrowI64ConsI64I64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_ffi_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c72d5
	jmp uuid_00000000000c72d7
uuid_00000000000c72d5:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c72d2
	jmp uuid_00000000000c72d4
uuid_00000000000c72d2:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c72cf
	jmp uuid_00000000000c72d1
uuid_00000000000c72cf:
	movb $1, -104(%rbp)
uuid_00000000000c72d1:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c72d4:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c72d7:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c72e9
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c72df
	jmp uuid_00000000000c72e1
uuid_00000000000c72df:
	push %RBP
	jmp uuid_00000000000c72dc
	jmp uuid_00000000000c72de
uuid_00000000000c72dc:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c72d8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c72d9
	jmp uuid_00000000000c72db
uuid_00000000000c72d9:
	movb $1, -216(%rbp)
uuid_00000000000c72db:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c72de:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c72e1:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c72e6
	push %RBP
	jmp uuid_00000000000c72e3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c72e2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c72e5
uuid_00000000000c72e3:
uuid_00000000000c72e5:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c72e8
uuid_00000000000c72e6:
	movq $1, -40(%rbp)
uuid_00000000000c72e8:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c72eb
uuid_00000000000c72e9:
#call function is-ffi : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_ffi_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-ffi : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_ffi_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c72eb:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_nil_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c72f2
	jmp uuid_00000000000c72f4
uuid_00000000000c72f2:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c72ef
	jmp uuid_00000000000c72f1
uuid_00000000000c72ef:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c72ec
	jmp uuid_00000000000c72ee
uuid_00000000000c72ec:
	movb $1, -104(%rbp)
uuid_00000000000c72ee:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c72f1:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c72f4:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7305
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c72fb
	jmp uuid_00000000000c72fd
uuid_00000000000c72fb:
	push %RBP
	jmp uuid_00000000000c72f8
	jmp uuid_00000000000c72fa
uuid_00000000000c72f8:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c72f5
	jmp uuid_00000000000c72f7
uuid_00000000000c72f5:
	movb $1, -216(%rbp)
uuid_00000000000c72f7:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c72fa:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c72fd:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7302
	push %RBP
	jmp uuid_00000000000c72ff
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c72fe
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7301
uuid_00000000000c72ff:
uuid_00000000000c7301:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c7304
uuid_00000000000c7302:
	movq $1, -40(%rbp)
uuid_00000000000c7304:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c7307
uuid_00000000000c7305:
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c7307:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_seq_CL_ArrowU64AST:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c730e
	jmp uuid_00000000000c7310
uuid_00000000000c730e:
	push %RBP
	jmp uuid_00000000000c730b
	jmp uuid_00000000000c730d
uuid_00000000000c730b:
	push %RBP
	jmp uuid_00000000000c7308
	jmp uuid_00000000000c730a
uuid_00000000000c7308:
	movb $1, -248(%rbp)
uuid_00000000000c730a:
	mov -272(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c730d:
	mov -264(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c7310:
	mov -256(%RBP),%RSP
	add $-272, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7315
	push %RBP
	jmp uuid_00000000000c7312
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7311
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7314
uuid_00000000000c7312:
uuid_00000000000c7314:
	mov -280(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c7317
uuid_00000000000c7315:
	movq $1, -88(%rbp)
uuid_00000000000c7317:
	mov -168(%RBP),%RSP
	add $-272, %RSP
	mov -88(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
is_SB_arrow_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c731e
	jmp uuid_00000000000c7320
uuid_00000000000c731e:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c731b
	jmp uuid_00000000000c731d
uuid_00000000000c731b:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7318
	jmp uuid_00000000000c731a
uuid_00000000000c7318:
	movb $1, -104(%rbp)
uuid_00000000000c731a:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c731d:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c7320:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7331
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7327
	jmp uuid_00000000000c7329
uuid_00000000000c7327:
	push %RBP
	jmp uuid_00000000000c7324
	jmp uuid_00000000000c7326
uuid_00000000000c7324:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c500f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7321
	jmp uuid_00000000000c7323
uuid_00000000000c7321:
	movb $1, -216(%rbp)
uuid_00000000000c7323:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c7326:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c7329:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c732e
	push %RBP
	jmp uuid_00000000000c732b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c732a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c732d
uuid_00000000000c732b:
uuid_00000000000c732d:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c7330
uuid_00000000000c732e:
	movq $1, -40(%rbp)
uuid_00000000000c7330:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c7333
uuid_00000000000c7331:
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c7333:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_array_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c733a
	jmp uuid_00000000000c733c
uuid_00000000000c733a:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7337
	jmp uuid_00000000000c7339
uuid_00000000000c7337:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7334
	jmp uuid_00000000000c7336
uuid_00000000000c7334:
	movb $1, -104(%rbp)
uuid_00000000000c7336:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c7339:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c733c:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c734d
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7343
	jmp uuid_00000000000c7345
uuid_00000000000c7343:
	push %RBP
	jmp uuid_00000000000c7340
	jmp uuid_00000000000c7342
uuid_00000000000c7340:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c4ae9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c733d
	jmp uuid_00000000000c733f
uuid_00000000000c733d:
	movb $1, -216(%rbp)
uuid_00000000000c733f:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c7342:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c7345:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c734a
	push %RBP
	jmp uuid_00000000000c7347
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7346
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7349
uuid_00000000000c7347:
uuid_00000000000c7349:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c734c
uuid_00000000000c734a:
	movq $1, -40(%rbp)
uuid_00000000000c734c:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c734f
uuid_00000000000c734d:
#call function is-array : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_array_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-array : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_array_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c734f:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_hook_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7356
	jmp uuid_00000000000c7358
uuid_00000000000c7356:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7353
	jmp uuid_00000000000c7355
uuid_00000000000c7353:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7350
	jmp uuid_00000000000c7352
uuid_00000000000c7350:
	movb $1, -104(%rbp)
uuid_00000000000c7352:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c7355:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c7358:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c736a
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7360
	jmp uuid_00000000000c7362
uuid_00000000000c7360:
	push %RBP
	jmp uuid_00000000000c735d
	jmp uuid_00000000000c735f
uuid_00000000000c735d:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c7359
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c735a
	jmp uuid_00000000000c735c
uuid_00000000000c735a:
	movb $1, -216(%rbp)
uuid_00000000000c735c:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c735f:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c7362:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7367
	push %RBP
	jmp uuid_00000000000c7364
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7363
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7366
uuid_00000000000c7364:
uuid_00000000000c7366:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c7369
uuid_00000000000c7367:
	movq $1, -40(%rbp)
uuid_00000000000c7369:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c736c
uuid_00000000000c736a:
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c736c:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_blob_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7373
	jmp uuid_00000000000c7375
uuid_00000000000c7373:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7370
	jmp uuid_00000000000c7372
uuid_00000000000c7370:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c736d
	jmp uuid_00000000000c736f
uuid_00000000000c736d:
	movb $1, -104(%rbp)
uuid_00000000000c736f:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c7372:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c7375:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7387
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c737d
	jmp uuid_00000000000c737f
uuid_00000000000c737d:
	push %RBP
	jmp uuid_00000000000c737a
	jmp uuid_00000000000c737c
uuid_00000000000c737a:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c7376
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7377
	jmp uuid_00000000000c7379
uuid_00000000000c7377:
	movb $1, -216(%rbp)
uuid_00000000000c7379:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c737c:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c737f:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7384
	push %RBP
	jmp uuid_00000000000c7381
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7380
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7383
uuid_00000000000c7381:
uuid_00000000000c7383:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c7386
uuid_00000000000c7384:
	movq $1, -40(%rbp)
uuid_00000000000c7386:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c7389
uuid_00000000000c7387:
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c7389:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_stack_SB_variable_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7390
	jmp uuid_00000000000c7392
uuid_00000000000c7390:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c738d
	jmp uuid_00000000000c738f
uuid_00000000000c738d:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c738a
	jmp uuid_00000000000c738c
uuid_00000000000c738a:
	movb $1, -104(%rbp)
uuid_00000000000c738c:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c738f:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c7392:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c73a3
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7399
	jmp uuid_00000000000c739b
uuid_00000000000c7399:
	push %RBP
	jmp uuid_00000000000c7396
	jmp uuid_00000000000c7398
uuid_00000000000c7396:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c4f44
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7393
	jmp uuid_00000000000c7395
uuid_00000000000c7393:
	movb $1, -216(%rbp)
uuid_00000000000c7395:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c7398:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c739b:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c73a0
	push %RBP
	jmp uuid_00000000000c739d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c739c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c739f
uuid_00000000000c739d:
uuid_00000000000c739f:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c73a2
uuid_00000000000c73a0:
	movq $1, -40(%rbp)
uuid_00000000000c73a2:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c73a5
uuid_00000000000c73a3:
#call function is-stack-variable : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_stack_SB_variable_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-stack-variable : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_stack_SB_variable_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c73a5:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_cons_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c73ac
	jmp uuid_00000000000c73ae
uuid_00000000000c73ac:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c73a9
	jmp uuid_00000000000c73ab
uuid_00000000000c73a9:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c73a6
	jmp uuid_00000000000c73a8
uuid_00000000000c73a6:
	movb $1, -104(%rbp)
uuid_00000000000c73a8:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c73ab:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c73ae:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c73bf
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c73b5
	jmp uuid_00000000000c73b7
uuid_00000000000c73b5:
	push %RBP
	jmp uuid_00000000000c73b2
	jmp uuid_00000000000c73b4
uuid_00000000000c73b2:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c73af
	jmp uuid_00000000000c73b1
uuid_00000000000c73af:
	movb $1, -216(%rbp)
uuid_00000000000c73b1:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c73b4:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c73b7:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c73bc
	push %RBP
	jmp uuid_00000000000c73b9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c73b8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c73bb
uuid_00000000000c73b9:
uuid_00000000000c73bb:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c73be
uuid_00000000000c73bc:
	movq $1, -40(%rbp)
uuid_00000000000c73be:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c73c1
uuid_00000000000c73bf:
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c73c1:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_impure_SB_ctx_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c73c8
	jmp uuid_00000000000c73ca
uuid_00000000000c73c8:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c73c5
	jmp uuid_00000000000c73c7
uuid_00000000000c73c5:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c73c2
	jmp uuid_00000000000c73c4
uuid_00000000000c73c2:
	movb $1, -104(%rbp)
uuid_00000000000c73c4:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c73c7:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c73ca:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c73dc
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c73d2
	jmp uuid_00000000000c73d4
uuid_00000000000c73d2:
	push %RBP
	jmp uuid_00000000000c73cf
	jmp uuid_00000000000c73d1
uuid_00000000000c73cf:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c73cb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c73cc
	jmp uuid_00000000000c73ce
uuid_00000000000c73cc:
	movb $1, -216(%rbp)
uuid_00000000000c73ce:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c73d1:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c73d4:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c73d9
	push %RBP
	jmp uuid_00000000000c73d6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c73d5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c73d8
uuid_00000000000c73d6:
uuid_00000000000c73d8:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c73db
uuid_00000000000c73d9:
	movq $1, -40(%rbp)
uuid_00000000000c73db:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c73de
uuid_00000000000c73dc:
#call function is-impure-ctx : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_ctx_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-impure-ctx : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_ctx_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c73de:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_string_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c73e5
	jmp uuid_00000000000c73e7
uuid_00000000000c73e5:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c73e2
	jmp uuid_00000000000c73e4
uuid_00000000000c73e2:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c73df
	jmp uuid_00000000000c73e1
uuid_00000000000c73df:
	movb $1, -104(%rbp)
uuid_00000000000c73e1:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c73e4:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c73e7:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c73f8
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c73ee
	jmp uuid_00000000000c73f0
uuid_00000000000c73ee:
	push %RBP
	jmp uuid_00000000000c73eb
	jmp uuid_00000000000c73ed
uuid_00000000000c73eb:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c4acc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c73e8
	jmp uuid_00000000000c73ea
uuid_00000000000c73e8:
	movb $1, -216(%rbp)
uuid_00000000000c73ea:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c73ed:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c73f0:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c73f5
	push %RBP
	jmp uuid_00000000000c73f2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c73f1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c73f4
uuid_00000000000c73f2:
uuid_00000000000c73f4:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c73f7
uuid_00000000000c73f5:
	movq $1, -40(%rbp)
uuid_00000000000c73f7:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c73fa
uuid_00000000000c73f8:
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c73fa:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_rc_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7401
	jmp uuid_00000000000c7403
uuid_00000000000c7401:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c73fe
	jmp uuid_00000000000c7400
uuid_00000000000c73fe:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c73fb
	jmp uuid_00000000000c73fd
uuid_00000000000c73fb:
	movb $1, -104(%rbp)
uuid_00000000000c73fd:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c7400:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c7403:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7414
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c740a
	jmp uuid_00000000000c740c
uuid_00000000000c740a:
	push %RBP
	jmp uuid_00000000000c7407
	jmp uuid_00000000000c7409
uuid_00000000000c7407:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c4fbd
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7404
	jmp uuid_00000000000c7406
uuid_00000000000c7404:
	movb $1, -216(%rbp)
uuid_00000000000c7406:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c7409:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c740c:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7411
	push %RBP
	jmp uuid_00000000000c740e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c740d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7410
uuid_00000000000c740e:
uuid_00000000000c7410:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c7413
uuid_00000000000c7411:
	movq $1, -40(%rbp)
uuid_00000000000c7413:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c7416
uuid_00000000000c7414:
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c7416:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_onto_SB_stack_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c741d
	jmp uuid_00000000000c741f
uuid_00000000000c741d:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c741a
	jmp uuid_00000000000c741c
uuid_00000000000c741a:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7417
	jmp uuid_00000000000c7419
uuid_00000000000c7417:
	movb $1, -104(%rbp)
uuid_00000000000c7419:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c741c:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c741f:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7443
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7439
	jmp uuid_00000000000c743b
uuid_00000000000c7439:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7430
	jmp uuid_00000000000c7432
uuid_00000000000c7430:
	push %RBP
	jmp uuid_00000000000c742d
	jmp uuid_00000000000c742f
uuid_00000000000c742d:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7427
	jmp uuid_00000000000c7429
uuid_00000000000c7427:
	push %RBP
	jmp uuid_00000000000c7424
	jmp uuid_00000000000c7426
uuid_00000000000c7424:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000c7420
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7421
	jmp uuid_00000000000c7423
uuid_00000000000c7421:
	movb $1, -336(%rbp)
uuid_00000000000c7423:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c7426:
	mov -352(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c7429:
	mov -344(%RBP),%RSP
	add $-368, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c742a
	jmp uuid_00000000000c742c
uuid_00000000000c742a:
	movb $1, -280(%rbp)
uuid_00000000000c742c:
	mov -304(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c742f:
	mov -296(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c7432:
	mov -288(%RBP),%RSP
	add $-368, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7436
	jmp uuid_00000000000c7438
uuid_00000000000c7436:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000c55b8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7433
	jmp uuid_00000000000c7435
uuid_00000000000c7433:
	movb $1, -216(%rbp)
uuid_00000000000c7435:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c7438:
	mov -232(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c743b:
	mov -224(%RBP),%RSP
	add $-384, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7440
	push %RBP
	jmp uuid_00000000000c743d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c743c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c743f
uuid_00000000000c743d:
uuid_00000000000c743f:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c7442
uuid_00000000000c7440:
	movq $1, -40(%rbp)
uuid_00000000000c7442:
	mov -184(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c7445
uuid_00000000000c7443:
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c7445:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_impure_SB_offset_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c744c
	jmp uuid_00000000000c744e
uuid_00000000000c744c:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7449
	jmp uuid_00000000000c744b
uuid_00000000000c7449:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7446
	jmp uuid_00000000000c7448
uuid_00000000000c7446:
	movb $1, -104(%rbp)
uuid_00000000000c7448:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c744b:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c744e:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7472
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7468
	jmp uuid_00000000000c746a
uuid_00000000000c7468:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c745f
	jmp uuid_00000000000c7461
uuid_00000000000c745f:
	push %RBP
	jmp uuid_00000000000c745c
	jmp uuid_00000000000c745e
uuid_00000000000c745c:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7456
	jmp uuid_00000000000c7458
uuid_00000000000c7456:
	push %RBP
	jmp uuid_00000000000c7453
	jmp uuid_00000000000c7455
uuid_00000000000c7453:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000c744f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7450
	jmp uuid_00000000000c7452
uuid_00000000000c7450:
	movb $1, -336(%rbp)
uuid_00000000000c7452:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c7455:
	mov -352(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c7458:
	mov -344(%RBP),%RSP
	add $-368, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7459
	jmp uuid_00000000000c745b
uuid_00000000000c7459:
	movb $1, -280(%rbp)
uuid_00000000000c745b:
	mov -304(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c745e:
	mov -296(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c7461:
	mov -288(%RBP),%RSP
	add $-368, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7465
	jmp uuid_00000000000c7467
uuid_00000000000c7465:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000c55b8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7462
	jmp uuid_00000000000c7464
uuid_00000000000c7462:
	movb $1, -216(%rbp)
uuid_00000000000c7464:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c7467:
	mov -232(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c746a:
	mov -224(%RBP),%RSP
	add $-384, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c746f
	push %RBP
	jmp uuid_00000000000c746c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c746b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c746e
uuid_00000000000c746c:
uuid_00000000000c746e:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c7471
uuid_00000000000c746f:
	movq $1, -40(%rbp)
uuid_00000000000c7471:
	mov -184(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c7474
uuid_00000000000c7472:
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c7474:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_branchconditional_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c747b
	jmp uuid_00000000000c747d
uuid_00000000000c747b:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7478
	jmp uuid_00000000000c747a
uuid_00000000000c7478:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7475
	jmp uuid_00000000000c7477
uuid_00000000000c7475:
	movb $1, -104(%rbp)
uuid_00000000000c7477:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c747a:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c747d:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c748f
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7485
	jmp uuid_00000000000c7487
uuid_00000000000c7485:
	push %RBP
	jmp uuid_00000000000c7482
	jmp uuid_00000000000c7484
uuid_00000000000c7482:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c747e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c747f
	jmp uuid_00000000000c7481
uuid_00000000000c747f:
	movb $1, -216(%rbp)
uuid_00000000000c7481:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c7484:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c7487:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c748c
	push %RBP
	jmp uuid_00000000000c7489
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7488
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c748b
uuid_00000000000c7489:
uuid_00000000000c748b:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c748e
uuid_00000000000c748c:
	movq $1, -40(%rbp)
uuid_00000000000c748e:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c7491
uuid_00000000000c748f:
#call function is-branchconditional : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_branchconditional_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-branchconditional : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_branchconditional_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c7491:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mark_SB_is_SB_lm_SB_struct_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $is_SB_lm_SB_struct_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_lm_SB_struct_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $is_SB_lm_SB_struct_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_AD__CL_ArrowASTConsASTAST:
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c74a2
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7498
	jmp uuid_00000000000c749a
uuid_00000000000c7498:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7495
	jmp uuid_00000000000c7497
uuid_00000000000c7495:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7492
	jmp uuid_00000000000c7494
uuid_00000000000c7492:
	movb $1, -392(%rbp)
uuid_00000000000c7494:
	mov -488(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c7497:
	mov -408(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c749a:
	mov -400(%RBP),%RSP
	add $-560, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c749f
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000c749c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c749b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c749e
uuid_00000000000c749c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c749e:
	mov -568(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000c74a1
uuid_00000000000c749f:
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c74a1:
	mov -312(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c74a4
uuid_00000000000c74a2:
uuid_00000000000c74a4:
	mov -232(%RBP),%RSP
	add $-304, %RSP
	subq $72, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
print_CL_ArrowNilToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c74ae
	jmp uuid_00000000000c74b0
uuid_00000000000c74ae:
	push %RBP
	jmp uuid_00000000000c74ab
	jmp uuid_00000000000c74ad
uuid_00000000000c74ab:
	push %RBP
	jmp uuid_00000000000c74a8
	jmp uuid_00000000000c74aa
uuid_00000000000c74a8:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c74a5
	jmp uuid_00000000000c74a7
uuid_00000000000c74a5:
	movb $1, -192(%rbp)
uuid_00000000000c74a7:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c74aa:
	mov -216(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c74ad:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c74b0:
	mov -200(%RBP),%RSP
	add $-232, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c74b2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c74b1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c74b4
uuid_00000000000c74b2:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c74b4:
	mov -128(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $64, %rsp
	ret
print_CL_ArrowNilContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c74ca
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c74c7
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c74be
	jmp uuid_00000000000c74c0
uuid_00000000000c74be:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	jmp uuid_00000000000c74bb
	jmp uuid_00000000000c74bd
uuid_00000000000c74bb:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c74b8
	jmp uuid_00000000000c74ba
uuid_00000000000c74b8:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c74b5
	jmp uuid_00000000000c74b7
uuid_00000000000c74b5:
	movb $1, -520(%rbp)
uuid_00000000000c74b7:
	mov -632(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c74ba:
	mov -616(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c74bd:
	mov -536(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c74c0:
	mov -528(%RBP),%RSP
	add $-728, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c74c4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c74c3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c74c6
uuid_00000000000c74c4:
#call function print : Arrow<Context,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c74c1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c74c2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c74c6:
	mov -416(%RBP),%RSP
	add $-728, %RSP
	jmp uuid_00000000000c74c9
uuid_00000000000c74c7:
uuid_00000000000c74c9:
	mov -312(%RBP),%RSP
	add $-408, %RSP
	jmp uuid_00000000000c74cc
uuid_00000000000c74ca:
uuid_00000000000c74cc:
	mov -208(%RBP),%RSP
	add $-304, %RSP
	mov %rbp, %rsp
	sub $104, %rsp
	ret
print_CL_ArrowNilTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c74e3
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c74e0
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c74d9
	jmp uuid_00000000000c74db
uuid_00000000000c74d9:
	push %RBP
	jmp uuid_00000000000c74d6
	jmp uuid_00000000000c74d8
uuid_00000000000c74d6:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000c74d3
	jmp uuid_00000000000c74d5
uuid_00000000000c74d3:
	push %RBP
	mov -528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c74d0
	jmp uuid_00000000000c74d2
uuid_00000000000c74d0:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c74cd
	jmp uuid_00000000000c74cf
uuid_00000000000c74cd:
	movb $1, -640(%rbp)
uuid_00000000000c74cf:
	mov -712(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c74d2:
	mov -696(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c74d5:
	mov -664(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c74d8:
	mov -656(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c74db:
	mov -648(%RBP),%RSP
	add $-832, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c74dd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c74dc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c74df
uuid_00000000000c74dd:
#call function print : Arrow<TContext,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5144
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c74c2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c74df:
	mov -512(%RBP),%RSP
	add $-832, %RSP
	jmp uuid_00000000000c74e2
uuid_00000000000c74e0:
uuid_00000000000c74e2:
	mov -384(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000c74e5
uuid_00000000000c74e3:
uuid_00000000000c74e5:
	mov -256(%RBP),%RSP
	add $-376, %RSP
	mov %rbp, %rsp
	sub $128, %rsp
	ret
print_CL_ArrowNilAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7556
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7553
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c74ed
	jmp uuid_00000000000c74ef
uuid_00000000000c74ed:
	push %RBP
	jmp uuid_00000000000c74ea
	jmp uuid_00000000000c74ec
uuid_00000000000c74ea:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c74e7
	jmp uuid_00000000000c74e9
uuid_00000000000c74e7:
	movb $1, -400(%rbp)
uuid_00000000000c74e9:
	mov -424(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000c74ec:
	mov -416(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000c74ef:
	mov -408(%RBP),%RSP
	add $-432, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7550
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c74f6
	jmp uuid_00000000000c74f8
uuid_00000000000c74f6:
	push %RBP
	jmp uuid_00000000000c74f3
	jmp uuid_00000000000c74f5
uuid_00000000000c74f3:
	push %RBP
	mov -448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c74f0
	jmp uuid_00000000000c74f2
uuid_00000000000c74f0:
	movb $1, -520(%rbp)
uuid_00000000000c74f2:
	mov -544(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c74f5:
	mov -536(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c74f8:
	mov -528(%RBP),%RSP
	add $-552, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c754d
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c74fc
	jmp uuid_00000000000c74fe
uuid_00000000000c74fc:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000c74f9
	jmp uuid_00000000000c74fb
uuid_00000000000c74f9:
	movb $1, -640(%rbp)
uuid_00000000000c74fb:
	mov -656(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000c74fe:
	mov -648(%RBP),%RSP
	add $-680, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c754a
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7502
	jmp uuid_00000000000c7504
uuid_00000000000c7502:
	push %RBP
	jmp uuid_00000000000c74ff
	jmp uuid_00000000000c7501
uuid_00000000000c74ff:
	movb $1, -768(%rbp)
uuid_00000000000c7501:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c7504:
	mov -776(%RBP),%RSP
	add $-784, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7547
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c750b
	jmp uuid_00000000000c750d
uuid_00000000000c750b:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7508
	jmp uuid_00000000000c750a
uuid_00000000000c7508:
	push %RBP
	mov -848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7505
	jmp uuid_00000000000c7507
uuid_00000000000c7505:
	movb $1, -872(%rbp)
uuid_00000000000c7507:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c750a:
	mov -888(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c750d:
	mov -880(%RBP),%RSP
	add $-1040, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7544
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7515
	jmp uuid_00000000000c7517
uuid_00000000000c7515:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7512
	jmp uuid_00000000000c7514
uuid_00000000000c7512:
	push %RBP
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000c750f
	jmp uuid_00000000000c7511
uuid_00000000000c750f:
	movb $1, -1128(%rbp)
uuid_00000000000c7511:
	mov -1224(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000c7514:
	mov -1144(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000c7517:
	mov -1136(%RBP),%RSP
	add $-1280, %RSP
	mov -1128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7541
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c751f
	jmp uuid_00000000000c7521
uuid_00000000000c751f:
	push %RBP
	mov -1352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c751c
	jmp uuid_00000000000c751e
uuid_00000000000c751c:
	push %RBP
	mov -1344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7519
	jmp uuid_00000000000c751b
uuid_00000000000c7519:
	movb $1, -1368(%rbp)
uuid_00000000000c751b:
	mov -1464(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c751e:
	mov -1384(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c7521:
	mov -1376(%RBP),%RSP
	add $-1536, %RSP
	mov -1368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c753e
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c752b
	jmp uuid_00000000000c752d
uuid_00000000000c752b:
	push %RBP
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	jmp uuid_00000000000c7528
	jmp uuid_00000000000c752a
uuid_00000000000c7528:
	push %RBP
	mov -1584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7525
	jmp uuid_00000000000c7527
uuid_00000000000c7525:
	push %RBP
	mov -1576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7522
	jmp uuid_00000000000c7524
uuid_00000000000c7522:
	movb $1, -1624(%rbp)
uuid_00000000000c7524:
	mov -1752(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c7527:
	mov -1672(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c752a:
	mov -1640(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c752d:
	mov -1632(%RBP),%RSP
	add $-1824, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c753b
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1904(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7534
	jmp uuid_00000000000c7536
uuid_00000000000c7534:
	push %RBP
	mov -1896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7531
	jmp uuid_00000000000c7533
uuid_00000000000c7531:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c752e
	jmp uuid_00000000000c7530
uuid_00000000000c752e:
	movb $1, -1912(%rbp)
uuid_00000000000c7530:
	mov -2008(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000c7533:
	mov -1928(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000c7536:
	mov -1920(%RBP),%RSP
	add $-2080, %RSP
	mov -1912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7538
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7537
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c753a
uuid_00000000000c7538:
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c74c2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c753a:
	mov -1832(%RBP),%RSP
	add $-2080, %RSP
	jmp uuid_00000000000c753d
uuid_00000000000c753b:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4891
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4b57
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4be5
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4893
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c753d:
	mov -1544(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000c7540
uuid_00000000000c753e:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4891
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4892
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4893
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7540:
	mov -1288(%RBP),%RSP
	add $-1536, %RSP
	jmp uuid_00000000000c7543
uuid_00000000000c7541:
#call function print : Arrow<Token,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7518
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7543:
	mov -1048(%RBP),%RSP
	add $-1280, %RSP
	jmp uuid_00000000000c7546
uuid_00000000000c7544:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c750e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c74c1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7546:
	mov -792(%RBP),%RSP
	add $-1040, %RSP
	jmp uuid_00000000000c7549
uuid_00000000000c7547:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c55b8
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7549:
	mov -688(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c754c
uuid_00000000000c754a:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c754c:
	mov -560(%RBP),%RSP
	add $-680, %RSP
	jmp uuid_00000000000c754f
uuid_00000000000c754d:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4b56
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c754f:
	mov -440(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000c7552
uuid_00000000000c7550:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7552:
	mov -320(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000c7555
uuid_00000000000c7553:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4881
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7555:
	mov -240(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c7558
uuid_00000000000c7556:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c74e6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7558:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
print_CL_ArrowNilFContext:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7559
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c756d:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c756e
	jmp uuid_00000000000c756f
uuid_00000000000c756e:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7566
	jmp uuid_00000000000c7568
uuid_00000000000c7566:
	push %RBP
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	jmp uuid_00000000000c7563
	jmp uuid_00000000000c7565
uuid_00000000000c7563:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c7560
	jmp uuid_00000000000c7562
uuid_00000000000c7560:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c755d
	jmp uuid_00000000000c755f
uuid_00000000000c755d:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c755a
	jmp uuid_00000000000c755c
uuid_00000000000c755a:
	movb $1, -624(%rbp)
uuid_00000000000c755c:
	mov -848(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c755f:
	mov -832(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c7562:
	mov -800(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c7565:
	mov -640(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c7568:
	mov -632(%RBP),%RSP
	add $-1048, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c756a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7569
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c756c
uuid_00000000000c756a:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5144
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -1048(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c756c:
	mov -416(%RBP),%RSP
	add $-1048, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c756d
uuid_00000000000c756f:
	mov %rbp, %rsp
	sub $208, %rsp
	ret
print_CL_ArrowNilFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7582
	jmp uuid_00000000000c7584
uuid_00000000000c7582:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000c757f
	jmp uuid_00000000000c7581
uuid_00000000000c757f:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c757c
	jmp uuid_00000000000c757e
uuid_00000000000c757c:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000c7579
	jmp uuid_00000000000c757b
uuid_00000000000c7579:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7576
	jmp uuid_00000000000c7578
uuid_00000000000c7576:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7573
	jmp uuid_00000000000c7575
uuid_00000000000c7573:
	push %RBP
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000c7570
	jmp uuid_00000000000c7572
uuid_00000000000c7570:
	movb $1, -480(%rbp)
uuid_00000000000c7572:
	mov -840(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c7575:
	mov -784(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c7578:
	mov -768(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c757b:
	mov -736(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c757e:
	mov -528(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c7581:
	mov -496(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c7584:
	mov -488(%RBP),%RSP
	add $-912, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c759b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c759a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c759d
uuid_00000000000c759b:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7585
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7586
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7597:
#call function non-zero : Arrow<FragmentKV,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7598
	jmp uuid_00000000000c7599
uuid_00000000000c7598:
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	push %RBP
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7590
	jmp uuid_00000000000c7592
uuid_00000000000c7590:
	push %RBP
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	jmp uuid_00000000000c758d
	jmp uuid_00000000000c758f
uuid_00000000000c758d:
	push %RBP
	mov -984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c758a
	jmp uuid_00000000000c758c
uuid_00000000000c758a:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7587
	jmp uuid_00000000000c7589
uuid_00000000000c7587:
	movb $1, -1024(%rbp)
uuid_00000000000c7589:
	mov -1088(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c758c:
	mov -1072(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c758f:
	mov -1040(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c7592:
	mov -1032(%RBP),%RSP
	add $-1136, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7594
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7593
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7596
uuid_00000000000c7594:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4b5a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c74c1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -1136(%rbp), %r15
	movq %r15, -832(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -824(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -792(%rbp)
uuid_00000000000c7596:
	mov -968(%RBP),%RSP
	add $-1136, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c7597
uuid_00000000000c7599:
uuid_00000000000c759d:
	mov -320(%RBP),%RSP
	add $-912, %RSP
	mov %rbp, %rsp
	sub $160, %rsp
	ret
print_CL_ArrowNilFragmentList:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c75a4
	jmp uuid_00000000000c75a6
uuid_00000000000c75a4:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	jmp uuid_00000000000c75a1
	jmp uuid_00000000000c75a3
uuid_00000000000c75a1:
	push %RBP
	mov -360(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c759e
	jmp uuid_00000000000c75a0
uuid_00000000000c759e:
	movb $1, -528(%rbp)
uuid_00000000000c75a0:
	mov -704(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c75a3:
	mov -544(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c75a6:
	mov -536(%RBP),%RSP
	add $-872, %RSP
	mov -528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c75ab
	push %RBP
	jmp uuid_00000000000c75a8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c75a7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c75aa
uuid_00000000000c75a8:
uuid_00000000000c75aa:
	mov -880(%RBP),%RSP
	add $-880, %RSP
	jmp uuid_00000000000c75ad
uuid_00000000000c75ab:
#call function print : Arrow<FragmentList,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c75ad:
	mov -352(%RBP),%RSP
	add $-872, %RSP
	mov %rbp, %rsp
	sub $176, %rsp
	ret
print_CL_ArrowNilSourceLocation:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c75b7
	jmp uuid_00000000000c75b9
uuid_00000000000c75b7:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c75b4
	jmp uuid_00000000000c75b6
uuid_00000000000c75b4:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c75b1
	jmp uuid_00000000000c75b3
uuid_00000000000c75b1:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c75ae
	jmp uuid_00000000000c75b0
uuid_00000000000c75ae:
	movb $1, -120(%rbp)
uuid_00000000000c75b0:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c75b3:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c75b6:
	mov -136(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c75b9:
	mov -128(%RBP),%RSP
	add $-176, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c75be
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c75bd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c75c0
uuid_00000000000c75be:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c75ba
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c75bb
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c75bc
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c75c0:
	mov -80(%RBP),%RSP
	add $-176, %RSP
	mov %rbp, %rsp
	sub $40, %rsp
	ret
print_CL_ArrowNilType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c75f4
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c75c4
	jmp uuid_00000000000c75c6
uuid_00000000000c75c4:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c75c1
	jmp uuid_00000000000c75c3
uuid_00000000000c75c1:
	movb $1, -128(%rbp)
uuid_00000000000c75c3:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c75c6:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c75f1
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c75cd
	jmp uuid_00000000000c75cf
uuid_00000000000c75cd:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c75ca
	jmp uuid_00000000000c75cc
uuid_00000000000c75ca:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c75c7
	jmp uuid_00000000000c75c9
uuid_00000000000c75c7:
	movb $1, -192(%rbp)
uuid_00000000000c75c9:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c75cc:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c75cf:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c75ee
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c75d6
	jmp uuid_00000000000c75d8
uuid_00000000000c75d6:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c75d3
	jmp uuid_00000000000c75d5
uuid_00000000000c75d3:
	push %RBP
	mov -280(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c75d0
	jmp uuid_00000000000c75d2
uuid_00000000000c75d0:
	movb $1, -304(%rbp)
uuid_00000000000c75d2:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c75d5:
	mov -320(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c75d8:
	mov -312(%RBP),%RSP
	add $-376, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c75eb
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c75e4
	jmp uuid_00000000000c75e6
uuid_00000000000c75e4:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c75e1
	jmp uuid_00000000000c75e3
uuid_00000000000c75e1:
	push %RBP
	mov -392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c75de
	jmp uuid_00000000000c75e0
uuid_00000000000c75de:
	movb $1, -416(%rbp)
uuid_00000000000c75e0:
	mov -480(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000c75e3:
	mov -432(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000c75e6:
	mov -424(%RBP),%RSP
	add $-488, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c75e8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c75e7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c75ea
uuid_00000000000c75e8:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4cf2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4cf3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c75ea:
	mov -384(%RBP),%RSP
	add $-488, %RSP
	jmp uuid_00000000000c75ed
uuid_00000000000c75eb:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c75db
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c75da
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c75dd
uuid_00000000000c75db:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c75d9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c75dd:
	mov -384(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c75ed:
	mov -272(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c75f0
uuid_00000000000c75ee:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c75f0:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c75f3
uuid_00000000000c75f1:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c75f3:
	mov -96(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c75f6
uuid_00000000000c75f4:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a21
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c75f6:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
print_CL_ArrowNilListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7614
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7601
	jmp uuid_00000000000c7603
uuid_00000000000c7601:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c75fe
	jmp uuid_00000000000c7600
uuid_00000000000c75fe:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000c75fb
	jmp uuid_00000000000c75fd
uuid_00000000000c75fb:
	movb $1, -192(%rbp)
uuid_00000000000c75fd:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c7600:
	mov -208(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c7603:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7611
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c760a
	jmp uuid_00000000000c760c
uuid_00000000000c760a:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7607
	jmp uuid_00000000000c7609
uuid_00000000000c7607:
	push %RBP
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	jmp uuid_00000000000c7604
	jmp uuid_00000000000c7606
uuid_00000000000c7604:
	movb $1, -336(%rbp)
uuid_00000000000c7606:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c7609:
	mov -352(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c760c:
	mov -344(%RBP),%RSP
	add $-424, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c760e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c760d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7610
uuid_00000000000c760e:
#call function print : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4cb2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7610:
	mov -288(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000c7613
uuid_00000000000c7611:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7613:
	mov -144(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c7616
uuid_00000000000c7614:
uuid_00000000000c7616:
	mov -96(%RBP),%RSP
	add $-136, %RSP
	mov %rbp, %rsp
	sub $48, %rsp
	ret
reverse_CL_ArrowFragmentListFragmentList:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c7624:
#call function non-zero : Arrow<FragmentList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7625
	jmp uuid_00000000000c7626
uuid_00000000000c7625:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c761d
	jmp uuid_00000000000c761f
uuid_00000000000c761d:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000c761a
	jmp uuid_00000000000c761c
uuid_00000000000c761a:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7617
	jmp uuid_00000000000c7619
uuid_00000000000c7617:
	movb $1, -696(%rbp)
uuid_00000000000c7619:
	mov -872(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c761c:
	mov -712(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c761f:
	mov -704(%RBP),%RSP
	add $-1040, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7621
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7620
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7623
uuid_00000000000c7621:
#call function close : Arrow<FragmentList,Array<FragmentList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentListFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq $0
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	movq -1040(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c7623:
	mov -520(%RBP),%RSP
	add $-1040, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c7624
uuid_00000000000c7626:
	subq $168, %rsp
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
serialize_SB_ast_CL_ArrowNilAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c76a7
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c76a4
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c762a
	jmp uuid_00000000000c762c
uuid_00000000000c762a:
	push %RBP
	jmp uuid_00000000000c7627
	jmp uuid_00000000000c7629
uuid_00000000000c7627:
	movb $1, -400(%rbp)
uuid_00000000000c7629:
	mov -416(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c762c:
	mov -408(%RBP),%RSP
	add $-416, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c76a1
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7633
	jmp uuid_00000000000c7635
uuid_00000000000c7633:
	push %RBP
	jmp uuid_00000000000c7630
	jmp uuid_00000000000c7632
uuid_00000000000c7630:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c762d
	jmp uuid_00000000000c762f
uuid_00000000000c762d:
	movb $1, -504(%rbp)
uuid_00000000000c762f:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c7632:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c7635:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c769e
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c763d
	jmp uuid_00000000000c763f
uuid_00000000000c763d:
	push %RBP
	jmp uuid_00000000000c763a
	jmp uuid_00000000000c763c
uuid_00000000000c763a:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7637
	jmp uuid_00000000000c7639
uuid_00000000000c7637:
	movb $1, -624(%rbp)
uuid_00000000000c7639:
	mov -648(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c763c:
	mov -640(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c763f:
	mov -632(%RBP),%RSP
	add $-656, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c769b
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7644
	jmp uuid_00000000000c7646
uuid_00000000000c7644:
	push %RBP
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	jmp uuid_00000000000c7641
	jmp uuid_00000000000c7643
uuid_00000000000c7641:
	movb $1, -744(%rbp)
uuid_00000000000c7643:
	mov -760(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c7646:
	mov -752(%RBP),%RSP
	add $-784, %RSP
	mov -744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7698
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c764d
	jmp uuid_00000000000c764f
uuid_00000000000c764d:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c764a
	jmp uuid_00000000000c764c
uuid_00000000000c764a:
	push %RBP
	mov -848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7647
	jmp uuid_00000000000c7649
uuid_00000000000c7647:
	movb $1, -872(%rbp)
uuid_00000000000c7649:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c764c:
	mov -888(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c764f:
	mov -880(%RBP),%RSP
	add $-1040, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7695
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7658
	jmp uuid_00000000000c765a
uuid_00000000000c7658:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7655
	jmp uuid_00000000000c7657
uuid_00000000000c7655:
	push %RBP
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000c7652
	jmp uuid_00000000000c7654
uuid_00000000000c7652:
	movb $1, -1128(%rbp)
uuid_00000000000c7654:
	mov -1224(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000c7657:
	mov -1144(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000c765a:
	mov -1136(%RBP),%RSP
	add $-1280, %RSP
	mov -1128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7692
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7662
	jmp uuid_00000000000c7664
uuid_00000000000c7662:
	push %RBP
	mov -1352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c765f
	jmp uuid_00000000000c7661
uuid_00000000000c765f:
	push %RBP
	mov -1344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c765c
	jmp uuid_00000000000c765e
uuid_00000000000c765c:
	movb $1, -1368(%rbp)
uuid_00000000000c765e:
	mov -1464(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c7661:
	mov -1384(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c7664:
	mov -1376(%RBP),%RSP
	add $-1536, %RSP
	mov -1368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c768f
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c766f
	jmp uuid_00000000000c7671
uuid_00000000000c766f:
	push %RBP
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	jmp uuid_00000000000c766c
	jmp uuid_00000000000c766e
uuid_00000000000c766c:
	push %RBP
	mov -1584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7669
	jmp uuid_00000000000c766b
uuid_00000000000c7669:
	push %RBP
	mov -1576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7666
	jmp uuid_00000000000c7668
uuid_00000000000c7666:
	movb $1, -1624(%rbp)
uuid_00000000000c7668:
	mov -1752(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c766b:
	mov -1672(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c766e:
	mov -1640(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c7671:
	mov -1632(%RBP),%RSP
	add $-1824, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c768c
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1904(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7679
	jmp uuid_00000000000c767b
uuid_00000000000c7679:
	push %RBP
	mov -1896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7676
	jmp uuid_00000000000c7678
uuid_00000000000c7676:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2080(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7673
	jmp uuid_00000000000c7675
uuid_00000000000c7673:
	movb $1, -1912(%rbp)
uuid_00000000000c7675:
	mov -2008(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000c7678:
	mov -1928(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000c767b:
	mov -1920(%RBP),%RSP
	add $-2080, %RSP
	mov -1912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7689
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2160(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7682
	jmp uuid_00000000000c7684
uuid_00000000000c7682:
	push %RBP
	mov -2152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c767f
	jmp uuid_00000000000c7681
uuid_00000000000c767f:
	push %RBP
	mov -2144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c767c
	jmp uuid_00000000000c767e
uuid_00000000000c767c:
	movb $1, -2168(%rbp)
uuid_00000000000c767e:
	mov -2264(%RBP),%RSP
	add $-2336, %RSP
uuid_00000000000c7681:
	mov -2184(%RBP),%RSP
	add $-2336, %RSP
uuid_00000000000c7684:
	mov -2176(%RBP),%RSP
	add $-2336, %RSP
	mov -2168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7686
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7685
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7688
uuid_00000000000c7686:
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7688:
	mov -2088(%RBP),%RSP
	add $-2336, %RSP
	jmp uuid_00000000000c768b
uuid_00000000000c7689:
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c768b:
	mov -1832(%RBP),%RSP
	add $-2080, %RSP
	jmp uuid_00000000000c768e
uuid_00000000000c768c:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7672
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4892
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7651
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c768e:
	mov -1544(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000c7691
uuid_00000000000c768f:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7665
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4892
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7651
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7691:
	mov -1288(%RBP),%RSP
	add $-1536, %RSP
	jmp uuid_00000000000c7694
uuid_00000000000c7692:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c765b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Token,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4892
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7651
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7694:
	mov -1048(%RBP),%RSP
	add $-1280, %RSP
	jmp uuid_00000000000c7697
uuid_00000000000c7695:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7650
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4892
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7651
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7697:
	mov -792(%RBP),%RSP
	add $-1040, %RSP
	jmp uuid_00000000000c769a
uuid_00000000000c7698:
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c769a:
	mov -664(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c769d
uuid_00000000000c769b:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7640
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4893
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c769d:
	mov -544(%RBP),%RSP
	add $-656, %RSP
	jmp uuid_00000000000c76a0
uuid_00000000000c769e:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7636
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4893
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c76a0:
	mov -424(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000c76a3
uuid_00000000000c76a1:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c55b8
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c76a3:
	mov -320(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000c76a6
uuid_00000000000c76a4:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c76a6:
	mov -240(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c76a9
uuid_00000000000c76a7:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4881
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c76a9:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
serialize_SB_ast_CL_ArrowNilListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c76c7
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c76b4
	jmp uuid_00000000000c76b6
uuid_00000000000c76b4:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c76b1
	jmp uuid_00000000000c76b3
uuid_00000000000c76b1:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000c76ae
	jmp uuid_00000000000c76b0
uuid_00000000000c76ae:
	movb $1, -192(%rbp)
uuid_00000000000c76b0:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c76b3:
	mov -208(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c76b6:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c76c4
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c76bd
	jmp uuid_00000000000c76bf
uuid_00000000000c76bd:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c76ba
	jmp uuid_00000000000c76bc
uuid_00000000000c76ba:
	push %RBP
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	jmp uuid_00000000000c76b7
	jmp uuid_00000000000c76b9
uuid_00000000000c76b7:
	movb $1, -336(%rbp)
uuid_00000000000c76b9:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c76bc:
	mov -352(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c76bf:
	mov -344(%RBP),%RSP
	add $-424, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c76c1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c76c0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c76c3
uuid_00000000000c76c1:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7665
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4892
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7651
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c76c3:
	mov -288(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000c76c6
uuid_00000000000c76c4:
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c76c6:
	mov -144(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c76c9
uuid_00000000000c76c7:
uuid_00000000000c76c9:
	mov -96(%RBP),%RSP
	add $-136, %RSP
	mov %rbp, %rsp
	sub $48, %rsp
	ret
serialize_SB_ast_CL_ArrowNilType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c76fb
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c76ce
	jmp uuid_00000000000c76d0
uuid_00000000000c76ce:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c76cb
	jmp uuid_00000000000c76cd
uuid_00000000000c76cb:
	movb $1, -128(%rbp)
uuid_00000000000c76cd:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c76d0:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c76f8
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c76d7
	jmp uuid_00000000000c76d9
uuid_00000000000c76d7:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c76d4
	jmp uuid_00000000000c76d6
uuid_00000000000c76d4:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c76d1
	jmp uuid_00000000000c76d3
uuid_00000000000c76d1:
	movb $1, -192(%rbp)
uuid_00000000000c76d3:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c76d6:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c76d9:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c76f5
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c76e1
	jmp uuid_00000000000c76e3
uuid_00000000000c76e1:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c76de
	jmp uuid_00000000000c76e0
uuid_00000000000c76de:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c76db
	jmp uuid_00000000000c76dd
uuid_00000000000c76db:
	movb $1, -304(%rbp)
uuid_00000000000c76dd:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c76e0:
	mov -320(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c76e3:
	mov -312(%RBP),%RSP
	add $-376, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c76f2
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c76ea
	jmp uuid_00000000000c76ec
uuid_00000000000c76ea:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c76e7
	jmp uuid_00000000000c76e9
uuid_00000000000c76e7:
	push %RBP
	mov -392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c76e4
	jmp uuid_00000000000c76e6
uuid_00000000000c76e4:
	movb $1, -416(%rbp)
uuid_00000000000c76e6:
	mov -480(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000c76e9:
	mov -432(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000c76ec:
	mov -424(%RBP),%RSP
	add $-488, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c76ef
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c76ee
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c76f1
uuid_00000000000c76ef:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7665
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7640
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c76ed
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7651
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c76f1:
	mov -384(%RBP),%RSP
	add $-488, %RSP
	jmp uuid_00000000000c76f4
uuid_00000000000c76f2:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7640
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4893
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c76f4:
	mov -272(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000c76f7
uuid_00000000000c76f5:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7665
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c76da
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7665
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4892
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7651
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7651
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c76f7:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c76fa
uuid_00000000000c76f8:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7636
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4893
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c76fa:
	mov -96(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c76fd
uuid_00000000000c76fb:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c76ca
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c76fd:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
slot_CL_ArrowTypeConsStringType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7704
	jmp uuid_00000000000c7706
uuid_00000000000c7704:
	push %RBP
	jmp uuid_00000000000c7701
	jmp uuid_00000000000c7703
uuid_00000000000c7701:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c76fe
	jmp uuid_00000000000c7700
uuid_00000000000c76fe:
	movb $1, -128(%rbp)
uuid_00000000000c7700:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c7703:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c7706:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c771d
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7710
	jmp uuid_00000000000c7712
uuid_00000000000c7710:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c770d
	jmp uuid_00000000000c770f
uuid_00000000000c770d:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c770a
	jmp uuid_00000000000c770c
uuid_00000000000c770a:
	movb $1, -200(%rbp)
uuid_00000000000c770c:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c770f:
	mov -216(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c7712:
	mov -208(%RBP),%RSP
	add $-272, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c771a
	push %RBP
	jmp uuid_00000000000c7717
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7716
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7719
uuid_00000000000c7717:
uuid_00000000000c7719:
	mov -280(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c771c
uuid_00000000000c771a:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7713
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	movq -328(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -48(%rbp)
	jmp uuid_00000000000c7715
uuid_00000000000c7713:
	movq -296(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000c7715:
	mov -304(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c771c:
	mov -168(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000c771f
uuid_00000000000c771d:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7707
	jmp uuid_00000000000c7709
uuid_00000000000c7707:
	movq -24(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000c7709:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c771f:
	mov -96(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
slot_CL_ArrowTypeConsStringConsStringType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7726
	jmp uuid_00000000000c7728
uuid_00000000000c7726:
	push %RBP
	mov -120(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7723
	jmp uuid_00000000000c7725
uuid_00000000000c7723:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7720
	jmp uuid_00000000000c7722
uuid_00000000000c7720:
	movb $1, -136(%rbp)
uuid_00000000000c7722:
	mov -200(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c7725:
	mov -152(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c7728:
	mov -144(%RBP),%RSP
	add $-208, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7752
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7745
	jmp uuid_00000000000c7747
uuid_00000000000c7745:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7742
	jmp uuid_00000000000c7744
uuid_00000000000c7742:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c773f
	jmp uuid_00000000000c7741
uuid_00000000000c773f:
	movb $1, -248(%rbp)
uuid_00000000000c7741:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c7744:
	mov -264(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c7747:
	mov -256(%RBP),%RSP
	add $-320, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c774f
	push %RBP
	jmp uuid_00000000000c774c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c774b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c774e
uuid_00000000000c774c:
uuid_00000000000c774e:
	mov -328(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000c7751
uuid_00000000000c774f:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7748
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	movq -376(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -56(%rbp)
	jmp uuid_00000000000c774a
uuid_00000000000c7748:
	movq -344(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000c774a:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c7751:
	mov -216(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c7754
uuid_00000000000c7752:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c773c
	jmp uuid_00000000000c773e
uuid_00000000000c773c:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c772f
	jmp uuid_00000000000c7731
uuid_00000000000c772f:
	push %RBP
	jmp uuid_00000000000c772c
	jmp uuid_00000000000c772e
uuid_00000000000c772c:
	push %RBP
	mov -288(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7729
	jmp uuid_00000000000c772b
uuid_00000000000c7729:
	movb $1, -312(%rbp)
uuid_00000000000c772b:
	mov -336(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c772e:
	mov -328(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c7731:
	mov -320(%RBP),%RSP
	add $-344, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7739
	push %RBP
	jmp uuid_00000000000c7736
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7735
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7738
uuid_00000000000c7736:
uuid_00000000000c7738:
	mov -352(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c773b
uuid_00000000000c7739:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7732
	jmp uuid_00000000000c7734
uuid_00000000000c7732:
	movq -24(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000c7734:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c773b:
	mov -264(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c773e:
	mov -216(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c7754:
	mov -104(%RBP),%RSP
	add $-352, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
uuid_CL_ArrowStringNil:
	mov $uuid_SB_counter_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $uuid_SB_counter_CL_U64, %r14
	movq %r15, 0(%r14)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c7755
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-hex : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $uuid_SB_counter_CL_U64, %r15
	pushq 0(%r15)
	mov %RBX, %RBP
	call to_SB_hex_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
iuid_CL_ArrowU64Nil:
	mov $uuid_SB_counter_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $uuid_SB_counter_CL_U64, %r14
	movq %r15, 0(%r14)
	mov $uuid_SB_counter_CL_U64, %r15
	pushq 0(%r15)
	mov -16(%rbp), %RAX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
var_SB_name_SB_if_SB_var_CL_ArrowStringAST:
	pushq $uuid_00000000000c4960
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c775c
	jmp uuid_00000000000c775e
uuid_00000000000c775c:
	push %RBP
	jmp uuid_00000000000c7759
	jmp uuid_00000000000c775b
uuid_00000000000c7759:
	push %RBP
	mov -176(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7756
	jmp uuid_00000000000c7758
uuid_00000000000c7756:
	movb $1, -248(%rbp)
uuid_00000000000c7758:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c775b:
	mov -264(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c775e:
	mov -256(%RBP),%RSP
	add $-280, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c776f
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7765
	jmp uuid_00000000000c7767
uuid_00000000000c7765:
	push %RBP
	jmp uuid_00000000000c7762
	jmp uuid_00000000000c7764
uuid_00000000000c7762:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c775f
	jmp uuid_00000000000c7761
uuid_00000000000c775f:
	movb $1, -368(%rbp)
uuid_00000000000c7761:
	mov -392(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c7764:
	mov -384(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c7767:
	mov -376(%RBP),%RSP
	add $-400, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c776c
	push %RBP
	jmp uuid_00000000000c7769
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7768
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c776b
uuid_00000000000c7769:
uuid_00000000000c776b:
	mov -408(%RBP),%RSP
	add $-408, %RSP
	jmp uuid_00000000000c776e
uuid_00000000000c776c:
	movq -400(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -400(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000c776e:
	mov -288(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c7771
uuid_00000000000c776f:
	movq -280(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -280(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000c7771:
	mov -168(%RBP),%RSP
	add $-280, %RSP
	mov -88(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
remove_SB_parens_CL_ArrowListTokenListToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7788
	jmp uuid_00000000000c778a
uuid_00000000000c7788:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7785
	jmp uuid_00000000000c7787
uuid_00000000000c7785:
	push %RBP
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c777f
	jmp uuid_00000000000c7781
uuid_00000000000c777f:
	push %RBP
	jmp uuid_00000000000c777c
	jmp uuid_00000000000c777e
uuid_00000000000c777c:
	push %RBP
	jmp uuid_00000000000c7779
	jmp uuid_00000000000c777b
uuid_00000000000c7779:
	push %RBP
	mov -344(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq $uuid_00000000000c4891
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7776
	jmp uuid_00000000000c7778
uuid_00000000000c7776:
	movb $1, -400(%rbp)
uuid_00000000000c7778:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c777b:
	mov -424(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c777e:
	mov -416(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c7781:
	mov -408(%RBP),%RSP
	add $-440, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7782
	jmp uuid_00000000000c7784
uuid_00000000000c7782:
	movb $1, -240(%rbp)
uuid_00000000000c7784:
	mov -336(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c7787:
	mov -256(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c778a:
	mov -248(%RBP),%RSP
	add $-440, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c77b8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c77b7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c77ba
uuid_00000000000c77b8:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c77b4:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c77b5
	jmp uuid_00000000000c77b6
uuid_00000000000c77b5:
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c77a1
	jmp uuid_00000000000c77a3
uuid_00000000000c77a1:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c779e
	jmp uuid_00000000000c77a0
uuid_00000000000c779e:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7798
	jmp uuid_00000000000c779a
uuid_00000000000c7798:
	push %RBP
	jmp uuid_00000000000c7795
	jmp uuid_00000000000c7797
uuid_00000000000c7795:
	push %RBP
	jmp uuid_00000000000c7792
	jmp uuid_00000000000c7794
uuid_00000000000c7792:
	push %RBP
	mov -776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq $uuid_00000000000c4893
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c778f
	jmp uuid_00000000000c7791
uuid_00000000000c778f:
	movb $1, -832(%rbp)
uuid_00000000000c7791:
	mov -864(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c7794:
	mov -856(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c7797:
	mov -848(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c779a:
	mov -840(%RBP),%RSP
	add $-872, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c779b
	jmp uuid_00000000000c779d
uuid_00000000000c779b:
	movb $1, -672(%rbp)
uuid_00000000000c779d:
	mov -768(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c77a0:
	mov -688(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c77a3:
	mov -680(%RBP),%RSP
	add $-872, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c77b1
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c77aa
	jmp uuid_00000000000c77ac
uuid_00000000000c77aa:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c77a7
	jmp uuid_00000000000c77a9
uuid_00000000000c77a7:
	push %RBP
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000c77a4
	jmp uuid_00000000000c77a6
uuid_00000000000c77a4:
	movb $1, -960(%rbp)
uuid_00000000000c77a6:
	mov -1056(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c77a9:
	mov -976(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c77ac:
	mov -968(%RBP),%RSP
	add $-1112, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c77ae
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c77ad
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c77b0
uuid_00000000000c77ae:
#call function cons : Arrow<Cons<Token,List<Token>>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTokenConsListTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	movq -1048(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -264(%rbp)
uuid_00000000000c77b0:
	mov -880(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000c77b3
uuid_00000000000c77b1:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
uuid_00000000000c77b3:
	mov -592(%RBP),%RSP
	add $-872, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c77b4
uuid_00000000000c77b6:
#call function reverse : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c77ba:
	mov -160(%RBP),%RSP
	add $-512, %RSP
	subq $72, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_expect_CL_ArrowNilConsListTokenString:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<List<Token>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
parse_SB_lambda_CL_ArrowParsePartialListToken:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c77ea
	jmp uuid_00000000000c77ec
uuid_00000000000c77ea:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c77d5
	jmp uuid_00000000000c77d7
uuid_00000000000c77d5:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c77d2
	jmp uuid_00000000000c77d4
uuid_00000000000c77d2:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c77cc
	jmp uuid_00000000000c77ce
uuid_00000000000c77cc:
	push %RBP
	jmp uuid_00000000000c77c9
	jmp uuid_00000000000c77cb
uuid_00000000000c77c9:
	push %RBP
	jmp uuid_00000000000c77c6
	jmp uuid_00000000000c77c8
uuid_00000000000c77c6:
	push %RBP
	mov -464(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c77c3
	jmp uuid_00000000000c77c5
uuid_00000000000c77c3:
	movb $1, -520(%rbp)
uuid_00000000000c77c5:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c77c8:
	mov -544(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c77cb:
	mov -536(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c77ce:
	mov -528(%RBP),%RSP
	add $-560, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c77cf
	jmp uuid_00000000000c77d1
uuid_00000000000c77cf:
	movb $1, -360(%rbp)
uuid_00000000000c77d1:
	mov -456(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c77d4:
	mov -376(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c77d7:
	mov -368(%RBP),%RSP
	add $-560, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c77e7
	jmp uuid_00000000000c77e9
uuid_00000000000c77e7:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c77e1
	jmp uuid_00000000000c77e3
uuid_00000000000c77e1:
	push %RBP
	jmp uuid_00000000000c77de
	jmp uuid_00000000000c77e0
uuid_00000000000c77de:
	push %RBP
	jmp uuid_00000000000c77db
	jmp uuid_00000000000c77dd
uuid_00000000000c77db:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c77d8
	jmp uuid_00000000000c77da
uuid_00000000000c77d8:
	movb $1, -632(%rbp)
uuid_00000000000c77da:
	mov -664(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c77dd:
	mov -656(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c77e0:
	mov -648(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c77e3:
	mov -640(%RBP),%RSP
	add $-672, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c77e4
	jmp uuid_00000000000c77e6
uuid_00000000000c77e4:
	movb $1, -264(%rbp)
uuid_00000000000c77e6:
	mov -568(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c77e9:
	mov -280(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c77ec:
	mov -272(%RBP),%RSP
	add $-672, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c77f1
	push %RBP
	jmp uuid_00000000000c77ee
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c77ed
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c77f0
uuid_00000000000c77ee:
uuid_00000000000c77f0:
	mov -680(%RBP),%RSP
	add $-680, %RSP
	jmp uuid_00000000000c77f3
uuid_00000000000c77f1:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -448(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c77f3:
	mov -184(%RBP),%RSP
	add $-672, %RSP
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7807
	jmp uuid_00000000000c7809
uuid_00000000000c7807:
	push %RBP
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	jmp uuid_00000000000c7804
	jmp uuid_00000000000c7806
uuid_00000000000c7804:
	push %RBP
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq $0
	push %RBP
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c77fe
	jmp uuid_00000000000c7800
uuid_00000000000c77fe:
	push %RBP
	jmp uuid_00000000000c77fb
	jmp uuid_00000000000c77fd
uuid_00000000000c77fb:
	push %RBP
	mov -1240(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1344(%rbp)
	pushq $uuid_00000000000c4be5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c77f8
	jmp uuid_00000000000c77fa
uuid_00000000000c77f8:
	movb $1, -1312(%rbp)
uuid_00000000000c77fa:
	mov -1336(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c77fd:
	mov -1328(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c7800:
	mov -1320(%RBP),%RSP
	add $-1344, %RSP
	mov -1312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7801
	jmp uuid_00000000000c7803
uuid_00000000000c7801:
	movb $1, -1136(%rbp)
uuid_00000000000c7803:
	mov -1232(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c7806:
	mov -1152(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c7809:
	mov -1144(%RBP),%RSP
	add $-1344, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7824
	push %RBP
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq $0
	push %RBP
	mov -1504(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c781d
	jmp uuid_00000000000c781f
uuid_00000000000c781d:
	push %RBP
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	jmp uuid_00000000000c781a
	jmp uuid_00000000000c781c
uuid_00000000000c781a:
	push %RBP
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	jmp uuid_00000000000c7817
	jmp uuid_00000000000c7819
uuid_00000000000c7817:
	movb $1, -1512(%rbp)
uuid_00000000000c7819:
	mov -1608(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c781c:
	mov -1528(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c781f:
	mov -1520(%RBP),%RSP
	add $-1680, %RSP
	mov -1512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7821
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7820
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7823
uuid_00000000000c7821:
	movq -1680(%rbp), %r15
	movq %r15, -744(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -736(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -728(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -720(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -712(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -704(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1624(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -680(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c7823:
	mov -1352(%RBP),%RSP
	add $-1680, %RSP
	jmp uuid_00000000000c7826
uuid_00000000000c7824:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7810
	jmp uuid_00000000000c7812
uuid_00000000000c7810:
	push %RBP
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	jmp uuid_00000000000c780d
	jmp uuid_00000000000c780f
uuid_00000000000c780d:
	push %RBP
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	jmp uuid_00000000000c780a
	jmp uuid_00000000000c780c
uuid_00000000000c780a:
	movb $1, -1664(%rbp)
uuid_00000000000c780c:
	mov -1760(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c780f:
	mov -1680(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c7812:
	mov -1672(%RBP),%RSP
	add $-1832, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7814
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7813
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7816
uuid_00000000000c7814:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST+CaseNumber<9>,Array<AST+CaseNumber<9>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $9
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTCaseNumber9ASTCaseNumber9
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $5
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	movq -1752(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -1744(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -1736(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -1728(%rbp), %r15
	movq %r15, -792(%rbp)
	movq -1720(%rbp), %r15
	movq %r15, -784(%rbp)
	movq -1712(%rbp), %r15
	movq %r15, -776(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -768(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -760(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -752(%rbp)
uuid_00000000000c7816:
	mov -1504(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c7826:
	mov -976(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c7863:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7864
	jmp uuid_00000000000c7865
uuid_00000000000c7864:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	push %RBP
	mov -2144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7836
	jmp uuid_00000000000c7838
uuid_00000000000c7836:
	push %RBP
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	jmp uuid_00000000000c7833
	jmp uuid_00000000000c7835
uuid_00000000000c7833:
	push %RBP
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq $0
	push %RBP
	mov -2320(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c782d
	jmp uuid_00000000000c782f
uuid_00000000000c782d:
	push %RBP
	jmp uuid_00000000000c782a
	jmp uuid_00000000000c782c
uuid_00000000000c782a:
	push %RBP
	mov -2256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2360(%rbp)
	pushq $uuid_00000000000c4be5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7827
	jmp uuid_00000000000c7829
uuid_00000000000c7827:
	movb $1, -2328(%rbp)
uuid_00000000000c7829:
	mov -2352(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c782c:
	mov -2344(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c782f:
	mov -2336(%RBP),%RSP
	add $-2360, %RSP
	mov -2328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7830
	jmp uuid_00000000000c7832
uuid_00000000000c7830:
	movb $1, -2152(%rbp)
uuid_00000000000c7832:
	mov -2248(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c7835:
	mov -2168(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c7838:
	mov -2160(%RBP),%RSP
	add $-2360, %RSP
	mov -2152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7860
	push %RBP
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	push %RBP
	mov -2520(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c784c
	jmp uuid_00000000000c784e
uuid_00000000000c784c:
	push %RBP
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	mov -2616(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7849
	jmp uuid_00000000000c784b
uuid_00000000000c7849:
	push %RBP
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	jmp uuid_00000000000c7846
	jmp uuid_00000000000c7848
uuid_00000000000c7846:
	movb $1, -2528(%rbp)
uuid_00000000000c7848:
	mov -2624(%RBP),%RSP
	add $-2696, %RSP
uuid_00000000000c784b:
	mov -2544(%RBP),%RSP
	add $-2696, %RSP
uuid_00000000000c784e:
	mov -2536(%RBP),%RSP
	add $-2696, %RSP
	mov -2528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c785d
	push %RBP
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7856
	jmp uuid_00000000000c7858
uuid_00000000000c7856:
	push %RBP
	pushq -2784(%RBP)
	pushq -2792(%RBP)
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	pushq -2848(%RBP)
	jmp uuid_00000000000c7853
	jmp uuid_00000000000c7855
uuid_00000000000c7853:
	push %RBP
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	pushq -2736(%RBP)
	pushq -2744(%RBP)
	pushq -2752(%RBP)
	pushq -2760(%RBP)
	pushq -2768(%RBP)
	pushq -2776(%RBP)
	jmp uuid_00000000000c7850
	jmp uuid_00000000000c7852
uuid_00000000000c7850:
	movb $1, -2864(%rbp)
uuid_00000000000c7852:
	mov -2960(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000c7855:
	mov -2880(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000c7858:
	mov -2872(%RBP),%RSP
	add $-3032, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c785a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7859
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c785c
uuid_00000000000c785a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	pushq -2984(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq -3008(%rbp)
	pushq -3016(%rbp)
	pushq -3024(%rbp)
	pushq -3032(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	movq -2952(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2944(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2936(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2928(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2920(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2912(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2904(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2896(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2888(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c785c:
	mov -2704(%RBP),%RSP
	add $-3032, %RSP
	jmp uuid_00000000000c785f
uuid_00000000000c785d:
#call function parse-expect : Arrow<Cons<String,List<Token>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c784f
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_expect_CL_ArrowNilConsListTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c785f:
	mov -2368(%RBP),%RSP
	add $-2696, %RSP
	jmp uuid_00000000000c7862
uuid_00000000000c7860:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq $0
	push %RBP
	mov -2672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c783f
	jmp uuid_00000000000c7841
uuid_00000000000c783f:
	push %RBP
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	jmp uuid_00000000000c783c
	jmp uuid_00000000000c783e
uuid_00000000000c783c:
	push %RBP
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	jmp uuid_00000000000c7839
	jmp uuid_00000000000c783b
uuid_00000000000c7839:
	movb $1, -2680(%rbp)
uuid_00000000000c783b:
	mov -2776(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c783e:
	mov -2696(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c7841:
	mov -2688(%RBP),%RSP
	add $-2848, %RSP
	mov -2680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7843
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7842
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7845
uuid_00000000000c7843:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $5
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	movq -2768(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -2760(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -2752(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -2744(%rbp), %r15
	movq %r15, -792(%rbp)
	movq -2736(%rbp), %r15
	movq %r15, -784(%rbp)
	movq -2728(%rbp), %r15
	movq %r15, -776(%rbp)
	movq -2720(%rbp), %r15
	movq %r15, -768(%rbp)
	movq -2712(%rbp), %r15
	movq %r15, -760(%rbp)
	movq -2704(%rbp), %r15
	movq %r15, -752(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c7845:
	mov -2520(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c7862:
	mov -1992(%RBP),%RSP
	add $-2848, %RSP
	add $152, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $152, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c7863
uuid_00000000000c7865:
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq $0
	subq $152, %rsp
	pushq -1984(%rbp)
	pushq -1976(%rbp)
	pushq -1968(%rbp)
	pushq -1960(%rbp)
	pushq -1952(%rbp)
	pushq -1944(%rbp)
	pushq -1936(%rbp)
	pushq -1928(%rbp)
	pushq -1920(%rbp)
	pushq -1912(%rbp)
	pushq -1904(%rbp)
	pushq -1896(%rbp)
	pushq -1888(%rbp)
	pushq -1880(%rbp)
	pushq -1872(%rbp)
	pushq -1864(%rbp)
	pushq -1856(%rbp)
	pushq -1848(%rbp)
	pushq -1840(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c78b5:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c78b6
	jmp uuid_00000000000c78b7
uuid_00000000000c78b6:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7880
	jmp uuid_00000000000c7882
uuid_00000000000c7880:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c787d
	jmp uuid_00000000000c787f
uuid_00000000000c787d:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7877
	jmp uuid_00000000000c7879
uuid_00000000000c7877:
	push %RBP
	jmp uuid_00000000000c7874
	jmp uuid_00000000000c7876
uuid_00000000000c7874:
	push %RBP
	jmp uuid_00000000000c7871
	jmp uuid_00000000000c7873
uuid_00000000000c7871:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -584(%rbp)
	pushq $uuid_00000000000c4b54
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c786e
	jmp uuid_00000000000c7870
uuid_00000000000c786e:
	movb $1, -544(%rbp)
uuid_00000000000c7870:
	mov -576(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c7873:
	mov -568(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c7876:
	mov -560(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c7879:
	mov -552(%RBP),%RSP
	add $-584, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c787a
	jmp uuid_00000000000c787c
uuid_00000000000c787a:
	movb $1, -384(%rbp)
uuid_00000000000c787c:
	mov -480(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c787f:
	mov -400(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c7882:
	mov -392(%RBP),%RSP
	add $-584, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c78b2
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7895
	jmp uuid_00000000000c7897
uuid_00000000000c7895:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7892
	jmp uuid_00000000000c7894
uuid_00000000000c7892:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c788c
	jmp uuid_00000000000c788e
uuid_00000000000c788c:
	push %RBP
	jmp uuid_00000000000c7889
	jmp uuid_00000000000c788b
uuid_00000000000c7889:
	push %RBP
	jmp uuid_00000000000c7886
	jmp uuid_00000000000c7888
uuid_00000000000c7886:
	push %RBP
	mov -776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq $uuid_00000000000c4893
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7883
	jmp uuid_00000000000c7885
uuid_00000000000c7883:
	movb $1, -832(%rbp)
uuid_00000000000c7885:
	mov -864(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c7888:
	mov -856(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c788b:
	mov -848(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c788e:
	mov -840(%RBP),%RSP
	add $-872, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c788f
	jmp uuid_00000000000c7891
uuid_00000000000c788f:
	movb $1, -672(%rbp)
uuid_00000000000c7891:
	mov -768(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c7894:
	mov -688(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c7897:
	mov -680(%RBP),%RSP
	add $-872, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c78af
	push %RBP
	jmp uuid_00000000000c78ac
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c78ab
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c78ae
uuid_00000000000c78ac:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c78a1
	jmp uuid_00000000000c78a3
uuid_00000000000c78a1:
	push %RBP
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	jmp uuid_00000000000c789e
	jmp uuid_00000000000c78a0
uuid_00000000000c789e:
	push %RBP
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	jmp uuid_00000000000c789b
	jmp uuid_00000000000c789d
uuid_00000000000c789b:
	movb $1, -1200(%rbp)
uuid_00000000000c789d:
	mov -1296(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000c78a0:
	mov -1216(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000c78a3:
	mov -1208(%RBP),%RSP
	add $-1368, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c78a8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c78a7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c78aa
uuid_00000000000c78a8:
	push %RBP
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c78a4
	movq -1368(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -88(%rbp)
	jmp uuid_00000000000c78a6
uuid_00000000000c78a4:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c78a6:
	mov -1376(%RBP),%RSP
	add $-1376, %RSP
	movq -1288(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c78aa:
	mov -1040(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c78ae:
	mov -880(%RBP),%RSP
	add $-1376, %RSP
	jmp uuid_00000000000c78b1
uuid_00000000000c78af:
	push %RBP
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7898
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $9
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000c789a
uuid_00000000000c7898:
uuid_00000000000c789a:
	mov -880(%RBP),%RSP
	add $-880, %RSP
	movq -760(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -160(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c78b1:
	mov -592(%RBP),%RSP
	add $-880, %RSP
	jmp uuid_00000000000c78b4
uuid_00000000000c78b2:
	movq -72(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -64(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -56(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -48(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -40(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -32(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -24(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -160(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c78b4:
	mov -304(%RBP),%RSP
	add $-584, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c78b5
uuid_00000000000c78b7:
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	subq $152, %rsp
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_one_SB_expression_CL_ArrowParsePartialListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7954
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c78d2
	jmp uuid_00000000000c78d4
uuid_00000000000c78d2:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c78cf
	jmp uuid_00000000000c78d1
uuid_00000000000c78cf:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c78c9
	jmp uuid_00000000000c78cb
uuid_00000000000c78c9:
	push %RBP
	jmp uuid_00000000000c78c6
	jmp uuid_00000000000c78c8
uuid_00000000000c78c6:
	push %RBP
	jmp uuid_00000000000c78c3
	jmp uuid_00000000000c78c5
uuid_00000000000c78c3:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%rbp)
	pushq $uuid_00000000000c4b57
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c78c0
	jmp uuid_00000000000c78c2
uuid_00000000000c78c0:
	movb $1, -624(%rbp)
uuid_00000000000c78c2:
	mov -656(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c78c5:
	mov -648(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c78c8:
	mov -640(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c78cb:
	mov -632(%RBP),%RSP
	add $-664, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c78cc
	jmp uuid_00000000000c78ce
uuid_00000000000c78cc:
	movb $1, -464(%rbp)
uuid_00000000000c78ce:
	mov -560(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c78d1:
	mov -480(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c78d4:
	mov -472(%RBP),%RSP
	add $-664, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7951
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c78f4
	jmp uuid_00000000000c78f6
uuid_00000000000c78f4:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c78f1
	jmp uuid_00000000000c78f3
uuid_00000000000c78f1:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq $0
	push %RBP
	mov -904(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c78eb
	jmp uuid_00000000000c78ed
uuid_00000000000c78eb:
	push %RBP
	jmp uuid_00000000000c78e8
	jmp uuid_00000000000c78ea
uuid_00000000000c78e8:
	push %RBP
	jmp uuid_00000000000c78e5
	jmp uuid_00000000000c78e7
uuid_00000000000c78e5:
	push %RBP
	mov -856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq $uuid_00000000000c4893
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c78e2
	jmp uuid_00000000000c78e4
uuid_00000000000c78e2:
	movb $1, -912(%rbp)
uuid_00000000000c78e4:
	mov -944(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c78e7:
	mov -936(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c78ea:
	mov -928(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c78ed:
	mov -920(%RBP),%RSP
	add $-952, %RSP
	mov -912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c78ee
	jmp uuid_00000000000c78f0
uuid_00000000000c78ee:
	movb $1, -752(%rbp)
uuid_00000000000c78f0:
	mov -848(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c78f3:
	mov -768(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c78f6:
	mov -760(%RBP),%RSP
	add $-952, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c794e
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -1032(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c790a
	jmp uuid_00000000000c790c
uuid_00000000000c790a:
	push %RBP
	mov -1024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7907
	jmp uuid_00000000000c7909
uuid_00000000000c7907:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7901
	jmp uuid_00000000000c7903
uuid_00000000000c7901:
	push %RBP
	jmp uuid_00000000000c78fe
	jmp uuid_00000000000c7900
uuid_00000000000c78fe:
	push %RBP
	jmp uuid_00000000000c78fb
	jmp uuid_00000000000c78fd
uuid_00000000000c78fb:
	push %RBP
	mov -1144(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq $uuid_00000000000c4891
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c78f8
	jmp uuid_00000000000c78fa
uuid_00000000000c78f8:
	movb $1, -1200(%rbp)
uuid_00000000000c78fa:
	mov -1232(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c78fd:
	mov -1224(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c7900:
	mov -1216(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c7903:
	mov -1208(%RBP),%RSP
	add $-1240, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7904
	jmp uuid_00000000000c7906
uuid_00000000000c7904:
	movb $1, -1040(%rbp)
uuid_00000000000c7906:
	mov -1136(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c7909:
	mov -1056(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c790c:
	mov -1048(%RBP),%RSP
	add $-1240, %RSP
	mov -1040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c794b
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7935
	jmp uuid_00000000000c7937
uuid_00000000000c7935:
	push %RBP
	mov -1312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7920
	jmp uuid_00000000000c7922
uuid_00000000000c7920:
	push %RBP
	mov -1408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c791d
	jmp uuid_00000000000c791f
uuid_00000000000c791d:
	push %RBP
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	jmp uuid_00000000000c791a
	jmp uuid_00000000000c791c
uuid_00000000000c791a:
	movb $1, -1424(%rbp)
uuid_00000000000c791c:
	mov -1520(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c791f:
	mov -1440(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c7922:
	mov -1432(%RBP),%RSP
	add $-1576, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7932
	jmp uuid_00000000000c7934
uuid_00000000000c7932:
	push %RBP
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c792c
	jmp uuid_00000000000c792e
uuid_00000000000c792c:
	push %RBP
	jmp uuid_00000000000c7929
	jmp uuid_00000000000c792b
uuid_00000000000c7929:
	push %RBP
	jmp uuid_00000000000c7926
	jmp uuid_00000000000c7928
uuid_00000000000c7926:
	push %RBP
	mov -1592(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1688(%rbp)
	pushq $uuid_00000000000c4b56
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7923
	jmp uuid_00000000000c7925
uuid_00000000000c7923:
	movb $1, -1648(%rbp)
uuid_00000000000c7925:
	mov -1680(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c7928:
	mov -1672(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c792b:
	mov -1664(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c792e:
	mov -1656(%RBP),%RSP
	add $-1688, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c792f
	jmp uuid_00000000000c7931
uuid_00000000000c792f:
	movb $1, -1328(%rbp)
uuid_00000000000c7931:
	mov -1584(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c7934:
	mov -1344(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c7937:
	mov -1336(%RBP),%RSP
	add $-1688, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7948
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c793e
	jmp uuid_00000000000c7940
uuid_00000000000c793e:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c793b
	jmp uuid_00000000000c793d
uuid_00000000000c793b:
	push %RBP
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	jmp uuid_00000000000c7938
	jmp uuid_00000000000c793a
uuid_00000000000c7938:
	movb $1, -1776(%rbp)
uuid_00000000000c793a:
	mov -1872(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c793d:
	mov -1792(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c7940:
	mov -1784(%RBP),%RSP
	add $-1928, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7945
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7944
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7947
uuid_00000000000c7945:
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -1880(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7941
	mov -1880(%RBP), %RAX
	push %RAX
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000c7943
uuid_00000000000c7941:
	mov -1880(%RBP), %RAX
	push %RAX
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq $7
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c7943:
	mov -1936(%RBP),%RSP
	add $-1936, %RSP
	movq -1864(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1856(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1848(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1840(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1832(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1824(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1816(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1808(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1800(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000c7947:
	mov -1696(%RBP),%RSP
	add $-1936, %RSP
	jmp uuid_00000000000c794a
uuid_00000000000c7948:
	mov -1528(%RBP), %RAX
	push %RAX
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -1512(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000c794a:
	mov -1248(%RBP),%RSP
	add $-1688, %RSP
	jmp uuid_00000000000c794d
uuid_00000000000c794b:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq $0
	push %RBP
	mov -1552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7913
	jmp uuid_00000000000c7915
uuid_00000000000c7913:
	push %RBP
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	jmp uuid_00000000000c7910
	jmp uuid_00000000000c7912
uuid_00000000000c7910:
	push %RBP
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	jmp uuid_00000000000c790d
	jmp uuid_00000000000c790f
uuid_00000000000c790d:
	movb $1, -1560(%rbp)
uuid_00000000000c790f:
	mov -1656(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c7912:
	mov -1576(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c7915:
	mov -1568(%RBP),%RSP
	add $-1728, %RSP
	mov -1560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7917
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7916
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7919
uuid_00000000000c7917:
	movq -1728(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1720(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1712(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1624(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1608(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000c7919:
	mov -1400(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c794d:
	mov -960(%RBP),%RSP
	add $-1728, %RSP
	jmp uuid_00000000000c7950
uuid_00000000000c794e:
#call function parse-unexpect : Arrow<Cons<String,List<Token>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c78f7
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_unexpect_CL_ArrowNilConsListTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7950:
	mov -672(%RBP),%RSP
	add $-952, %RSP
	jmp uuid_00000000000c7953
uuid_00000000000c7951:
#call function parse-lambda : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call parse_SB_lambda_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c78db
	jmp uuid_00000000000c78dd
uuid_00000000000c78db:
	push %RBP
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000c78d8
	jmp uuid_00000000000c78da
uuid_00000000000c78d8:
	push %RBP
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	jmp uuid_00000000000c78d5
	jmp uuid_00000000000c78d7
uuid_00000000000c78d5:
	movb $1, -984(%rbp)
uuid_00000000000c78d7:
	mov -1080(%RBP),%RSP
	add $-1152, %RSP
uuid_00000000000c78da:
	mov -1000(%RBP),%RSP
	add $-1152, %RSP
uuid_00000000000c78dd:
	mov -992(%RBP),%RSP
	add $-1152, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c78df
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c78de
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c78e1
uuid_00000000000c78df:
	movq -1152(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000c78e1:
	mov -824(%RBP),%RSP
	add $-1152, %RSP
uuid_00000000000c7953:
	mov -384(%RBP),%RSP
	add $-1152, %RSP
	jmp uuid_00000000000c7956
uuid_00000000000c7954:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $9
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
uuid_00000000000c7956:
	mov -304(%RBP),%RSP
	add $-376, %RSP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	subq $152, %rsp
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_toplevel_CL_ArrowASTListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
uuid_00000000000c7bac:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7bad
	jmp uuid_00000000000c7bae
uuid_00000000000c7bad:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c796d
	jmp uuid_00000000000c796f
uuid_00000000000c796d:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c796a
	jmp uuid_00000000000c796c
uuid_00000000000c796a:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7964
	jmp uuid_00000000000c7966
uuid_00000000000c7964:
	push %RBP
	jmp uuid_00000000000c7961
	jmp uuid_00000000000c7963
uuid_00000000000c7961:
	push %RBP
	jmp uuid_00000000000c795e
	jmp uuid_00000000000c7960
uuid_00000000000c795e:
	push %RBP
	mov -416(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq $uuid_00000000000c4b54
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c795b
	jmp uuid_00000000000c795d
uuid_00000000000c795b:
	movb $1, -472(%rbp)
uuid_00000000000c795d:
	mov -504(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c7960:
	mov -496(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c7963:
	mov -488(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c7966:
	mov -480(%RBP),%RSP
	add $-512, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7967
	jmp uuid_00000000000c7969
uuid_00000000000c7967:
	movb $1, -312(%rbp)
uuid_00000000000c7969:
	mov -408(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c796c:
	mov -328(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c796f:
	mov -320(%RBP),%RSP
	add $-512, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ba9
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7983
	jmp uuid_00000000000c7985
uuid_00000000000c7983:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7980
	jmp uuid_00000000000c7982
uuid_00000000000c7980:
	push %RBP
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c797a
	jmp uuid_00000000000c797c
uuid_00000000000c797a:
	push %RBP
	jmp uuid_00000000000c7977
	jmp uuid_00000000000c7979
uuid_00000000000c7977:
	push %RBP
	jmp uuid_00000000000c7974
	jmp uuid_00000000000c7976
uuid_00000000000c7974:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq $uuid_00000000000c7970
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7971
	jmp uuid_00000000000c7973
uuid_00000000000c7971:
	movb $1, -760(%rbp)
uuid_00000000000c7973:
	mov -792(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c7976:
	mov -784(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c7979:
	mov -776(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c797c:
	mov -768(%RBP),%RSP
	add $-800, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c797d
	jmp uuid_00000000000c797f
uuid_00000000000c797d:
	movb $1, -600(%rbp)
uuid_00000000000c797f:
	mov -696(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c7982:
	mov -616(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c7985:
	mov -608(%RBP),%RSP
	add $-800, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ba6
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c79c3
	jmp uuid_00000000000c79c5
uuid_00000000000c79c3:
	push %RBP
	mov -872(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c79c0
	jmp uuid_00000000000c79c2
uuid_00000000000c79c0:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq $0
	push %RBP
	mov -1040(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c79ba
	jmp uuid_00000000000c79bc
uuid_00000000000c79ba:
	push %RBP
	jmp uuid_00000000000c79b7
	jmp uuid_00000000000c79b9
uuid_00000000000c79b7:
	push %RBP
	jmp uuid_00000000000c79b4
	jmp uuid_00000000000c79b6
uuid_00000000000c79b4:
	push %RBP
	mov -992(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1088(%rbp)
	pushq $uuid_00000000000c79b0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c79b1
	jmp uuid_00000000000c79b3
uuid_00000000000c79b1:
	movb $1, -1048(%rbp)
uuid_00000000000c79b3:
	mov -1080(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c79b6:
	mov -1072(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c79b9:
	mov -1064(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c79bc:
	mov -1056(%RBP),%RSP
	add $-1088, %RSP
	mov -1048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c79bd
	jmp uuid_00000000000c79bf
uuid_00000000000c79bd:
	movb $1, -888(%rbp)
uuid_00000000000c79bf:
	mov -984(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c79c2:
	mov -904(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c79c5:
	mov -896(%RBP),%RSP
	add $-1088, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ba3
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c79fc
	jmp uuid_00000000000c79fe
uuid_00000000000c79fc:
	push %RBP
	mov -1160(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c79e6
	jmp uuid_00000000000c79e8
uuid_00000000000c79e6:
	push %RBP
	mov -1256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c79e3
	jmp uuid_00000000000c79e5
uuid_00000000000c79e3:
	push %RBP
	pushq -1200(%RBP)
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq $0
	push %RBP
	mov -1424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c79dd
	jmp uuid_00000000000c79df
uuid_00000000000c79dd:
	push %RBP
	jmp uuid_00000000000c79da
	jmp uuid_00000000000c79dc
uuid_00000000000c79da:
	push %RBP
	jmp uuid_00000000000c79d7
	jmp uuid_00000000000c79d9
uuid_00000000000c79d7:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq $uuid_00000000000c79d3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c79d4
	jmp uuid_00000000000c79d6
uuid_00000000000c79d4:
	movb $1, -1432(%rbp)
uuid_00000000000c79d6:
	mov -1464(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000c79d9:
	mov -1456(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000c79dc:
	mov -1448(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000c79df:
	mov -1440(%RBP),%RSP
	add $-1472, %RSP
	mov -1432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c79e0
	jmp uuid_00000000000c79e2
uuid_00000000000c79e0:
	movb $1, -1272(%rbp)
uuid_00000000000c79e2:
	mov -1368(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000c79e5:
	mov -1288(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000c79e8:
	mov -1280(%RBP),%RSP
	add $-1472, %RSP
	mov -1272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c79f9
	jmp uuid_00000000000c79fb
uuid_00000000000c79f9:
	push %RBP
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c79f3
	jmp uuid_00000000000c79f5
uuid_00000000000c79f3:
	push %RBP
	jmp uuid_00000000000c79f0
	jmp uuid_00000000000c79f2
uuid_00000000000c79f0:
	push %RBP
	jmp uuid_00000000000c79ed
	jmp uuid_00000000000c79ef
uuid_00000000000c79ed:
	push %RBP
	mov -1488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1584(%rbp)
	pushq $uuid_00000000000c79e9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c79ea
	jmp uuid_00000000000c79ec
uuid_00000000000c79ea:
	movb $1, -1544(%rbp)
uuid_00000000000c79ec:
	mov -1576(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c79ef:
	mov -1568(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c79f2:
	mov -1560(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c79f5:
	mov -1552(%RBP),%RSP
	add $-1584, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c79f6
	jmp uuid_00000000000c79f8
uuid_00000000000c79f6:
	movb $1, -1176(%rbp)
uuid_00000000000c79f8:
	mov -1480(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c79fb:
	mov -1192(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c79fe:
	mov -1184(%RBP),%RSP
	add $-1584, %RSP
	mov -1176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ba0
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a2b
	jmp uuid_00000000000c7a2d
uuid_00000000000c7a2b:
	push %RBP
	mov -1656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7a28
	jmp uuid_00000000000c7a2a
uuid_00000000000c7a28:
	push %RBP
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq $0
	push %RBP
	mov -1824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a22
	jmp uuid_00000000000c7a24
uuid_00000000000c7a22:
	push %RBP
	jmp uuid_00000000000c7a1f
	jmp uuid_00000000000c7a21
uuid_00000000000c7a1f:
	push %RBP
	jmp uuid_00000000000c7a1c
	jmp uuid_00000000000c7a1e
uuid_00000000000c7a1c:
	push %RBP
	mov -1776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1872(%rbp)
	pushq $uuid_00000000000c79d3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7a19
	jmp uuid_00000000000c7a1b
uuid_00000000000c7a19:
	movb $1, -1832(%rbp)
uuid_00000000000c7a1b:
	mov -1864(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c7a1e:
	mov -1856(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c7a21:
	mov -1848(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c7a24:
	mov -1840(%RBP),%RSP
	add $-1872, %RSP
	mov -1832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a25
	jmp uuid_00000000000c7a27
uuid_00000000000c7a25:
	movb $1, -1672(%rbp)
uuid_00000000000c7a27:
	mov -1768(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c7a2a:
	mov -1688(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c7a2d:
	mov -1680(%RBP),%RSP
	add $-1872, %RSP
	mov -1672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b9d
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a9b
	jmp uuid_00000000000c7a9d
uuid_00000000000c7a9b:
	push %RBP
	mov -1944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a85
	jmp uuid_00000000000c7a87
uuid_00000000000c7a85:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a6f
	jmp uuid_00000000000c7a71
uuid_00000000000c7a6f:
	push %RBP
	mov -2136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a5a
	jmp uuid_00000000000c7a5c
uuid_00000000000c7a5a:
	push %RBP
	mov -2232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7a57
	jmp uuid_00000000000c7a59
uuid_00000000000c7a57:
	push %RBP
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq $0
	push %RBP
	mov -2400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a51
	jmp uuid_00000000000c7a53
uuid_00000000000c7a51:
	push %RBP
	jmp uuid_00000000000c7a4e
	jmp uuid_00000000000c7a50
uuid_00000000000c7a4e:
	push %RBP
	jmp uuid_00000000000c7a4b
	jmp uuid_00000000000c7a4d
uuid_00000000000c7a4b:
	push %RBP
	mov -2352(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7a48
	jmp uuid_00000000000c7a4a
uuid_00000000000c7a48:
	movb $1, -2408(%rbp)
uuid_00000000000c7a4a:
	mov -2440(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000c7a4d:
	mov -2432(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000c7a50:
	mov -2424(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000c7a53:
	mov -2416(%RBP),%RSP
	add $-2448, %RSP
	mov -2408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a54
	jmp uuid_00000000000c7a56
uuid_00000000000c7a54:
	movb $1, -2248(%rbp)
uuid_00000000000c7a56:
	mov -2344(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000c7a59:
	mov -2264(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000c7a5c:
	mov -2256(%RBP),%RSP
	add $-2448, %RSP
	mov -2248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a6c
	jmp uuid_00000000000c7a6e
uuid_00000000000c7a6c:
	push %RBP
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq $0
	push %RBP
	mov -2512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a66
	jmp uuid_00000000000c7a68
uuid_00000000000c7a66:
	push %RBP
	jmp uuid_00000000000c7a63
	jmp uuid_00000000000c7a65
uuid_00000000000c7a63:
	push %RBP
	jmp uuid_00000000000c7a60
	jmp uuid_00000000000c7a62
uuid_00000000000c7a60:
	push %RBP
	mov -2464(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7a5d
	jmp uuid_00000000000c7a5f
uuid_00000000000c7a5d:
	movb $1, -2520(%rbp)
uuid_00000000000c7a5f:
	mov -2552(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c7a62:
	mov -2544(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c7a65:
	mov -2536(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c7a68:
	mov -2528(%RBP),%RSP
	add $-2560, %RSP
	mov -2520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a69
	jmp uuid_00000000000c7a6b
uuid_00000000000c7a69:
	movb $1, -2152(%rbp)
uuid_00000000000c7a6b:
	mov -2456(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c7a6e:
	mov -2168(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c7a71:
	mov -2160(%RBP),%RSP
	add $-2560, %RSP
	mov -2152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a82
	jmp uuid_00000000000c7a84
uuid_00000000000c7a82:
	push %RBP
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq $0
	push %RBP
	mov -2624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a7c
	jmp uuid_00000000000c7a7e
uuid_00000000000c7a7c:
	push %RBP
	jmp uuid_00000000000c7a79
	jmp uuid_00000000000c7a7b
uuid_00000000000c7a79:
	push %RBP
	jmp uuid_00000000000c7a76
	jmp uuid_00000000000c7a78
uuid_00000000000c7a76:
	push %RBP
	mov -2576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2672(%rbp)
	pushq $uuid_00000000000c7a72
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7a73
	jmp uuid_00000000000c7a75
uuid_00000000000c7a73:
	movb $1, -2632(%rbp)
uuid_00000000000c7a75:
	mov -2664(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000c7a78:
	mov -2656(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000c7a7b:
	mov -2648(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000c7a7e:
	mov -2640(%RBP),%RSP
	add $-2672, %RSP
	mov -2632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a7f
	jmp uuid_00000000000c7a81
uuid_00000000000c7a7f:
	movb $1, -2056(%rbp)
uuid_00000000000c7a81:
	mov -2568(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000c7a84:
	mov -2072(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000c7a87:
	mov -2064(%RBP),%RSP
	add $-2672, %RSP
	mov -2056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a98
	jmp uuid_00000000000c7a9a
uuid_00000000000c7a98:
	push %RBP
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq $0
	push %RBP
	mov -2736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a92
	jmp uuid_00000000000c7a94
uuid_00000000000c7a92:
	push %RBP
	jmp uuid_00000000000c7a8f
	jmp uuid_00000000000c7a91
uuid_00000000000c7a8f:
	push %RBP
	jmp uuid_00000000000c7a8c
	jmp uuid_00000000000c7a8e
uuid_00000000000c7a8c:
	push %RBP
	mov -2688(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq $uuid_00000000000c7a88
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7a89
	jmp uuid_00000000000c7a8b
uuid_00000000000c7a89:
	movb $1, -2744(%rbp)
uuid_00000000000c7a8b:
	mov -2776(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000c7a8e:
	mov -2768(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000c7a91:
	mov -2760(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000c7a94:
	mov -2752(%RBP),%RSP
	add $-2784, %RSP
	mov -2744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a95
	jmp uuid_00000000000c7a97
uuid_00000000000c7a95:
	movb $1, -1960(%rbp)
uuid_00000000000c7a97:
	mov -2680(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000c7a9a:
	mov -1976(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000c7a9d:
	mov -1968(%RBP),%RSP
	add $-2784, %RSP
	mov -1960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b9a
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7aeb
	jmp uuid_00000000000c7aed
uuid_00000000000c7aeb:
	push %RBP
	mov -2856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2960(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ad5
	jmp uuid_00000000000c7ad7
uuid_00000000000c7ad5:
	push %RBP
	mov -2952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3056(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ac0
	jmp uuid_00000000000c7ac2
uuid_00000000000c7ac0:
	push %RBP
	mov -3048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7abd
	jmp uuid_00000000000c7abf
uuid_00000000000c7abd:
	push %RBP
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq $0
	push %RBP
	mov -3216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ab7
	jmp uuid_00000000000c7ab9
uuid_00000000000c7ab7:
	push %RBP
	jmp uuid_00000000000c7ab4
	jmp uuid_00000000000c7ab6
uuid_00000000000c7ab4:
	push %RBP
	jmp uuid_00000000000c7ab1
	jmp uuid_00000000000c7ab3
uuid_00000000000c7ab1:
	push %RBP
	mov -3168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7aae
	jmp uuid_00000000000c7ab0
uuid_00000000000c7aae:
	movb $1, -3224(%rbp)
uuid_00000000000c7ab0:
	mov -3256(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000c7ab3:
	mov -3248(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000c7ab6:
	mov -3240(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000c7ab9:
	mov -3232(%RBP),%RSP
	add $-3264, %RSP
	mov -3224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7aba
	jmp uuid_00000000000c7abc
uuid_00000000000c7aba:
	movb $1, -3064(%rbp)
uuid_00000000000c7abc:
	mov -3160(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000c7abf:
	mov -3080(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000c7ac2:
	mov -3072(%RBP),%RSP
	add $-3264, %RSP
	mov -3064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ad2
	jmp uuid_00000000000c7ad4
uuid_00000000000c7ad2:
	push %RBP
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq $0
	push %RBP
	mov -3328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7acc
	jmp uuid_00000000000c7ace
uuid_00000000000c7acc:
	push %RBP
	jmp uuid_00000000000c7ac9
	jmp uuid_00000000000c7acb
uuid_00000000000c7ac9:
	push %RBP
	jmp uuid_00000000000c7ac6
	jmp uuid_00000000000c7ac8
uuid_00000000000c7ac6:
	push %RBP
	mov -3280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7ac3
	jmp uuid_00000000000c7ac5
uuid_00000000000c7ac3:
	movb $1, -3336(%rbp)
uuid_00000000000c7ac5:
	mov -3368(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000c7ac8:
	mov -3360(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000c7acb:
	mov -3352(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000c7ace:
	mov -3344(%RBP),%RSP
	add $-3376, %RSP
	mov -3336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7acf
	jmp uuid_00000000000c7ad1
uuid_00000000000c7acf:
	movb $1, -2968(%rbp)
uuid_00000000000c7ad1:
	mov -3272(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000c7ad4:
	mov -2984(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000c7ad7:
	mov -2976(%RBP),%RSP
	add $-3376, %RSP
	mov -2968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ae8
	jmp uuid_00000000000c7aea
uuid_00000000000c7ae8:
	push %RBP
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	pushq -2848(%RBP)
	pushq $0
	push %RBP
	mov -3440(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ae2
	jmp uuid_00000000000c7ae4
uuid_00000000000c7ae2:
	push %RBP
	jmp uuid_00000000000c7adf
	jmp uuid_00000000000c7ae1
uuid_00000000000c7adf:
	push %RBP
	jmp uuid_00000000000c7adc
	jmp uuid_00000000000c7ade
uuid_00000000000c7adc:
	push %RBP
	mov -3392(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3488(%rbp)
	pushq $uuid_00000000000c7ad8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7ad9
	jmp uuid_00000000000c7adb
uuid_00000000000c7ad9:
	movb $1, -3448(%rbp)
uuid_00000000000c7adb:
	mov -3480(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000c7ade:
	mov -3472(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000c7ae1:
	mov -3464(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000c7ae4:
	mov -3456(%RBP),%RSP
	add $-3488, %RSP
	mov -3448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ae5
	jmp uuid_00000000000c7ae7
uuid_00000000000c7ae5:
	movb $1, -2872(%rbp)
uuid_00000000000c7ae7:
	mov -3384(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000c7aea:
	mov -2888(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000c7aed:
	mov -2880(%RBP),%RSP
	add $-3488, %RSP
	mov -2872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b97
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -3568(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b16
	jmp uuid_00000000000c7b18
uuid_00000000000c7b16:
	push %RBP
	mov -3560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b00
	jmp uuid_00000000000c7b02
uuid_00000000000c7b00:
	push %RBP
	mov -3656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7afd
	jmp uuid_00000000000c7aff
uuid_00000000000c7afd:
	push %RBP
	pushq -3600(%RBP)
	pushq -3608(%RBP)
	pushq -3616(%RBP)
	pushq -3624(%RBP)
	pushq -3632(%RBP)
	pushq -3640(%RBP)
	pushq -3648(%RBP)
	pushq $0
	push %RBP
	mov -3824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7af7
	jmp uuid_00000000000c7af9
uuid_00000000000c7af7:
	push %RBP
	jmp uuid_00000000000c7af4
	jmp uuid_00000000000c7af6
uuid_00000000000c7af4:
	push %RBP
	jmp uuid_00000000000c7af1
	jmp uuid_00000000000c7af3
uuid_00000000000c7af1:
	push %RBP
	mov -3776(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7aee
	jmp uuid_00000000000c7af0
uuid_00000000000c7aee:
	movb $1, -3832(%rbp)
uuid_00000000000c7af0:
	mov -3864(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c7af3:
	mov -3856(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c7af6:
	mov -3848(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c7af9:
	mov -3840(%RBP),%RSP
	add $-3872, %RSP
	mov -3832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7afa
	jmp uuid_00000000000c7afc
uuid_00000000000c7afa:
	movb $1, -3672(%rbp)
uuid_00000000000c7afc:
	mov -3768(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c7aff:
	mov -3688(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c7b02:
	mov -3680(%RBP),%RSP
	add $-3872, %RSP
	mov -3672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b13
	jmp uuid_00000000000c7b15
uuid_00000000000c7b13:
	push %RBP
	pushq -3504(%RBP)
	pushq -3512(%RBP)
	pushq -3520(%RBP)
	pushq -3528(%RBP)
	pushq -3536(%RBP)
	pushq -3544(%RBP)
	pushq -3552(%RBP)
	pushq $0
	push %RBP
	mov -3936(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b0d
	jmp uuid_00000000000c7b0f
uuid_00000000000c7b0d:
	push %RBP
	jmp uuid_00000000000c7b0a
	jmp uuid_00000000000c7b0c
uuid_00000000000c7b0a:
	push %RBP
	jmp uuid_00000000000c7b07
	jmp uuid_00000000000c7b09
uuid_00000000000c7b07:
	push %RBP
	mov -3888(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3984(%rbp)
	pushq $uuid_00000000000c7b03
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7b04
	jmp uuid_00000000000c7b06
uuid_00000000000c7b04:
	movb $1, -3944(%rbp)
uuid_00000000000c7b06:
	mov -3976(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c7b09:
	mov -3968(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c7b0c:
	mov -3960(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c7b0f:
	mov -3952(%RBP),%RSP
	add $-3984, %RSP
	mov -3944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b10
	jmp uuid_00000000000c7b12
uuid_00000000000c7b10:
	movb $1, -3576(%rbp)
uuid_00000000000c7b12:
	mov -3880(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c7b15:
	mov -3592(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c7b18:
	mov -3584(%RBP),%RSP
	add $-3984, %RSP
	mov -3576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b94
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4064(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b4a
	jmp uuid_00000000000c7b4c
uuid_00000000000c7b4a:
	push %RBP
	mov -4056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b34
	jmp uuid_00000000000c7b36
uuid_00000000000c7b34:
	push %RBP
	mov -4152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b2b
	jmp uuid_00000000000c7b2d
uuid_00000000000c7b2b:
	push %RBP
	mov -4248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7b28
	jmp uuid_00000000000c7b2a
uuid_00000000000c7b28:
	push %RBP
	pushq -4192(%RBP)
	pushq -4200(%RBP)
	pushq -4208(%RBP)
	pushq -4216(%RBP)
	pushq -4224(%RBP)
	pushq -4232(%RBP)
	pushq -4240(%RBP)
	pushq $0
	push %RBP
	mov -4416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b22
	jmp uuid_00000000000c7b24
uuid_00000000000c7b22:
	push %RBP
	jmp uuid_00000000000c7b1f
	jmp uuid_00000000000c7b21
uuid_00000000000c7b1f:
	push %RBP
	jmp uuid_00000000000c7b1c
	jmp uuid_00000000000c7b1e
uuid_00000000000c7b1c:
	push %RBP
	mov -4368(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7b19
	jmp uuid_00000000000c7b1b
uuid_00000000000c7b19:
	movb $1, -4424(%rbp)
uuid_00000000000c7b1b:
	mov -4456(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c7b1e:
	mov -4448(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c7b21:
	mov -4440(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c7b24:
	mov -4432(%RBP),%RSP
	add $-4464, %RSP
	mov -4424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b25
	jmp uuid_00000000000c7b27
uuid_00000000000c7b25:
	movb $1, -4264(%rbp)
uuid_00000000000c7b27:
	mov -4360(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c7b2a:
	mov -4280(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c7b2d:
	mov -4272(%RBP),%RSP
	add $-4464, %RSP
	mov -4264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b31
	jmp uuid_00000000000c7b33
uuid_00000000000c7b31:
	push %RBP
	pushq -4096(%RBP)
	pushq -4104(%RBP)
	pushq -4112(%RBP)
	pushq -4120(%RBP)
	pushq -4128(%RBP)
	pushq -4136(%RBP)
	pushq -4144(%RBP)
	jmp uuid_00000000000c7b2e
	jmp uuid_00000000000c7b30
uuid_00000000000c7b2e:
	movb $1, -4168(%rbp)
uuid_00000000000c7b30:
	mov -4472(%RBP),%RSP
	add $-4528, %RSP
uuid_00000000000c7b33:
	mov -4184(%RBP),%RSP
	add $-4528, %RSP
uuid_00000000000c7b36:
	mov -4176(%RBP),%RSP
	add $-4528, %RSP
	mov -4168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b47
	jmp uuid_00000000000c7b49
uuid_00000000000c7b47:
	push %RBP
	pushq -4000(%RBP)
	pushq -4008(%RBP)
	pushq -4016(%RBP)
	pushq -4024(%RBP)
	pushq -4032(%RBP)
	pushq -4040(%RBP)
	pushq -4048(%RBP)
	pushq $0
	push %RBP
	mov -4592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b41
	jmp uuid_00000000000c7b43
uuid_00000000000c7b41:
	push %RBP
	jmp uuid_00000000000c7b3e
	jmp uuid_00000000000c7b40
uuid_00000000000c7b3e:
	push %RBP
	jmp uuid_00000000000c7b3b
	jmp uuid_00000000000c7b3d
uuid_00000000000c7b3b:
	push %RBP
	mov -4544(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4640(%rbp)
	pushq $uuid_00000000000c7b37
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7b38
	jmp uuid_00000000000c7b3a
uuid_00000000000c7b38:
	movb $1, -4600(%rbp)
uuid_00000000000c7b3a:
	mov -4632(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000c7b3d:
	mov -4624(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000c7b40:
	mov -4616(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000c7b43:
	mov -4608(%RBP),%RSP
	add $-4640, %RSP
	mov -4600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b44
	jmp uuid_00000000000c7b46
uuid_00000000000c7b44:
	movb $1, -4072(%rbp)
uuid_00000000000c7b46:
	mov -4536(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000c7b49:
	mov -4088(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000c7b4c:
	mov -4080(%RBP),%RSP
	add $-4640, %RSP
	mov -4072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b91
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4720(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b6d
	jmp uuid_00000000000c7b6f
uuid_00000000000c7b6d:
	push %RBP
	mov -4712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4816(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b64
	jmp uuid_00000000000c7b66
uuid_00000000000c7b64:
	push %RBP
	mov -4808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7b61
	jmp uuid_00000000000c7b63
uuid_00000000000c7b61:
	push %RBP
	pushq -4752(%RBP)
	pushq -4760(%RBP)
	pushq -4768(%RBP)
	pushq -4776(%RBP)
	pushq -4784(%RBP)
	pushq -4792(%RBP)
	pushq -4800(%RBP)
	pushq $0
	push %RBP
	mov -4976(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b5b
	jmp uuid_00000000000c7b5d
uuid_00000000000c7b5b:
	push %RBP
	jmp uuid_00000000000c7b58
	jmp uuid_00000000000c7b5a
uuid_00000000000c7b58:
	push %RBP
	jmp uuid_00000000000c7b55
	jmp uuid_00000000000c7b57
uuid_00000000000c7b55:
	push %RBP
	mov -4928(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5024(%rbp)
	pushq $uuid_00000000000c7b51
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7b52
	jmp uuid_00000000000c7b54
uuid_00000000000c7b52:
	movb $1, -4984(%rbp)
uuid_00000000000c7b54:
	mov -5016(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000c7b57:
	mov -5008(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000c7b5a:
	mov -5000(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000c7b5d:
	mov -4992(%RBP),%RSP
	add $-5024, %RSP
	mov -4984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b5e
	jmp uuid_00000000000c7b60
uuid_00000000000c7b5e:
	movb $1, -4824(%rbp)
uuid_00000000000c7b60:
	mov -4920(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000c7b63:
	mov -4840(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000c7b66:
	mov -4832(%RBP),%RSP
	add $-5024, %RSP
	mov -4824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b6a
	jmp uuid_00000000000c7b6c
uuid_00000000000c7b6a:
	push %RBP
	pushq -4656(%RBP)
	pushq -4664(%RBP)
	pushq -4672(%RBP)
	pushq -4680(%RBP)
	pushq -4688(%RBP)
	pushq -4696(%RBP)
	pushq -4704(%RBP)
	jmp uuid_00000000000c7b67
	jmp uuid_00000000000c7b69
uuid_00000000000c7b67:
	movb $1, -4728(%rbp)
uuid_00000000000c7b69:
	mov -5032(%RBP),%RSP
	add $-5088, %RSP
uuid_00000000000c7b6c:
	mov -4744(%RBP),%RSP
	add $-5088, %RSP
uuid_00000000000c7b6f:
	mov -4736(%RBP),%RSP
	add $-5088, %RSP
	mov -4728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b8e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000c7b8b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7b8a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7b8d
uuid_00000000000c7b8b:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq $0
	push %RBP
	mov -5480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b83
	jmp uuid_00000000000c7b85
uuid_00000000000c7b83:
	push %RBP
	pushq -5408(%RBP)
	pushq -5416(%RBP)
	pushq -5424(%RBP)
	pushq -5432(%RBP)
	pushq -5440(%RBP)
	pushq -5448(%RBP)
	pushq -5456(%RBP)
	pushq -5464(%RBP)
	pushq -5472(%RBP)
	jmp uuid_00000000000c7b80
	jmp uuid_00000000000c7b82
uuid_00000000000c7b80:
	push %RBP
	pushq -5336(%RBP)
	pushq -5344(%RBP)
	pushq -5352(%RBP)
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	pushq -5384(%RBP)
	pushq -5392(%RBP)
	pushq -5400(%RBP)
	jmp uuid_00000000000c7b7d
	jmp uuid_00000000000c7b7f
uuid_00000000000c7b7d:
	movb $1, -5488(%rbp)
uuid_00000000000c7b7f:
	mov -5584(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c7b82:
	mov -5504(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c7b85:
	mov -5496(%RBP),%RSP
	add $-5656, %RSP
	mov -5488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b87
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7b86
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7b89
uuid_00000000000c7b87:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -5576(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -5568(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -5560(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -5552(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -5544(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -5536(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -5528(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -5520(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -5512(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c7b89:
	mov -5328(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c7b8d:
	mov -5096(%RBP),%RSP
	add $-5656, %RSP
	jmp uuid_00000000000c7b90
uuid_00000000000c7b8e:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq $0
	push %RBP
	mov -5400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b76
	jmp uuid_00000000000c7b78
uuid_00000000000c7b76:
	push %RBP
	pushq -5328(%RBP)
	pushq -5336(%RBP)
	pushq -5344(%RBP)
	pushq -5352(%RBP)
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	pushq -5384(%RBP)
	pushq -5392(%RBP)
	jmp uuid_00000000000c7b73
	jmp uuid_00000000000c7b75
uuid_00000000000c7b73:
	push %RBP
	pushq -5256(%RBP)
	pushq -5264(%RBP)
	pushq -5272(%RBP)
	pushq -5280(%RBP)
	pushq -5288(%RBP)
	pushq -5296(%RBP)
	pushq -5304(%RBP)
	pushq -5312(%RBP)
	pushq -5320(%RBP)
	jmp uuid_00000000000c7b70
	jmp uuid_00000000000c7b72
uuid_00000000000c7b70:
	movb $1, -5408(%rbp)
uuid_00000000000c7b72:
	mov -5504(%RBP),%RSP
	add $-5576, %RSP
uuid_00000000000c7b75:
	mov -5424(%RBP),%RSP
	add $-5576, %RSP
uuid_00000000000c7b78:
	mov -5416(%RBP),%RSP
	add $-5576, %RSP
	mov -5408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7b7a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7b79
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7b7c
uuid_00000000000c7b7a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -5496(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -5488(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -5480(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -5472(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -5464(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -5456(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -5448(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -5440(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -5432(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c7b7c:
	mov -5248(%RBP),%RSP
	add $-5576, %RSP
uuid_00000000000c7b90:
	mov -4648(%RBP),%RSP
	add $-5576, %RSP
	jmp uuid_00000000000c7b93
uuid_00000000000c7b91:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c7b4d
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7b4e
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c7b4e
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4480(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7b4f
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c7b4f
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7b50
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c7b50
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7b4e
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c7b4e
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7b50
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c7b50
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4464(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq -4464(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4480(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a95
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $3
	pushq $5
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -4352(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -4344(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -4336(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -4328(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -4320(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -4312(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -4304(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -4296(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -4288(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c7b93:
	mov -3992(%RBP),%RSP
	add $-4640, %RSP
	jmp uuid_00000000000c7b96
uuid_00000000000c7b94:
#call function tokenize : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3872(%rbp)
	mov %RBX, %RBP
	call tokenize_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -3760(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -3752(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -3744(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -3736(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -3728(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -3720(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -3712(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -3704(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -3696(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c7b96:
	mov -3496(%RBP),%RSP
	add $-3984, %RSP
	jmp uuid_00000000000c7b99
uuid_00000000000c7b97:
#call function index-size-of-class : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3376(%rbp)
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3264(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call index_SB_size_SB_of_SB_class_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -3152(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -3144(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -3136(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -3128(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -3120(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -3112(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -3104(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -3096(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -3088(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c7b99:
	mov -2792(%RBP),%RSP
	add $-3488, %RSP
	jmp uuid_00000000000c7b9c
uuid_00000000000c7b9a:
#call function close : Arrow<SfxList,Array<SfxList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SfxListSfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2448(%rbp)
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5383
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5f22
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2560(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	mov $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	movq -2336(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2304(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2296(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2288(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2280(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2272(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c7b9c:
	mov -1880(%RBP),%RSP
	add $-2784, %RSP
	jmp uuid_00000000000c7b9f
uuid_00000000000c7b9d:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq $0
	push %RBP
	mov -2184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a34
	jmp uuid_00000000000c7a36
uuid_00000000000c7a34:
	push %RBP
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	jmp uuid_00000000000c7a31
	jmp uuid_00000000000c7a33
uuid_00000000000c7a31:
	push %RBP
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	jmp uuid_00000000000c7a2e
	jmp uuid_00000000000c7a30
uuid_00000000000c7a2e:
	movb $1, -2192(%rbp)
uuid_00000000000c7a30:
	mov -2288(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c7a33:
	mov -2208(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c7a36:
	mov -2200(%RBP),%RSP
	add $-2360, %RSP
	mov -2192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a45
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7a44
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7a47
uuid_00000000000c7a45:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq $0
	push %RBP
	mov -2672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a3d
	jmp uuid_00000000000c7a3f
uuid_00000000000c7a3d:
	push %RBP
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	jmp uuid_00000000000c7a3a
	jmp uuid_00000000000c7a3c
uuid_00000000000c7a3a:
	push %RBP
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	jmp uuid_00000000000c7a37
	jmp uuid_00000000000c7a39
uuid_00000000000c7a37:
	movb $1, -2680(%rbp)
uuid_00000000000c7a39:
	mov -2776(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c7a3c:
	mov -2696(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c7a3f:
	mov -2688(%RBP),%RSP
	add $-2848, %RSP
	mov -2680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a41
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7a40
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7a43
uuid_00000000000c7a41:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -2768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2704(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c7a43:
	mov -2520(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c7a47:
	mov -2032(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c7b9f:
	mov -1592(%RBP),%RSP
	add $-2848, %RSP
	jmp uuid_00000000000c7ba2
uuid_00000000000c7ba0:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a05
	jmp uuid_00000000000c7a07
uuid_00000000000c7a05:
	push %RBP
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	jmp uuid_00000000000c7a02
	jmp uuid_00000000000c7a04
uuid_00000000000c7a02:
	push %RBP
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	jmp uuid_00000000000c79ff
	jmp uuid_00000000000c7a01
uuid_00000000000c79ff:
	movb $1, -1904(%rbp)
uuid_00000000000c7a01:
	mov -2000(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c7a04:
	mov -1920(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c7a07:
	mov -1912(%RBP),%RSP
	add $-2072, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a16
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7a15
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7a18
uuid_00000000000c7a16:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq $0
	push %RBP
	mov -2384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a0e
	jmp uuid_00000000000c7a10
uuid_00000000000c7a0e:
	push %RBP
	pushq -2312(%RBP)
	pushq -2320(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	jmp uuid_00000000000c7a0b
	jmp uuid_00000000000c7a0d
uuid_00000000000c7a0b:
	push %RBP
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	jmp uuid_00000000000c7a08
	jmp uuid_00000000000c7a0a
uuid_00000000000c7a08:
	movb $1, -2392(%rbp)
uuid_00000000000c7a0a:
	mov -2488(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c7a0d:
	mov -2408(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c7a10:
	mov -2400(%RBP),%RSP
	add $-2560, %RSP
	mov -2392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7a12
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7a11
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7a14
uuid_00000000000c7a12:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
#call function type-of-s : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function index-tag-is-fragment : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call index_SB_tag_SB_is_SB_fragment_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -2480(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2472(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2464(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2456(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2448(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2440(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2432(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2424(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2416(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c7a14:
	mov -2232(%RBP),%RSP
	add $-2584, %RSP
uuid_00000000000c7a18:
	mov -1744(%RBP),%RSP
	add $-2584, %RSP
uuid_00000000000c7ba2:
	mov -1096(%RBP),%RSP
	add $-2584, %RSP
	jmp uuid_00000000000c7ba5
uuid_00000000000c7ba3:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq $0
	push %RBP
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c79cc
	jmp uuid_00000000000c79ce
uuid_00000000000c79cc:
	push %RBP
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	jmp uuid_00000000000c79c9
	jmp uuid_00000000000c79cb
uuid_00000000000c79c9:
	push %RBP
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	jmp uuid_00000000000c79c6
	jmp uuid_00000000000c79c8
uuid_00000000000c79c6:
	movb $1, -1408(%rbp)
uuid_00000000000c79c8:
	mov -1504(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c79cb:
	mov -1424(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c79ce:
	mov -1416(%RBP),%RSP
	add $-1576, %RSP
	mov -1408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c79d0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c79cf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c79d2
uuid_00000000000c79d0:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -1496(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c79d2:
	mov -1248(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c7ba5:
	mov -808(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000c7ba8
uuid_00000000000c7ba6:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq $0
	push %RBP
	mov -1112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c798c
	jmp uuid_00000000000c798e
uuid_00000000000c798c:
	push %RBP
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000c7989
	jmp uuid_00000000000c798b
uuid_00000000000c7989:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	jmp uuid_00000000000c7986
	jmp uuid_00000000000c7988
uuid_00000000000c7986:
	movb $1, -1120(%rbp)
uuid_00000000000c7988:
	mov -1216(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c798b:
	mov -1136(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c798e:
	mov -1128(%RBP),%RSP
	add $-1288, %RSP
	mov -1120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c79ad
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c79ac
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c79af
uuid_00000000000c79ad:
#call function take-one-expr : Arrow<List<Token>,Tuple<List<Token>,List<Token>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	mov %RBX, %RBP
	call take_SB_one_SB_expr_CL_ArrowTupleListTokenListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq $0
	push %RBP
	mov -1600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7995
	jmp uuid_00000000000c7997
uuid_00000000000c7995:
	push %RBP
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	jmp uuid_00000000000c7992
	jmp uuid_00000000000c7994
uuid_00000000000c7992:
	push %RBP
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	jmp uuid_00000000000c798f
	jmp uuid_00000000000c7991
uuid_00000000000c798f:
	movb $1, -1608(%rbp)
uuid_00000000000c7991:
	mov -1704(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c7994:
	mov -1624(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c7997:
	mov -1616(%RBP),%RSP
	add $-1776, %RSP
	mov -1608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c79a9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c79a8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c79ab
uuid_00000000000c79a9:
#call function parse-toplevel : Arrow<List<Token>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	mov %RBX, %RBP
	call parse_SB_toplevel_CL_ArrowASTListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	push %RBP
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq $0
	push %RBP
	mov -2000(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c799e
	jmp uuid_00000000000c79a0
uuid_00000000000c799e:
	push %RBP
	mov -1992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c799b
	jmp uuid_00000000000c799d
uuid_00000000000c799b:
	push %RBP
	mov -1984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2176(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7998
	jmp uuid_00000000000c799a
uuid_00000000000c7998:
	movb $1, -2008(%rbp)
uuid_00000000000c799a:
	mov -2104(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000c799d:
	mov -2024(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000c79a0:
	mov -2016(%RBP),%RSP
	add $-2176, %RSP
	mov -2008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c79a5
	push %RBP
	jmp uuid_00000000000c79a2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c79a1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c79a4
uuid_00000000000c79a2:
uuid_00000000000c79a4:
	mov -2184(%RBP),%RSP
	add $-2184, %RSP
	jmp uuid_00000000000c79a7
uuid_00000000000c79a5:
	movq -2096(%rbp), %r15
	movq %r15, -1848(%rbp)
	movq -2088(%rbp), %r15
	movq %r15, -1840(%rbp)
	movq -2080(%rbp), %r15
	movq %r15, -1832(%rbp)
	movq -2072(%rbp), %r15
	movq %r15, -1824(%rbp)
	movq -2064(%rbp), %r15
	movq %r15, -1816(%rbp)
	movq -2056(%rbp), %r15
	movq %r15, -1808(%rbp)
	movq -2048(%rbp), %r15
	movq %r15, -1800(%rbp)
	movq -2040(%rbp), %r15
	movq %r15, -1792(%rbp)
	movq -2032(%rbp), %r15
	movq %r15, -1784(%rbp)
uuid_00000000000c79a7:
	mov -1928(%RBP),%RSP
	add $-2176, %RSP
#call function close : Arrow<MacroList,Array<MacroList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $preprocess_SB_macros_CL_MacroListMacroListCaseNumber1, %r15
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_MacroListMacroList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $0
	pushq $0
	mov $preprocess_SB_macros_CL_MacroListMacroListCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	movq -1696(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c79ab:
	mov -1448(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000c79af:
	mov -960(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000c7ba8:
	mov -520(%RBP),%RSP
	add $-2176, %RSP
	jmp uuid_00000000000c7bab
uuid_00000000000c7ba9:
	movq -400(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c7bab:
	mov -232(%RBP),%RSP
	add $-512, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c7bac
uuid_00000000000c7bae:
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_type_SB_comma_SB_sep_CL_ArrowListTypeString:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c7bc9:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c7bca
	jmp uuid_00000000000c7bcb
uuid_00000000000c7bca:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7bc0
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7bbd
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7bba
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7bb7
	push %RBP
	jmp uuid_00000000000c7bb4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7bb3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7bb6
uuid_00000000000c7bb4:
uuid_00000000000c7bb6:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c7bb9
uuid_00000000000c7bb7:
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000c7bb9:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c7bbc
uuid_00000000000c7bba:
	mov -48(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000c7bbc:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c7bbf
uuid_00000000000c7bbd:
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000c7bbf:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c7bc2
uuid_00000000000c7bc0:
	mov -48(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000c7bc2:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -48(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7bc6
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000c7bc8
uuid_00000000000c7bc6:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $44, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7bc3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000c7bc5
uuid_00000000000c7bc3:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c7bc5:
	mov -128(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000c7bc8:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c7bc9
uuid_00000000000c7bcb:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
parse_SB_type_SB_single_CL_ArrowTypeString:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
uuid_00000000000c7c32:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c7c33
	jmp uuid_00000000000c7c34
uuid_00000000000c7c33:
	push %RBP
	mov -24(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c2f
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c05
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c02
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7bff
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7bfc
	push %RBP
	jmp uuid_00000000000c7bf9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7bf8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7bfb
uuid_00000000000c7bf9:
uuid_00000000000c7bfb:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c7bfe
uuid_00000000000c7bfc:
	mov -24(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c7bfe:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c7c01
uuid_00000000000c7bff:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c7c01:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c7c04
uuid_00000000000c7c02:
	mov -24(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c7c04:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c7c07
uuid_00000000000c7c05:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c7c07:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -24(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c2c
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	jmp uuid_00000000000c7c2e
uuid_00000000000c7c2c:
	pushq -32(%rbp)
	push %RBP
	pushq -128(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c29
	push %RBP
	pushq -128(%rbp)
	mov -160(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c26
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7c25
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7c28
uuid_00000000000c7c26:
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c11
	jmp uuid_00000000000c7c13
uuid_00000000000c7c11:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c0e
	jmp uuid_00000000000c7c10
uuid_00000000000c7c0e:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7c0b
	jmp uuid_00000000000c7c0d
uuid_00000000000c7c0b:
	movb $1, -224(%rbp)
uuid_00000000000c7c0d:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c7c10:
	mov -240(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c7c13:
	mov -232(%RBP),%RSP
	add $-296, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c22
	push %RBP
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c17
	jmp uuid_00000000000c7c19
uuid_00000000000c7c17:
	push %RBP
	mov -320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7c14
	jmp uuid_00000000000c7c16
uuid_00000000000c7c14:
	movb $1, -336(%rbp)
uuid_00000000000c7c16:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c7c19:
	mov -344(%RBP),%RSP
	add $-360, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c1f
	push %RBP
	jmp uuid_00000000000c7c1c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7c1b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7c1e
uuid_00000000000c7c1c:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7c1a
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7c1e:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000c7c21
uuid_00000000000c7c1f:
	pushq -360(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-comma-sep : Arrow<String,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_comma_SB_sep_CL_ArrowListTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c7c21:
	mov -304(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000c7c24
uuid_00000000000c7c22:
	pushq -296(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-comma-sep : Arrow<String,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_comma_SB_sep_CL_ArrowListTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c7c24:
	mov -192(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c7c28:
	mov -152(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c7c2b
uuid_00000000000c7c29:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7c08
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4ae9
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c7c0a
uuid_00000000000c7c08:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4ae9
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c7c0a:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c7c2b:
	mov -136(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c7c2e:
	mov -120(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c7c31
uuid_00000000000c7c2f:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7bf5
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7bf2
	push %RBP
	pushq -96(%rbp)
	jmp uuid_00000000000c7bef
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7bee
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7bf1
uuid_00000000000c7bef:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c7bf1:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c7bf4
uuid_00000000000c7bf2:
	movb $60, -32(%rbp)
	movq $1, -24(%rbp)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7beb
	jmp uuid_00000000000c7bed
uuid_00000000000c7beb:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000c4a21
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7be8
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7be5
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c7be7
uuid_00000000000c7be5:
	pushq $0
	pushq -144(%rbp)
	pushq $2
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c7be7:
	mov -160(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c7bea
uuid_00000000000c7be8:
	pushq $0
	pushq $0
	pushq $3
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c7bea:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c7bed:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c7bf4:
	mov -120(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c7bf7
uuid_00000000000c7bf5:
	movb $91, -32(%rbp)
	movq $1, -24(%rbp)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7bda
	jmp uuid_00000000000c7bdc
uuid_00000000000c7bda:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000c4a21
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7bd7
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7bd4
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c7bd6
uuid_00000000000c7bd4:
	pushq $0
	pushq -128(%rbp)
	pushq $2
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c7bd6:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c7bd9
uuid_00000000000c7bd7:
	pushq $0
	pushq $0
	pushq $3
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c7bd9:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c7bdc:
	mov -120(%RBP),%RSP
	add $-136, %RSP
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c7bf7:
	mov -104(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c7c31:
	mov -88(%RBP),%RSP
	add $-136, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c7c32
uuid_00000000000c7c34:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7c43
	jmp uuid_00000000000c7c45
uuid_00000000000c7c43:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000c4a21
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7c40
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7c3d
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c7c3f
uuid_00000000000c7c3d:
	pushq $0
	pushq -96(%rbp)
	pushq $2
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c7c3f:
	mov -112(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c7c42
uuid_00000000000c7c40:
	pushq $0
	pushq $0
	pushq $3
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c7c42:
	mov -104(%RBP),%RSP
	add $-104, %RSP
uuid_00000000000c7c45:
	mov -88(%RBP),%RSP
	add $-104, %RSP
	subq $24, %rsp
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
parse_SB_type_CL_ArrowTypeString:
	pushq $0
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000c4cdf
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7c46
	jmp uuid_00000000000c7c48
uuid_00000000000c7c46:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000c4cdf
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
	movb $1, -24(%rbp)
uuid_00000000000c7c48:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	pushq $0
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
uuid_00000000000c7c6f:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c7c70
	jmp uuid_00000000000c7c71
uuid_00000000000c7c70:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c56
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c53
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c50
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c4d
	push %RBP
	jmp uuid_00000000000c7c4a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7c49
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7c4c
uuid_00000000000c7c4a:
uuid_00000000000c7c4c:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c7c4f
uuid_00000000000c7c4d:
	mov -40(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c7c4f:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c7c52
uuid_00000000000c7c50:
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c7c52:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c7c55
uuid_00000000000c7c53:
	mov -40(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c7c55:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c7c58
uuid_00000000000c7c56:
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c7c58:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c6c
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	jmp uuid_00000000000c7c6e
uuid_00000000000c7c6c:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $43, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c69
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	jmp uuid_00000000000c7c6b
uuid_00000000000c7c69:
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c5f
	jmp uuid_00000000000c7c61
uuid_00000000000c7c5f:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c5c
	jmp uuid_00000000000c7c5e
uuid_00000000000c7c5c:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7c59
	jmp uuid_00000000000c7c5b
uuid_00000000000c7c59:
	movb $1, -192(%rbp)
uuid_00000000000c7c5b:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c7c5e:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c7c61:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c66
	push %RBP
	jmp uuid_00000000000c7c63
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7c62
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7c65
uuid_00000000000c7c63:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
uuid_00000000000c7c65:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c7c68
uuid_00000000000c7c66:
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -288(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -72(%rbp)
uuid_00000000000c7c68:
	mov -160(%RBP),%RSP
	add $-288, %RSP
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c7c6b:
	mov -128(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c7c6e:
	mov -120(%RBP),%RSP
	add $-288, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c7c6f
uuid_00000000000c7c71:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7c82
	jmp uuid_00000000000c7c84
uuid_00000000000c7c82:
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c78
	jmp uuid_00000000000c7c7a
uuid_00000000000c7c78:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c75
	jmp uuid_00000000000c7c77
uuid_00000000000c7c75:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7c72
	jmp uuid_00000000000c7c74
uuid_00000000000c7c72:
	movb $1, -160(%rbp)
uuid_00000000000c7c74:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c7c77:
	mov -176(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c7c7a:
	mov -168(%RBP),%RSP
	add $-232, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c7f
	push %RBP
	jmp uuid_00000000000c7c7c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7c7b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7c7e
uuid_00000000000c7c7c:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
uuid_00000000000c7c7e:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c7c81
uuid_00000000000c7c7f:
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -256(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -248(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -240(%rbp), %r15
	movq %r15, -72(%rbp)
uuid_00000000000c7c81:
	mov -128(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c7c84:
	mov -96(%RBP),%RSP
	add $-256, %RSP
	push %RBP
	mov -24(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7c8d
	jmp uuid_00000000000c7c8f
uuid_00000000000c7c8d:
	pushq $uuid_00000000000c4cdf
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
uuid_00000000000c7c8f:
	mov -264(%RBP),%RSP
	add $-264, %RSP
	subq $24, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
parse_SB_unexpect_CL_ArrowNilConsListTokenString:
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
parse_CL_ArrowNilNil:
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
#call function parse-toplevel : Arrow<List<Token>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call parse_SB_toplevel_CL_ArrowASTListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
take_SB_one_SB_expr_CL_ArrowTupleListTokenListTokenListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq $0
uuid_00000000000c7cf2:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7cf3
	jmp uuid_00000000000c7cf4
uuid_00000000000c7cf3:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7cba
	jmp uuid_00000000000c7cbc
uuid_00000000000c7cba:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7cb7
	jmp uuid_00000000000c7cb9
uuid_00000000000c7cb7:
	push %RBP
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7cb1
	jmp uuid_00000000000c7cb3
uuid_00000000000c7cb1:
	push %RBP
	jmp uuid_00000000000c7cae
	jmp uuid_00000000000c7cb0
uuid_00000000000c7cae:
	push %RBP
	jmp uuid_00000000000c7cab
	jmp uuid_00000000000c7cad
uuid_00000000000c7cab:
	push %RBP
	mov -496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000c4b54
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7ca8
	jmp uuid_00000000000c7caa
uuid_00000000000c7ca8:
	movb $1, -552(%rbp)
uuid_00000000000c7caa:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c7cad:
	mov -576(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c7cb0:
	mov -568(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c7cb3:
	mov -560(%RBP),%RSP
	add $-592, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7cb4
	jmp uuid_00000000000c7cb6
uuid_00000000000c7cb4:
	movb $1, -392(%rbp)
uuid_00000000000c7cb6:
	mov -488(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c7cb9:
	mov -408(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c7cbc:
	mov -400(%RBP),%RSP
	add $-592, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7cef
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7cc6
	jmp uuid_00000000000c7cc8
uuid_00000000000c7cc6:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7cc3
	jmp uuid_00000000000c7cc5
uuid_00000000000c7cc3:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	jmp uuid_00000000000c7cc0
	jmp uuid_00000000000c7cc2
uuid_00000000000c7cc0:
	movb $1, -680(%rbp)
uuid_00000000000c7cc2:
	mov -776(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c7cc5:
	mov -696(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c7cc8:
	mov -688(%RBP),%RSP
	add $-832, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7cec
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7ceb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7cee
uuid_00000000000c7cec:
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	push %RBP
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7cd2
	jmp uuid_00000000000c7cd4
uuid_00000000000c7cd2:
	push %RBP
	jmp uuid_00000000000c7ccf
	jmp uuid_00000000000c7cd1
uuid_00000000000c7ccf:
	push %RBP
	jmp uuid_00000000000c7ccc
	jmp uuid_00000000000c7cce
uuid_00000000000c7ccc:
	push %RBP
	mov -904(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq $uuid_00000000000c4891
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7cc9
	jmp uuid_00000000000c7ccb
uuid_00000000000c7cc9:
	movb $1, -960(%rbp)
uuid_00000000000c7ccb:
	mov -992(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000c7cce:
	mov -984(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000c7cd1:
	mov -976(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000c7cd4:
	mov -968(%RBP),%RSP
	add $-1000, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ce8
	push %RBP
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $0
	push %RBP
	mov -1064(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7cde
	jmp uuid_00000000000c7ce0
uuid_00000000000c7cde:
	push %RBP
	jmp uuid_00000000000c7cdb
	jmp uuid_00000000000c7cdd
uuid_00000000000c7cdb:
	push %RBP
	jmp uuid_00000000000c7cd8
	jmp uuid_00000000000c7cda
uuid_00000000000c7cd8:
	push %RBP
	mov -1016(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq $uuid_00000000000c4893
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7cd5
	jmp uuid_00000000000c7cd7
uuid_00000000000c7cd5:
	movb $1, -1072(%rbp)
uuid_00000000000c7cd7:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c7cda:
	mov -1096(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c7cdd:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c7ce0:
	mov -1080(%RBP),%RSP
	add $-1112, %RSP
	mov -1072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ce5
	push %RBP
	jmp uuid_00000000000c7ce2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7ce1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7ce4
uuid_00000000000c7ce2:
uuid_00000000000c7ce4:
	mov -1120(%RBP),%RSP
	add $-1120, %RSP
	jmp uuid_00000000000c7ce7
uuid_00000000000c7ce5:
	mov -232(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -232(%rbp)
uuid_00000000000c7ce7:
	mov -1008(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000c7cea
uuid_00000000000c7ce8:
	mov -232(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -232(%rbp)
uuid_00000000000c7cea:
	mov -896(%RBP),%RSP
	add $-1000, %RSP
#call function cons : Arrow<Cons<Token,List<Token>>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTokenConsListTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -768(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c7cee:
	mov -600(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000c7cf1
uuid_00000000000c7cef:
	push %RBP
	mov -232(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7cbd
#call function cons : Arrow<Cons<Token,List<Token>>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function head : Arrow<List<Token>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call head_CL_ArrowTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTokenConsListTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -480(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c7cbf
uuid_00000000000c7cbd:
	movq -72(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -64(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -56(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -48(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -40(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -32(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -24(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -160(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c7cbf:
	mov -600(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c7cf1:
	mov -312(%RBP),%RSP
	add $-600, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c7cf2
uuid_00000000000c7cf4:
#call function remove-parens : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function reverse : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call remove_SB_parens_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
compile_SB_constructor_CL_ArrowFragmentConsI64ConsASTConsTypeConsTypeConsStringFContext:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	subq %R14,%RAX
	mov %RAX, %RAX
	mov $8, %R14
	subq %R14,%RAX
	push %RAX
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov -336(%RBP), %RAX
	mov -352(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fcc
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fce
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fcf
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fcd
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $uuid_00000000000c7cf5
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $uuid_00000000000c4fd0
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -336(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -336(%RBP), %RAX
	subq %R14,%RAX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	subq $152, %rsp
	pushq -880(%rbp)
	pushq -872(%rbp)
	pushq -864(%rbp)
	pushq -856(%rbp)
	pushq -848(%rbp)
	pushq -840(%rbp)
	pushq -832(%rbp)
	pushq -824(%rbp)
	pushq -816(%rbp)
	pushq -808(%rbp)
	pushq -800(%rbp)
	pushq -792(%rbp)
	pushq -784(%rbp)
	pushq -776(%rbp)
	pushq -768(%rbp)
	pushq -760(%rbp)
	pushq -752(%rbp)
	pushq -744(%rbp)
	pushq -736(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $344, %rsp
	ret
compile_SB_declare_SB_cstring_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %r15
	pushq 0(%r15)
	push %RBP
	pushq -176(%rbp)
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7cfd
	push %RBP
	pushq -176(%rbp)
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7cfa
	push %RBP
	pushq -176(%rbp)
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7cf7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7cf6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7cf9
uuid_00000000000c7cf7:
#call function compile-declare-cstring-blob : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call compile_SB_declare_SB_cstring_SB_blob_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c7cf9:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c7cfc
uuid_00000000000c7cfa:
#call function compile-declare-cstring-gnu : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call compile_SB_declare_SB_cstring_SB_gnu_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c7cfc:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c7cff
uuid_00000000000c7cfd:
#call function compile-declare-cstring-c : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call compile_SB_declare_SB_cstring_SB_c_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c7cff:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
compile_SB_declare_SB_cstring_SB_blob_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7d00
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
compile_SB_declare_SB_cstring_SB_c_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c6d83
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c7d01
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-c-string : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call escape_SB_c_SB_string_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $uuid_00000000000c7d01
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
escape_SB_c_SB_string_CL_ArrowSString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c7d28:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c7d29
	jmp uuid_00000000000c7d2a
uuid_00000000000c7d29:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d25
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $34, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d22
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000c7d24
uuid_00000000000c7d22:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000c7d01
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c7d24:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c7d27
uuid_00000000000c7d25:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d1f
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d1c
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d19
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d16
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d13
	push %RBP
	pushq -56(%rbp)
	mov -152(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d10
	push %RBP
	pushq -56(%rbp)
	mov -168(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d0d
	push %RBP
	pushq -56(%rbp)
	mov -184(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d0a
	push %RBP
	pushq -56(%rbp)
	mov -200(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d07
	push %RBP
	pushq -56(%rbp)
	jmp uuid_00000000000c7d04
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7d03
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7d06
uuid_00000000000c7d04:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4b2c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U8,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4b2d
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c7d06:
	mov -208(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000c7d09
uuid_00000000000c7d07:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000c7d02
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c7d09:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c7d0c
uuid_00000000000c7d0a:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000c4892
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c7d0c:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000c7d0f
uuid_00000000000c7d0d:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000c4b59
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c7d0f:
	mov -160(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c7d12
uuid_00000000000c7d10:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000c4b58
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c7d12:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c7d15
uuid_00000000000c7d13:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000c4b56
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c7d15:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c7d18
uuid_00000000000c7d16:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000c4893
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c7d18:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c7d1b
uuid_00000000000c7d19:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000c4b2b
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c7d1b:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000c7d1e
uuid_00000000000c7d1c:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000c4891
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c7d1e:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000c7d21
uuid_00000000000c7d1f:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000c4b54
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c7d21:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000c7d27:
	mov -48(%RBP),%RSP
	add $-72, %RSP
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c7d28
uuid_00000000000c7d2a:
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
compile_SB_declare_SB_cstring_SB_gnu_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %r15
	pushq 0(%r15)
	pushq $1
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7d46
	mov $cstring_SB_cache_CL_StringStringListStringStringListCaseNumber1, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $uuid_00000000000c4960
uuid_00000000000c7d3e:
#call function non-zero : Arrow<StringStringList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64StringStringList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7d3f
	jmp uuid_00000000000c7d40
uuid_00000000000c7d3f:
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d34
	jmp uuid_00000000000c7d36
uuid_00000000000c7d34:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7d31
	jmp uuid_00000000000c7d33
uuid_00000000000c7d31:
	push %RBP
	mov -272(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7d2e
	jmp uuid_00000000000c7d30
uuid_00000000000c7d2e:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7d2b
	jmp uuid_00000000000c7d2d
uuid_00000000000c7d2b:
	movb $1, -296(%rbp)
uuid_00000000000c7d2d:
	mov -344(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c7d30:
	mov -328(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c7d33:
	mov -312(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c7d36:
	mov -304(%RBP),%RSP
	add $-376, %RSP
	mov -296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d3b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7d3a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7d3d
uuid_00000000000c7d3b:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7d37
	movq -376(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -184(%rbp)
	jmp uuid_00000000000c7d39
uuid_00000000000c7d37:
	movq -320(%rbp), %r15
	movq %r15, -216(%rbp)
	mov -320(%rbp), %r15
	mov %r15, -216(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c7d39:
	mov -384(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c7d3d:
	mov -256(%RBP),%RSP
	add $-384, %RSP
	add $32, %rsp
	add $32, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $32, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c7d3e
uuid_00000000000c7d40:
	push %RBP
	mov -216(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c7d43
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -216(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -216(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c7d41
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function escape-literal : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call escape_SB_literal_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c7d42
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<StringStringList,Array<StringStringList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $cstring_SB_cache_CL_StringStringListStringStringListCaseNumber1, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_StringStringListStringStringList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -216(%rbp)
	pushq $0
	mov $cstring_SB_cache_CL_StringStringListStringStringListCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	jmp uuid_00000000000c7d45
uuid_00000000000c7d43:
uuid_00000000000c7d45:
	mov -224(%RBP),%RSP
	add $-224, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c6d83
	pushq $0
	pushq -216(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000c7d48
uuid_00000000000c7d46:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c6d83
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c7d48:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType:
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d79
	jmp uuid_00000000000c7d7b
uuid_00000000000c7d79:
	push %RBP
	mov -456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d70
	jmp uuid_00000000000c7d72
uuid_00000000000c7d70:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -656(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d5e
	jmp uuid_00000000000c7d60
uuid_00000000000c7d5e:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d4c
	jmp uuid_00000000000c7d4e
uuid_00000000000c7d4c:
	push %RBP
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000c7d49
	jmp uuid_00000000000c7d4b
uuid_00000000000c7d49:
	movb $1, -760(%rbp)
uuid_00000000000c7d4b:
	mov -776(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c7d4e:
	mov -768(%RBP),%RSP
	add $-800, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d5b
	jmp uuid_00000000000c7d5d
uuid_00000000000c7d5b:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d55
	jmp uuid_00000000000c7d57
uuid_00000000000c7d55:
	push %RBP
	jmp uuid_00000000000c7d52
	jmp uuid_00000000000c7d54
uuid_00000000000c7d52:
	push %RBP
	mov -816(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7d4f
	jmp uuid_00000000000c7d51
uuid_00000000000c7d4f:
	movb $1, -888(%rbp)
uuid_00000000000c7d51:
	mov -912(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c7d54:
	mov -904(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c7d57:
	mov -896(%RBP),%RSP
	add $-920, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d58
	jmp uuid_00000000000c7d5a
uuid_00000000000c7d58:
	movb $1, -664(%rbp)
uuid_00000000000c7d5a:
	mov -808(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c7d5d:
	mov -680(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c7d60:
	mov -672(%RBP),%RSP
	add $-920, %RSP
	mov -664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d6d
	jmp uuid_00000000000c7d6f
uuid_00000000000c7d6d:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1000(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d67
	jmp uuid_00000000000c7d69
uuid_00000000000c7d67:
	push %RBP
	jmp uuid_00000000000c7d64
	jmp uuid_00000000000c7d66
uuid_00000000000c7d64:
	push %RBP
	mov -936(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7d61
	jmp uuid_00000000000c7d63
uuid_00000000000c7d61:
	movb $1, -1008(%rbp)
uuid_00000000000c7d63:
	mov -1032(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c7d66:
	mov -1024(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c7d69:
	mov -1016(%RBP),%RSP
	add $-1040, %RSP
	mov -1008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d6a
	jmp uuid_00000000000c7d6c
uuid_00000000000c7d6a:
	movb $1, -568(%rbp)
uuid_00000000000c7d6c:
	mov -928(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c7d6f:
	mov -584(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c7d72:
	mov -576(%RBP),%RSP
	add $-1040, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d76
	jmp uuid_00000000000c7d78
uuid_00000000000c7d76:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7d73
	jmp uuid_00000000000c7d75
uuid_00000000000c7d73:
	movb $1, -472(%rbp)
uuid_00000000000c7d75:
	mov -1048(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000c7d78:
	mov -488(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000c7d7b:
	mov -480(%RBP),%RSP
	add $-1120, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7db0
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7da6
	jmp uuid_00000000000c7da8
uuid_00000000000c7da6:
	push %RBP
	mov -1192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1296(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d94
	jmp uuid_00000000000c7d96
uuid_00000000000c7d94:
	push %RBP
	mov -1288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d82
	jmp uuid_00000000000c7d84
uuid_00000000000c7d82:
	push %RBP
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	jmp uuid_00000000000c7d7f
	jmp uuid_00000000000c7d81
uuid_00000000000c7d7f:
	movb $1, -1400(%rbp)
uuid_00000000000c7d81:
	mov -1416(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c7d84:
	mov -1408(%RBP),%RSP
	add $-1440, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d91
	jmp uuid_00000000000c7d93
uuid_00000000000c7d91:
	push %RBP
	mov -1280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1520(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d8b
	jmp uuid_00000000000c7d8d
uuid_00000000000c7d8b:
	push %RBP
	jmp uuid_00000000000c7d88
	jmp uuid_00000000000c7d8a
uuid_00000000000c7d88:
	push %RBP
	mov -1456(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7d85
	jmp uuid_00000000000c7d87
uuid_00000000000c7d85:
	movb $1, -1528(%rbp)
uuid_00000000000c7d87:
	mov -1552(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c7d8a:
	mov -1544(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c7d8d:
	mov -1536(%RBP),%RSP
	add $-1560, %RSP
	mov -1528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d8e
	jmp uuid_00000000000c7d90
uuid_00000000000c7d8e:
	movb $1, -1304(%rbp)
uuid_00000000000c7d90:
	mov -1448(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c7d93:
	mov -1320(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c7d96:
	mov -1312(%RBP),%RSP
	add $-1560, %RSP
	mov -1304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7da3
	jmp uuid_00000000000c7da5
uuid_00000000000c7da3:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7d9d
	jmp uuid_00000000000c7d9f
uuid_00000000000c7d9d:
	push %RBP
	jmp uuid_00000000000c7d9a
	jmp uuid_00000000000c7d9c
uuid_00000000000c7d9a:
	push %RBP
	mov -1576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7d97
	jmp uuid_00000000000c7d99
uuid_00000000000c7d97:
	movb $1, -1648(%rbp)
uuid_00000000000c7d99:
	mov -1672(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c7d9c:
	mov -1664(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c7d9f:
	mov -1656(%RBP),%RSP
	add $-1680, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7da0
	jmp uuid_00000000000c7da2
uuid_00000000000c7da0:
	movb $1, -1208(%rbp)
uuid_00000000000c7da2:
	mov -1568(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c7da5:
	mov -1224(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c7da8:
	mov -1216(%RBP),%RSP
	add $-1680, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7dad
	push %RBP
	jmp uuid_00000000000c7daa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7da9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7dac
uuid_00000000000c7daa:
uuid_00000000000c7dac:
	mov -1688(%RBP),%RSP
	add $-1688, %RSP
	jmp uuid_00000000000c7daf
uuid_00000000000c7dad:
#call function maybe-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call maybe_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -304(%RBP), %RAX
	mov -1688(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -1560(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
#call function fragment::local-variable : Arrow<Cons<I64,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1696(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000c7daf:
	mov -1128(%RBP),%RSP
	add $-1696, %RSP
	jmp uuid_00000000000c7db2
uuid_00000000000c7db0:
	push %RBP
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7d7c
	jmp uuid_00000000000c7d7e
uuid_00000000000c7d7c:
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function compile-destructure-args : Arrow<Cons<Cons<Cons<Type,FContext>,AST>,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -304(%RBP), %RAX
	mov -1160(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function maybe-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call maybe_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -1168(%RBP), %RAX
	mov -1176(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -920(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
#call function fragment::local-variable : Arrow<Cons<I64,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1184(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000c7d7e:
	mov -1128(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000c7db2:
	mov -392(%RBP),%RSP
	add $-1184, %RSP
	subq $200, %rsp
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
compile_SB_expr_SB_direct_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c802b
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	mov -680(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8028
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7dba
	jmp uuid_00000000000c7dbc
uuid_00000000000c7dba:
	push %RBP
	jmp uuid_00000000000c7db7
	jmp uuid_00000000000c7db9
uuid_00000000000c7db7:
	push %RBP
	mov -696(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7db4
	jmp uuid_00000000000c7db6
uuid_00000000000c7db4:
	movb $1, -768(%rbp)
uuid_00000000000c7db6:
	mov -792(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c7db9:
	mov -784(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c7dbc:
	mov -776(%RBP),%RSP
	add $-800, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8025
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7dc3
	jmp uuid_00000000000c7dc5
uuid_00000000000c7dc3:
	push %RBP
	jmp uuid_00000000000c7dc0
	jmp uuid_00000000000c7dc2
uuid_00000000000c7dc0:
	push %RBP
	mov -816(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7dbd
	jmp uuid_00000000000c7dbf
uuid_00000000000c7dbd:
	movb $1, -888(%rbp)
uuid_00000000000c7dbf:
	mov -912(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c7dc2:
	mov -904(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c7dc5:
	mov -896(%RBP),%RSP
	add $-920, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8022
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -1000(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e2e
	jmp uuid_00000000000c7e30
uuid_00000000000c7e2e:
	push %RBP
	mov -992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1096(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e1c
	jmp uuid_00000000000c7e1e
uuid_00000000000c7e1c:
	push %RBP
	mov -1088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e13
	jmp uuid_00000000000c7e15
uuid_00000000000c7e13:
	push %RBP
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	jmp uuid_00000000000c7e10
	jmp uuid_00000000000c7e12
uuid_00000000000c7e10:
	movb $1, -1200(%rbp)
uuid_00000000000c7e12:
	mov -1216(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c7e15:
	mov -1208(%RBP),%RSP
	add $-1240, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e19
	jmp uuid_00000000000c7e1b
uuid_00000000000c7e19:
	push %RBP
	mov -1080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7e16
	jmp uuid_00000000000c7e18
uuid_00000000000c7e16:
	movb $1, -1104(%rbp)
uuid_00000000000c7e18:
	mov -1248(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c7e1b:
	mov -1120(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c7e1e:
	mov -1112(%RBP),%RSP
	add $-1320, %RSP
	mov -1104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e2b
	jmp uuid_00000000000c7e2d
uuid_00000000000c7e2b:
	push %RBP
	mov -984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e25
	jmp uuid_00000000000c7e27
uuid_00000000000c7e25:
	push %RBP
	jmp uuid_00000000000c7e22
	jmp uuid_00000000000c7e24
uuid_00000000000c7e22:
	push %RBP
	mov -1336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7e1f
	jmp uuid_00000000000c7e21
uuid_00000000000c7e1f:
	movb $1, -1408(%rbp)
uuid_00000000000c7e21:
	mov -1432(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c7e24:
	mov -1424(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c7e27:
	mov -1416(%RBP),%RSP
	add $-1440, %RSP
	mov -1408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e28
	jmp uuid_00000000000c7e2a
uuid_00000000000c7e28:
	movb $1, -1008(%rbp)
uuid_00000000000c7e2a:
	mov -1328(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c7e2d:
	mov -1024(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c7e30:
	mov -1016(%RBP),%RSP
	add $-1440, %RSP
	mov -1008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c801f
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -1520(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e49
	jmp uuid_00000000000c7e4b
uuid_00000000000c7e49:
	push %RBP
	mov -1512(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e37
	jmp uuid_00000000000c7e39
uuid_00000000000c7e37:
	push %RBP
	jmp uuid_00000000000c7e34
	jmp uuid_00000000000c7e36
uuid_00000000000c7e34:
	push %RBP
	mov -1552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7e31
	jmp uuid_00000000000c7e33
uuid_00000000000c7e31:
	movb $1, -1624(%rbp)
uuid_00000000000c7e33:
	mov -1648(%RBP),%RSP
	add $-1656, %RSP
uuid_00000000000c7e36:
	mov -1640(%RBP),%RSP
	add $-1656, %RSP
uuid_00000000000c7e39:
	mov -1632(%RBP),%RSP
	add $-1656, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e46
	jmp uuid_00000000000c7e48
uuid_00000000000c7e46:
	push %RBP
	mov -1504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1736(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e40
	jmp uuid_00000000000c7e42
uuid_00000000000c7e40:
	push %RBP
	jmp uuid_00000000000c7e3d
	jmp uuid_00000000000c7e3f
uuid_00000000000c7e3d:
	push %RBP
	mov -1672(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1776(%rbp)
	pushq $uuid_00000000000c4e1f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7e3a
	jmp uuid_00000000000c7e3c
uuid_00000000000c7e3a:
	movb $1, -1744(%rbp)
uuid_00000000000c7e3c:
	mov -1768(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c7e3f:
	mov -1760(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c7e42:
	mov -1752(%RBP),%RSP
	add $-1776, %RSP
	mov -1744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e43
	jmp uuid_00000000000c7e45
uuid_00000000000c7e43:
	movb $1, -1528(%rbp)
uuid_00000000000c7e45:
	mov -1664(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c7e48:
	mov -1544(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c7e4b:
	mov -1536(%RBP),%RSP
	add $-1776, %RSP
	mov -1528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c801c
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -1856(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e64
	jmp uuid_00000000000c7e66
uuid_00000000000c7e64:
	push %RBP
	mov -1848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1952(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e52
	jmp uuid_00000000000c7e54
uuid_00000000000c7e52:
	push %RBP
	jmp uuid_00000000000c7e4f
	jmp uuid_00000000000c7e51
uuid_00000000000c7e4f:
	push %RBP
	mov -1888(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7e4c
	jmp uuid_00000000000c7e4e
uuid_00000000000c7e4c:
	movb $1, -1960(%rbp)
uuid_00000000000c7e4e:
	mov -1984(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000c7e51:
	mov -1976(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000c7e54:
	mov -1968(%RBP),%RSP
	add $-1992, %RSP
	mov -1960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e61
	jmp uuid_00000000000c7e63
uuid_00000000000c7e61:
	push %RBP
	mov -1840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2072(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e5b
	jmp uuid_00000000000c7e5d
uuid_00000000000c7e5b:
	push %RBP
	jmp uuid_00000000000c7e58
	jmp uuid_00000000000c7e5a
uuid_00000000000c7e58:
	push %RBP
	mov -2008(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2112(%rbp)
	pushq $uuid_00000000000c4e3c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7e55
	jmp uuid_00000000000c7e57
uuid_00000000000c7e55:
	movb $1, -2080(%rbp)
uuid_00000000000c7e57:
	mov -2104(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c7e5a:
	mov -2096(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c7e5d:
	mov -2088(%RBP),%RSP
	add $-2112, %RSP
	mov -2080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e5e
	jmp uuid_00000000000c7e60
uuid_00000000000c7e5e:
	movb $1, -1864(%rbp)
uuid_00000000000c7e60:
	mov -2000(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c7e63:
	mov -1880(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c7e66:
	mov -1872(%RBP),%RSP
	add $-2112, %RSP
	mov -1864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8019
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -2192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e76
	jmp uuid_00000000000c7e78
uuid_00000000000c7e76:
	push %RBP
	mov -2184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7e73
	jmp uuid_00000000000c7e75
uuid_00000000000c7e73:
	push %RBP
	mov -2176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e6d
	jmp uuid_00000000000c7e6f
uuid_00000000000c7e6d:
	push %RBP
	jmp uuid_00000000000c7e6a
	jmp uuid_00000000000c7e6c
uuid_00000000000c7e6a:
	push %RBP
	mov -2304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2408(%rbp)
	pushq $uuid_00000000000c4ee7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7e67
	jmp uuid_00000000000c7e69
uuid_00000000000c7e67:
	movb $1, -2376(%rbp)
uuid_00000000000c7e69:
	mov -2400(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000c7e6c:
	mov -2392(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000c7e6f:
	mov -2384(%RBP),%RSP
	add $-2408, %RSP
	mov -2376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e70
	jmp uuid_00000000000c7e72
uuid_00000000000c7e70:
	movb $1, -2200(%rbp)
uuid_00000000000c7e72:
	mov -2296(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000c7e75:
	mov -2216(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000c7e78:
	mov -2208(%RBP),%RSP
	add $-2408, %RSP
	mov -2200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8016
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -2488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e88
	jmp uuid_00000000000c7e8a
uuid_00000000000c7e88:
	push %RBP
	mov -2480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7e85
	jmp uuid_00000000000c7e87
uuid_00000000000c7e85:
	push %RBP
	mov -2472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e7f
	jmp uuid_00000000000c7e81
uuid_00000000000c7e7f:
	push %RBP
	jmp uuid_00000000000c7e7c
	jmp uuid_00000000000c7e7e
uuid_00000000000c7e7c:
	push %RBP
	mov -2600(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2704(%rbp)
	pushq $uuid_00000000000c4efa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7e79
	jmp uuid_00000000000c7e7b
uuid_00000000000c7e79:
	movb $1, -2672(%rbp)
uuid_00000000000c7e7b:
	mov -2696(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c7e7e:
	mov -2688(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c7e81:
	mov -2680(%RBP),%RSP
	add $-2704, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e82
	jmp uuid_00000000000c7e84
uuid_00000000000c7e82:
	movb $1, -2496(%rbp)
uuid_00000000000c7e84:
	mov -2592(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c7e87:
	mov -2512(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c7e8a:
	mov -2504(%RBP),%RSP
	add $-2704, %RSP
	mov -2496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8013
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -2784(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ee0
	jmp uuid_00000000000c7ee2
uuid_00000000000c7ee0:
	push %RBP
	mov -2776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2880(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ece
	jmp uuid_00000000000c7ed0
uuid_00000000000c7ece:
	push %RBP
	pushq -2856(%RBP)
	pushq -2864(%RBP)
	pushq -2872(%RBP)
	jmp uuid_00000000000c7ecb
	jmp uuid_00000000000c7ecd
uuid_00000000000c7ecb:
	movb $1, -2888(%rbp)
uuid_00000000000c7ecd:
	mov -2904(%RBP),%RSP
	add $-2928, %RSP
uuid_00000000000c7ed0:
	mov -2896(%RBP),%RSP
	add $-2928, %RSP
	mov -2888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7edd
	jmp uuid_00000000000c7edf
uuid_00000000000c7edd:
	push %RBP
	mov -2768(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3008(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ed7
	jmp uuid_00000000000c7ed9
uuid_00000000000c7ed7:
	push %RBP
	jmp uuid_00000000000c7ed4
	jmp uuid_00000000000c7ed6
uuid_00000000000c7ed4:
	push %RBP
	mov -2944(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3048(%rbp)
	pushq $uuid_00000000000c4ec7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7ed1
	jmp uuid_00000000000c7ed3
uuid_00000000000c7ed1:
	movb $1, -3016(%rbp)
uuid_00000000000c7ed3:
	mov -3040(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000c7ed6:
	mov -3032(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000c7ed9:
	mov -3024(%RBP),%RSP
	add $-3048, %RSP
	mov -3016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7eda
	jmp uuid_00000000000c7edc
uuid_00000000000c7eda:
	movb $1, -2792(%rbp)
uuid_00000000000c7edc:
	mov -2936(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000c7edf:
	mov -2808(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000c7ee2:
	mov -2800(%RBP),%RSP
	add $-3048, %RSP
	mov -2792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8010
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -3128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f01
	jmp uuid_00000000000c7f03
uuid_00000000000c7f01:
	push %RBP
	mov -3120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3224(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7eef
	jmp uuid_00000000000c7ef1
uuid_00000000000c7eef:
	push %RBP
	mov -3216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3320(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ee6
	jmp uuid_00000000000c7ee8
uuid_00000000000c7ee6:
	push %RBP
	pushq -3296(%RBP)
	pushq -3304(%RBP)
	pushq -3312(%RBP)
	jmp uuid_00000000000c7ee3
	jmp uuid_00000000000c7ee5
uuid_00000000000c7ee3:
	movb $1, -3328(%rbp)
uuid_00000000000c7ee5:
	mov -3344(%RBP),%RSP
	add $-3368, %RSP
uuid_00000000000c7ee8:
	mov -3336(%RBP),%RSP
	add $-3368, %RSP
	mov -3328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7eec
	jmp uuid_00000000000c7eee
uuid_00000000000c7eec:
	push %RBP
	mov -3208(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7ee9
	jmp uuid_00000000000c7eeb
uuid_00000000000c7ee9:
	movb $1, -3232(%rbp)
uuid_00000000000c7eeb:
	mov -3376(%RBP),%RSP
	add $-3448, %RSP
uuid_00000000000c7eee:
	mov -3248(%RBP),%RSP
	add $-3448, %RSP
uuid_00000000000c7ef1:
	mov -3240(%RBP),%RSP
	add $-3448, %RSP
	mov -3232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7efe
	jmp uuid_00000000000c7f00
uuid_00000000000c7efe:
	push %RBP
	mov -3112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3528(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ef8
	jmp uuid_00000000000c7efa
uuid_00000000000c7ef8:
	push %RBP
	jmp uuid_00000000000c7ef5
	jmp uuid_00000000000c7ef7
uuid_00000000000c7ef5:
	push %RBP
	mov -3464(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3568(%rbp)
	pushq $uuid_00000000000c4bba
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7ef2
	jmp uuid_00000000000c7ef4
uuid_00000000000c7ef2:
	movb $1, -3536(%rbp)
uuid_00000000000c7ef4:
	mov -3560(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000c7ef7:
	mov -3552(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000c7efa:
	mov -3544(%RBP),%RSP
	add $-3568, %RSP
	mov -3536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7efb
	jmp uuid_00000000000c7efd
uuid_00000000000c7efb:
	movb $1, -3136(%rbp)
uuid_00000000000c7efd:
	mov -3456(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000c7f00:
	mov -3152(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000c7f03:
	mov -3144(%RBP),%RSP
	add $-3568, %RSP
	mov -3136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c800d
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -3648(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f2a
	jmp uuid_00000000000c7f2c
uuid_00000000000c7f2a:
	push %RBP
	mov -3640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7f27
	jmp uuid_00000000000c7f29
uuid_00000000000c7f27:
	push %RBP
	mov -3632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3824(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f21
	jmp uuid_00000000000c7f23
uuid_00000000000c7f21:
	push %RBP
	mov -3816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7f1e
	jmp uuid_00000000000c7f20
uuid_00000000000c7f1e:
	push %RBP
	mov -3808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4000(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f18
	jmp uuid_00000000000c7f1a
uuid_00000000000c7f18:
	push %RBP
	mov -3992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7f15
	jmp uuid_00000000000c7f17
uuid_00000000000c7f15:
	push %RBP
	mov -3984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4176(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f0f
	jmp uuid_00000000000c7f11
uuid_00000000000c7f0f:
	push %RBP
	jmp uuid_00000000000c7f0c
	jmp uuid_00000000000c7f0e
uuid_00000000000c7f0c:
	push %RBP
	mov -4112(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4216(%rbp)
	pushq $uuid_00000000000c4e4f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7f09
	jmp uuid_00000000000c7f0b
uuid_00000000000c7f09:
	movb $1, -4184(%rbp)
uuid_00000000000c7f0b:
	mov -4208(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c7f0e:
	mov -4200(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c7f11:
	mov -4192(%RBP),%RSP
	add $-4216, %RSP
	mov -4184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f12
	jmp uuid_00000000000c7f14
uuid_00000000000c7f12:
	movb $1, -4008(%rbp)
uuid_00000000000c7f14:
	mov -4104(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c7f17:
	mov -4024(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c7f1a:
	mov -4016(%RBP),%RSP
	add $-4216, %RSP
	mov -4008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f1b
	jmp uuid_00000000000c7f1d
uuid_00000000000c7f1b:
	movb $1, -3832(%rbp)
uuid_00000000000c7f1d:
	mov -3928(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c7f20:
	mov -3848(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c7f23:
	mov -3840(%RBP),%RSP
	add $-4216, %RSP
	mov -3832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f24
	jmp uuid_00000000000c7f26
uuid_00000000000c7f24:
	movb $1, -3656(%rbp)
uuid_00000000000c7f26:
	mov -3752(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c7f29:
	mov -3672(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c7f2c:
	mov -3664(%RBP),%RSP
	add $-4216, %RSP
	mov -3656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c800a
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -4296(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f58
	jmp uuid_00000000000c7f5a
uuid_00000000000c7f58:
	push %RBP
	mov -4288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7f55
	jmp uuid_00000000000c7f57
uuid_00000000000c7f55:
	push %RBP
	mov -4280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4472(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f4f
	jmp uuid_00000000000c7f51
uuid_00000000000c7f4f:
	push %RBP
	pushq -4448(%RBP)
	pushq -4456(%RBP)
	pushq -4464(%RBP)
	jmp uuid_00000000000c7f4c
	jmp uuid_00000000000c7f4e
uuid_00000000000c7f4c:
	push %RBP
	mov -4440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4600(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f49
	jmp uuid_00000000000c7f4b
uuid_00000000000c7f49:
	push %RBP
	mov -4432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq $0
	push %RBP
	mov -4752(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f43
	jmp uuid_00000000000c7f45
uuid_00000000000c7f43:
	push %RBP
	jmp uuid_00000000000c7f40
	jmp uuid_00000000000c7f42
uuid_00000000000c7f40:
	push %RBP
	mov -4688(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7f3d
	jmp uuid_00000000000c7f3f
uuid_00000000000c7f3d:
	movb $1, -4760(%rbp)
uuid_00000000000c7f3f:
	mov -4784(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c7f42:
	mov -4776(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c7f45:
	mov -4768(%RBP),%RSP
	add $-4792, %RSP
	mov -4760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f46
	jmp uuid_00000000000c7f48
uuid_00000000000c7f46:
	movb $1, -4480(%rbp)
uuid_00000000000c7f48:
	mov -4608(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c7f4b:
	mov -4528(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c7f4e:
	mov -4496(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c7f51:
	mov -4488(%RBP),%RSP
	add $-4792, %RSP
	mov -4480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f52
	jmp uuid_00000000000c7f54
uuid_00000000000c7f52:
	movb $1, -4304(%rbp)
uuid_00000000000c7f54:
	mov -4400(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c7f57:
	mov -4320(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c7f5a:
	mov -4312(%RBP),%RSP
	add $-4792, %RSP
	mov -4304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8007
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -4872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f87
	jmp uuid_00000000000c7f89
uuid_00000000000c7f87:
	push %RBP
	mov -4864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7f84
	jmp uuid_00000000000c7f86
uuid_00000000000c7f84:
	push %RBP
	mov -4856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7f81
	jmp uuid_00000000000c7f83
uuid_00000000000c7f81:
	movb $1, -4880(%rbp)
uuid_00000000000c7f83:
	mov -4976(%RBP),%RSP
	add $-5048, %RSP
uuid_00000000000c7f86:
	mov -4896(%RBP),%RSP
	add $-5048, %RSP
uuid_00000000000c7f89:
	mov -4888(%RBP),%RSP
	add $-5048, %RSP
	mov -4880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8004
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8003
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8006
uuid_00000000000c8004:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8000
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7ffd
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -280(%rbp)
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -5184(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov -5152(%RBP), %RAX
	push %RAX
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c7fff
uuid_00000000000c7ffd:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -280(%rbp)
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -5184(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov -5152(%RBP), %RAX
	push %RAX
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7fff:
	mov -5064(%RBP),%RSP
	add $-5368, %RSP
	jmp uuid_00000000000c8002
uuid_00000000000c8000:
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -5208(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f90
	jmp uuid_00000000000c7f92
uuid_00000000000c7f90:
	push %RBP
	jmp uuid_00000000000c7f8d
	jmp uuid_00000000000c7f8f
uuid_00000000000c7f8d:
	push %RBP
	mov -5144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7f8a
	jmp uuid_00000000000c7f8c
uuid_00000000000c7f8a:
	movb $1, -5216(%rbp)
uuid_00000000000c7f8c:
	mov -5240(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000c7f8f:
	mov -5232(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000c7f92:
	mov -5224(%RBP),%RSP
	add $-5248, %RSP
	mov -5216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ffa
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -5328(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fba
	jmp uuid_00000000000c7fbc
uuid_00000000000c7fba:
	push %RBP
	mov -5320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5424(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fa8
	jmp uuid_00000000000c7faa
uuid_00000000000c7fa8:
	push %RBP
	mov -5416(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5520(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f96
	jmp uuid_00000000000c7f98
uuid_00000000000c7f96:
	push %RBP
	pushq -5496(%RBP)
	pushq -5504(%RBP)
	pushq -5512(%RBP)
	jmp uuid_00000000000c7f93
	jmp uuid_00000000000c7f95
uuid_00000000000c7f93:
	movb $1, -5528(%rbp)
uuid_00000000000c7f95:
	mov -5544(%RBP),%RSP
	add $-5568, %RSP
uuid_00000000000c7f98:
	mov -5536(%RBP),%RSP
	add $-5568, %RSP
	mov -5528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fa5
	jmp uuid_00000000000c7fa7
uuid_00000000000c7fa5:
	push %RBP
	mov -5408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5648(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f9f
	jmp uuid_00000000000c7fa1
uuid_00000000000c7f9f:
	push %RBP
	jmp uuid_00000000000c7f9c
	jmp uuid_00000000000c7f9e
uuid_00000000000c7f9c:
	push %RBP
	mov -5584(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7f99
	jmp uuid_00000000000c7f9b
uuid_00000000000c7f99:
	movb $1, -5656(%rbp)
uuid_00000000000c7f9b:
	mov -5680(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000c7f9e:
	mov -5672(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000c7fa1:
	mov -5664(%RBP),%RSP
	add $-5688, %RSP
	mov -5656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fa2
	jmp uuid_00000000000c7fa4
uuid_00000000000c7fa2:
	movb $1, -5432(%rbp)
uuid_00000000000c7fa4:
	mov -5576(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000c7fa7:
	mov -5448(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000c7faa:
	mov -5440(%RBP),%RSP
	add $-5688, %RSP
	mov -5432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fb7
	jmp uuid_00000000000c7fb9
uuid_00000000000c7fb7:
	push %RBP
	mov -5312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5768(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fb1
	jmp uuid_00000000000c7fb3
uuid_00000000000c7fb1:
	push %RBP
	jmp uuid_00000000000c7fae
	jmp uuid_00000000000c7fb0
uuid_00000000000c7fae:
	push %RBP
	mov -5704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5808(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7fab
	jmp uuid_00000000000c7fad
uuid_00000000000c7fab:
	movb $1, -5776(%rbp)
uuid_00000000000c7fad:
	mov -5800(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000c7fb0:
	mov -5792(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000c7fb3:
	mov -5784(%RBP),%RSP
	add $-5808, %RSP
	mov -5776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fb4
	jmp uuid_00000000000c7fb6
uuid_00000000000c7fb4:
	movb $1, -5336(%rbp)
uuid_00000000000c7fb6:
	mov -5696(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000c7fb9:
	mov -5352(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000c7fbc:
	mov -5344(%RBP),%RSP
	add $-5808, %RSP
	mov -5336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ff7
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -5888(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fc3
	jmp uuid_00000000000c7fc5
uuid_00000000000c7fc3:
	push %RBP
	jmp uuid_00000000000c7fc0
	jmp uuid_00000000000c7fc2
uuid_00000000000c7fc0:
	push %RBP
	mov -5824(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7fbd
	jmp uuid_00000000000c7fbf
uuid_00000000000c7fbd:
	movb $1, -5896(%rbp)
uuid_00000000000c7fbf:
	mov -5920(%RBP),%RSP
	add $-5928, %RSP
uuid_00000000000c7fc2:
	mov -5912(%RBP),%RSP
	add $-5928, %RSP
uuid_00000000000c7fc5:
	mov -5904(%RBP),%RSP
	add $-5928, %RSP
	mov -5896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ff4
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -6008(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fed
	jmp uuid_00000000000c7fef
uuid_00000000000c7fed:
	push %RBP
	mov -6000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6104(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fdb
	jmp uuid_00000000000c7fdd
uuid_00000000000c7fdb:
	push %RBP
	mov -6096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6200(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fc9
	jmp uuid_00000000000c7fcb
uuid_00000000000c7fc9:
	push %RBP
	pushq -6176(%RBP)
	pushq -6184(%RBP)
	pushq -6192(%RBP)
	jmp uuid_00000000000c7fc6
	jmp uuid_00000000000c7fc8
uuid_00000000000c7fc6:
	movb $1, -6208(%rbp)
uuid_00000000000c7fc8:
	mov -6224(%RBP),%RSP
	add $-6248, %RSP
uuid_00000000000c7fcb:
	mov -6216(%RBP),%RSP
	add $-6248, %RSP
	mov -6208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fd8
	jmp uuid_00000000000c7fda
uuid_00000000000c7fd8:
	push %RBP
	mov -6088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6328(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fd2
	jmp uuid_00000000000c7fd4
uuid_00000000000c7fd2:
	push %RBP
	jmp uuid_00000000000c7fcf
	jmp uuid_00000000000c7fd1
uuid_00000000000c7fcf:
	push %RBP
	mov -6264(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c7fcc
	jmp uuid_00000000000c7fce
uuid_00000000000c7fcc:
	movb $1, -6336(%rbp)
uuid_00000000000c7fce:
	mov -6360(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000c7fd1:
	mov -6352(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000c7fd4:
	mov -6344(%RBP),%RSP
	add $-6368, %RSP
	mov -6336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fd5
	jmp uuid_00000000000c7fd7
uuid_00000000000c7fd5:
	movb $1, -6112(%rbp)
uuid_00000000000c7fd7:
	mov -6256(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000c7fda:
	mov -6128(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000c7fdd:
	mov -6120(%RBP),%RSP
	add $-6368, %RSP
	mov -6112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fea
	jmp uuid_00000000000c7fec
uuid_00000000000c7fea:
	push %RBP
	mov -5992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6448(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fe4
	jmp uuid_00000000000c7fe6
uuid_00000000000c7fe4:
	push %RBP
	jmp uuid_00000000000c7fe1
	jmp uuid_00000000000c7fe3
uuid_00000000000c7fe1:
	push %RBP
	mov -6384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6488(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7fde
	jmp uuid_00000000000c7fe0
uuid_00000000000c7fde:
	movb $1, -6456(%rbp)
uuid_00000000000c7fe0:
	mov -6480(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000c7fe3:
	mov -6472(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000c7fe6:
	mov -6464(%RBP),%RSP
	add $-6488, %RSP
	mov -6456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7fe7
	jmp uuid_00000000000c7fe9
uuid_00000000000c7fe7:
	movb $1, -6016(%rbp)
uuid_00000000000c7fe9:
	mov -6376(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000c7fec:
	mov -6032(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000c7fef:
	mov -6024(%RBP),%RSP
	add $-6488, %RSP
	mov -6016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ff1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7ff0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7ff3
uuid_00000000000c7ff1:
#call function compile-constructor : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -6368(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_constructor_CL_ArrowFragmentConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7ff3:
	mov -5936(%RBP),%RSP
	add $-6488, %RSP
	jmp uuid_00000000000c7ff6
uuid_00000000000c7ff4:
#call function compile-constructor : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -5928(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_constructor_CL_ArrowFragmentConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7ff6:
	mov -5816(%RBP),%RSP
	add $-5928, %RSP
	jmp uuid_00000000000c7ff9
uuid_00000000000c7ff7:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -5688(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7ff9:
	mov -5256(%RBP),%RSP
	add $-5808, %RSP
	jmp uuid_00000000000c7ffc
uuid_00000000000c7ffa:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -5248(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7ffc:
	mov -5136(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000c8002:
	mov -5056(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000c8006:
	mov -4800(%RBP),%RSP
	add $-5248, %RSP
	jmp uuid_00000000000c8009
uuid_00000000000c8007:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -280(%RBP), %RAX
	mov -4824(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function fragment::local-variable : Arrow<Cons<I64,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4832(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7f7e
#call function compile-push-rvalue : Arrow<Cons<Cons<FContext,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	pushq $0
	pushq $0
	pushq $3
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq $0
	push %RBP
	mov -5168(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f71
	jmp uuid_00000000000c7f73
uuid_00000000000c7f71:
	push %RBP
	jmp uuid_00000000000c7f6e
	jmp uuid_00000000000c7f70
uuid_00000000000c7f6e:
	push %RBP
	mov -5152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5272(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f68
	jmp uuid_00000000000c7f6a
uuid_00000000000c7f68:
	push %RBP
	jmp uuid_00000000000c7f65
	jmp uuid_00000000000c7f67
uuid_00000000000c7f65:
	push %RBP
	jmp uuid_00000000000c7f62
	jmp uuid_00000000000c7f64
uuid_00000000000c7f62:
	push %RBP
	mov -5232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c7f5f
	jmp uuid_00000000000c7f61
uuid_00000000000c7f5f:
	movb $1, -5280(%rbp)
uuid_00000000000c7f61:
	mov -5312(%RBP),%RSP
	add $-5384, %RSP
uuid_00000000000c7f64:
	mov -5304(%RBP),%RSP
	add $-5384, %RSP
uuid_00000000000c7f67:
	mov -5296(%RBP),%RSP
	add $-5384, %RSP
uuid_00000000000c7f6a:
	mov -5288(%RBP),%RSP
	add $-5384, %RSP
	mov -5280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f6b
	jmp uuid_00000000000c7f6d
uuid_00000000000c7f6b:
	movb $1, -5176(%rbp)
uuid_00000000000c7f6d:
	mov -5200(%RBP),%RSP
	add $-5384, %RSP
uuid_00000000000c7f70:
	mov -5192(%RBP),%RSP
	add $-5384, %RSP
uuid_00000000000c7f73:
	mov -5184(%RBP),%RSP
	add $-5384, %RSP
	mov -5176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f78
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7f77
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7f7a
uuid_00000000000c7f78:
#call function fragment-context::lookup-soft : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c4f91
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	pushq -5376(%rbp)
	pushq -5384(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	pushq -5480(%RBP)
	pushq -5488(%RBP)
	pushq -5496(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7f74
	jmp uuid_00000000000c7f76
uuid_00000000000c7f74:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c4f91
	pushq $0
	pushq $0
	pushq $3
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	pushq -5376(%rbp)
	pushq -5384(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq -5672(%rbp)
	pushq -5680(%rbp)
	pushq -5688(%rbp)
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	pushq -5720(%rbp)
	pushq $uuid_00000000000c554e
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -5016(%RBP)
	popq -5008(%RBP)
	popq -5000(%RBP)
uuid_00000000000c7f76:
	mov -5568(%RBP),%RSP
	add $-5720, %RSP
uuid_00000000000c7f7a:
	mov -5096(%RBP),%RSP
	add $-5720, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c4f91
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c7f7b
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c7f7b
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c7f7c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4824(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c7f7d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c7f80
uuid_00000000000c7f7e:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c7f5b
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c7f5b
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $uuid_00000000000c4892
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $uuid_00000000000c74c2
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c6d83
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c7f5c
	pushq $2
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c7f5d
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $uuid_00000000000c7f5e
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7f80:
	mov -4992(%RBP),%RSP
	add $-4992, %RSP
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -4832(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8009:
	mov -4224(%RBP),%RSP
	add $-4992, %RSP
	jmp uuid_00000000000c800c
uuid_00000000000c800a:
	mov -280(%RBP), %RAX
	mov $-8, %R14
	addq %R14,%RAX
	push %RAX
#call function cc-blob : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c7f2d
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4224(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4344(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov -4312(%RBP), %RAX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	mov -4464(%RBP), %RAX
	push %RAX
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7f2e
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4496(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4464(%RBP), %RAX
	push %RAX
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -4528(%RBP)
	popq -4520(%RBP)
	popq -4512(%RBP)
	popq -4504(%RBP)
	popq -4496(%RBP)
	popq -4488(%RBP)
	popq -4480(%RBP)
	popq -4472(%RBP)
	popq -4464(%RBP)
	popq -4456(%RBP)
	popq -4448(%RBP)
	popq -4440(%RBP)
	popq -4432(%RBP)
	popq -4424(%RBP)
	popq -4416(%RBP)
	popq -4408(%RBP)
	popq -4400(%RBP)
	popq -4392(%RBP)
	popq -4384(%RBP)
	jmp uuid_00000000000c7f30
uuid_00000000000c7f2e:
uuid_00000000000c7f30:
	mov -4544(%RBP),%RSP
	add $-4544, %RSP
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4528(%RBP)
	popq -4520(%RBP)
	popq -4512(%RBP)
	popq -4504(%RBP)
	popq -4496(%RBP)
	popq -4488(%RBP)
	popq -4480(%RBP)
	popq -4472(%RBP)
	popq -4464(%RBP)
	popq -4456(%RBP)
	popq -4448(%RBP)
	popq -4440(%RBP)
	popq -4432(%RBP)
	popq -4424(%RBP)
	popq -4416(%RBP)
	popq -4408(%RBP)
	popq -4400(%RBP)
	popq -4392(%RBP)
	popq -4384(%RBP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4344(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov -4312(%RBP), %RAX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7f31
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4664(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4632(%RBP), %RAX
	push %RAX
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	pushq -4696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -4696(%RBP)
	popq -4688(%RBP)
	popq -4680(%RBP)
	popq -4672(%RBP)
	popq -4664(%RBP)
	popq -4656(%RBP)
	popq -4648(%RBP)
	popq -4640(%RBP)
	popq -4632(%RBP)
	popq -4624(%RBP)
	popq -4616(%RBP)
	popq -4608(%RBP)
	popq -4600(%RBP)
	popq -4592(%RBP)
	popq -4584(%RBP)
	popq -4576(%RBP)
	popq -4568(%RBP)
	popq -4560(%RBP)
	popq -4552(%RBP)
	jmp uuid_00000000000c7f33
uuid_00000000000c7f31:
uuid_00000000000c7f33:
	mov -4704(%RBP),%RSP
	add $-4704, %RSP
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	pushq -4696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4696(%RBP)
	popq -4688(%RBP)
	popq -4680(%RBP)
	popq -4672(%RBP)
	popq -4664(%RBP)
	popq -4656(%RBP)
	popq -4648(%RBP)
	popq -4640(%RBP)
	popq -4632(%RBP)
	popq -4624(%RBP)
	popq -4616(%RBP)
	popq -4608(%RBP)
	popq -4600(%RBP)
	popq -4592(%RBP)
	popq -4584(%RBP)
	popq -4576(%RBP)
	popq -4568(%RBP)
	popq -4560(%RBP)
	popq -4552(%RBP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq $uuid_00000000000c7f34
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4224(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -4856(%RBP)
	popq -4848(%RBP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
	popq -4712(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq $uuid_00000000000c7f35
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4536(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -4856(%RBP)
	popq -4848(%RBP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
	popq -4712(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq $uuid_00000000000c7f36
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -4856(%RBP)
	popq -4848(%RBP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
	popq -4712(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7f37
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4856(%RBP)
	popq -4848(%RBP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
	popq -4712(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c7f38
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7f37
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c4928
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c747e
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -4232(%rbp)
	pushq -4240(%rbp)
	pushq -4248(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -4312(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c7b4e
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c492b
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	pushq -4696(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d94
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d94
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d94
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7f37
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c747e
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c7f39
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -280(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov -4496(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -4536(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	push %RBP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7f3a
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c7f3c
uuid_00000000000c7f3a:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4f44
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7f3c:
	mov -4888(%RBP),%RSP
	add $-4888, %RSP
uuid_00000000000c800c:
	mov -3576(%RBP),%RSP
	add $-4888, %RSP
	jmp uuid_00000000000c800f
uuid_00000000000c800d:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -3384(%rbp)
	pushq -3392(%rbp)
	pushq -3400(%rbp)
	pushq -3408(%rbp)
	pushq -3416(%rbp)
	pushq -3424(%rbp)
	pushq -3432(%rbp)
	pushq -3440(%rbp)
	pushq -3448(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7f06
	jmp uuid_00000000000c7f08
uuid_00000000000c7f06:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c6d83
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c7f04
	pushq $2
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c7f05
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $uuid_00000000000c7651
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7f08:
	mov -3576(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000c800f:
	mov -3056(%RBP),%RSP
	add $-3576, %RSP
	jmp uuid_00000000000c8012
uuid_00000000000c8010:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3056(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5f22
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c5383
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a95
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fce
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4924
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -3064(%rbp)
	pushq -3072(%rbp)
	pushq -3080(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8012:
	mov -2712(%RBP),%RSP
	add $-3080, %RSP
	jmp uuid_00000000000c8015
uuid_00000000000c8013:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-array : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	mov %RBX, %RBP
	call is_SB_array_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7ec8
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c7eca
uuid_00000000000c7ec8:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq $uuid_00000000000c4ae9
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ea3
	jmp uuid_00000000000c7ea5
uuid_00000000000c7ea3:
	push %RBP
	mov -2784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e9a
	jmp uuid_00000000000c7e9c
uuid_00000000000c7e9a:
	push %RBP
	mov -2848(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2920(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e91
	jmp uuid_00000000000c7e93
uuid_00000000000c7e91:
	push %RBP
	mov -2912(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2984(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e8e
	jmp uuid_00000000000c7e90
uuid_00000000000c7e8e:
	push %RBP
	pushq -2888(%RBP)
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	mov -3016(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e8b
	jmp uuid_00000000000c7e8d
uuid_00000000000c7e8b:
	movb $1, -2928(%rbp)
uuid_00000000000c7e8d:
	mov -2992(%RBP),%RSP
	add $-3016, %RSP
uuid_00000000000c7e90:
	mov -2944(%RBP),%RSP
	add $-3016, %RSP
uuid_00000000000c7e93:
	mov -2936(%RBP),%RSP
	add $-3016, %RSP
	mov -2928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e97
	jmp uuid_00000000000c7e99
uuid_00000000000c7e97:
	push %RBP
	jmp uuid_00000000000c7e94
	jmp uuid_00000000000c7e96
uuid_00000000000c7e94:
	movb $1, -2864(%rbp)
uuid_00000000000c7e96:
	mov -3024(%RBP),%RSP
	add $-3024, %RSP
uuid_00000000000c7e99:
	mov -2880(%RBP),%RSP
	add $-3024, %RSP
uuid_00000000000c7e9c:
	mov -2872(%RBP),%RSP
	add $-3024, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ea0
	jmp uuid_00000000000c7ea2
uuid_00000000000c7ea0:
	push %RBP
	mov -2776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3040(%rbp)
	pushq $uuid_00000000000c4ae9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7e9d
	jmp uuid_00000000000c7e9f
uuid_00000000000c7e9d:
	movb $1, -2800(%rbp)
uuid_00000000000c7e9f:
	mov -3032(%RBP),%RSP
	add $-3040, %RSP
uuid_00000000000c7ea2:
	mov -2816(%RBP),%RSP
	add $-3040, %RSP
uuid_00000000000c7ea5:
	mov -2808(%RBP),%RSP
	add $-3040, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ec5
	push %RBP
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq $0
	push %RBP
	mov -3072(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ebe
	jmp uuid_00000000000c7ec0
uuid_00000000000c7ebe:
	push %RBP
	mov -3064(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7eb5
	jmp uuid_00000000000c7eb7
uuid_00000000000c7eb5:
	push %RBP
	mov -3128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3200(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7eac
	jmp uuid_00000000000c7eae
uuid_00000000000c7eac:
	push %RBP
	mov -3192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ea9
	jmp uuid_00000000000c7eab
uuid_00000000000c7ea9:
	push %RBP
	pushq -3168(%RBP)
	pushq -3176(%RBP)
	pushq -3184(%RBP)
	jmp uuid_00000000000c7ea6
	jmp uuid_00000000000c7ea8
uuid_00000000000c7ea6:
	movb $1, -3208(%rbp)
uuid_00000000000c7ea8:
	mov -3272(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c7eab:
	mov -3224(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c7eae:
	mov -3216(%RBP),%RSP
	add $-3296, %RSP
	mov -3208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7eb2
	jmp uuid_00000000000c7eb4
uuid_00000000000c7eb2:
	push %RBP
	pushq -3104(%RBP)
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	mov -3328(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c7eaf
	jmp uuid_00000000000c7eb1
uuid_00000000000c7eaf:
	movb $1, -3144(%rbp)
uuid_00000000000c7eb1:
	mov -3304(%RBP),%RSP
	add $-3328, %RSP
uuid_00000000000c7eb4:
	mov -3160(%RBP),%RSP
	add $-3328, %RSP
uuid_00000000000c7eb7:
	mov -3152(%RBP),%RSP
	add $-3328, %RSP
	mov -3144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ebb
	jmp uuid_00000000000c7ebd
uuid_00000000000c7ebb:
	push %RBP
	mov -3056(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3344(%rbp)
	pushq $uuid_00000000000c4ae9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7eb8
	jmp uuid_00000000000c7eba
uuid_00000000000c7eb8:
	movb $1, -3080(%rbp)
uuid_00000000000c7eba:
	mov -3336(%RBP),%RSP
	add $-3344, %RSP
uuid_00000000000c7ebd:
	mov -3096(%RBP),%RSP
	add $-3344, %RSP
uuid_00000000000c7ec0:
	mov -3088(%RBP),%RSP
	add $-3344, %RSP
	mov -3080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7ec2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7ec1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7ec4
uuid_00000000000c7ec2:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c4f43
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4f44
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -280(%RBP), %RAX
	subq %R14,%RAX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -3352(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7ec4:
	mov -3048(%RBP),%RSP
	add $-3352, %RSP
	jmp uuid_00000000000c7ec7
uuid_00000000000c7ec5:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7ec7:
	mov -2768(%RBP),%RSP
	add $-3040, %RSP
uuid_00000000000c7eca:
	mov -2736(%RBP),%RSP
	add $-3040, %RSP
uuid_00000000000c8015:
	mov -2416(%RBP),%RSP
	add $-3040, %RSP
	jmp uuid_00000000000c8018
uuid_00000000000c8016:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -280(%rbp)
	pushq $2
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8018:
	mov -2120(%RBP),%RSP
	add $-2408, %RSP
	jmp uuid_00000000000c801b
uuid_00000000000c8019:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1992(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4e32
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4bce
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c554e
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c801b:
	mov -1784(%RBP),%RSP
	add $-2288, %RSP
	jmp uuid_00000000000c801e
uuid_00000000000c801c:
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1656(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4e32
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function fragment::label : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_label_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c801e:
	mov -1448(%RBP),%RSP
	add $-1776, %RSP
	jmp uuid_00000000000c8021
uuid_00000000000c801f:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8021:
	mov -928(%RBP),%RSP
	add $-1440, %RSP
	jmp uuid_00000000000c8024
uuid_00000000000c8022:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7e0d
	pushq $0
	push %RBP
#call function is-reg8 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7dc6
	jmp uuid_00000000000c7dc8
uuid_00000000000c7dc6:
	movb $1, -960(%rbp)
uuid_00000000000c7dc8:
	mov -968(%RBP),%RSP
	add $-968, %RSP
	push %RBP
#call function is-reg16 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7dc9
	jmp uuid_00000000000c7dcb
uuid_00000000000c7dc9:
	movb $1, -960(%rbp)
uuid_00000000000c7dcb:
	mov -976(%RBP),%RSP
	add $-976, %RSP
	push %RBP
#call function is-reg32 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7dcc
	jmp uuid_00000000000c7dce
uuid_00000000000c7dcc:
	movb $1, -960(%rbp)
uuid_00000000000c7dce:
	mov -984(%RBP),%RSP
	add $-984, %RSP
	push %RBP
#call function is-reg64 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7dcf
	jmp uuid_00000000000c7dd1
uuid_00000000000c7dcf:
	movb $1, -960(%rbp)
uuid_00000000000c7dd1:
	mov -992(%RBP),%RSP
	add $-992, %RSP
	push %RBP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c7e0a
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function class-of-tag : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call class_SB_of_SB_tag_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7e07
	pushq -920(%rbp)
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq $uuid_00000000000c7dd2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7e01
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq $uuid_00000000000c7dd3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7dfe
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq $uuid_00000000000c7dd4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7dfb
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq $uuid_00000000000c4b81
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7df8
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq $uuid_00000000000c7dd6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7df5
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq $uuid_00000000000c7dd8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7df2
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1128(%rbp)
	pushq $uuid_00000000000c7dda
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7def
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq $uuid_00000000000c7ddc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7dec
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq $uuid_00000000000c7dde
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7de9
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq $uuid_00000000000c7de0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7de6
	push %RBP
	jmp uuid_00000000000c7de3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c7de2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c7de5
uuid_00000000000c7de3:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7de5:
	mov -1184(%RBP),%RSP
	add $-1184, %RSP
	jmp uuid_00000000000c7de8
uuid_00000000000c7de6:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7de1
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7de8:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
	jmp uuid_00000000000c7deb
uuid_00000000000c7de9:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7ddf
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7deb:
	mov -1152(%RBP),%RSP
	add $-1160, %RSP
	jmp uuid_00000000000c7dee
uuid_00000000000c7dec:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7ddd
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7dee:
	mov -1136(%RBP),%RSP
	add $-1144, %RSP
	jmp uuid_00000000000c7df1
uuid_00000000000c7def:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7ddb
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7df1:
	mov -1120(%RBP),%RSP
	add $-1128, %RSP
	jmp uuid_00000000000c7df4
uuid_00000000000c7df2:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7dd9
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7df4:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000c7df7
uuid_00000000000c7df5:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7dd7
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7df7:
	mov -1088(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000c7dfa
uuid_00000000000c7df8:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7dd5
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7dfa:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000c7dfd
uuid_00000000000c7dfb:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4925
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7dfd:
	mov -1056(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000c7e00
uuid_00000000000c7dfe:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48e4
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7e00:
	mov -1040(%RBP),%RSP
	add $-1048, %RSP
	jmp uuid_00000000000c7e03
uuid_00000000000c7e01:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c491d
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7e03:
	mov -1024(%RBP),%RSP
	add $-1032, %RSP
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c7e04
	jmp uuid_00000000000c7e06
uuid_00000000000c7e04:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c6d83
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4891
	pushq $2
	pushq $0
	pushq -920(%rbp)
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000c4893
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7e06:
	mov -1040(%RBP),%RSP
	add $-1040, %RSP
	jmp uuid_00000000000c7e09
uuid_00000000000c7e07:
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c554e
#call function close : Arrow<S+CaseNumber<3>,Array<S+CaseNumber<3>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SCaseNumber3SCaseNumber3
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S+CaseNumber<3>,Array<S+CaseNumber<3>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SCaseNumber3SCaseNumber3
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7e09:
	mov -1008(%RBP),%RSP
	add $-1016, %RSP
	jmp uuid_00000000000c7e0c
uuid_00000000000c7e0a:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7e0c:
	mov -1000(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000c7e0f
uuid_00000000000c7e0d:
#call function compile-declare-cstring : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call compile_SB_declare_SB_cstring_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c7e0f:
	mov -952(%RBP),%RSP
	add $-952, %RSP
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8024:
	mov -808(%RBP),%RSP
	add $-952, %RSP
	jmp uuid_00000000000c8027
uuid_00000000000c8025:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -800(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8027:
	mov -688(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000c802a
uuid_00000000000c8028:
uuid_00000000000c802a:
	mov -608(%RBP),%RSP
	add $-680, %RSP
	jmp uuid_00000000000c802d
uuid_00000000000c802b:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c6d83
	pushq $0
	pushq $uuid_00000000000c7db3
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c802d:
	mov -528(%RBP),%RSP
	add $-600, %RSP
	subq $152, %rsp
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -288(%rbp)
	push %RBP
	pushq -456(%rbp)
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8032
	push %RBP
	jmp uuid_00000000000c802f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c802e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8031
uuid_00000000000c802f:
#call function compile-expr-direct : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_expr_SB_direct_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8031:
	mov -480(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000c8034
uuid_00000000000c8032:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c5010
	pushq $0
	pushq $0
	pushq $3
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8034:
	mov -464(%RBP),%RSP
	add $-472, %RSP
	subq $152, %rsp
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
compile_SB_global_CL_ArrowNilConsASTConsStringFContext:
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %r15
	pushq 0(%r15)
	push %RBP
	pushq -296(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c803c
	push %RBP
	pushq -296(%rbp)
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8039
	push %RBP
	pushq -296(%rbp)
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8036
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8035
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8038
uuid_00000000000c8036:
#call function compile-global-gnu : Arrow<Cons<Cons<FContext,String>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_global_SB_gnu_CL_ArrowNilConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c8038:
	mov -336(%RBP),%RSP
	add $-344, %RSP
	jmp uuid_00000000000c803b
uuid_00000000000c8039:
#call function compile-global-blob : Arrow<Cons<Cons<FContext,String>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_global_SB_blob_CL_ArrowNilConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c803b:
	mov -320(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000c803e
uuid_00000000000c803c:
#call function compile-global-c : Arrow<Cons<Cons<FContext,String>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_global_SB_c_CL_ArrowNilConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c803e:
	mov -304(%RBP),%RSP
	add $-312, %RSP
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_global_SB_c_CL_ArrowNilConsASTConsStringFContext:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8048
	jmp uuid_00000000000c804a
uuid_00000000000c8048:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c8045
	jmp uuid_00000000000c8047
uuid_00000000000c8045:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8042
	jmp uuid_00000000000c8044
uuid_00000000000c8042:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c803f
	jmp uuid_00000000000c8041
uuid_00000000000c803f:
	movb $1, -472(%rbp)
uuid_00000000000c8041:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c8044:
	mov -520(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c8047:
	mov -488(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c804a:
	mov -480(%RBP),%RSP
	add $-672, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c807a
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8073
	jmp uuid_00000000000c8075
uuid_00000000000c8073:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8061
	jmp uuid_00000000000c8063
uuid_00000000000c8061:
	push %RBP
	mov -840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8058
	jmp uuid_00000000000c805a
uuid_00000000000c8058:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000c8055
	jmp uuid_00000000000c8057
uuid_00000000000c8055:
	movb $1, -952(%rbp)
uuid_00000000000c8057:
	mov -968(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c805a:
	mov -960(%RBP),%RSP
	add $-992, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c805e
	jmp uuid_00000000000c8060
uuid_00000000000c805e:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c805b
	jmp uuid_00000000000c805d
uuid_00000000000c805b:
	movb $1, -856(%rbp)
uuid_00000000000c805d:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c8060:
	mov -872(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c8063:
	mov -864(%RBP),%RSP
	add $-1072, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8070
	jmp uuid_00000000000c8072
uuid_00000000000c8070:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c806a
	jmp uuid_00000000000c806c
uuid_00000000000c806a:
	push %RBP
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	jmp uuid_00000000000c8067
	jmp uuid_00000000000c8069
uuid_00000000000c8067:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8064
	jmp uuid_00000000000c8066
uuid_00000000000c8064:
	movb $1, -1160(%rbp)
uuid_00000000000c8066:
	mov -1240(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c8069:
	mov -1176(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c806c:
	mov -1168(%RBP),%RSP
	add $-1248, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c806d
	jmp uuid_00000000000c806f
uuid_00000000000c806d:
	movb $1, -760(%rbp)
uuid_00000000000c806f:
	mov -1080(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c8072:
	mov -776(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c8075:
	mov -768(%RBP),%RSP
	add $-1248, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8077
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8076
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8079
uuid_00000000000c8077:
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq $0
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4892
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -1280(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c7f5d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c74c2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
uuid_00000000000c8079:
	mov -680(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000c807c
uuid_00000000000c807a:
	push %RBP
#call function is-ffi : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call is_SB_ffi_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	push %RAX
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8052
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function compile-destructure-args : Arrow<Cons<Cons<Cons<Type,FContext>,AST>,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq $0
	mov %RBX, %RBP
	call compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $uuid_00000000000c804b
	pushq $0
	pushq $0
	pushq $3
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq $uuid_00000000000c7f5b
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $0
	pushq $3
	pushq $uuid_00000000000c6d7d
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c6d7d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c804c
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -944(%rbp)
	jmp uuid_00000000000c804e
uuid_00000000000c804c:
uuid_00000000000c804e:
	mov -952(%RBP),%RSP
	add $-952, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4892
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -944(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4891
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-c-function-args : Arrow<Cons<FContext,AST>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_function_SB_args_CL_ArrowSConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -304(%RSP)
	push -304(%RSP)
	push -304(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c804f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4892
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -944(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4891
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-c-function-args : Arrow<Cons<FContext,AST>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_function_SB_args_CL_ArrowSConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -304(%RSP)
	push -304(%RSP)
	push -304(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c8050
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c8051
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_text_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	jmp uuid_00000000000c8054
uuid_00000000000c8052:
uuid_00000000000c8054:
	mov -680(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000c807c:
	mov -392(%RBP),%RSP
	add $-680, %RSP
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_global_SB_blob_CL_ArrowNilConsASTConsStringFContext:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c807d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_global_SB_gnu_CL_ArrowNilConsASTConsStringFContext:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8087
	jmp uuid_00000000000c8089
uuid_00000000000c8087:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c8084
	jmp uuid_00000000000c8086
uuid_00000000000c8084:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8081
	jmp uuid_00000000000c8083
uuid_00000000000c8081:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c807e
	jmp uuid_00000000000c8080
uuid_00000000000c807e:
	movb $1, -472(%rbp)
uuid_00000000000c8080:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c8083:
	mov -520(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c8086:
	mov -488(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c8089:
	mov -480(%RBP),%RSP
	add $-672, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c80cd
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c80c5
	jmp uuid_00000000000c80c7
uuid_00000000000c80c5:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c80b3
	jmp uuid_00000000000c80b5
uuid_00000000000c80b3:
	push %RBP
	mov -840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c80aa
	jmp uuid_00000000000c80ac
uuid_00000000000c80aa:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000c80a7
	jmp uuid_00000000000c80a9
uuid_00000000000c80a7:
	movb $1, -952(%rbp)
uuid_00000000000c80a9:
	mov -968(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c80ac:
	mov -960(%RBP),%RSP
	add $-992, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c80b0
	jmp uuid_00000000000c80b2
uuid_00000000000c80b0:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c80ad
	jmp uuid_00000000000c80af
uuid_00000000000c80ad:
	movb $1, -856(%rbp)
uuid_00000000000c80af:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c80b2:
	mov -872(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c80b5:
	mov -864(%RBP),%RSP
	add $-1072, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c80c2
	jmp uuid_00000000000c80c4
uuid_00000000000c80c2:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c80bc
	jmp uuid_00000000000c80be
uuid_00000000000c80bc:
	push %RBP
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	jmp uuid_00000000000c80b9
	jmp uuid_00000000000c80bb
uuid_00000000000c80b9:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c80b6
	jmp uuid_00000000000c80b8
uuid_00000000000c80b6:
	movb $1, -1160(%rbp)
uuid_00000000000c80b8:
	mov -1240(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c80bb:
	mov -1176(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c80be:
	mov -1168(%RBP),%RSP
	add $-1248, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c80bf
	jmp uuid_00000000000c80c1
uuid_00000000000c80bf:
	movb $1, -760(%rbp)
uuid_00000000000c80c1:
	mov -1080(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c80c4:
	mov -776(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c80c7:
	mov -768(%RBP),%RSP
	add $-1248, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c80ca
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c80c9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c80cc
uuid_00000000000c80ca:
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -1280(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c80c8
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c48b6
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	pushq -208(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq $7
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d94
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d92
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c4d93
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq $-8
	pushq $4
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_init_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq $uuid_00000000000c554e
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_init_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
uuid_00000000000c80cc:
	mov -680(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000c80cf
uuid_00000000000c80cd:
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c80a4
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function compile-destructure-args : Arrow<Cons<Cons<Cons<Type,FContext>,AST>,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq $0
	mov %RBX, %RBP
	call compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $uuid_00000000000c804b
	pushq $0
	pushq $0
	pushq $3
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq $0
	mov -720(%RBP), %RAX
	mov $8, %R14
	subq %R14,%RAX
	movq %RAX, -720(%rbp)
	mov -720(%RBP), %RAX
	mov -712(%RBP), %R14
	subq %R14,%RAX
	movq %RAX, -720(%rbp)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -720(%rbp)
	pushq $1
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq $0
	pushq $0
	pushq $3
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c6d7d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8091
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	jmp uuid_00000000000c8093
uuid_00000000000c8091:
	mov $main_SB_with_CL_U8, %r15
	movb $1, 0(%r15)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	push %RBP
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov -1056(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c808e
	push %RBP
	jmp uuid_00000000000c808b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c808a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c808d
uuid_00000000000c808b:
	mov $main_SB_with_SB_argv_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c808d:
	mov -1064(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000c8090
uuid_00000000000c808e:
uuid_00000000000c8090:
	mov -984(%RBP),%RSP
	add $-1056, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d7d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
uuid_00000000000c8093:
	mov -904(%RBP),%RSP
	add $-1056, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4bce
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	push %RBP
	mov $config_SB_profile_SB_invocations_CL_U8, %RAX
	mov 0(%RAX), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c809f
	jmp uuid_00000000000c80a1
uuid_00000000000c809f:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	pushq $0
	pushq $uuid_00000000000c8094
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c8095
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c8096
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c8097
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c8098
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c8099
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000c809a
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_profile_SB_onexit_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c8098
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c8099
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000c809b
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c809c
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c809d
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000c809e
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $assemble_SB_profile_SB_onexit_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
uuid_00000000000c80a1:
	mov -1064(%RBP),%RSP
	add $-1088, %RSP
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $uuid_00000000000c7f5b
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $uuid_00000000000c554e
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c6d50
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c80a2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -712(%RBP), %RAX
	mov $8, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c7f7d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c80a3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_text_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	jmp uuid_00000000000c80a6
uuid_00000000000c80a4:
uuid_00000000000c80a6:
	mov -680(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000c80cf:
	mov -392(%RBP),%RSP
	add $-680, %RSP
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext:
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c80d0
	movq -384(%rbp), %r15
	movq %r15, -488(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -472(%rbp)
	jmp uuid_00000000000c80d2
uuid_00000000000c80d0:
uuid_00000000000c80d2:
	mov -496(%RBP),%RSP
	add $-496, %RSP
	push %RBP
#call function is-stack-variable : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call is_SB_stack_SB_variable_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c80d3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq $uuid_00000000000c7cf5
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq $uuid_00000000000c4fd0
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -208(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4f44
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov -208(%RBP), %RAX
	mov -712(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	jmp uuid_00000000000c80d5
uuid_00000000000c80d3:
uuid_00000000000c80d5:
	mov -504(%RBP),%RSP
	add $-504, %RSP
	subq $152, %rsp
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $464, %rsp
	ret
compile_SB_push_SB_rvalue_CL_ArrowFragmentConsI64ConsASTFContext:
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq $0
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq $0
	push %RBP
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c80ee
	jmp uuid_00000000000c80f0
uuid_00000000000c80ee:
	push %RBP
	mov -496(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c80e5
	jmp uuid_00000000000c80e7
uuid_00000000000c80e5:
	push %RBP
	mov -560(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c80dc
	jmp uuid_00000000000c80de
uuid_00000000000c80dc:
	push %RBP
	mov -624(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c80d9
	jmp uuid_00000000000c80db
uuid_00000000000c80d9:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	jmp uuid_00000000000c80d6
	jmp uuid_00000000000c80d8
uuid_00000000000c80d6:
	movb $1, -640(%rbp)
uuid_00000000000c80d8:
	mov -704(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c80db:
	mov -656(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c80de:
	mov -648(%RBP),%RSP
	add $-728, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c80e2
	jmp uuid_00000000000c80e4
uuid_00000000000c80e2:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000c80df
	jmp uuid_00000000000c80e1
uuid_00000000000c80df:
	movb $1, -576(%rbp)
uuid_00000000000c80e1:
	mov -736(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c80e4:
	mov -592(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c80e7:
	mov -584(%RBP),%RSP
	add $-760, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c80eb
	jmp uuid_00000000000c80ed
uuid_00000000000c80eb:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq $uuid_00000000000c4d94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c80e8
	jmp uuid_00000000000c80ea
uuid_00000000000c80e8:
	movb $1, -512(%rbp)
uuid_00000000000c80ea:
	mov -768(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c80ed:
	mov -528(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c80f0:
	mov -520(%RBP),%RSP
	add $-776, %RSP
	mov -512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8114
	push %RBP
	jmp uuid_00000000000c8111
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8110
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8113
uuid_00000000000c8111:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c810d
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -288(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c810a
	jmp uuid_00000000000c810c
uuid_00000000000c810a:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8107
	jmp uuid_00000000000c8109
uuid_00000000000c8107:
	pushq $uuid_00000000000c4fbe
#call function token::new : Arrow<String,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fbe
	mov %RBX, %RBP
	call token_CL__CL_new_CL_ArrowTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $7
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c500f
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c8109:
	mov -840(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c810c:
	mov -808(%RBP),%RSP
	add $-912, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -384(%RBP), %RAX
	push %RAX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov -280(%RBP), %RAX
	mov -800(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c810f
uuid_00000000000c810d:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c810f:
	mov -792(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c8113:
	mov -784(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000c8116
uuid_00000000000c8114:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq $0
	push %RBP
	mov -928(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c80f7
	jmp uuid_00000000000c80f9
uuid_00000000000c80f7:
	push %RBP
	mov -920(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c80f4
	jmp uuid_00000000000c80f6
uuid_00000000000c80f4:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c80f1
	jmp uuid_00000000000c80f3
uuid_00000000000c80f1:
	movb $1, -936(%rbp)
uuid_00000000000c80f3:
	mov -1032(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c80f6:
	mov -952(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c80f9:
	mov -944(%RBP),%RSP
	add $-1104, %RSP
	mov -936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8104
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8103
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8106
uuid_00000000000c8104:
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8100
	push %RBP
	mov -288(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c80fd
	jmp uuid_00000000000c80ff
uuid_00000000000c80fd:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c80fa
	jmp uuid_00000000000c80fc
uuid_00000000000c80fa:
	pushq $uuid_00000000000c4fbe
#call function token::new : Arrow<String,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4fbe
	mov %RBX, %RBP
	call token_CL__CL_new_CL_ArrowTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $7
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c500f
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -1024(%RBP)
	popq -1016(%RBP)
	popq -1008(%RBP)
	popq -1000(%RBP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	popq -960(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c80fc:
	mov -1304(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c80ff:
	mov -1272(%RBP),%RSP
	add $-1376, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov -1192(%RBP), %RAX
	push %RAX
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -1464(%RBP), %RAX
	push %RAX
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -1528(%RBP)
	popq -1520(%RBP)
	popq -1512(%RBP)
	popq -1504(%RBP)
	popq -1496(%RBP)
	popq -1488(%RBP)
	popq -1480(%RBP)
	popq -1472(%RBP)
	popq -1464(%RBP)
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
	popq -1416(%RBP)
	popq -1408(%RBP)
	popq -1400(%RBP)
	popq -1392(%RBP)
	popq -1384(%RBP)
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	mov -280(%RBP), %RAX
	mov -1536(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -1528(%RBP)
	popq -1520(%RBP)
	popq -1512(%RBP)
	popq -1504(%RBP)
	popq -1496(%RBP)
	popq -1488(%RBP)
	popq -1480(%RBP)
	popq -1472(%RBP)
	popq -1464(%RBP)
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
	popq -1416(%RBP)
	popq -1408(%RBP)
	popq -1400(%RBP)
	popq -1392(%RBP)
	popq -1384(%RBP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c8102
uuid_00000000000c8100:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov -1192(%RBP), %RAX
	push %RAX
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c6d83
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $uuid_00000000000c4cb2
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8102:
	mov -1264(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000c8106:
	mov -856(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000c8116:
	mov -480(%RBP),%RSP
	add $-1416, %RSP
	subq $152, %rsp
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
compile_SB_stack_SB_call_SB_push_SB_args_CL_ArrowFragmentConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c811b
	push %RBP
	jmp uuid_00000000000c8118
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8117
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c811a
uuid_00000000000c8118:
#call function compile-push-rvalue : Arrow<Cons<Cons<FContext,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
uuid_00000000000c811a:
	mov -600(%RBP),%RSP
	add $-600, %RSP
	jmp uuid_00000000000c811d
uuid_00000000000c811b:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4a69
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
uuid_00000000000c811d:
	mov -520(%RBP),%RSP
	add $-592, %RSP
	subq $152, %rsp
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringConsFragmentFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8135
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $2
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c811e
	jmp uuid_00000000000c8120
uuid_00000000000c811e:
	pushq $4
	popq -472(%RBP)
uuid_00000000000c8120:
	mov -872(%RBP),%RSP
	add $-872, %RSP
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8121
	jmp uuid_00000000000c8123
uuid_00000000000c8121:
	pushq $4
	popq -472(%RBP)
uuid_00000000000c8123:
	mov -880(%RBP),%RSP
	add $-880, %RSP
#call function compile-stack-call-push-args : Arrow<Cons<Cons<FContext,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_call_SB_push_SB_args_CL_ArrowFragmentConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c8124
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1032(%RBP)
	popq -1024(%RBP)
	popq -1016(%RBP)
	popq -1008(%RBP)
	popq -1000(%RBP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	pushq $0
	pushq $0
	pushq $3
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -360(%rbp)
	push %RBP
#call function is-ffi : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call is_SB_ffi_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8125
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -1224(%rbp)
	jmp uuid_00000000000c8127
uuid_00000000000c8125:
uuid_00000000000c8127:
	mov -1232(%RBP),%RSP
	add $-1232, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000c8128
	pushq $0
	pushq -1224(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000c8129
	pushq $0
	pushq -360(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000c812a
	pushq $0
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000c7f36
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000c812b
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000c812c
	pushq $0
#call function to-string : Arrow<IsUsed,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringIsUsed
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7f37
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c7f38
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7f37
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c812d
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c812e
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4d94
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c7f37
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq -464(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	push %RBP
	mov -1064(%RBP), %RAX
	mov $8, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8132
	jmp uuid_00000000000c8134
uuid_00000000000c8132:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $4
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c812f
	jmp uuid_00000000000c8131
uuid_00000000000c812f:
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov -464(%RBP), %RAX
	mov -1064(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
uuid_00000000000c8131:
	mov -1272(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c8134:
	mov -1264(%RBP),%RSP
	add $-1272, %RSP
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	jmp uuid_00000000000c8137
uuid_00000000000c8135:
#call function cc-blob : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -360(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
uuid_00000000000c8137:
	mov -864(%RBP),%RSP
	add $-864, %RSP
	subq $152, %rsp
	pushq -856(%rbp)
	pushq -848(%rbp)
	pushq -840(%rbp)
	pushq -832(%rbp)
	pushq -824(%rbp)
	pushq -816(%rbp)
	pushq -808(%rbp)
	pushq -800(%rbp)
	pushq -792(%rbp)
	pushq -784(%rbp)
	pushq -776(%rbp)
	pushq -768(%rbp)
	pushq -760(%rbp)
	pushq -752(%rbp)
	pushq -744(%rbp)
	pushq -736(%rbp)
	pushq -728(%rbp)
	pushq -720(%rbp)
	pushq -712(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	popq -632(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $480, %rsp
	ret
compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment-context::lookups : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
uuid_00000000000c8148:
#call function non-zero : Arrow<List<Fragment>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8149
	jmp uuid_00000000000c814a
uuid_00000000000c8149:
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	push %RBP
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $0
	push %RBP
	mov -1184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c813e
	jmp uuid_00000000000c8140
uuid_00000000000c813e:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c813b
	jmp uuid_00000000000c813d
uuid_00000000000c813b:
	push %RBP
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	jmp uuid_00000000000c8138
	jmp uuid_00000000000c813a
uuid_00000000000c8138:
	movb $1, -1192(%rbp)
uuid_00000000000c813a:
	mov -1384(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c813d:
	mov -1208(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c8140:
	mov -1200(%RBP),%RSP
	add $-1536, %RSP
	mov -1192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8145
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8144
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8147
uuid_00000000000c8145:
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8141
#call function compile-stack-call : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,Fragment>,String>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -208(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringConsFragmentFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	jmp uuid_00000000000c8143
uuid_00000000000c8141:
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
#call function compile-stack-call : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,Fragment>,String>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -208(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringConsFragmentFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
uuid_00000000000c8143:
	mov -1568(%RBP),%RSP
	add $-1568, %RSP
	movq -1376(%rbp), %r15
	movq %r15, -840(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -832(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -824(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -792(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -784(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -776(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -768(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -760(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -752(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -744(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -736(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -728(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -720(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -712(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -704(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -680(%rbp)
uuid_00000000000c8147:
	mov -1016(%RBP),%RSP
	add $-1568, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $168, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c8148
uuid_00000000000c814a:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	subq $152, %rsp
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $352, %rsp
	ret
translate_SB_local_SB_variables_CL_ArrowFContextConsI64FContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8175
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq $0
	push %RBP
	mov -832(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8157
	jmp uuid_00000000000c8159
uuid_00000000000c8157:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000c8154
	jmp uuid_00000000000c8156
uuid_00000000000c8154:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000c8151
	jmp uuid_00000000000c8153
uuid_00000000000c8151:
	push %RBP
	mov -648(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c814e
	jmp uuid_00000000000c8150
uuid_00000000000c814e:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c814b
	jmp uuid_00000000000c814d
uuid_00000000000c814b:
	movb $1, -840(%rbp)
uuid_00000000000c814d:
	mov -1064(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c8150:
	mov -1048(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c8153:
	mov -1016(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c8156:
	mov -856(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c8159:
	mov -848(%RBP),%RSP
	add $-1264, %RSP
	mov -840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8172
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8171
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8174
uuid_00000000000c8172:
#call function translate-local-variables : Arrow<Cons<FContext,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call translate_SB_local_SB_variables_CL_ArrowFContextConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
	popq -1240(%RBP)
	popq -1232(%RBP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $uuid_00000000000c6d81
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push %RBP
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c815d
	jmp uuid_00000000000c815f
uuid_00000000000c815d:
	push %RBP
	mov -1312(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1352(%rbp)
	pushq $uuid_00000000000c51f3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c815a
	jmp uuid_00000000000c815c
uuid_00000000000c815a:
	movb $1, -1328(%rbp)
uuid_00000000000c815c:
	mov -1344(%RBP),%RSP
	add $-1352, %RSP
uuid_00000000000c815f:
	mov -1336(%RBP),%RSP
	add $-1352, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c816e
	push %RBP
	jmp uuid_00000000000c816b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c816a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c816d
uuid_00000000000c816b:
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1056(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c816d:
	mov -1360(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000c8170
uuid_00000000000c816e:
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push %RBP
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq $0
	push %RBP
	mov -1408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8163
	jmp uuid_00000000000c8165
uuid_00000000000c8163:
	push %RBP
	mov -1400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8160
	jmp uuid_00000000000c8162
uuid_00000000000c8160:
	movb $1, -1416(%rbp)
uuid_00000000000c8162:
	mov -1432(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c8165:
	mov -1424(%RBP),%RSP
	add $-1440, %RSP
	mov -1416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8167
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8166
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8169
uuid_00000000000c8167:
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -1448(%RBP), %RAX
	mov -208(%RBP), %R14
	addq %R14,%RAX
	push %RAX
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $uuid_00000000000c6d83
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1008(%RBP)
	popq -1000(%RBP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1056(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c8169:
	mov -1384(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c8170:
	mov -1296(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c8174:
	mov -632(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000c8177
uuid_00000000000c8175:
uuid_00000000000c8177:
	mov -424(%RBP),%RSP
	add $-624, %RSP
	subq $200, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $216, %rsp
	ret
cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	push %RBP
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8181
	jmp uuid_00000000000c8183
uuid_00000000000c8181:
	push %RBP
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000c817e
	jmp uuid_00000000000c8180
uuid_00000000000c817e:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c817b
	jmp uuid_00000000000c817d
uuid_00000000000c817b:
	push %RBP
	mov -712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8178
	jmp uuid_00000000000c817a
uuid_00000000000c8178:
	movb $1, -760(%rbp)
uuid_00000000000c817a:
	mov -888(%RBP),%RSP
	add $-960, %RSP
uuid_00000000000c817d:
	mov -808(%RBP),%RSP
	add $-960, %RSP
uuid_00000000000c8180:
	mov -776(%RBP),%RSP
	add $-960, %RSP
uuid_00000000000c8183:
	mov -768(%RBP),%RSP
	add $-960, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8189
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8188
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c818b
uuid_00000000000c8189:
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	mov -968(%RBP), %RAX
	movq %RAX, -288(%rbp)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c5010
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8185
	jmp uuid_00000000000c8187
uuid_00000000000c8185:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c804b
	pushq $0
	pushq $0
	pushq $3
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq $uuid_00000000000c804b
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c8184
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -1992(%RBP)
	popq -1984(%RBP)
	popq -1976(%RBP)
	popq -1968(%RBP)
	popq -1960(%RBP)
	popq -1952(%RBP)
	popq -1944(%RBP)
	popq -1936(%RBP)
	popq -1928(%RBP)
	popq -1920(%RBP)
	popq -1912(%RBP)
	popq -1904(%RBP)
	popq -1896(%RBP)
	popq -1888(%RBP)
	popq -1880(%RBP)
	popq -1872(%RBP)
	popq -1864(%RBP)
	popq -1856(%RBP)
	popq -1848(%RBP)
	popq -1840(%RBP)
	popq -1832(%RBP)
	popq -1824(%RBP)
	popq -1816(%RBP)
	popq -1808(%RBP)
	popq -1800(%RBP)
uuid_00000000000c8187:
	mov -2000(%RBP),%RSP
	add $-2152, %RSP
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
uuid_00000000000c818b:
	mov -680(%RBP),%RSP
	add $-2224, %RSP
	subq $152, %rsp
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	push %RBP
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq $0
	push %RBP
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8195
	jmp uuid_00000000000c8197
uuid_00000000000c8195:
	push %RBP
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	jmp uuid_00000000000c8192
	jmp uuid_00000000000c8194
uuid_00000000000c8192:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c818f
	jmp uuid_00000000000c8191
uuid_00000000000c818f:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c818c
	jmp uuid_00000000000c818e
uuid_00000000000c818c:
	movb $1, -784(%rbp)
uuid_00000000000c818e:
	mov -912(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c8191:
	mov -832(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c8194:
	mov -800(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c8197:
	mov -792(%RBP),%RSP
	add $-984, %RSP
	mov -784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8199
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8198
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c819b
uuid_00000000000c8199:
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
uuid_00000000000c819b:
	mov -704(%RBP),%RSP
	add $-1056, %RSP
	subq $152, %rsp
	pushq -624(%rbp)
	pushq -616(%rbp)
	pushq -608(%rbp)
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $320, %rsp
	ret
cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext:
	pushq -552(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	push %RBP
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq $0
	push %RBP
	mov -720(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c81cc
	jmp uuid_00000000000c81ce
uuid_00000000000c81cc:
	push %RBP
	mov -712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c81c3
	jmp uuid_00000000000c81c5
uuid_00000000000c81c3:
	push %RBP
	mov -808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -912(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c81b1
	jmp uuid_00000000000c81b3
uuid_00000000000c81b1:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1008(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c819f
	jmp uuid_00000000000c81a1
uuid_00000000000c819f:
	push %RBP
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	jmp uuid_00000000000c819c
	jmp uuid_00000000000c819e
uuid_00000000000c819c:
	movb $1, -1016(%rbp)
uuid_00000000000c819e:
	mov -1032(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c81a1:
	mov -1024(%RBP),%RSP
	add $-1056, %RSP
	mov -1016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c81ae
	jmp uuid_00000000000c81b0
uuid_00000000000c81ae:
	push %RBP
	mov -896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1136(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c81a8
	jmp uuid_00000000000c81aa
uuid_00000000000c81a8:
	push %RBP
	jmp uuid_00000000000c81a5
	jmp uuid_00000000000c81a7
uuid_00000000000c81a5:
	push %RBP
	mov -1072(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c81a2
	jmp uuid_00000000000c81a4
uuid_00000000000c81a2:
	movb $1, -1144(%rbp)
uuid_00000000000c81a4:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c81a7:
	mov -1160(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c81aa:
	mov -1152(%RBP),%RSP
	add $-1176, %RSP
	mov -1144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c81ab
	jmp uuid_00000000000c81ad
uuid_00000000000c81ab:
	movb $1, -920(%rbp)
uuid_00000000000c81ad:
	mov -1064(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c81b0:
	mov -936(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c81b3:
	mov -928(%RBP),%RSP
	add $-1176, %RSP
	mov -920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c81c0
	jmp uuid_00000000000c81c2
uuid_00000000000c81c0:
	push %RBP
	mov -800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c81ba
	jmp uuid_00000000000c81bc
uuid_00000000000c81ba:
	push %RBP
	jmp uuid_00000000000c81b7
	jmp uuid_00000000000c81b9
uuid_00000000000c81b7:
	push %RBP
	mov -1192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c81b4
	jmp uuid_00000000000c81b6
uuid_00000000000c81b4:
	movb $1, -1264(%rbp)
uuid_00000000000c81b6:
	mov -1288(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c81b9:
	mov -1280(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c81bc:
	mov -1272(%RBP),%RSP
	add $-1296, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c81bd
	jmp uuid_00000000000c81bf
uuid_00000000000c81bd:
	movb $1, -824(%rbp)
uuid_00000000000c81bf:
	mov -1184(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c81c2:
	mov -840(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c81c5:
	mov -832(%RBP),%RSP
	add $-1296, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c81c9
	jmp uuid_00000000000c81cb
uuid_00000000000c81c9:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c81c6
	jmp uuid_00000000000c81c8
uuid_00000000000c81c6:
	movb $1, -728(%rbp)
uuid_00000000000c81c8:
	mov -1304(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c81cb:
	mov -744(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c81ce:
	mov -736(%RBP),%RSP
	add $-1376, %RSP
	mov -728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c825d
	push %RBP
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq $0
	push %RBP
	mov -1456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8230
	jmp uuid_00000000000c8232
uuid_00000000000c8230:
	push %RBP
	mov -1448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1552(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c821e
	jmp uuid_00000000000c8220
uuid_00000000000c821e:
	push %RBP
	mov -1544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1648(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c820c
	jmp uuid_00000000000c820e
uuid_00000000000c820c:
	push %RBP
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	jmp uuid_00000000000c8209
	jmp uuid_00000000000c820b
uuid_00000000000c8209:
	movb $1, -1656(%rbp)
uuid_00000000000c820b:
	mov -1672(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c820e:
	mov -1664(%RBP),%RSP
	add $-1696, %RSP
	mov -1656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c821b
	jmp uuid_00000000000c821d
uuid_00000000000c821b:
	push %RBP
	mov -1536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1776(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8215
	jmp uuid_00000000000c8217
uuid_00000000000c8215:
	push %RBP
	jmp uuid_00000000000c8212
	jmp uuid_00000000000c8214
uuid_00000000000c8212:
	push %RBP
	mov -1712(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c820f
	jmp uuid_00000000000c8211
uuid_00000000000c820f:
	movb $1, -1784(%rbp)
uuid_00000000000c8211:
	mov -1808(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c8214:
	mov -1800(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c8217:
	mov -1792(%RBP),%RSP
	add $-1816, %RSP
	mov -1784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8218
	jmp uuid_00000000000c821a
uuid_00000000000c8218:
	movb $1, -1560(%rbp)
uuid_00000000000c821a:
	mov -1704(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c821d:
	mov -1576(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c8220:
	mov -1568(%RBP),%RSP
	add $-1816, %RSP
	mov -1560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c822d
	jmp uuid_00000000000c822f
uuid_00000000000c822d:
	push %RBP
	mov -1440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8227
	jmp uuid_00000000000c8229
uuid_00000000000c8227:
	push %RBP
	jmp uuid_00000000000c8224
	jmp uuid_00000000000c8226
uuid_00000000000c8224:
	push %RBP
	mov -1832(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8221
	jmp uuid_00000000000c8223
uuid_00000000000c8221:
	movb $1, -1904(%rbp)
uuid_00000000000c8223:
	mov -1928(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000c8226:
	mov -1920(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000c8229:
	mov -1912(%RBP),%RSP
	add $-1936, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c822a
	jmp uuid_00000000000c822c
uuid_00000000000c822a:
	movb $1, -1464(%rbp)
uuid_00000000000c822c:
	mov -1824(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000c822f:
	mov -1480(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000c8232:
	mov -1472(%RBP),%RSP
	add $-1936, %RSP
	mov -1464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c825a
	push %RBP
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	mov -2016(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8257
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8256
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8259
uuid_00000000000c8257:
uuid_00000000000c8259:
	mov -1944(%RBP),%RSP
	add $-2016, %RSP
	jmp uuid_00000000000c825c
uuid_00000000000c825a:
	push %RBP
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8253
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8250
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c824a
	jmp uuid_00000000000c824c
uuid_00000000000c824a:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c824c:
	mov -1960(%RBP),%RSP
	add $-1960, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c824d
	jmp uuid_00000000000c824f
uuid_00000000000c824d:
	mov -2048(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c824f:
	mov -2120(%RBP),%RSP
	add $-2120, %RSP
	mov -2080(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1816(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c8252
uuid_00000000000c8250:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1696(%RBP)
	popq -1688(%RBP)
	popq -1680(%RBP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8247
	jmp uuid_00000000000c8249
uuid_00000000000c8247:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c8249:
	mov -1960(%RBP),%RSP
	add $-1960, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	mov -2080(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1816(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c8252:
	mov -1952(%RBP),%RSP
	add $-2112, %RSP
	jmp uuid_00000000000c8255
uuid_00000000000c8253:
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	push %RBP
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq $0
	push %RBP
	mov -2096(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8239
	jmp uuid_00000000000c823b
uuid_00000000000c8239:
	push %RBP
	mov -2088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8236
	jmp uuid_00000000000c8238
uuid_00000000000c8236:
	push %RBP
	mov -2080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8233
	jmp uuid_00000000000c8235
uuid_00000000000c8233:
	movb $1, -2104(%rbp)
uuid_00000000000c8235:
	mov -2200(%RBP),%RSP
	add $-2272, %RSP
uuid_00000000000c8238:
	mov -2120(%RBP),%RSP
	add $-2272, %RSP
uuid_00000000000c823b:
	mov -2112(%RBP),%RSP
	add $-2272, %RSP
	mov -2104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8244
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8243
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8246
uuid_00000000000c8244:
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8240
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c823f
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8242
uuid_00000000000c8240:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1696(%RBP)
	popq -1688(%RBP)
	popq -1680(%RBP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c823c
	jmp uuid_00000000000c823e
uuid_00000000000c823c:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c823e:
	mov -2288(%RBP),%RSP
	add $-2288, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	mov -2408(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1816(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	pushq -2736(%RBP)
	pushq -2744(%RBP)
	pushq -2752(%RBP)
	pushq -2760(%RBP)
	pushq -2768(%RBP)
	pushq -2776(%RBP)
	pushq -2784(%RBP)
	pushq -2792(%RBP)
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	pushq -2848(%RBP)
	pushq -2856(%RBP)
	pushq -2872(%RBP)
	pushq -2880(%RBP)
	pushq -2888(%RBP)
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq -2952(%RBP)
	pushq -2960(%RBP)
	pushq -2968(%RBP)
	pushq -2976(%RBP)
	pushq -2984(%RBP)
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq -3048(%RBP)
	pushq -3056(%RBP)
	pushq -3064(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -3072(%RBP)
	pushq -3080(%RBP)
	pushq -3088(%RBP)
	pushq -3096(%RBP)
	pushq -3104(%RBP)
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	pushq -3128(%RBP)
	pushq -3136(%RBP)
	pushq -3144(%RBP)
	pushq -3152(%RBP)
	pushq -3160(%RBP)
	pushq -3168(%RBP)
	pushq -3176(%RBP)
	pushq -3184(%RBP)
	pushq -3192(%RBP)
	pushq -3200(%RBP)
	pushq -3208(%RBP)
	pushq -3216(%RBP)
	pushq -3224(%RBP)
	pushq -3232(%RBP)
	pushq -3240(%RBP)
	pushq -3248(%RBP)
	pushq -3256(%RBP)
	pushq -3264(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -2448(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c8242:
	mov -2280(%RBP),%RSP
	add $-3272, %RSP
uuid_00000000000c8246:
	mov -2024(%RBP),%RSP
	add $-3272, %RSP
uuid_00000000000c8255:
	mov -1944(%RBP),%RSP
	add $-3272, %RSP
uuid_00000000000c825c:
	mov -1384(%RBP),%RSP
	add $-3272, %RSP
	jmp uuid_00000000000c825f
uuid_00000000000c825d:
	push %RBP
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8203
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8200
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c81fa
	jmp uuid_00000000000c81fc
uuid_00000000000c81fa:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c81fc:
	mov -1400(%RBP),%RSP
	add $-1400, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c81fd
	jmp uuid_00000000000c81ff
uuid_00000000000c81fd:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c81ff:
	mov -1560(%RBP),%RSP
	add $-1560, %RSP
	mov -1520(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c8202
uuid_00000000000c8200:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1056(%RBP)
	popq -1048(%RBP)
	popq -1040(%RBP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c81f7
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1408(%RBP), %RAX
	movq %RAX, -552(%rbp)
	jmp uuid_00000000000c81f9
uuid_00000000000c81f7:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c81f1
	jmp uuid_00000000000c81f3
uuid_00000000000c81f1:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c81f3:
	mov -1408(%RBP),%RSP
	add $-1408, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c81f4
	jmp uuid_00000000000c81f6
uuid_00000000000c81f4:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c81f6:
	mov -1568(%RBP),%RSP
	add $-1568, %RSP
	mov -1528(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c81f9:
	mov -1400(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000c8202:
	mov -1392(%RBP),%RSP
	add $-1568, %RSP
	jmp uuid_00000000000c8205
uuid_00000000000c8203:
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	push %RBP
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c81d5
	jmp uuid_00000000000c81d7
uuid_00000000000c81d5:
	push %RBP
	mov -1528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c81d2
	jmp uuid_00000000000c81d4
uuid_00000000000c81d2:
	push %RBP
	mov -1520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c81cf
	jmp uuid_00000000000c81d1
uuid_00000000000c81cf:
	movb $1, -1544(%rbp)
uuid_00000000000c81d1:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c81d4:
	mov -1560(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c81d7:
	mov -1552(%RBP),%RSP
	add $-1712, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c81ee
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c81ed
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c81f0
uuid_00000000000c81ee:
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c81ea
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c81e1
	jmp uuid_00000000000c81e3
uuid_00000000000c81e1:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c81e3:
	mov -1728(%RBP),%RSP
	add $-1728, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c81e4
	jmp uuid_00000000000c81e6
uuid_00000000000c81e4:
	mov -1816(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c81e6:
	mov -1888(%RBP),%RSP
	add $-1888, %RSP
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c81e7
	jmp uuid_00000000000c81e9
uuid_00000000000c81e7:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c81e9:
	mov -1896(%RBP),%RSP
	add $-1896, %RSP
	mov -1848(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	pushq -2312(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1904(%RBP), %RAX
	movq %RAX, -552(%rbp)
	jmp uuid_00000000000c81ec
uuid_00000000000c81ea:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1056(%RBP)
	popq -1048(%RBP)
	popq -1040(%RBP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c81de
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	pushq -2312(%RBP)
	pushq -2320(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1736(%RBP), %RAX
	movq %RAX, -552(%rbp)
	jmp uuid_00000000000c81e0
uuid_00000000000c81de:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c81d8
	jmp uuid_00000000000c81da
uuid_00000000000c81d8:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c81da:
	mov -1736(%RBP),%RSP
	add $-1736, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c81db
	jmp uuid_00000000000c81dd
uuid_00000000000c81db:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c81dd:
	mov -1896(%RBP),%RSP
	add $-1896, %RSP
	mov -1856(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	pushq -2312(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1904(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c81e0:
	mov -1728(%RBP),%RSP
	add $-2728, %RSP
uuid_00000000000c81ec:
	mov -1720(%RBP),%RSP
	add $-2728, %RSP
uuid_00000000000c81f0:
	mov -1464(%RBP),%RSP
	add $-2728, %RSP
uuid_00000000000c8205:
	mov -1384(%RBP),%RSP
	add $-2728, %RSP
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8206
	jmp uuid_00000000000c8208
uuid_00000000000c8206:
	movq -568(%rbp), %r15
	movq %r15, -552(%rbp)
	mov -568(%rbp), %r15
	mov %r15, -552(%rbp)
uuid_00000000000c8208:
	mov -2736(%RBP),%RSP
	add $-2736, %RSP
uuid_00000000000c825f:
	mov -648(%RBP),%RSP
	add $-2736, %RSP
	pushq -552(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	pushq $0
	subq $424, %rsp
	pushq 424(%rsp)
	pushq 440(%rsp)
	pushq 456(%rsp)
	pushq 472(%rsp)
	pushq 488(%rsp)
	pushq 504(%rsp)
	pushq 520(%rsp)
	pushq 536(%rsp)
	pushq 552(%rsp)
	pushq 568(%rsp)
	pushq 584(%rsp)
	pushq 600(%rsp)
	pushq 616(%rsp)
	pushq 632(%rsp)
	pushq 648(%rsp)
	pushq 664(%rsp)
	pushq 680(%rsp)
	pushq 696(%rsp)
	pushq 712(%rsp)
	pushq 728(%rsp)
	pushq 744(%rsp)
	pushq 760(%rsp)
	pushq 776(%rsp)
	pushq 792(%rsp)
	pushq 808(%rsp)
	pushq 824(%rsp)
	pushq 840(%rsp)
	pushq 856(%rsp)
	pushq 872(%rsp)
	pushq 888(%rsp)
	pushq 904(%rsp)
	pushq 920(%rsp)
	pushq 936(%rsp)
	pushq 952(%rsp)
	pushq 968(%rsp)
	pushq 984(%rsp)
	pushq 1000(%rsp)
	pushq 1016(%rsp)
	pushq 1032(%rsp)
	pushq 1048(%rsp)
	pushq 1064(%rsp)
	pushq 1080(%rsp)
	pushq 1096(%rsp)
	pushq 1112(%rsp)
	pushq 1128(%rsp)
	pushq 1144(%rsp)
	pushq 1160(%rsp)
	pushq 1176(%rsp)
	pushq 1192(%rsp)
	pushq 1208(%rsp)
	pushq 1224(%rsp)
	pushq 1240(%rsp)
	pushq 1256(%rsp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	popq -632(%rbp)
	popq -640(%rbp)
	popq -648(%rbp)
	popq -656(%rbp)
	popq -664(%rbp)
	popq -672(%rbp)
	popq -680(%rbp)
	popq -688(%rbp)
	popq -696(%rbp)
	popq -704(%rbp)
	popq -712(%rbp)
	popq -720(%rbp)
	popq -728(%rbp)
	popq -736(%rbp)
	popq -744(%rbp)
	popq -752(%rbp)
	popq -760(%rbp)
	popq -768(%rbp)
	popq -776(%rbp)
	popq -784(%rbp)
	popq -792(%rbp)
	popq -800(%rbp)
	popq -808(%rbp)
	popq -816(%rbp)
	popq -824(%rbp)
	popq -832(%rbp)
	popq -840(%rbp)
	popq -848(%rbp)
	popq -856(%rbp)
	popq -864(%rbp)
	popq -872(%rbp)
	popq -880(%rbp)
	popq -888(%rbp)
	popq -896(%rbp)
	popq -904(%rbp)
	popq -912(%rbp)
	popq -920(%rbp)
	popq -928(%rbp)
	popq -936(%rbp)
	popq -944(%rbp)
	popq -952(%rbp)
	popq -960(%rbp)
	popq -968(%rbp)
	popq -976(%rbp)
	popq -984(%rbp)
	addq $424, %rsp
	mov %rbp, %rsp
	sub $560, %rsp
	ret
blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext:
	pushq $0
	pushq $0
	pushq $3
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8575
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8572
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8266
	jmp uuid_00000000000c8268
uuid_00000000000c8266:
	push %RBP
	jmp uuid_00000000000c8263
	jmp uuid_00000000000c8265
uuid_00000000000c8263:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8260
	jmp uuid_00000000000c8262
uuid_00000000000c8260:
	movb $1, -640(%rbp)
uuid_00000000000c8262:
	mov -664(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c8265:
	mov -656(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c8268:
	mov -648(%RBP),%RSP
	add $-672, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c856f
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c826f
	jmp uuid_00000000000c8271
uuid_00000000000c826f:
	push %RBP
	jmp uuid_00000000000c826c
	jmp uuid_00000000000c826e
uuid_00000000000c826c:
	push %RBP
	mov -688(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8269
	jmp uuid_00000000000c826b
uuid_00000000000c8269:
	movb $1, -760(%rbp)
uuid_00000000000c826b:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c826e:
	mov -776(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c8271:
	mov -768(%RBP),%RSP
	add $-792, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c856c
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8290
	jmp uuid_00000000000c8292
uuid_00000000000c8290:
	push %RBP
	mov -864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c827e
	jmp uuid_00000000000c8280
uuid_00000000000c827e:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1064(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8275
	jmp uuid_00000000000c8277
uuid_00000000000c8275:
	push %RBP
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	jmp uuid_00000000000c8272
	jmp uuid_00000000000c8274
uuid_00000000000c8272:
	movb $1, -1072(%rbp)
uuid_00000000000c8274:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c8277:
	mov -1080(%RBP),%RSP
	add $-1112, %RSP
	mov -1072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c827b
	jmp uuid_00000000000c827d
uuid_00000000000c827b:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8278
	jmp uuid_00000000000c827a
uuid_00000000000c8278:
	movb $1, -976(%rbp)
uuid_00000000000c827a:
	mov -1120(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000c827d:
	mov -992(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000c8280:
	mov -984(%RBP),%RSP
	add $-1192, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c828d
	jmp uuid_00000000000c828f
uuid_00000000000c828d:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8287
	jmp uuid_00000000000c8289
uuid_00000000000c8287:
	push %RBP
	jmp uuid_00000000000c8284
	jmp uuid_00000000000c8286
uuid_00000000000c8284:
	push %RBP
	mov -1208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1312(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8281
	jmp uuid_00000000000c8283
uuid_00000000000c8281:
	movb $1, -1280(%rbp)
uuid_00000000000c8283:
	mov -1304(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c8286:
	mov -1296(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c8289:
	mov -1288(%RBP),%RSP
	add $-1312, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c828a
	jmp uuid_00000000000c828c
uuid_00000000000c828a:
	movb $1, -880(%rbp)
uuid_00000000000c828c:
	mov -1200(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c828f:
	mov -896(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c8292:
	mov -888(%RBP),%RSP
	add $-1312, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8569
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c82b1
	jmp uuid_00000000000c82b3
uuid_00000000000c82b1:
	push %RBP
	mov -1384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c829f
	jmp uuid_00000000000c82a1
uuid_00000000000c829f:
	push %RBP
	mov -1480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1584(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8296
	jmp uuid_00000000000c8298
uuid_00000000000c8296:
	push %RBP
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	jmp uuid_00000000000c8293
	jmp uuid_00000000000c8295
uuid_00000000000c8293:
	movb $1, -1592(%rbp)
uuid_00000000000c8295:
	mov -1608(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c8298:
	mov -1600(%RBP),%RSP
	add $-1632, %RSP
	mov -1592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c829c
	jmp uuid_00000000000c829e
uuid_00000000000c829c:
	push %RBP
	mov -1472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8299
	jmp uuid_00000000000c829b
uuid_00000000000c8299:
	movb $1, -1496(%rbp)
uuid_00000000000c829b:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c829e:
	mov -1512(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c82a1:
	mov -1504(%RBP),%RSP
	add $-1712, %RSP
	mov -1496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c82ae
	jmp uuid_00000000000c82b0
uuid_00000000000c82ae:
	push %RBP
	mov -1376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1792(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c82a8
	jmp uuid_00000000000c82aa
uuid_00000000000c82a8:
	push %RBP
	jmp uuid_00000000000c82a5
	jmp uuid_00000000000c82a7
uuid_00000000000c82a5:
	push %RBP
	mov -1728(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1832(%rbp)
	pushq $uuid_00000000000c4bba
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c82a2
	jmp uuid_00000000000c82a4
uuid_00000000000c82a2:
	movb $1, -1800(%rbp)
uuid_00000000000c82a4:
	mov -1824(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c82a7:
	mov -1816(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c82aa:
	mov -1808(%RBP),%RSP
	add $-1832, %RSP
	mov -1800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c82ab
	jmp uuid_00000000000c82ad
uuid_00000000000c82ab:
	movb $1, -1400(%rbp)
uuid_00000000000c82ad:
	mov -1720(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c82b0:
	mov -1416(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c82b3:
	mov -1408(%RBP),%RSP
	add $-1832, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8566
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -1912(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c82c3
	jmp uuid_00000000000c82c5
uuid_00000000000c82c3:
	push %RBP
	mov -1904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c82c0
	jmp uuid_00000000000c82c2
uuid_00000000000c82c0:
	push %RBP
	mov -1896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2088(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c82ba
	jmp uuid_00000000000c82bc
uuid_00000000000c82ba:
	push %RBP
	jmp uuid_00000000000c82b7
	jmp uuid_00000000000c82b9
uuid_00000000000c82b7:
	push %RBP
	mov -2024(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2128(%rbp)
	pushq $uuid_00000000000c4ee7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c82b4
	jmp uuid_00000000000c82b6
uuid_00000000000c82b4:
	movb $1, -2096(%rbp)
uuid_00000000000c82b6:
	mov -2120(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c82b9:
	mov -2112(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c82bc:
	mov -2104(%RBP),%RSP
	add $-2128, %RSP
	mov -2096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c82bd
	jmp uuid_00000000000c82bf
uuid_00000000000c82bd:
	movb $1, -1920(%rbp)
uuid_00000000000c82bf:
	mov -2016(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c82c2:
	mov -1936(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c82c5:
	mov -1928(%RBP),%RSP
	add $-2128, %RSP
	mov -1920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8563
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -2208(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c833a
	jmp uuid_00000000000c833c
uuid_00000000000c833a:
	push %RBP
	mov -2200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8306
	jmp uuid_00000000000c8308
uuid_00000000000c8306:
	push %RBP
	mov -2296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8303
	jmp uuid_00000000000c8305
uuid_00000000000c8303:
	push %RBP
	mov -2288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2480(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c82fd
	jmp uuid_00000000000c82ff
uuid_00000000000c82fd:
	push %RBP
	mov -2472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2576(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c82df
	jmp uuid_00000000000c82e1
uuid_00000000000c82df:
	push %RBP
	mov -2568(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2672(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c82cc
	jmp uuid_00000000000c82ce
uuid_00000000000c82cc:
	push %RBP
	jmp uuid_00000000000c82c9
	jmp uuid_00000000000c82cb
uuid_00000000000c82c9:
	push %RBP
	mov -2608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c82c6
	jmp uuid_00000000000c82c8
uuid_00000000000c82c6:
	movb $1, -2680(%rbp)
uuid_00000000000c82c8:
	mov -2704(%RBP),%RSP
	add $-2712, %RSP
uuid_00000000000c82cb:
	mov -2696(%RBP),%RSP
	add $-2712, %RSP
uuid_00000000000c82ce:
	mov -2688(%RBP),%RSP
	add $-2712, %RSP
	mov -2680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c82dc
	jmp uuid_00000000000c82de
uuid_00000000000c82dc:
	push %RBP
	mov -2560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c82d6
	jmp uuid_00000000000c82d8
uuid_00000000000c82d6:
	push %RBP
	jmp uuid_00000000000c82d3
	jmp uuid_00000000000c82d5
uuid_00000000000c82d3:
	push %RBP
	mov -2728(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2832(%rbp)
	pushq $uuid_00000000000c82cf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c82d0
	jmp uuid_00000000000c82d2
uuid_00000000000c82d0:
	movb $1, -2800(%rbp)
uuid_00000000000c82d2:
	mov -2824(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c82d5:
	mov -2816(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c82d8:
	mov -2808(%RBP),%RSP
	add $-2832, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c82d9
	jmp uuid_00000000000c82db
uuid_00000000000c82d9:
	movb $1, -2584(%rbp)
uuid_00000000000c82db:
	mov -2720(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c82de:
	mov -2600(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c82e1:
	mov -2592(%RBP),%RSP
	add $-2832, %RSP
	mov -2584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c82fa
	jmp uuid_00000000000c82fc
uuid_00000000000c82fa:
	push %RBP
	mov -2464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2912(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c82f4
	jmp uuid_00000000000c82f6
uuid_00000000000c82f4:
	push %RBP
	jmp uuid_00000000000c82f1
	jmp uuid_00000000000c82f3
uuid_00000000000c82f1:
	push %RBP
	mov -2880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3016(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c82ee
	jmp uuid_00000000000c82f0
uuid_00000000000c82ee:
	push %RBP
	mov -2872(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3096(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c82e8
	jmp uuid_00000000000c82ea
uuid_00000000000c82e8:
	push %RBP
	jmp uuid_00000000000c82e5
	jmp uuid_00000000000c82e7
uuid_00000000000c82e5:
	push %RBP
	mov -3032(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c82e2
	jmp uuid_00000000000c82e4
uuid_00000000000c82e2:
	movb $1, -3104(%rbp)
uuid_00000000000c82e4:
	mov -3128(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c82e7:
	mov -3120(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c82ea:
	mov -3112(%RBP),%RSP
	add $-3136, %RSP
	mov -3104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c82eb
	jmp uuid_00000000000c82ed
uuid_00000000000c82eb:
	movb $1, -2920(%rbp)
uuid_00000000000c82ed:
	mov -3024(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c82f0:
	mov -2944(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c82f3:
	mov -2936(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c82f6:
	mov -2928(%RBP),%RSP
	add $-3136, %RSP
	mov -2920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c82f7
	jmp uuid_00000000000c82f9
uuid_00000000000c82f7:
	movb $1, -2488(%rbp)
uuid_00000000000c82f9:
	mov -2840(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c82fc:
	mov -2504(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c82ff:
	mov -2496(%RBP),%RSP
	add $-3136, %RSP
	mov -2488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8300
	jmp uuid_00000000000c8302
uuid_00000000000c8300:
	movb $1, -2312(%rbp)
uuid_00000000000c8302:
	mov -2408(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c8305:
	mov -2328(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c8308:
	mov -2320(%RBP),%RSP
	add $-3136, %RSP
	mov -2312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8337
	jmp uuid_00000000000c8339
uuid_00000000000c8337:
	push %RBP
	mov -2192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3216(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8331
	jmp uuid_00000000000c8333
uuid_00000000000c8331:
	push %RBP
	mov -3208(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3312(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c831f
	jmp uuid_00000000000c8321
uuid_00000000000c831f:
	push %RBP
	mov -3304(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3408(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c830c
	jmp uuid_00000000000c830e
uuid_00000000000c830c:
	push %RBP
	jmp uuid_00000000000c8309
	jmp uuid_00000000000c830b
uuid_00000000000c8309:
	movb $1, -3416(%rbp)
uuid_00000000000c830b:
	mov -3432(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c830e:
	mov -3424(%RBP),%RSP
	add $-3432, %RSP
	mov -3416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c831c
	jmp uuid_00000000000c831e
uuid_00000000000c831c:
	push %RBP
	mov -3296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3512(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8316
	jmp uuid_00000000000c8318
uuid_00000000000c8316:
	push %RBP
	jmp uuid_00000000000c8313
	jmp uuid_00000000000c8315
uuid_00000000000c8313:
	push %RBP
	mov -3448(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3552(%rbp)
	pushq $uuid_00000000000c830f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8310
	jmp uuid_00000000000c8312
uuid_00000000000c8310:
	movb $1, -3520(%rbp)
uuid_00000000000c8312:
	mov -3544(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c8315:
	mov -3536(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c8318:
	mov -3528(%RBP),%RSP
	add $-3552, %RSP
	mov -3520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8319
	jmp uuid_00000000000c831b
uuid_00000000000c8319:
	movb $1, -3320(%rbp)
uuid_00000000000c831b:
	mov -3440(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c831e:
	mov -3336(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c8321:
	mov -3328(%RBP),%RSP
	add $-3552, %RSP
	mov -3320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c832e
	jmp uuid_00000000000c8330
uuid_00000000000c832e:
	push %RBP
	mov -3200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3632(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8328
	jmp uuid_00000000000c832a
uuid_00000000000c8328:
	push %RBP
	jmp uuid_00000000000c8325
	jmp uuid_00000000000c8327
uuid_00000000000c8325:
	push %RBP
	mov -3568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3672(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8322
	jmp uuid_00000000000c8324
uuid_00000000000c8322:
	movb $1, -3640(%rbp)
uuid_00000000000c8324:
	mov -3664(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c8327:
	mov -3656(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c832a:
	mov -3648(%RBP),%RSP
	add $-3672, %RSP
	mov -3640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c832b
	jmp uuid_00000000000c832d
uuid_00000000000c832b:
	movb $1, -3224(%rbp)
uuid_00000000000c832d:
	mov -3560(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c8330:
	mov -3240(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c8333:
	mov -3232(%RBP),%RSP
	add $-3672, %RSP
	mov -3224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8334
	jmp uuid_00000000000c8336
uuid_00000000000c8334:
	movb $1, -2216(%rbp)
uuid_00000000000c8336:
	mov -3144(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c8339:
	mov -2232(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c833c:
	mov -2224(%RBP),%RSP
	add $-3672, %RSP
	mov -2216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8560
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -3752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c83a5
	jmp uuid_00000000000c83a7
uuid_00000000000c83a5:
	push %RBP
	mov -3744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8371
	jmp uuid_00000000000c8373
uuid_00000000000c8371:
	push %RBP
	mov -3840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c836e
	jmp uuid_00000000000c8370
uuid_00000000000c836e:
	push %RBP
	mov -3832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4024(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8368
	jmp uuid_00000000000c836a
uuid_00000000000c8368:
	push %RBP
	mov -4016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8365
	jmp uuid_00000000000c8367
uuid_00000000000c8365:
	push %RBP
	mov -4008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4200(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c835f
	jmp uuid_00000000000c8361
uuid_00000000000c835f:
	push %RBP
	jmp uuid_00000000000c835c
	jmp uuid_00000000000c835e
uuid_00000000000c835c:
	push %RBP
	mov -4168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4304(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8359
	jmp uuid_00000000000c835b
uuid_00000000000c8359:
	push %RBP
	mov -4160(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4384(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8353
	jmp uuid_00000000000c8355
uuid_00000000000c8353:
	push %RBP
	jmp uuid_00000000000c8350
	jmp uuid_00000000000c8352
uuid_00000000000c8350:
	push %RBP
	mov -4320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c834d
	jmp uuid_00000000000c834f
uuid_00000000000c834d:
	movb $1, -4392(%rbp)
uuid_00000000000c834f:
	mov -4416(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c8352:
	mov -4408(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c8355:
	mov -4400(%RBP),%RSP
	add $-4424, %RSP
	mov -4392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8356
	jmp uuid_00000000000c8358
uuid_00000000000c8356:
	movb $1, -4208(%rbp)
uuid_00000000000c8358:
	mov -4312(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c835b:
	mov -4232(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c835e:
	mov -4224(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c8361:
	mov -4216(%RBP),%RSP
	add $-4424, %RSP
	mov -4208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8362
	jmp uuid_00000000000c8364
uuid_00000000000c8362:
	movb $1, -4032(%rbp)
uuid_00000000000c8364:
	mov -4128(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c8367:
	mov -4048(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c836a:
	mov -4040(%RBP),%RSP
	add $-4424, %RSP
	mov -4032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c836b
	jmp uuid_00000000000c836d
uuid_00000000000c836b:
	movb $1, -3856(%rbp)
uuid_00000000000c836d:
	mov -3952(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c8370:
	mov -3872(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c8373:
	mov -3864(%RBP),%RSP
	add $-4424, %RSP
	mov -3856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c83a2
	jmp uuid_00000000000c83a4
uuid_00000000000c83a2:
	push %RBP
	mov -3736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4504(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c839c
	jmp uuid_00000000000c839e
uuid_00000000000c839c:
	push %RBP
	mov -4496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c838a
	jmp uuid_00000000000c838c
uuid_00000000000c838a:
	push %RBP
	mov -4592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4696(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8377
	jmp uuid_00000000000c8379
uuid_00000000000c8377:
	push %RBP
	jmp uuid_00000000000c8374
	jmp uuid_00000000000c8376
uuid_00000000000c8374:
	movb $1, -4704(%rbp)
uuid_00000000000c8376:
	mov -4720(%RBP),%RSP
	add $-4720, %RSP
uuid_00000000000c8379:
	mov -4712(%RBP),%RSP
	add $-4720, %RSP
	mov -4704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8387
	jmp uuid_00000000000c8389
uuid_00000000000c8387:
	push %RBP
	mov -4584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4800(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8381
	jmp uuid_00000000000c8383
uuid_00000000000c8381:
	push %RBP
	jmp uuid_00000000000c837e
	jmp uuid_00000000000c8380
uuid_00000000000c837e:
	push %RBP
	mov -4736(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4840(%rbp)
	pushq $uuid_00000000000c837a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c837b
	jmp uuid_00000000000c837d
uuid_00000000000c837b:
	movb $1, -4808(%rbp)
uuid_00000000000c837d:
	mov -4832(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000c8380:
	mov -4824(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000c8383:
	mov -4816(%RBP),%RSP
	add $-4840, %RSP
	mov -4808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8384
	jmp uuid_00000000000c8386
uuid_00000000000c8384:
	movb $1, -4608(%rbp)
uuid_00000000000c8386:
	mov -4728(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000c8389:
	mov -4624(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000c838c:
	mov -4616(%RBP),%RSP
	add $-4840, %RSP
	mov -4608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8399
	jmp uuid_00000000000c839b
uuid_00000000000c8399:
	push %RBP
	mov -4488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4920(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8393
	jmp uuid_00000000000c8395
uuid_00000000000c8393:
	push %RBP
	jmp uuid_00000000000c8390
	jmp uuid_00000000000c8392
uuid_00000000000c8390:
	push %RBP
	mov -4856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c838d
	jmp uuid_00000000000c838f
uuid_00000000000c838d:
	movb $1, -4928(%rbp)
uuid_00000000000c838f:
	mov -4952(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c8392:
	mov -4944(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c8395:
	mov -4936(%RBP),%RSP
	add $-4960, %RSP
	mov -4928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8396
	jmp uuid_00000000000c8398
uuid_00000000000c8396:
	movb $1, -4512(%rbp)
uuid_00000000000c8398:
	mov -4848(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c839b:
	mov -4528(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c839e:
	mov -4520(%RBP),%RSP
	add $-4960, %RSP
	mov -4512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c839f
	jmp uuid_00000000000c83a1
uuid_00000000000c839f:
	movb $1, -3760(%rbp)
uuid_00000000000c83a1:
	mov -4432(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c83a4:
	mov -3776(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c83a7:
	mov -3768(%RBP),%RSP
	add $-4960, %RSP
	mov -3760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c855d
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -5040(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c83d4
	jmp uuid_00000000000c83d6
uuid_00000000000c83d4:
	push %RBP
	mov -5032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5136(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c83c1
	jmp uuid_00000000000c83c3
uuid_00000000000c83c1:
	push %RBP
	mov -5128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c83be
	jmp uuid_00000000000c83c0
uuid_00000000000c83be:
	push %RBP
	mov -5120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c83bb
	jmp uuid_00000000000c83bd
uuid_00000000000c83bb:
	movb $1, -5144(%rbp)
uuid_00000000000c83bd:
	mov -5240(%RBP),%RSP
	add $-5312, %RSP
uuid_00000000000c83c0:
	mov -5160(%RBP),%RSP
	add $-5312, %RSP
uuid_00000000000c83c3:
	mov -5152(%RBP),%RSP
	add $-5312, %RSP
	mov -5144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c83d1
	jmp uuid_00000000000c83d3
uuid_00000000000c83d1:
	push %RBP
	mov -5024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5392(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c83cb
	jmp uuid_00000000000c83cd
uuid_00000000000c83cb:
	push %RBP
	jmp uuid_00000000000c83c8
	jmp uuid_00000000000c83ca
uuid_00000000000c83c8:
	push %RBP
	mov -5328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5432(%rbp)
	pushq $uuid_00000000000c83c4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c83c5
	jmp uuid_00000000000c83c7
uuid_00000000000c83c5:
	movb $1, -5400(%rbp)
uuid_00000000000c83c7:
	mov -5424(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000c83ca:
	mov -5416(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000c83cd:
	mov -5408(%RBP),%RSP
	add $-5432, %RSP
	mov -5400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c83ce
	jmp uuid_00000000000c83d0
uuid_00000000000c83ce:
	movb $1, -5048(%rbp)
uuid_00000000000c83d0:
	mov -5320(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000c83d3:
	mov -5064(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000c83d6:
	mov -5056(%RBP),%RSP
	add $-5432, %RSP
	mov -5048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c855a
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -5512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c83ea
	jmp uuid_00000000000c83ec
uuid_00000000000c83ea:
	push %RBP
	jmp uuid_00000000000c83e7
	jmp uuid_00000000000c83e9
uuid_00000000000c83e7:
	push %RBP
	mov -5496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c83e1
	jmp uuid_00000000000c83e3
uuid_00000000000c83e1:
	push %RBP
	jmp uuid_00000000000c83de
	jmp uuid_00000000000c83e0
uuid_00000000000c83de:
	push %RBP
	mov -5552(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5656(%rbp)
	pushq $uuid_00000000000c83da
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c83db
	jmp uuid_00000000000c83dd
uuid_00000000000c83db:
	movb $1, -5624(%rbp)
uuid_00000000000c83dd:
	mov -5648(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c83e0:
	mov -5640(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c83e3:
	mov -5632(%RBP),%RSP
	add $-5656, %RSP
	mov -5624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c83e4
	jmp uuid_00000000000c83e6
uuid_00000000000c83e4:
	movb $1, -5520(%rbp)
uuid_00000000000c83e6:
	mov -5544(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c83e9:
	mov -5536(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c83ec:
	mov -5528(%RBP),%RSP
	add $-5656, %RSP
	mov -5520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8557
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -5736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c83fd
	jmp uuid_00000000000c83ff
uuid_00000000000c83fd:
	push %RBP
	mov -5728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c83fa
	jmp uuid_00000000000c83fc
uuid_00000000000c83fa:
	push %RBP
	mov -5720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5912(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c83f4
	jmp uuid_00000000000c83f6
uuid_00000000000c83f4:
	push %RBP
	jmp uuid_00000000000c83f1
	jmp uuid_00000000000c83f3
uuid_00000000000c83f1:
	push %RBP
	mov -5848(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5952(%rbp)
	pushq $uuid_00000000000c83ed
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c83ee
	jmp uuid_00000000000c83f0
uuid_00000000000c83ee:
	movb $1, -5920(%rbp)
uuid_00000000000c83f0:
	mov -5944(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c83f3:
	mov -5936(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c83f6:
	mov -5928(%RBP),%RSP
	add $-5952, %RSP
	mov -5920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c83f7
	jmp uuid_00000000000c83f9
uuid_00000000000c83f7:
	movb $1, -5744(%rbp)
uuid_00000000000c83f9:
	mov -5840(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c83fc:
	mov -5760(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c83ff:
	mov -5752(%RBP),%RSP
	add $-5952, %RSP
	mov -5744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8554
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -6032(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8419
	jmp uuid_00000000000c841b
uuid_00000000000c8419:
	push %RBP
	mov -6024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8406
	jmp uuid_00000000000c8408
uuid_00000000000c8406:
	push %RBP
	mov -6120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8403
	jmp uuid_00000000000c8405
uuid_00000000000c8403:
	push %RBP
	mov -6112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8400
	jmp uuid_00000000000c8402
uuid_00000000000c8400:
	movb $1, -6136(%rbp)
uuid_00000000000c8402:
	mov -6232(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c8405:
	mov -6152(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c8408:
	mov -6144(%RBP),%RSP
	add $-6304, %RSP
	mov -6136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8416
	jmp uuid_00000000000c8418
uuid_00000000000c8416:
	push %RBP
	mov -6016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6384(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8410
	jmp uuid_00000000000c8412
uuid_00000000000c8410:
	push %RBP
	jmp uuid_00000000000c840d
	jmp uuid_00000000000c840f
uuid_00000000000c840d:
	push %RBP
	mov -6320(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6424(%rbp)
	pushq $uuid_00000000000c8409
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c840a
	jmp uuid_00000000000c840c
uuid_00000000000c840a:
	movb $1, -6392(%rbp)
uuid_00000000000c840c:
	mov -6416(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000c840f:
	mov -6408(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000c8412:
	mov -6400(%RBP),%RSP
	add $-6424, %RSP
	mov -6392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8413
	jmp uuid_00000000000c8415
uuid_00000000000c8413:
	movb $1, -6040(%rbp)
uuid_00000000000c8415:
	mov -6312(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000c8418:
	mov -6056(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000c841b:
	mov -6048(%RBP),%RSP
	add $-6424, %RSP
	mov -6040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8551
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -6504(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8437
	jmp uuid_00000000000c8439
uuid_00000000000c8437:
	push %RBP
	mov -6496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8425
	jmp uuid_00000000000c8427
uuid_00000000000c8425:
	push %RBP
	mov -6592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8422
	jmp uuid_00000000000c8424
uuid_00000000000c8422:
	push %RBP
	mov -6584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c841f
	jmp uuid_00000000000c8421
uuid_00000000000c841f:
	movb $1, -6608(%rbp)
uuid_00000000000c8421:
	mov -6704(%RBP),%RSP
	add $-6776, %RSP
uuid_00000000000c8424:
	mov -6624(%RBP),%RSP
	add $-6776, %RSP
uuid_00000000000c8427:
	mov -6616(%RBP),%RSP
	add $-6776, %RSP
	mov -6608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8434
	jmp uuid_00000000000c8436
uuid_00000000000c8434:
	push %RBP
	mov -6488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6856(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c842e
	jmp uuid_00000000000c8430
uuid_00000000000c842e:
	push %RBP
	jmp uuid_00000000000c842b
	jmp uuid_00000000000c842d
uuid_00000000000c842b:
	push %RBP
	mov -6792(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6896(%rbp)
	pushq $uuid_00000000000c4cf3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8428
	jmp uuid_00000000000c842a
uuid_00000000000c8428:
	movb $1, -6864(%rbp)
uuid_00000000000c842a:
	mov -6888(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000c842d:
	mov -6880(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000c8430:
	mov -6872(%RBP),%RSP
	add $-6896, %RSP
	mov -6864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8431
	jmp uuid_00000000000c8433
uuid_00000000000c8431:
	movb $1, -6512(%rbp)
uuid_00000000000c8433:
	mov -6784(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000c8436:
	mov -6528(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000c8439:
	mov -6520(%RBP),%RSP
	add $-6896, %RSP
	mov -6512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c854e
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -6976(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8456
	jmp uuid_00000000000c8458
uuid_00000000000c8456:
	push %RBP
	mov -6968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7072(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8443
	jmp uuid_00000000000c8445
uuid_00000000000c8443:
	push %RBP
	mov -7064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8440
	jmp uuid_00000000000c8442
uuid_00000000000c8440:
	push %RBP
	mov -7056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c843d
	jmp uuid_00000000000c843f
uuid_00000000000c843d:
	movb $1, -7080(%rbp)
uuid_00000000000c843f:
	mov -7176(%RBP),%RSP
	add $-7248, %RSP
uuid_00000000000c8442:
	mov -7096(%RBP),%RSP
	add $-7248, %RSP
uuid_00000000000c8445:
	mov -7088(%RBP),%RSP
	add $-7248, %RSP
	mov -7080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8453
	jmp uuid_00000000000c8455
uuid_00000000000c8453:
	push %RBP
	mov -6960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7328(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c844d
	jmp uuid_00000000000c844f
uuid_00000000000c844d:
	push %RBP
	jmp uuid_00000000000c844a
	jmp uuid_00000000000c844c
uuid_00000000000c844a:
	push %RBP
	mov -7264(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7368(%rbp)
	pushq $uuid_00000000000c8446
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8447
	jmp uuid_00000000000c8449
uuid_00000000000c8447:
	movb $1, -7336(%rbp)
uuid_00000000000c8449:
	mov -7360(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000c844c:
	mov -7352(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000c844f:
	mov -7344(%RBP),%RSP
	add $-7368, %RSP
	mov -7336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8450
	jmp uuid_00000000000c8452
uuid_00000000000c8450:
	movb $1, -6984(%rbp)
uuid_00000000000c8452:
	mov -7256(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000c8455:
	mov -7000(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000c8458:
	mov -6992(%RBP),%RSP
	add $-7368, %RSP
	mov -6984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c854b
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -7448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8471
	jmp uuid_00000000000c8473
uuid_00000000000c8471:
	push %RBP
	mov -7440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7544(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c845f
	jmp uuid_00000000000c8461
uuid_00000000000c845f:
	push %RBP
	mov -7536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c845c
	jmp uuid_00000000000c845e
uuid_00000000000c845c:
	push %RBP
	mov -7528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8459
	jmp uuid_00000000000c845b
uuid_00000000000c8459:
	movb $1, -7552(%rbp)
uuid_00000000000c845b:
	mov -7648(%RBP),%RSP
	add $-7720, %RSP
uuid_00000000000c845e:
	mov -7568(%RBP),%RSP
	add $-7720, %RSP
uuid_00000000000c8461:
	mov -7560(%RBP),%RSP
	add $-7720, %RSP
	mov -7552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c846e
	jmp uuid_00000000000c8470
uuid_00000000000c846e:
	push %RBP
	mov -7432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7800(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8468
	jmp uuid_00000000000c846a
uuid_00000000000c8468:
	push %RBP
	jmp uuid_00000000000c8465
	jmp uuid_00000000000c8467
uuid_00000000000c8465:
	push %RBP
	mov -7736(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7840(%rbp)
	pushq $uuid_00000000000c4af3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8462
	jmp uuid_00000000000c8464
uuid_00000000000c8462:
	movb $1, -7808(%rbp)
uuid_00000000000c8464:
	mov -7832(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000c8467:
	mov -7824(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000c846a:
	mov -7816(%RBP),%RSP
	add $-7840, %RSP
	mov -7808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c846b
	jmp uuid_00000000000c846d
uuid_00000000000c846b:
	movb $1, -7456(%rbp)
uuid_00000000000c846d:
	mov -7728(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000c8470:
	mov -7472(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000c8473:
	mov -7464(%RBP),%RSP
	add $-7840, %RSP
	mov -7456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8548
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -7920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c848d
	jmp uuid_00000000000c848f
uuid_00000000000c848d:
	push %RBP
	mov -7912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8016(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c847a
	jmp uuid_00000000000c847c
uuid_00000000000c847a:
	push %RBP
	mov -8008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8477
	jmp uuid_00000000000c8479
uuid_00000000000c8477:
	push %RBP
	mov -8000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8474
	jmp uuid_00000000000c8476
uuid_00000000000c8474:
	movb $1, -8024(%rbp)
uuid_00000000000c8476:
	mov -8120(%RBP),%RSP
	add $-8192, %RSP
uuid_00000000000c8479:
	mov -8040(%RBP),%RSP
	add $-8192, %RSP
uuid_00000000000c847c:
	mov -8032(%RBP),%RSP
	add $-8192, %RSP
	mov -8024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c848a
	jmp uuid_00000000000c848c
uuid_00000000000c848a:
	push %RBP
	mov -7904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8272(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8484
	jmp uuid_00000000000c8486
uuid_00000000000c8484:
	push %RBP
	jmp uuid_00000000000c8481
	jmp uuid_00000000000c8483
uuid_00000000000c8481:
	push %RBP
	mov -8208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8312(%rbp)
	pushq $uuid_00000000000c847d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c847e
	jmp uuid_00000000000c8480
uuid_00000000000c847e:
	movb $1, -8280(%rbp)
uuid_00000000000c8480:
	mov -8304(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000c8483:
	mov -8296(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000c8486:
	mov -8288(%RBP),%RSP
	add $-8312, %RSP
	mov -8280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8487
	jmp uuid_00000000000c8489
uuid_00000000000c8487:
	movb $1, -7928(%rbp)
uuid_00000000000c8489:
	mov -8200(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000c848c:
	mov -7944(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000c848f:
	mov -7936(%RBP),%RSP
	add $-8312, %RSP
	mov -7928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8545
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -8392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c84a8
	jmp uuid_00000000000c84aa
uuid_00000000000c84a8:
	push %RBP
	mov -8384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8496
	jmp uuid_00000000000c8498
uuid_00000000000c8496:
	push %RBP
	mov -8480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8493
	jmp uuid_00000000000c8495
uuid_00000000000c8493:
	push %RBP
	mov -8472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8490
	jmp uuid_00000000000c8492
uuid_00000000000c8490:
	movb $1, -8496(%rbp)
uuid_00000000000c8492:
	mov -8592(%RBP),%RSP
	add $-8664, %RSP
uuid_00000000000c8495:
	mov -8512(%RBP),%RSP
	add $-8664, %RSP
uuid_00000000000c8498:
	mov -8504(%RBP),%RSP
	add $-8664, %RSP
	mov -8496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c84a5
	jmp uuid_00000000000c84a7
uuid_00000000000c84a5:
	push %RBP
	mov -8376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8744(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c849f
	jmp uuid_00000000000c84a1
uuid_00000000000c849f:
	push %RBP
	jmp uuid_00000000000c849c
	jmp uuid_00000000000c849e
uuid_00000000000c849c:
	push %RBP
	mov -8680(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8784(%rbp)
	pushq $uuid_00000000000c4ccc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8499
	jmp uuid_00000000000c849b
uuid_00000000000c8499:
	movb $1, -8752(%rbp)
uuid_00000000000c849b:
	mov -8776(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000c849e:
	mov -8768(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000c84a1:
	mov -8760(%RBP),%RSP
	add $-8784, %RSP
	mov -8752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c84a2
	jmp uuid_00000000000c84a4
uuid_00000000000c84a2:
	movb $1, -8400(%rbp)
uuid_00000000000c84a4:
	mov -8672(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000c84a7:
	mov -8416(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000c84aa:
	mov -8408(%RBP),%RSP
	add $-8784, %RSP
	mov -8400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8542
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -8864(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c84c3
	jmp uuid_00000000000c84c5
uuid_00000000000c84c3:
	push %RBP
	mov -8856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8960(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c84b1
	jmp uuid_00000000000c84b3
uuid_00000000000c84b1:
	push %RBP
	mov -8952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c84ae
	jmp uuid_00000000000c84b0
uuid_00000000000c84ae:
	push %RBP
	mov -8944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c84ab
	jmp uuid_00000000000c84ad
uuid_00000000000c84ab:
	movb $1, -8968(%rbp)
uuid_00000000000c84ad:
	mov -9064(%RBP),%RSP
	add $-9136, %RSP
uuid_00000000000c84b0:
	mov -8984(%RBP),%RSP
	add $-9136, %RSP
uuid_00000000000c84b3:
	mov -8976(%RBP),%RSP
	add $-9136, %RSP
	mov -8968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c84c0
	jmp uuid_00000000000c84c2
uuid_00000000000c84c0:
	push %RBP
	mov -8848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9216(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c84ba
	jmp uuid_00000000000c84bc
uuid_00000000000c84ba:
	push %RBP
	jmp uuid_00000000000c84b7
	jmp uuid_00000000000c84b9
uuid_00000000000c84b7:
	push %RBP
	mov -9152(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9256(%rbp)
	pushq $uuid_00000000000c48e8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c84b4
	jmp uuid_00000000000c84b6
uuid_00000000000c84b4:
	movb $1, -9224(%rbp)
uuid_00000000000c84b6:
	mov -9248(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000c84b9:
	mov -9240(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000c84bc:
	mov -9232(%RBP),%RSP
	add $-9256, %RSP
	mov -9224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c84bd
	jmp uuid_00000000000c84bf
uuid_00000000000c84bd:
	movb $1, -8872(%rbp)
uuid_00000000000c84bf:
	mov -9144(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000c84c2:
	mov -8888(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000c84c5:
	mov -8880(%RBP),%RSP
	add $-9256, %RSP
	mov -8872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c853f
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -9336(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c84e7
	jmp uuid_00000000000c84e9
uuid_00000000000c84e7:
	push %RBP
	mov -9328(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c84e4
	jmp uuid_00000000000c84e6
uuid_00000000000c84e4:
	push %RBP
	mov -9320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c84de
	jmp uuid_00000000000c84e0
uuid_00000000000c84de:
	push %RBP
	mov -9504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c84db
	jmp uuid_00000000000c84dd
uuid_00000000000c84db:
	push %RBP
	mov -9496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9688(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c84d5
	jmp uuid_00000000000c84d7
uuid_00000000000c84d5:
	push %RBP
	mov -9680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c84d2
	jmp uuid_00000000000c84d4
uuid_00000000000c84d2:
	push %RBP
	mov -9672(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9864(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c84cc
	jmp uuid_00000000000c84ce
uuid_00000000000c84cc:
	push %RBP
	jmp uuid_00000000000c84c9
	jmp uuid_00000000000c84cb
uuid_00000000000c84c9:
	push %RBP
	mov -9800(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9904(%rbp)
	pushq $uuid_00000000000c4e4f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c84c6
	jmp uuid_00000000000c84c8
uuid_00000000000c84c6:
	movb $1, -9872(%rbp)
uuid_00000000000c84c8:
	mov -9896(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c84cb:
	mov -9888(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c84ce:
	mov -9880(%RBP),%RSP
	add $-9904, %RSP
	mov -9872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c84cf
	jmp uuid_00000000000c84d1
uuid_00000000000c84cf:
	movb $1, -9696(%rbp)
uuid_00000000000c84d1:
	mov -9792(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c84d4:
	mov -9712(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c84d7:
	mov -9704(%RBP),%RSP
	add $-9904, %RSP
	mov -9696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c84d8
	jmp uuid_00000000000c84da
uuid_00000000000c84d8:
	movb $1, -9520(%rbp)
uuid_00000000000c84da:
	mov -9616(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c84dd:
	mov -9536(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c84e0:
	mov -9528(%RBP),%RSP
	add $-9904, %RSP
	mov -9520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c84e1
	jmp uuid_00000000000c84e3
uuid_00000000000c84e1:
	movb $1, -9344(%rbp)
uuid_00000000000c84e3:
	mov -9440(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c84e6:
	mov -9360(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c84e9:
	mov -9352(%RBP),%RSP
	add $-9904, %RSP
	mov -9344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c853c
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -9984(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8512
	jmp uuid_00000000000c8514
uuid_00000000000c8512:
	push %RBP
	mov -9976(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c850f
	jmp uuid_00000000000c8511
uuid_00000000000c850f:
	push %RBP
	mov -9968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -10160(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8509
	jmp uuid_00000000000c850b
uuid_00000000000c8509:
	push %RBP
	pushq -10136(%RBP)
	pushq -10144(%RBP)
	pushq -10152(%RBP)
	jmp uuid_00000000000c8506
	jmp uuid_00000000000c8508
uuid_00000000000c8506:
	push %RBP
	mov -10128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -10288(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8503
	jmp uuid_00000000000c8505
uuid_00000000000c8503:
	push %RBP
	mov -10120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -10368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c84fd
	jmp uuid_00000000000c84ff
uuid_00000000000c84fd:
	push %RBP
	jmp uuid_00000000000c84fa
	jmp uuid_00000000000c84fc
uuid_00000000000c84fa:
	push %RBP
	mov -10304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c84f7
	jmp uuid_00000000000c84f9
uuid_00000000000c84f7:
	movb $1, -10376(%rbp)
uuid_00000000000c84f9:
	mov -10400(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c84fc:
	mov -10392(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c84ff:
	mov -10384(%RBP),%RSP
	add $-10408, %RSP
	mov -10376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8500
	jmp uuid_00000000000c8502
uuid_00000000000c8500:
	movb $1, -10168(%rbp)
uuid_00000000000c8502:
	mov -10296(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c8505:
	mov -10216(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c8508:
	mov -10184(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c850b:
	mov -10176(%RBP),%RSP
	add $-10408, %RSP
	mov -10168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c850c
	jmp uuid_00000000000c850e
uuid_00000000000c850c:
	movb $1, -9992(%rbp)
uuid_00000000000c850e:
	mov -10088(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c8511:
	mov -10008(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c8514:
	mov -10000(%RBP),%RSP
	add $-10408, %RSP
	mov -9992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8539
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -10488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c851b
	jmp uuid_00000000000c851d
uuid_00000000000c851b:
	push %RBP
	mov -10480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8518
	jmp uuid_00000000000c851a
uuid_00000000000c8518:
	push %RBP
	mov -10472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8515
	jmp uuid_00000000000c8517
uuid_00000000000c8515:
	movb $1, -10496(%rbp)
uuid_00000000000c8517:
	mov -10592(%RBP),%RSP
	add $-10664, %RSP
uuid_00000000000c851a:
	mov -10512(%RBP),%RSP
	add $-10664, %RSP
uuid_00000000000c851d:
	mov -10504(%RBP),%RSP
	add $-10664, %RSP
	mov -10496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8536
	push %RBP
	jmp uuid_00000000000c8533
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8532
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8535
uuid_00000000000c8533:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c8531
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c8535:
	mov -10672(%RBP),%RSP
	add $-10672, %RSP
	jmp uuid_00000000000c8538
uuid_00000000000c8536:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10600(%rbp)
	pushq -10608(%rbp)
	pushq -10616(%rbp)
	pushq -10624(%rbp)
	pushq -10632(%rbp)
	pushq -10640(%rbp)
	pushq -10648(%rbp)
	pushq -10656(%rbp)
	pushq -10664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c852e
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -10600(%rbp)
	pushq -10608(%rbp)
	pushq -10616(%rbp)
	pushq -10624(%rbp)
	pushq -10632(%rbp)
	pushq -10640(%rbp)
	pushq -10648(%rbp)
	pushq -10656(%rbp)
	pushq -10664(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10680(%RBP)
	pushq -10688(%RBP)
	pushq -10696(%RBP)
	pushq -10704(%RBP)
	pushq -10712(%RBP)
	pushq -10720(%RBP)
	pushq -10728(%RBP)
	pushq -10736(%RBP)
	pushq -10744(%RBP)
	pushq -10752(%RBP)
	pushq -10760(%RBP)
	pushq -10768(%RBP)
	pushq -10776(%RBP)
	pushq -10784(%RBP)
	pushq -10792(%RBP)
	pushq -10800(%RBP)
	pushq -10808(%RBP)
	pushq -10816(%RBP)
	pushq -10824(%RBP)
	pushq -10832(%RBP)
	pushq -10840(%RBP)
	pushq -10848(%RBP)
	pushq -10856(%RBP)
	pushq -10864(%RBP)
	pushq -10872(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -10568(%rbp)
	pushq -10576(%rbp)
	pushq -10584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10912(%RBP)
	pushq -10920(%RBP)
	pushq -10928(%RBP)
	pushq -10936(%RBP)
	pushq -10944(%RBP)
	pushq -10952(%RBP)
	pushq -10960(%RBP)
	pushq -10968(%RBP)
	pushq -10976(%RBP)
	pushq -10984(%RBP)
	pushq -10992(%RBP)
	pushq -11000(%RBP)
	pushq -11008(%RBP)
	pushq -11016(%RBP)
	pushq -11024(%RBP)
	pushq -11032(%RBP)
	pushq -11040(%RBP)
	pushq -11048(%RBP)
	pushq -11056(%RBP)
	pushq -11064(%RBP)
	pushq -11072(%RBP)
	pushq -11080(%RBP)
	pushq -11088(%RBP)
	pushq -11096(%RBP)
	pushq -11104(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -10880(%RBP)
	pushq -10888(%RBP)
	pushq -10896(%RBP)
	pushq -11112(%RBP)
	pushq -11120(%RBP)
	pushq -11128(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -11144(%rbp)
	pushq -11152(%rbp)
	pushq -11160(%rbp)
	pushq -11168(%rbp)
	pushq -11176(%rbp)
	pushq -11184(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c8530
uuid_00000000000c852e:
	pushq -10600(%rbp)
	pushq -10608(%rbp)
	pushq -10616(%rbp)
	pushq -10624(%rbp)
	pushq -10632(%rbp)
	pushq -10640(%rbp)
	pushq -10648(%rbp)
	pushq -10656(%rbp)
	pushq -10664(%rbp)
	push %RBP
	pushq -10680(%rbp)
	pushq -10688(%rbp)
	pushq -10696(%rbp)
	pushq -10704(%rbp)
	pushq -10712(%rbp)
	pushq -10720(%rbp)
	pushq -10728(%rbp)
	pushq -10736(%rbp)
	pushq -10744(%rbp)
	pushq $0
	push %RBP
	mov -10824(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8524
	jmp uuid_00000000000c8526
uuid_00000000000c8524:
	push %RBP
	jmp uuid_00000000000c8521
	jmp uuid_00000000000c8523
uuid_00000000000c8521:
	push %RBP
	mov -10760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c851e
	jmp uuid_00000000000c8520
uuid_00000000000c851e:
	movb $1, -10832(%rbp)
uuid_00000000000c8520:
	mov -10856(%RBP),%RSP
	add $-10864, %RSP
uuid_00000000000c8523:
	mov -10848(%RBP),%RSP
	add $-10864, %RSP
uuid_00000000000c8526:
	mov -10840(%RBP),%RSP
	add $-10864, %RSP
	mov -10832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c852b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c852a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c852d
uuid_00000000000c852b:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10864(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8527
#call function cc-blob : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -10864(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -10568(%rbp)
	pushq -10576(%rbp)
	pushq -10584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10880(%rbp)
	pushq -10888(%rbp)
	pushq -10896(%rbp)
	pushq -10904(%rbp)
	pushq -10912(%rbp)
	pushq -10920(%rbp)
	pushq -10928(%rbp)
	pushq -10936(%rbp)
	pushq -10944(%rbp)
	pushq -10952(%rbp)
	pushq -10960(%rbp)
	pushq -10968(%rbp)
	pushq -10976(%rbp)
	pushq -10984(%rbp)
	pushq -10992(%rbp)
	pushq -11000(%rbp)
	pushq -11008(%rbp)
	pushq -11016(%rbp)
	pushq -11024(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c8529
uuid_00000000000c8527:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -10864(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -10568(%rbp)
	pushq -10576(%rbp)
	pushq -10584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -11080(%RBP)
	pushq -11088(%RBP)
	pushq -11096(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8529:
	mov -10872(%RBP),%RSP
	add $-11104, %RSP
uuid_00000000000c852d:
	mov -10752(%RBP),%RSP
	add $-11104, %RSP
uuid_00000000000c8530:
	mov -10672(%RBP),%RSP
	add $-11104, %RSP
uuid_00000000000c8538:
	mov -10416(%RBP),%RSP
	add $-11104, %RSP
	jmp uuid_00000000000c853b
uuid_00000000000c8539:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -10016(%rbp)
	pushq -10024(%rbp)
	pushq -10032(%rbp)
	pushq -10040(%rbp)
	pushq -10048(%rbp)
	pushq -10056(%rbp)
	pushq -10064(%rbp)
	pushq -10072(%rbp)
	pushq -10080(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10768(%RBP)
	pushq -10776(%RBP)
	pushq -10784(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10416(%rbp)
	pushq -10424(%rbp)
	pushq -10432(%rbp)
	pushq -10440(%rbp)
	pushq -10448(%rbp)
	pushq -10456(%rbp)
	pushq -10464(%rbp)
	pushq -10472(%rbp)
	pushq -10480(%rbp)
	pushq -10488(%rbp)
	pushq -10496(%rbp)
	pushq -10504(%rbp)
	pushq -10512(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -208(%rbp)
	pushq -10800(%rbp)
	pushq -10808(%rbp)
	pushq -10816(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -10560(%RBP)
	popq -10552(%RBP)
	popq -10544(%RBP)
	popq -10536(%RBP)
	popq -10528(%RBP)
	popq -10520(%RBP)
	popq -10512(%RBP)
	popq -10504(%RBP)
	popq -10496(%RBP)
	popq -10488(%RBP)
	popq -10480(%RBP)
	popq -10472(%RBP)
	popq -10464(%RBP)
	popq -10456(%RBP)
	popq -10448(%RBP)
	popq -10440(%RBP)
	popq -10432(%RBP)
	popq -10424(%RBP)
	popq -10416(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10416(%rbp)
	pushq -10424(%rbp)
	pushq -10432(%rbp)
	pushq -10440(%rbp)
	pushq -10448(%rbp)
	pushq -10456(%rbp)
	pushq -10464(%rbp)
	pushq -10472(%rbp)
	pushq -10480(%rbp)
	pushq -10488(%rbp)
	pushq -10496(%rbp)
	pushq -10504(%rbp)
	pushq -10512(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq $uuid_00000000000c6d83
	pushq -10800(%rbp)
	pushq -10808(%rbp)
	pushq -10816(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -10560(%RBP)
	popq -10552(%RBP)
	popq -10544(%RBP)
	popq -10536(%RBP)
	popq -10528(%RBP)
	popq -10520(%RBP)
	popq -10512(%RBP)
	popq -10504(%RBP)
	popq -10496(%RBP)
	popq -10488(%RBP)
	popq -10480(%RBP)
	popq -10472(%RBP)
	popq -10464(%RBP)
	popq -10456(%RBP)
	popq -10448(%RBP)
	popq -10440(%RBP)
	popq -10432(%RBP)
	popq -10424(%RBP)
	popq -10416(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -10408(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10016(%rbp)
	pushq -10024(%rbp)
	pushq -10032(%rbp)
	pushq -10040(%rbp)
	pushq -10048(%rbp)
	pushq -10056(%rbp)
	pushq -10064(%rbp)
	pushq -10072(%rbp)
	pushq -10080(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -10416(%rbp)
	pushq -10424(%rbp)
	pushq -10432(%rbp)
	pushq -10440(%rbp)
	pushq -10448(%rbp)
	pushq -10456(%rbp)
	pushq -10464(%rbp)
	pushq -10472(%rbp)
	pushq -10480(%rbp)
	pushq -10488(%rbp)
	pushq -10496(%rbp)
	pushq -10504(%rbp)
	pushq -10512(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c853b:
	mov -9912(%RBP),%RSP
	add $-10816, %RSP
	jmp uuid_00000000000c853e
uuid_00000000000c853c:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9720(%rbp)
	pushq -9728(%rbp)
	pushq -9736(%rbp)
	pushq -9744(%rbp)
	pushq -9752(%rbp)
	pushq -9760(%rbp)
	pushq -9768(%rbp)
	pushq -9776(%rbp)
	pushq -9784(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10112(%RBP)
	pushq -10120(%RBP)
	pushq -10128(%RBP)
	pushq -10144(%rbp)
	pushq -10152(%rbp)
	pushq -10160(%rbp)
	push %RBP
	pushq -10168(%rbp)
	pushq -10176(%rbp)
	pushq -10184(%rbp)
	pushq $0
	push %RBP
	mov -10216(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c84ed
	jmp uuid_00000000000c84ef
uuid_00000000000c84ed:
	push %RBP
	mov -10208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10248(%rbp)
	pushq $uuid_00000000000c491d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c84ea
	jmp uuid_00000000000c84ec
uuid_00000000000c84ea:
	movb $1, -10224(%rbp)
uuid_00000000000c84ec:
	mov -10240(%RBP),%RSP
	add $-10248, %RSP
uuid_00000000000c84ef:
	mov -10232(%RBP),%RSP
	add $-10248, %RSP
	mov -10224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c84f4
	push %RBP
	jmp uuid_00000000000c84f1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c84f0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c84f3
uuid_00000000000c84f1:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9368(%rbp)
	pushq -9376(%rbp)
	pushq -9384(%rbp)
	pushq -9392(%rbp)
	pushq -9400(%rbp)
	pushq -9408(%rbp)
	pushq -9416(%rbp)
	pushq -9424(%rbp)
	pushq -9432(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10464(%RBP)
	pushq -10472(%RBP)
	pushq -10480(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c84f3:
	mov -10256(%RBP),%RSP
	add $-10488, %RSP
	jmp uuid_00000000000c84f6
uuid_00000000000c84f4:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9544(%rbp)
	pushq -9552(%rbp)
	pushq -9560(%rbp)
	pushq -9568(%rbp)
	pushq -9576(%rbp)
	pushq -9584(%rbp)
	pushq -9592(%rbp)
	pushq -9600(%rbp)
	pushq -9608(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10456(%RBP)
	pushq -10464(%RBP)
	pushq -10472(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c84f6:
	mov -10192(%RBP),%RSP
	add $-10480, %RSP
uuid_00000000000c853e:
	mov -9264(%RBP),%RSP
	add $-10480, %RSP
	jmp uuid_00000000000c8541
uuid_00000000000c853f:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9072(%rbp)
	pushq -9080(%rbp)
	pushq -9088(%rbp)
	pushq -9096(%rbp)
	pushq -9104(%rbp)
	pushq -9112(%rbp)
	pushq -9120(%rbp)
	pushq -9128(%rbp)
	pushq -9136(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -9464(%RBP)
	pushq -9472(%RBP)
	pushq -9480(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8992(%rbp)
	pushq -9000(%rbp)
	pushq -9008(%rbp)
	pushq -9016(%rbp)
	pushq -9024(%rbp)
	pushq -9032(%rbp)
	pushq -9040(%rbp)
	pushq -9048(%rbp)
	pushq -9056(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -9720(%RBP)
	pushq -9728(%RBP)
	pushq -9736(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9496(%rbp)
	pushq -9504(%rbp)
	pushq -9512(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9752(%rbp)
	pushq -9760(%rbp)
	pushq -9768(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -9776(%RBP), %RAX
	mov -9784(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8541:
	mov -8792(%RBP),%RSP
	add $-9784, %RSP
	jmp uuid_00000000000c8544
uuid_00000000000c8542:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq -8648(%rbp)
	pushq -8656(%rbp)
	pushq -8664(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8992(%RBP)
	pushq -9000(%RBP)
	pushq -9008(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8520(%rbp)
	pushq -8528(%rbp)
	pushq -8536(%rbp)
	pushq -8544(%rbp)
	pushq -8552(%rbp)
	pushq -8560(%rbp)
	pushq -8568(%rbp)
	pushq -8576(%rbp)
	pushq -8584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -9248(%RBP)
	pushq -9256(%RBP)
	pushq -9264(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9024(%rbp)
	pushq -9032(%rbp)
	pushq -9040(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9280(%rbp)
	pushq -9288(%rbp)
	pushq -9296(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -9304(%RBP), %RAX
	mov -9312(%RBP), %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8544:
	mov -8320(%RBP),%RSP
	add $-9312, %RSP
	jmp uuid_00000000000c8547
uuid_00000000000c8545:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8128(%rbp)
	pushq -8136(%rbp)
	pushq -8144(%rbp)
	pushq -8152(%rbp)
	pushq -8160(%rbp)
	pushq -8168(%rbp)
	pushq -8176(%rbp)
	pushq -8184(%rbp)
	pushq -8192(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8520(%RBP)
	pushq -8528(%RBP)
	pushq -8536(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8048(%rbp)
	pushq -8056(%rbp)
	pushq -8064(%rbp)
	pushq -8072(%rbp)
	pushq -8080(%rbp)
	pushq -8088(%rbp)
	pushq -8096(%rbp)
	pushq -8104(%rbp)
	pushq -8112(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8776(%RBP)
	pushq -8784(%RBP)
	pushq -8792(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8552(%rbp)
	pushq -8560(%rbp)
	pushq -8568(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8808(%rbp)
	pushq -8816(%rbp)
	pushq -8824(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8832(%RBP), %RAX
	mov -8840(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8547:
	mov -7848(%RBP),%RSP
	add $-8840, %RSP
	jmp uuid_00000000000c854a
uuid_00000000000c8548:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7656(%rbp)
	pushq -7664(%rbp)
	pushq -7672(%rbp)
	pushq -7680(%rbp)
	pushq -7688(%rbp)
	pushq -7696(%rbp)
	pushq -7704(%rbp)
	pushq -7712(%rbp)
	pushq -7720(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8048(%RBP)
	pushq -8056(%RBP)
	pushq -8064(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7576(%rbp)
	pushq -7584(%rbp)
	pushq -7592(%rbp)
	pushq -7600(%rbp)
	pushq -7608(%rbp)
	pushq -7616(%rbp)
	pushq -7624(%rbp)
	pushq -7632(%rbp)
	pushq -7640(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8304(%RBP)
	pushq -8312(%RBP)
	pushq -8320(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8080(%rbp)
	pushq -8088(%rbp)
	pushq -8096(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8336(%rbp)
	pushq -8344(%rbp)
	pushq -8352(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8360(%RBP), %RAX
	mov -8368(%RBP), %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c854a:
	mov -7376(%RBP),%RSP
	add $-8368, %RSP
	jmp uuid_00000000000c854d
uuid_00000000000c854b:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7184(%rbp)
	pushq -7192(%rbp)
	pushq -7200(%rbp)
	pushq -7208(%rbp)
	pushq -7216(%rbp)
	pushq -7224(%rbp)
	pushq -7232(%rbp)
	pushq -7240(%rbp)
	pushq -7248(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7576(%RBP)
	pushq -7584(%RBP)
	pushq -7592(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7104(%rbp)
	pushq -7112(%rbp)
	pushq -7120(%rbp)
	pushq -7128(%rbp)
	pushq -7136(%rbp)
	pushq -7144(%rbp)
	pushq -7152(%rbp)
	pushq -7160(%rbp)
	pushq -7168(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7832(%RBP)
	pushq -7840(%RBP)
	pushq -7848(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7608(%rbp)
	pushq -7616(%rbp)
	pushq -7624(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7864(%rbp)
	pushq -7872(%rbp)
	pushq -7880(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -7888(%RBP), %RAX
	mov -7896(%RBP), %R14
	mov $0, %RDX
	div %R14
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c854d:
	mov -6904(%RBP),%RSP
	add $-7896, %RSP
	jmp uuid_00000000000c8550
uuid_00000000000c854e:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6712(%rbp)
	pushq -6720(%rbp)
	pushq -6728(%rbp)
	pushq -6736(%rbp)
	pushq -6744(%rbp)
	pushq -6752(%rbp)
	pushq -6760(%rbp)
	pushq -6768(%rbp)
	pushq -6776(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7104(%RBP)
	pushq -7112(%RBP)
	pushq -7120(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6632(%rbp)
	pushq -6640(%rbp)
	pushq -6648(%rbp)
	pushq -6656(%rbp)
	pushq -6664(%rbp)
	pushq -6672(%rbp)
	pushq -6680(%rbp)
	pushq -6688(%rbp)
	pushq -6696(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7360(%RBP)
	pushq -7368(%RBP)
	pushq -7376(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7136(%rbp)
	pushq -7144(%rbp)
	pushq -7152(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7392(%rbp)
	pushq -7400(%rbp)
	pushq -7408(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -7416(%RBP), %RAX
	mov -7424(%RBP), %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c843a
	pushq $0
	pushq $uuid_00000000000c48e4
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c843c
uuid_00000000000c843a:
	pushq $0
	pushq $uuid_00000000000c491d
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c843c:
	mov -7432(%RBP),%RSP
	add $-7432, %RSP
uuid_00000000000c8550:
	mov -6432(%RBP),%RSP
	add $-7432, %RSP
	jmp uuid_00000000000c8553
uuid_00000000000c8551:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6240(%rbp)
	pushq -6248(%rbp)
	pushq -6256(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	pushq -6288(%rbp)
	pushq -6296(%rbp)
	pushq -6304(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -6632(%RBP)
	pushq -6640(%RBP)
	pushq -6648(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6160(%rbp)
	pushq -6168(%rbp)
	pushq -6176(%rbp)
	pushq -6184(%rbp)
	pushq -6192(%rbp)
	pushq -6200(%rbp)
	pushq -6208(%rbp)
	pushq -6216(%rbp)
	pushq -6224(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -6888(%RBP)
	pushq -6896(%RBP)
	pushq -6904(%RBP)
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6664(%rbp)
	pushq -6672(%rbp)
	pushq -6680(%rbp)
	pushq -6920(%rbp)
	pushq -6928(%rbp)
	pushq -6936(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c841c
	pushq $0
	pushq $uuid_00000000000c48e4
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c841e
uuid_00000000000c841c:
	pushq $0
	pushq $uuid_00000000000c491d
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c841e:
	mov -6944(%RBP),%RSP
	add $-6944, %RSP
uuid_00000000000c8553:
	mov -5960(%RBP),%RSP
	add $-6944, %RSP
	jmp uuid_00000000000c8556
uuid_00000000000c8554:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -5768(%rbp)
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	pushq -5800(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -6160(%RBP)
	pushq -6168(%RBP)
	pushq -6176(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6192(%rbp)
	pushq -6200(%rbp)
	pushq -6208(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function align : Arrow<I64,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6216(%rbp)
	mov %RBX, %RBP
	call align_CL_ArrowI64I64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8556:
	mov -5664(%RBP),%RSP
	add $-6216, %RSP
	jmp uuid_00000000000c8559
uuid_00000000000c8557:
	pushq $0
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8559:
	mov -5440(%RBP),%RSP
	add $-5656, %RSP
	jmp uuid_00000000000c855c
uuid_00000000000c855a:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5640(%RBP)
	pushq -5648(%RBP)
	pushq -5656(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5896(%RBP)
	pushq -5904(%RBP)
	pushq -5912(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5672(%rbp)
	pushq -5680(%rbp)
	pushq -5688(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5928(%rbp)
	pushq -5936(%rbp)
	pushq -5944(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c83d7:
	mov -5952(%RBP), %RAX
	mov -5960(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c83d8
	jmp uuid_00000000000c83d9
uuid_00000000000c83d8:
	mov -5960(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -5960(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5960(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c83d7
uuid_00000000000c83d9:
uuid_00000000000c855c:
	mov -4968(%RBP),%RSP
	add $-5960, %RSP
	jmp uuid_00000000000c855f
uuid_00000000000c855d:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	pushq -4120(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5168(%RBP)
	pushq -5176(%RBP)
	pushq -5184(%RBP)
uuid_00000000000c83b8:
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c83b9
	jmp uuid_00000000000c83ba
uuid_00000000000c83b9:
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	push %RBP
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq $0
	push %RBP
	mov -5272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c83ae
	jmp uuid_00000000000c83b0
uuid_00000000000c83ae:
	push %RBP
	mov -5264(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c83ab
	jmp uuid_00000000000c83ad
uuid_00000000000c83ab:
	push %RBP
	mov -5256(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c83a8
	jmp uuid_00000000000c83aa
uuid_00000000000c83a8:
	movb $1, -5280(%rbp)
uuid_00000000000c83aa:
	mov -5328(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000c83ad:
	mov -5296(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000c83b0:
	mov -5288(%RBP),%RSP
	add $-5352, %RSP
	mov -5280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c83b5
	push %RBP
	jmp uuid_00000000000c83b2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c83b1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c83b4
uuid_00000000000c83b2:
	pushq $0
	pushq $0
	pushq $3
	popq -5216(%RBP)
	popq -5208(%RBP)
	popq -5200(%RBP)
uuid_00000000000c83b4:
	mov -5360(%RBP),%RSP
	add $-5360, %RSP
	jmp uuid_00000000000c83b7
uuid_00000000000c83b5:
#call function fragment::expression : Arrow<S,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4424(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c8184
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	pushq -5376(%rbp)
	pushq -5384(%rbp)
	pushq -5392(%rbp)
	pushq -5400(%rbp)
	pushq -5408(%rbp)
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	pushq -5440(%rbp)
	pushq -5448(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq -5672(%rbp)
	pushq -5680(%rbp)
	pushq -5688(%rbp)
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -208(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	pushq -3928(%rbp)
	pushq -3936(%rbp)
	pushq -3944(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5912(%RBP)
	pushq -5920(%RBP)
	pushq -5928(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -5944(%rbp)
	pushq -5952(%rbp)
	pushq -5960(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	movq -5320(%rbp), %r15
	movq %r15, -5216(%rbp)
	movq -5312(%rbp), %r15
	movq %r15, -5208(%rbp)
	movq -5304(%rbp), %r15
	movq %r15, -5200(%rbp)
uuid_00000000000c83b7:
	mov -5248(%RBP),%RSP
	add $-5960, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $152, %rsp
	add $200, %rsp
	add $232, %rsp
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000c83b8
uuid_00000000000c83ba:
uuid_00000000000c855f:
	mov -3680(%RBP),%RSP
	add $-5216, %RSP
	jmp uuid_00000000000c8562
uuid_00000000000c8560:
#call function fragment-context::lookup-soft : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2712(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	pushq -3800(%RBP)
	pushq -3808(%RBP)
	pushq -3816(%RBP)
uuid_00000000000c834a:
#call function non-zero : Arrow<List<Array<Fragment,?>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListArray_QM_Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c834b
	jmp uuid_00000000000c834c
uuid_00000000000c834b:
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	push %RBP
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq $0
	push %RBP
	mov -3904(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8343
	jmp uuid_00000000000c8345
uuid_00000000000c8343:
	push %RBP
	mov -3896(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8340
	jmp uuid_00000000000c8342
uuid_00000000000c8340:
	push %RBP
	mov -3888(%RBP), %RAX
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c833d
	jmp uuid_00000000000c833f
uuid_00000000000c833d:
	movb $1, -3912(%rbp)
uuid_00000000000c833f:
	mov -3960(%RBP),%RSP
	add $-4112, %RSP
uuid_00000000000c8342:
	mov -3928(%RBP),%RSP
	add $-4112, %RSP
uuid_00000000000c8345:
	mov -3920(%RBP),%RSP
	add $-4112, %RSP
	mov -3912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8347
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8346
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8349
uuid_00000000000c8347:
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -3136(%rbp)
	pushq -3768(%RBP)
	pushq -3776(%RBP)
	pushq -3784(%RBP)
	pushq -3968(%rbp)
	pushq -3976(%rbp)
	pushq -3984(%rbp)
	pushq -3992(%rbp)
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	pushq -4024(%rbp)
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4120(%rbp)
	pushq -4128(%rbp)
	pushq -4136(%rbp)
	pushq -4144(%rbp)
	pushq -4152(%rbp)
	pushq -4160(%rbp)
	pushq -4168(%rbp)
	pushq -4176(%rbp)
	pushq -4184(%rbp)
	pushq -4192(%rbp)
	pushq -4200(%rbp)
	pushq -4208(%rbp)
	pushq -4216(%rbp)
	pushq -4224(%rbp)
	pushq -4232(%rbp)
	pushq -4240(%rbp)
	pushq -4248(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -4312(%rbp)
	pushq -208(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -4520(%RBP)
	pushq -4528(%RBP)
	pushq -4536(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	movq -3952(%rbp), %r15
	movq %r15, -3848(%rbp)
	movq -3944(%rbp), %r15
	movq %r15, -3840(%rbp)
	movq -3936(%rbp), %r15
	movq %r15, -3832(%rbp)
uuid_00000000000c8349:
	mov -3880(%RBP),%RSP
	add $-4568, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $24, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $200, %rsp
	add $232, %rsp
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000c834a
uuid_00000000000c834c:
uuid_00000000000c8562:
	mov -2136(%RBP),%RSP
	add $-3848, %RSP
	jmp uuid_00000000000c8565
uuid_00000000000c8563:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8565:
	mov -1840(%RBP),%RSP
	add $-2360, %RSP
	jmp uuid_00000000000c8568
uuid_00000000000c8566:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8568:
	mov -1320(%RBP),%RSP
	add $-2064, %RSP
	jmp uuid_00000000000c856b
uuid_00000000000c8569:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c856b:
	mov -800(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000c856e
uuid_00000000000c856c:
	pushq $0
	pushq -792(%rbp)
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c856e:
	mov -680(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000c8571
uuid_00000000000c856f:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -672(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c8571:
	mov -560(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000c8574
uuid_00000000000c8572:
uuid_00000000000c8574:
	mov -480(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000c8577
uuid_00000000000c8575:
uuid_00000000000c8577:
	mov -400(%RBP),%RSP
	add $-472, %RSP
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	subq $232, %rsp
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	pushq 456(%rsp)
	pushq 472(%rsp)
	pushq 488(%rsp)
	pushq 504(%rsp)
	pushq 520(%rsp)
	pushq 536(%rsp)
	pushq 552(%rsp)
	pushq 568(%rsp)
	pushq 584(%rsp)
	pushq 600(%rsp)
	pushq 616(%rsp)
	pushq 632(%rsp)
	pushq 648(%rsp)
	pushq 664(%rsp)
	pushq 680(%rsp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	addq $232, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8596
	jmp uuid_00000000000c8598
uuid_00000000000c8596:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8584
	jmp uuid_00000000000c8586
uuid_00000000000c8584:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -784(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c857b
	jmp uuid_00000000000c857d
uuid_00000000000c857b:
	push %RBP
	jmp uuid_00000000000c8578
	jmp uuid_00000000000c857a
uuid_00000000000c8578:
	movb $1, -792(%rbp)
uuid_00000000000c857a:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c857d:
	mov -800(%RBP),%RSP
	add $-808, %RSP
	mov -792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8581
	jmp uuid_00000000000c8583
uuid_00000000000c8581:
	push %RBP
	mov -672(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c857e
	jmp uuid_00000000000c8580
uuid_00000000000c857e:
	movb $1, -696(%rbp)
uuid_00000000000c8580:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c8583:
	mov -712(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c8586:
	mov -704(%RBP),%RSP
	add $-888, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8593
	jmp uuid_00000000000c8595
uuid_00000000000c8593:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c858d
	jmp uuid_00000000000c858f
uuid_00000000000c858d:
	push %RBP
	jmp uuid_00000000000c858a
	jmp uuid_00000000000c858c
uuid_00000000000c858a:
	push %RBP
	mov -904(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1008(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8587
	jmp uuid_00000000000c8589
uuid_00000000000c8587:
	movb $1, -976(%rbp)
uuid_00000000000c8589:
	mov -1000(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c858c:
	mov -992(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c858f:
	mov -984(%RBP),%RSP
	add $-1008, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8590
	jmp uuid_00000000000c8592
uuid_00000000000c8590:
	movb $1, -600(%rbp)
uuid_00000000000c8592:
	mov -896(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c8595:
	mov -616(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c8598:
	mov -608(%RBP),%RSP
	add $-1008, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c85d6
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -1088(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c85a8
	jmp uuid_00000000000c85aa
uuid_00000000000c85a8:
	push %RBP
	mov -1080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c85a5
	jmp uuid_00000000000c85a7
uuid_00000000000c85a5:
	push %RBP
	mov -1072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1264(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c859f
	jmp uuid_00000000000c85a1
uuid_00000000000c859f:
	push %RBP
	jmp uuid_00000000000c859c
	jmp uuid_00000000000c859e
uuid_00000000000c859c:
	push %RBP
	mov -1200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8599
	jmp uuid_00000000000c859b
uuid_00000000000c8599:
	movb $1, -1272(%rbp)
uuid_00000000000c859b:
	mov -1296(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c859e:
	mov -1288(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c85a1:
	mov -1280(%RBP),%RSP
	add $-1304, %RSP
	mov -1272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c85a2
	jmp uuid_00000000000c85a4
uuid_00000000000c85a2:
	movb $1, -1096(%rbp)
uuid_00000000000c85a4:
	mov -1192(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c85a7:
	mov -1112(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c85aa:
	mov -1104(%RBP),%RSP
	add $-1304, %RSP
	mov -1096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c85d3
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c85c6
	jmp uuid_00000000000c85c8
uuid_00000000000c85c6:
	push %RBP
	mov -1376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c85bd
	jmp uuid_00000000000c85bf
uuid_00000000000c85bd:
	push %RBP
	mov -1472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c85ba
	jmp uuid_00000000000c85bc
uuid_00000000000c85ba:
	push %RBP
	mov -1464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c85b4
	jmp uuid_00000000000c85b6
uuid_00000000000c85b4:
	push %RBP
	jmp uuid_00000000000c85b1
	jmp uuid_00000000000c85b3
uuid_00000000000c85b1:
	push %RBP
	mov -1592(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c85ae
	jmp uuid_00000000000c85b0
uuid_00000000000c85ae:
	movb $1, -1664(%rbp)
uuid_00000000000c85b0:
	mov -1688(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c85b3:
	mov -1680(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c85b6:
	mov -1672(%RBP),%RSP
	add $-1696, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c85b7
	jmp uuid_00000000000c85b9
uuid_00000000000c85b7:
	movb $1, -1488(%rbp)
uuid_00000000000c85b9:
	mov -1584(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c85bc:
	mov -1504(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c85bf:
	mov -1496(%RBP),%RSP
	add $-1696, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c85c3
	jmp uuid_00000000000c85c5
uuid_00000000000c85c3:
	push %RBP
	mov -1368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c85c0
	jmp uuid_00000000000c85c2
uuid_00000000000c85c0:
	movb $1, -1392(%rbp)
uuid_00000000000c85c2:
	mov -1704(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c85c5:
	mov -1408(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c85c8:
	mov -1400(%RBP),%RSP
	add $-1776, %RSP
	mov -1392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c85d0
	push %RBP
	jmp uuid_00000000000c85cd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c85cc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c85cf
uuid_00000000000c85cd:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c6d83
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $uuid_00000000000c6d83
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000c85cf:
	mov -1784(%RBP),%RSP
	add $-2040, %RSP
	jmp uuid_00000000000c85d2
uuid_00000000000c85d0:
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1696(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c85c9
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c6d83
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $uuid_00000000000c6d83
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	jmp uuid_00000000000c85cb
uuid_00000000000c85c9:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -1696(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov -1696(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000c85cb:
	mov -1784(%RBP),%RSP
	add $-2040, %RSP
uuid_00000000000c85d2:
	mov -1312(%RBP),%RSP
	add $-2040, %RSP
	jmp uuid_00000000000c85d5
uuid_00000000000c85d3:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c85ab
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c6d83
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $uuid_00000000000c6d83
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	jmp uuid_00000000000c85ad
uuid_00000000000c85ab:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -1304(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov -1304(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000c85ad:
	mov -1312(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000c85d5:
	mov -1016(%RBP),%RSP
	add $-1568, %RSP
	jmp uuid_00000000000c85d8
uuid_00000000000c85d6:
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000c85d8:
	mov -520(%RBP),%RSP
	add $-1008, %RSP
	subq $152, %rsp
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $440, %rsp
	ret
extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c85f1
	jmp uuid_00000000000c85f3
uuid_00000000000c85f1:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c85df
	jmp uuid_00000000000c85e1
uuid_00000000000c85df:
	push %RBP
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	jmp uuid_00000000000c85dc
	jmp uuid_00000000000c85de
uuid_00000000000c85dc:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c85d9
	jmp uuid_00000000000c85db
uuid_00000000000c85d9:
	movb $1, -560(%rbp)
uuid_00000000000c85db:
	mov -640(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c85de:
	mov -576(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c85e1:
	mov -568(%RBP),%RSP
	add $-648, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c85ee
	jmp uuid_00000000000c85f0
uuid_00000000000c85ee:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c85e8
	jmp uuid_00000000000c85ea
uuid_00000000000c85e8:
	push %RBP
	jmp uuid_00000000000c85e5
	jmp uuid_00000000000c85e7
uuid_00000000000c85e5:
	push %RBP
	mov -664(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq $uuid_00000000000c83da
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c85e2
	jmp uuid_00000000000c85e4
uuid_00000000000c85e2:
	movb $1, -736(%rbp)
uuid_00000000000c85e4:
	mov -760(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c85e7:
	mov -752(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c85ea:
	mov -744(%RBP),%RSP
	add $-768, %RSP
	mov -736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c85eb
	jmp uuid_00000000000c85ed
uuid_00000000000c85eb:
	movb $1, -464(%rbp)
uuid_00000000000c85ed:
	mov -656(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c85f0:
	mov -480(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c85f3:
	mov -472(%RBP),%RSP
	add $-768, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c865b
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c85fa
	jmp uuid_00000000000c85fc
uuid_00000000000c85fa:
	push %RBP
	mov -840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c85f7
	jmp uuid_00000000000c85f9
uuid_00000000000c85f7:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c85f4
	jmp uuid_00000000000c85f6
uuid_00000000000c85f4:
	movb $1, -856(%rbp)
uuid_00000000000c85f6:
	mov -952(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c85f9:
	mov -872(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c85fc:
	mov -864(%RBP),%RSP
	add $-1024, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8658
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1104(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8606
	jmp uuid_00000000000c8608
uuid_00000000000c8606:
	push %RBP
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	jmp uuid_00000000000c8603
	jmp uuid_00000000000c8605
uuid_00000000000c8603:
	push %RBP
	mov -1072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8600
	jmp uuid_00000000000c8602
uuid_00000000000c8600:
	push %RBP
	mov -1064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c85fd
	jmp uuid_00000000000c85ff
uuid_00000000000c85fd:
	movb $1, -1112(%rbp)
uuid_00000000000c85ff:
	mov -1240(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c8602:
	mov -1160(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c8605:
	mov -1128(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c8608:
	mov -1120(%RBP),%RSP
	add $-1312, %RSP
	mov -1112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8655
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8652
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov -1472(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c864f
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1552(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c860c
	jmp uuid_00000000000c860e
uuid_00000000000c860c:
	push %RBP
	jmp uuid_00000000000c8609
	jmp uuid_00000000000c860b
uuid_00000000000c8609:
	movb $1, -1560(%rbp)
uuid_00000000000c860b:
	mov -1576(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c860e:
	mov -1568(%RBP),%RSP
	add $-1576, %RSP
	mov -1560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c864c
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8615
	jmp uuid_00000000000c8617
uuid_00000000000c8615:
	push %RBP
	jmp uuid_00000000000c8612
	jmp uuid_00000000000c8614
uuid_00000000000c8612:
	push %RBP
	mov -1592(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c860f
	jmp uuid_00000000000c8611
uuid_00000000000c860f:
	movb $1, -1664(%rbp)
uuid_00000000000c8611:
	mov -1688(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c8614:
	mov -1680(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c8617:
	mov -1672(%RBP),%RSP
	add $-1696, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8649
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1776(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c861e
	jmp uuid_00000000000c8620
uuid_00000000000c861e:
	push %RBP
	jmp uuid_00000000000c861b
	jmp uuid_00000000000c861d
uuid_00000000000c861b:
	push %RBP
	mov -1712(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8618
	jmp uuid_00000000000c861a
uuid_00000000000c8618:
	movb $1, -1784(%rbp)
uuid_00000000000c861a:
	mov -1808(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c861d:
	mov -1800(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c8620:
	mov -1792(%RBP),%RSP
	add $-1816, %RSP
	mov -1784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8646
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8627
	jmp uuid_00000000000c8629
uuid_00000000000c8627:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8624
	jmp uuid_00000000000c8626
uuid_00000000000c8624:
	push %RBP
	mov -1880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8621
	jmp uuid_00000000000c8623
uuid_00000000000c8621:
	movb $1, -1904(%rbp)
uuid_00000000000c8623:
	mov -2000(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c8626:
	mov -1920(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c8629:
	mov -1912(%RBP),%RSP
	add $-2072, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8643
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -2152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8630
	jmp uuid_00000000000c8632
uuid_00000000000c8630:
	push %RBP
	mov -2144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c862d
	jmp uuid_00000000000c862f
uuid_00000000000c862d:
	push %RBP
	mov -2136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c862a
	jmp uuid_00000000000c862c
uuid_00000000000c862a:
	movb $1, -2160(%rbp)
uuid_00000000000c862c:
	mov -2256(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000c862f:
	mov -2176(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000c8632:
	mov -2168(%RBP),%RSP
	add $-2328, %RSP
	mov -2160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8640
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -2408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8639
	jmp uuid_00000000000c863b
uuid_00000000000c8639:
	push %RBP
	mov -2400(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8636
	jmp uuid_00000000000c8638
uuid_00000000000c8636:
	push %RBP
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	jmp uuid_00000000000c8633
	jmp uuid_00000000000c8635
uuid_00000000000c8633:
	movb $1, -2416(%rbp)
uuid_00000000000c8635:
	mov -2512(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000c8638:
	mov -2432(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000c863b:
	mov -2424(%RBP),%RSP
	add $-2568, %RSP
	mov -2416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c863d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c863c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c863f
uuid_00000000000c863d:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -2664(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -2656(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -2648(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -2640(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -2632(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -2624(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -2616(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -2608(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -2600(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -2592(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -2584(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -2576(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c863f:
	mov -2336(%RBP),%RSP
	add $-2664, %RSP
	jmp uuid_00000000000c8642
uuid_00000000000c8640:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -2520(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -2512(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -2504(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -2496(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -2488(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -2480(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -2472(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -2464(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -2456(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -2448(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -2440(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -2432(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c8642:
	mov -2080(%RBP),%RSP
	add $-2520, %RSP
	jmp uuid_00000000000c8645
uuid_00000000000c8643:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -2264(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -2256(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -2248(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -2240(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -2232(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -2224(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -2216(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -2208(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -2200(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -2192(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -2184(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -2176(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c8645:
	mov -1824(%RBP),%RSP
	add $-2264, %RSP
	jmp uuid_00000000000c8648
uuid_00000000000c8646:
uuid_00000000000c8648:
	mov -1704(%RBP),%RSP
	add $-1816, %RSP
	jmp uuid_00000000000c864b
uuid_00000000000c8649:
uuid_00000000000c864b:
	mov -1584(%RBP),%RSP
	add $-1696, %RSP
	jmp uuid_00000000000c864e
uuid_00000000000c864c:
uuid_00000000000c864e:
	mov -1480(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000c8651
uuid_00000000000c864f:
uuid_00000000000c8651:
	mov -1400(%RBP),%RSP
	add $-1472, %RSP
	jmp uuid_00000000000c8654
uuid_00000000000c8652:
uuid_00000000000c8654:
	mov -1320(%RBP),%RSP
	add $-1392, %RSP
	jmp uuid_00000000000c8657
uuid_00000000000c8655:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -1504(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c8657:
	mov -1032(%RBP),%RSP
	add $-1504, %RSP
	jmp uuid_00000000000c865a
uuid_00000000000c8658:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -1216(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c865a:
	mov -776(%RBP),%RSP
	add $-1216, %RSP
	jmp uuid_00000000000c865d
uuid_00000000000c865b:
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -648(%rbp)
	pushq -776(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	pushq $0
	movq -872(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -832(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -824(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -816(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c865d:
	mov -384(%RBP),%RSP
	add $-872, %RSP
	subq $96, %rsp
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	addq $96, %rsp
	mov %rbp, %rsp
	sub $208, %rsp
	ret
index_SB_typedefs_CL_ArrowNilAST:
uuid_00000000000c8683:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8684
	jmp uuid_00000000000c8685
uuid_00000000000c8684:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c866d
	jmp uuid_00000000000c866f
uuid_00000000000c866d:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8664
	jmp uuid_00000000000c8666
uuid_00000000000c8664:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8661
	jmp uuid_00000000000c8663
uuid_00000000000c8661:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c865e
	jmp uuid_00000000000c8660
uuid_00000000000c865e:
	movb $1, -336(%rbp)
uuid_00000000000c8660:
	mov -432(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c8663:
	mov -352(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c8666:
	mov -344(%RBP),%RSP
	add $-504, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c866a
	jmp uuid_00000000000c866c
uuid_00000000000c866a:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8667
	jmp uuid_00000000000c8669
uuid_00000000000c8667:
	movb $1, -240(%rbp)
uuid_00000000000c8669:
	mov -512(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c866c:
	mov -256(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c866f:
	mov -248(%RBP),%RSP
	add $-584, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8680
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8676
	jmp uuid_00000000000c8678
uuid_00000000000c8676:
	push %RBP
	jmp uuid_00000000000c8673
	jmp uuid_00000000000c8675
uuid_00000000000c8673:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8670
	jmp uuid_00000000000c8672
uuid_00000000000c8670:
	movb $1, -672(%rbp)
uuid_00000000000c8672:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c8675:
	mov -688(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c8678:
	mov -680(%RBP),%RSP
	add $-768, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c867d
	push %RBP
	jmp uuid_00000000000c867a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8679
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c867c
uuid_00000000000c867a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c867c:
	mov -776(%RBP),%RSP
	add $-776, %RSP
	jmp uuid_00000000000c867f
uuid_00000000000c867d:
	movq -768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c867f:
	mov -592(%RBP),%RSP
	add $-768, %RSP
	jmp uuid_00000000000c8682
uuid_00000000000c8680:
#call function index-typedefs : Arrow<Cons<AST,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $0
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilConsU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -584(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -544(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -536(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -528(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -520(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c8682:
	mov -160(%RBP),%RSP
	add $-584, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c8683
uuid_00000000000c8685:
	mov %rbp, %rsp
	sub $80, %rsp
	ret
index_SB_typedefs_CL_ArrowNilConsU64AST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c86a7
	jmp uuid_00000000000c86a9
uuid_00000000000c86a7:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c868c
	jmp uuid_00000000000c868e
uuid_00000000000c868c:
	push %RBP
	jmp uuid_00000000000c8689
	jmp uuid_00000000000c868b
uuid_00000000000c8689:
	push %RBP
	mov -272(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8686
	jmp uuid_00000000000c8688
uuid_00000000000c8686:
	movb $1, -344(%rbp)
uuid_00000000000c8688:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c868b:
	mov -360(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c868e:
	mov -352(%RBP),%RSP
	add $-376, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c86a4
	jmp uuid_00000000000c86a6
uuid_00000000000c86a4:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c869e
	jmp uuid_00000000000c86a0
uuid_00000000000c869e:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8695
	jmp uuid_00000000000c8697
uuid_00000000000c8695:
	push %RBP
	jmp uuid_00000000000c8692
	jmp uuid_00000000000c8694
uuid_00000000000c8692:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000c6566
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c868f
	jmp uuid_00000000000c8691
uuid_00000000000c868f:
	movb $1, -560(%rbp)
uuid_00000000000c8691:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c8694:
	mov -576(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c8697:
	mov -568(%RBP),%RSP
	add $-592, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c869b
	jmp uuid_00000000000c869d
uuid_00000000000c869b:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8698
	jmp uuid_00000000000c869a
uuid_00000000000c8698:
	movb $1, -464(%rbp)
uuid_00000000000c869a:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c869d:
	mov -480(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c86a0:
	mov -472(%RBP),%RSP
	add $-672, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c86a1
	jmp uuid_00000000000c86a3
uuid_00000000000c86a1:
	movb $1, -248(%rbp)
uuid_00000000000c86a3:
	mov -384(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c86a6:
	mov -264(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c86a9:
	mov -256(%RBP),%RSP
	add $-672, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8703
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c86d4
	jmp uuid_00000000000c86d6
uuid_00000000000c86d4:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c86b9
	jmp uuid_00000000000c86bb
uuid_00000000000c86b9:
	push %RBP
	jmp uuid_00000000000c86b6
	jmp uuid_00000000000c86b8
uuid_00000000000c86b6:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c86b0
	jmp uuid_00000000000c86b2
uuid_00000000000c86b0:
	push %RBP
	jmp uuid_00000000000c86ad
	jmp uuid_00000000000c86af
uuid_00000000000c86ad:
	push %RBP
	mov -888(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c86aa
	jmp uuid_00000000000c86ac
uuid_00000000000c86aa:
	movb $1, -960(%rbp)
uuid_00000000000c86ac:
	mov -984(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c86af:
	mov -976(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c86b2:
	mov -968(%RBP),%RSP
	add $-992, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c86b3
	jmp uuid_00000000000c86b5
uuid_00000000000c86b3:
	movb $1, -856(%rbp)
uuid_00000000000c86b5:
	mov -880(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c86b8:
	mov -872(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c86bb:
	mov -864(%RBP),%RSP
	add $-992, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c86d1
	jmp uuid_00000000000c86d3
uuid_00000000000c86d1:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1072(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c86cb
	jmp uuid_00000000000c86cd
uuid_00000000000c86cb:
	push %RBP
	mov -1064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1168(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c86c2
	jmp uuid_00000000000c86c4
uuid_00000000000c86c2:
	push %RBP
	jmp uuid_00000000000c86bf
	jmp uuid_00000000000c86c1
uuid_00000000000c86bf:
	push %RBP
	mov -1104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1208(%rbp)
	pushq $uuid_00000000000c6566
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c86bc
	jmp uuid_00000000000c86be
uuid_00000000000c86bc:
	movb $1, -1176(%rbp)
uuid_00000000000c86be:
	mov -1200(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000c86c1:
	mov -1192(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000c86c4:
	mov -1184(%RBP),%RSP
	add $-1208, %RSP
	mov -1176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c86c8
	jmp uuid_00000000000c86ca
uuid_00000000000c86c8:
	push %RBP
	mov -1056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c86c5
	jmp uuid_00000000000c86c7
uuid_00000000000c86c5:
	movb $1, -1080(%rbp)
uuid_00000000000c86c7:
	mov -1216(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c86ca:
	mov -1096(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c86cd:
	mov -1088(%RBP),%RSP
	add $-1288, %RSP
	mov -1080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c86ce
	jmp uuid_00000000000c86d0
uuid_00000000000c86ce:
	movb $1, -760(%rbp)
uuid_00000000000c86d0:
	mov -1000(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c86d3:
	mov -776(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c86d6:
	mov -768(%RBP),%RSP
	add $-1288, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8700
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -1368(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c86dd
	jmp uuid_00000000000c86df
uuid_00000000000c86dd:
	push %RBP
	jmp uuid_00000000000c86da
	jmp uuid_00000000000c86dc
uuid_00000000000c86da:
	push %RBP
	mov -1304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c86d7
	jmp uuid_00000000000c86d9
uuid_00000000000c86d7:
	movb $1, -1376(%rbp)
uuid_00000000000c86d9:
	mov -1400(%RBP),%RSP
	add $-1408, %RSP
uuid_00000000000c86dc:
	mov -1392(%RBP),%RSP
	add $-1408, %RSP
uuid_00000000000c86df:
	mov -1384(%RBP),%RSP
	add $-1408, %RSP
	mov -1376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c86fd
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -1488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c86ef
	jmp uuid_00000000000c86f1
uuid_00000000000c86ef:
	push %RBP
	jmp uuid_00000000000c86ec
	jmp uuid_00000000000c86ee
uuid_00000000000c86ec:
	push %RBP
	mov -1472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1592(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c86e6
	jmp uuid_00000000000c86e8
uuid_00000000000c86e6:
	push %RBP
	jmp uuid_00000000000c86e3
	jmp uuid_00000000000c86e5
uuid_00000000000c86e3:
	push %RBP
	mov -1528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c86e0
	jmp uuid_00000000000c86e2
uuid_00000000000c86e0:
	movb $1, -1600(%rbp)
uuid_00000000000c86e2:
	mov -1624(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c86e5:
	mov -1616(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c86e8:
	mov -1608(%RBP),%RSP
	add $-1632, %RSP
	mov -1600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c86e9
	jmp uuid_00000000000c86eb
uuid_00000000000c86e9:
	movb $1, -1496(%rbp)
uuid_00000000000c86eb:
	mov -1520(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c86ee:
	mov -1512(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c86f1:
	mov -1504(%RBP),%RSP
	add $-1632, %RSP
	mov -1496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c86fa
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov -1712(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c86f7
	push %RBP
	jmp uuid_00000000000c86f4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c86f3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c86f6
uuid_00000000000c86f4:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c86f2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c86f6:
	mov -1720(%RBP),%RSP
	add $-1720, %RSP
	jmp uuid_00000000000c86f9
uuid_00000000000c86f7:
uuid_00000000000c86f9:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
	jmp uuid_00000000000c86fc
uuid_00000000000c86fa:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1632(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c86fc:
	mov -1416(%RBP),%RSP
	add $-1632, %RSP
	jmp uuid_00000000000c86ff
uuid_00000000000c86fd:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1408(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-lone-tag : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1408(%rbp)
	mov %RBX, %RBP
	call index_SB_lone_SB_tag_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c86ff:
	mov -1296(%RBP),%RSP
	add $-1408, %RSP
	jmp uuid_00000000000c8702
uuid_00000000000c8700:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -992(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-typedefs : Arrow<Cons<AST,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilConsU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c8702:
	mov -680(%RBP),%RSP
	add $-1288, %RSP
	jmp uuid_00000000000c8705
uuid_00000000000c8703:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-lone-tag : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	mov %RBX, %RBP
	call index_SB_lone_SB_tag_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-typedefs : Arrow<Cons<AST,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilConsU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c8705:
	mov -168(%RBP),%RSP
	add $-672, %RSP
	mov %rbp, %rsp
	sub $88, %rsp
	ret
is_SB_macro_SB_head_CL_ArrowU64ConsU64String:
	mov $preprocess_SB_macros_CL_MacroListMacroListCaseNumber1, %r15
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
uuid_00000000000c877a:
#call function non-zero : Arrow<MacroList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64MacroList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c877b
	jmp uuid_00000000000c877c
uuid_00000000000c877b:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8727
	jmp uuid_00000000000c8729
uuid_00000000000c8727:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq $0
	push %RBP
	mov -720(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c871e
	jmp uuid_00000000000c8720
uuid_00000000000c871e:
	push %RBP
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	jmp uuid_00000000000c871b
	jmp uuid_00000000000c871d
uuid_00000000000c871b:
	push %RBP
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8715
	jmp uuid_00000000000c8717
uuid_00000000000c8715:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8712
	jmp uuid_00000000000c8714
uuid_00000000000c8712:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1072(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c870c
	jmp uuid_00000000000c870e
uuid_00000000000c870c:
	push %RBP
	jmp uuid_00000000000c8709
	jmp uuid_00000000000c870b
uuid_00000000000c8709:
	push %RBP
	mov -1008(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8706
	jmp uuid_00000000000c8708
uuid_00000000000c8706:
	movb $1, -1080(%rbp)
uuid_00000000000c8708:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c870b:
	mov -1096(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c870e:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
	mov -1080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c870f
	jmp uuid_00000000000c8711
uuid_00000000000c870f:
	movb $1, -904(%rbp)
uuid_00000000000c8711:
	mov -1000(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c8714:
	mov -920(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c8717:
	mov -912(%RBP),%RSP
	add $-1112, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8718
	jmp uuid_00000000000c871a
uuid_00000000000c8718:
	movb $1, -728(%rbp)
uuid_00000000000c871a:
	mov -824(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c871d:
	mov -744(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c8720:
	mov -736(%RBP),%RSP
	add $-1112, %RSP
	mov -728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8724
	jmp uuid_00000000000c8726
uuid_00000000000c8724:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8721
	jmp uuid_00000000000c8723
uuid_00000000000c8721:
	movb $1, -552(%rbp)
uuid_00000000000c8723:
	mov -1120(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c8726:
	mov -568(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c8729:
	mov -560(%RBP),%RSP
	add $-1288, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8777
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8757
	jmp uuid_00000000000c8759
uuid_00000000000c8757:
	push %RBP
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c874e
	jmp uuid_00000000000c8750
uuid_00000000000c874e:
	push %RBP
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	jmp uuid_00000000000c874b
	jmp uuid_00000000000c874d
uuid_00000000000c874b:
	push %RBP
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq $0
	push %RBP
	mov -1816(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8745
	jmp uuid_00000000000c8747
uuid_00000000000c8745:
	push %RBP
	mov -1808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8742
	jmp uuid_00000000000c8744
uuid_00000000000c8742:
	push %RBP
	mov -1800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1992(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c873c
	jmp uuid_00000000000c873e
uuid_00000000000c873c:
	push %RBP
	mov -1984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8739
	jmp uuid_00000000000c873b
uuid_00000000000c8739:
	push %RBP
	mov -1976(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2168(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8733
	jmp uuid_00000000000c8735
uuid_00000000000c8733:
	push %RBP
	jmp uuid_00000000000c8730
	jmp uuid_00000000000c8732
uuid_00000000000c8730:
	push %RBP
	mov -2104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c872d
	jmp uuid_00000000000c872f
uuid_00000000000c872d:
	movb $1, -2176(%rbp)
uuid_00000000000c872f:
	mov -2200(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c8732:
	mov -2192(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c8735:
	mov -2184(%RBP),%RSP
	add $-2208, %RSP
	mov -2176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8736
	jmp uuid_00000000000c8738
uuid_00000000000c8736:
	movb $1, -2000(%rbp)
uuid_00000000000c8738:
	mov -2096(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c873b:
	mov -2016(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c873e:
	mov -2008(%RBP),%RSP
	add $-2208, %RSP
	mov -2000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c873f
	jmp uuid_00000000000c8741
uuid_00000000000c873f:
	movb $1, -1824(%rbp)
uuid_00000000000c8741:
	mov -1920(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c8744:
	mov -1840(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c8747:
	mov -1832(%RBP),%RSP
	add $-2208, %RSP
	mov -1824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8748
	jmp uuid_00000000000c874a
uuid_00000000000c8748:
	movb $1, -1648(%rbp)
uuid_00000000000c874a:
	mov -1744(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c874d:
	mov -1664(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c8750:
	mov -1656(%RBP),%RSP
	add $-2208, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8754
	jmp uuid_00000000000c8756
uuid_00000000000c8754:
	push %RBP
	mov -1304(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8751
	jmp uuid_00000000000c8753
uuid_00000000000c8751:
	movb $1, -1472(%rbp)
uuid_00000000000c8753:
	mov -2216(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c8756:
	mov -1488(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c8759:
	mov -1480(%RBP),%RSP
	add $-2384, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8774
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c876c
	jmp uuid_00000000000c876e
uuid_00000000000c876c:
	push %RBP
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq $0
	push %RBP
	mov -2736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8763
	jmp uuid_00000000000c8765
uuid_00000000000c8763:
	push %RBP
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	jmp uuid_00000000000c8760
	jmp uuid_00000000000c8762
uuid_00000000000c8760:
	push %RBP
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	jmp uuid_00000000000c875d
	jmp uuid_00000000000c875f
uuid_00000000000c875d:
	movb $1, -2744(%rbp)
uuid_00000000000c875f:
	mov -2840(%RBP),%RSP
	add $-2912, %RSP
uuid_00000000000c8762:
	mov -2760(%RBP),%RSP
	add $-2912, %RSP
uuid_00000000000c8765:
	mov -2752(%RBP),%RSP
	add $-2912, %RSP
	mov -2744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8769
	jmp uuid_00000000000c876b
uuid_00000000000c8769:
	push %RBP
	mov -2400(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8766
	jmp uuid_00000000000c8768
uuid_00000000000c8766:
	movb $1, -2568(%rbp)
uuid_00000000000c8768:
	mov -2920(%RBP),%RSP
	add $-3088, %RSP
uuid_00000000000c876b:
	mov -2584(%RBP),%RSP
	add $-3088, %RSP
uuid_00000000000c876e:
	mov -2576(%RBP),%RSP
	add $-3088, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8771
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8770
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8773
uuid_00000000000c8771:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c876f
	pushq -2848(%rbp)
	pushq -2856(%rbp)
	pushq -2864(%rbp)
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c8773:
	mov -2392(%RBP),%RSP
	add $-3088, %RSP
	jmp uuid_00000000000c8776
uuid_00000000000c8774:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -16(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c875a
	jmp uuid_00000000000c875c
uuid_00000000000c875a:
	movq $1, -200(%rbp)
uuid_00000000000c875c:
	mov -2392(%RBP),%RSP
	add $-2392, %RSP
	movq -2384(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -2376(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -2368(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -2360(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -2352(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -2344(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -2336(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2304(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2296(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2288(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2280(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -2272(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -2264(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2256(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2248(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2240(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2232(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2224(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000c8776:
	mov -1296(%RBP),%RSP
	add $-2392, %RSP
	jmp uuid_00000000000c8779
uuid_00000000000c8777:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -16(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c872a
	jmp uuid_00000000000c872c
uuid_00000000000c872a:
	movq $1, -200(%rbp)
uuid_00000000000c872c:
	mov -1296(%RBP),%RSP
	add $-1296, %RSP
	movq -1288(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000c8779:
	mov -376(%RBP),%RSP
	add $-1296, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c877a
uuid_00000000000c877c:
	mov -200(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
preprocess_SB_apply_SB_hard_CL_ArrowASTConsASTConsU64String:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov $preprocess_SB_macros_CL_MacroListMacroListCaseNumber1, %r15
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
uuid_00000000000c87dd:
#call function non-zero : Arrow<MacroList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64MacroList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c87de
	jmp uuid_00000000000c87df
uuid_00000000000c87de:
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	push %RBP
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c878c
	jmp uuid_00000000000c878e
uuid_00000000000c878c:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8783
	jmp uuid_00000000000c8785
uuid_00000000000c8783:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	jmp uuid_00000000000c8780
	jmp uuid_00000000000c8782
uuid_00000000000c8780:
	push %RBP
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	jmp uuid_00000000000c877d
	jmp uuid_00000000000c877f
uuid_00000000000c877d:
	movb $1, -872(%rbp)
uuid_00000000000c877f:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c8782:
	mov -888(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c8785:
	mov -880(%RBP),%RSP
	add $-1040, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8789
	jmp uuid_00000000000c878b
uuid_00000000000c8789:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8786
	jmp uuid_00000000000c8788
uuid_00000000000c8786:
	movb $1, -696(%rbp)
uuid_00000000000c8788:
	mov -1048(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000c878b:
	mov -712(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000c878e:
	mov -704(%RBP),%RSP
	add $-1216, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c87da
	push %RBP
	jmp uuid_00000000000c87d7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c87d6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c87d9
uuid_00000000000c87d7:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
uuid_00000000000c87d9:
	mov -1224(%RBP),%RSP
	add $-1224, %RSP
	jmp uuid_00000000000c87dc
uuid_00000000000c87da:
	movq -1216(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -176(%rbp)
	pushq $0
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	push %RBP
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq $0
	push %RBP
	mov -1376(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c879e
	jmp uuid_00000000000c87a0
uuid_00000000000c879e:
	push %RBP
	jmp uuid_00000000000c879b
	jmp uuid_00000000000c879d
uuid_00000000000c879b:
	push %RBP
	mov -1360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8795
	jmp uuid_00000000000c8797
uuid_00000000000c8795:
	push %RBP
	jmp uuid_00000000000c8792
	jmp uuid_00000000000c8794
uuid_00000000000c8792:
	push %RBP
	mov -1416(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c878f
	jmp uuid_00000000000c8791
uuid_00000000000c878f:
	movb $1, -1488(%rbp)
uuid_00000000000c8791:
	mov -1512(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000c8794:
	mov -1504(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000c8797:
	mov -1496(%RBP),%RSP
	add $-1520, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8798
	jmp uuid_00000000000c879a
uuid_00000000000c8798:
	movb $1, -1384(%rbp)
uuid_00000000000c879a:
	mov -1408(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000c879d:
	mov -1400(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000c87a0:
	mov -1392(%RBP),%RSP
	add $-1520, %RSP
	mov -1384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c87c6
	push %RBP
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq $0
	push %RBP
	mov -1600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c87bc
	jmp uuid_00000000000c87be
uuid_00000000000c87bc:
	push %RBP
	jmp uuid_00000000000c87b9
	jmp uuid_00000000000c87bb
uuid_00000000000c87b9:
	push %RBP
	mov -1584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1704(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c87b3
	jmp uuid_00000000000c87b5
uuid_00000000000c87b3:
	push %RBP
	jmp uuid_00000000000c87b0
	jmp uuid_00000000000c87b2
uuid_00000000000c87b0:
	push %RBP
	mov -1688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1808(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c87aa
	jmp uuid_00000000000c87ac
uuid_00000000000c87aa:
	push %RBP
	jmp uuid_00000000000c87a7
	jmp uuid_00000000000c87a9
uuid_00000000000c87a7:
	push %RBP
	mov -1744(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c87a4
	jmp uuid_00000000000c87a6
uuid_00000000000c87a4:
	movb $1, -1816(%rbp)
uuid_00000000000c87a6:
	mov -1840(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c87a9:
	mov -1832(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c87ac:
	mov -1824(%RBP),%RSP
	add $-1848, %RSP
	mov -1816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c87ad
	jmp uuid_00000000000c87af
uuid_00000000000c87ad:
	movb $1, -1712(%rbp)
uuid_00000000000c87af:
	mov -1736(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c87b2:
	mov -1728(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c87b5:
	mov -1720(%RBP),%RSP
	add $-1848, %RSP
	mov -1712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c87b6
	jmp uuid_00000000000c87b8
uuid_00000000000c87b6:
	movb $1, -1608(%rbp)
uuid_00000000000c87b8:
	mov -1632(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c87bb:
	mov -1624(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c87be:
	mov -1616(%RBP),%RSP
	add $-1848, %RSP
	mov -1608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c87c3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c87c2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c87c5
uuid_00000000000c87c3:
	push %RBP
	mov -16(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -1848(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c87bf
	jmp uuid_00000000000c87c1
uuid_00000000000c87bf:
	movb $1, -1224(%rbp)
uuid_00000000000c87c1:
	mov -1856(%RBP),%RSP
	add $-1856, %RSP
uuid_00000000000c87c5:
	mov -1528(%RBP),%RSP
	add $-1856, %RSP
	jmp uuid_00000000000c87c8
uuid_00000000000c87c6:
	push %RBP
	mov -16(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -1520(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c87a1
	jmp uuid_00000000000c87a3
uuid_00000000000c87a1:
	movb $1, -1224(%rbp)
uuid_00000000000c87a3:
	mov -1528(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c87c8:
	mov -1304(%RBP),%RSP
	add $-1528, %RSP
	push %RBP
	mov -1224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c87d3
	jmp uuid_00000000000c87d5
uuid_00000000000c87d3:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov -1736(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c87d0
	push %RBP
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	jmp uuid_00000000000c87cd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c87cc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c87cf
uuid_00000000000c87cd:
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c87c9
	jmp uuid_00000000000c87cb
uuid_00000000000c87c9:
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	popq -1912(%RBP)
	popq -1904(%RBP)
	popq -1896(%RBP)
	popq -1888(%RBP)
	popq -1880(%RBP)
	popq -1872(%RBP)
	popq -1864(%RBP)
	popq -1856(%RBP)
	popq -1848(%RBP)
uuid_00000000000c87cb:
	mov -2016(%RBP),%RSP
	add $-2016, %RSP
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	movb $1, -344(%rbp)
uuid_00000000000c87cf:
	mov -1744(%RBP),%RSP
	add $-2016, %RSP
	jmp uuid_00000000000c87d2
uuid_00000000000c87d0:
	movq -1216(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -176(%rbp)
uuid_00000000000c87d2:
	mov -1640(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c87d5:
	mov -1536(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c87dc:
	mov -520(%RBP),%RSP
	add $-1736, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c87dd
uuid_00000000000c87df:
	push %RBP
	mov -344(%RBP), %AL
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c87e1
	jmp uuid_00000000000c87e3
uuid_00000000000c87e1:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c87e0
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c87e3:
	mov -352(%RBP),%RSP
	add $-352, %RSP
	subq $72, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $96, %rsp
	ret
preprocess_SB_apply_SB_literals_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8805
	jmp uuid_00000000000c8807
uuid_00000000000c8805:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c87ea
	jmp uuid_00000000000c87ec
uuid_00000000000c87ea:
	push %RBP
	jmp uuid_00000000000c87e7
	jmp uuid_00000000000c87e9
uuid_00000000000c87e7:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c87e4
	jmp uuid_00000000000c87e6
uuid_00000000000c87e4:
	movb $1, -408(%rbp)
uuid_00000000000c87e6:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c87e9:
	mov -424(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c87ec:
	mov -416(%RBP),%RSP
	add $-440, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8802
	jmp uuid_00000000000c8804
uuid_00000000000c8802:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c87fc
	jmp uuid_00000000000c87fe
uuid_00000000000c87fc:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c87f9
	jmp uuid_00000000000c87fb
uuid_00000000000c87f9:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c87f3
	jmp uuid_00000000000c87f5
uuid_00000000000c87f3:
	push %RBP
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000c87f0
	jmp uuid_00000000000c87f2
uuid_00000000000c87f0:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c87ed
	jmp uuid_00000000000c87ef
uuid_00000000000c87ed:
	movb $1, -704(%rbp)
uuid_00000000000c87ef:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c87f2:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c87f5:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c87f6
	jmp uuid_00000000000c87f8
uuid_00000000000c87f6:
	movb $1, -528(%rbp)
uuid_00000000000c87f8:
	mov -624(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c87fb:
	mov -544(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c87fe:
	mov -536(%RBP),%RSP
	add $-792, %RSP
	mov -528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c87ff
	jmp uuid_00000000000c8801
uuid_00000000000c87ff:
	movb $1, -312(%rbp)
uuid_00000000000c8801:
	mov -448(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c8804:
	mov -328(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c8807:
	mov -320(%RBP),%RSP
	add $-792, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8894
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8829
	jmp uuid_00000000000c882b
uuid_00000000000c8829:
	push %RBP
	mov -864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c880e
	jmp uuid_00000000000c8810
uuid_00000000000c880e:
	push %RBP
	jmp uuid_00000000000c880b
	jmp uuid_00000000000c880d
uuid_00000000000c880b:
	push %RBP
	mov -904(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8808
	jmp uuid_00000000000c880a
uuid_00000000000c8808:
	movb $1, -976(%rbp)
uuid_00000000000c880a:
	mov -1000(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c880d:
	mov -992(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c8810:
	mov -984(%RBP),%RSP
	add $-1008, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8826
	jmp uuid_00000000000c8828
uuid_00000000000c8826:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1088(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8820
	jmp uuid_00000000000c8822
uuid_00000000000c8820:
	push %RBP
	mov -1080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c881d
	jmp uuid_00000000000c881f
uuid_00000000000c881d:
	push %RBP
	mov -1072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8817
	jmp uuid_00000000000c8819
uuid_00000000000c8817:
	push %RBP
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	jmp uuid_00000000000c8814
	jmp uuid_00000000000c8816
uuid_00000000000c8814:
	push %RBP
	mov -1200(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1360(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8811
	jmp uuid_00000000000c8813
uuid_00000000000c8811:
	movb $1, -1272(%rbp)
uuid_00000000000c8813:
	mov -1352(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c8816:
	mov -1288(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c8819:
	mov -1280(%RBP),%RSP
	add $-1360, %RSP
	mov -1272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c881a
	jmp uuid_00000000000c881c
uuid_00000000000c881a:
	movb $1, -1096(%rbp)
uuid_00000000000c881c:
	mov -1192(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c881f:
	mov -1112(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c8822:
	mov -1104(%RBP),%RSP
	add $-1360, %RSP
	mov -1096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8823
	jmp uuid_00000000000c8825
uuid_00000000000c8823:
	movb $1, -880(%rbp)
uuid_00000000000c8825:
	mov -1016(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c8828:
	mov -896(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c882b:
	mov -888(%RBP),%RSP
	add $-1360, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8891
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1440(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8832
	jmp uuid_00000000000c8834
uuid_00000000000c8832:
	push %RBP
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	jmp uuid_00000000000c882f
	jmp uuid_00000000000c8831
uuid_00000000000c882f:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c882c
	jmp uuid_00000000000c882e
uuid_00000000000c882c:
	movb $1, -1448(%rbp)
uuid_00000000000c882e:
	mov -1528(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c8831:
	mov -1464(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c8834:
	mov -1456(%RBP),%RSP
	add $-1536, %RSP
	mov -1448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c888e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8842
	jmp uuid_00000000000c8844
uuid_00000000000c8842:
	push %RBP
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	jmp uuid_00000000000c883f
	jmp uuid_00000000000c8841
uuid_00000000000c883f:
	push %RBP
	mov -1552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c883c
	jmp uuid_00000000000c883e
uuid_00000000000c883c:
	movb $1, -1624(%rbp)
uuid_00000000000c883e:
	mov -1704(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c8841:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c8844:
	mov -1632(%RBP),%RSP
	add $-1712, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c888b
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1792(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c884e
	jmp uuid_00000000000c8850
uuid_00000000000c884e:
	push %RBP
	mov -1784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c884b
	jmp uuid_00000000000c884d
uuid_00000000000c884b:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8848
	jmp uuid_00000000000c884a
uuid_00000000000c8848:
	movb $1, -1800(%rbp)
uuid_00000000000c884a:
	mov -1896(%RBP),%RSP
	add $-1968, %RSP
uuid_00000000000c884d:
	mov -1816(%RBP),%RSP
	add $-1968, %RSP
uuid_00000000000c8850:
	mov -1808(%RBP),%RSP
	add $-1968, %RSP
	mov -1800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8888
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2048(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8857
	jmp uuid_00000000000c8859
uuid_00000000000c8857:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8854
	jmp uuid_00000000000c8856
uuid_00000000000c8854:
	push %RBP
	mov -2032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8851
	jmp uuid_00000000000c8853
uuid_00000000000c8851:
	movb $1, -2056(%rbp)
uuid_00000000000c8853:
	mov -2152(%RBP),%RSP
	add $-2224, %RSP
uuid_00000000000c8856:
	mov -2072(%RBP),%RSP
	add $-2224, %RSP
uuid_00000000000c8859:
	mov -2064(%RBP),%RSP
	add $-2224, %RSP
	mov -2056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8885
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8860
	jmp uuid_00000000000c8862
uuid_00000000000c8860:
	push %RBP
	mov -2296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c885d
	jmp uuid_00000000000c885f
uuid_00000000000c885d:
	push %RBP
	mov -2288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c885a
	jmp uuid_00000000000c885c
uuid_00000000000c885a:
	movb $1, -2312(%rbp)
uuid_00000000000c885c:
	mov -2408(%RBP),%RSP
	add $-2480, %RSP
uuid_00000000000c885f:
	mov -2328(%RBP),%RSP
	add $-2480, %RSP
uuid_00000000000c8862:
	mov -2320(%RBP),%RSP
	add $-2480, %RSP
	mov -2312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8882
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c886c
	jmp uuid_00000000000c886e
uuid_00000000000c886c:
	push %RBP
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	jmp uuid_00000000000c8869
	jmp uuid_00000000000c886b
uuid_00000000000c8869:
	push %RBP
	mov -2528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8866
	jmp uuid_00000000000c8868
uuid_00000000000c8866:
	push %RBP
	mov -2520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8863
	jmp uuid_00000000000c8865
uuid_00000000000c8863:
	movb $1, -2568(%rbp)
uuid_00000000000c8865:
	mov -2696(%RBP),%RSP
	add $-2768, %RSP
uuid_00000000000c8868:
	mov -2616(%RBP),%RSP
	add $-2768, %RSP
uuid_00000000000c886b:
	mov -2584(%RBP),%RSP
	add $-2768, %RSP
uuid_00000000000c886e:
	mov -2576(%RBP),%RSP
	add $-2768, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c887f
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2848(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8875
	jmp uuid_00000000000c8877
uuid_00000000000c8875:
	push %RBP
	mov -2840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8872
	jmp uuid_00000000000c8874
uuid_00000000000c8872:
	push %RBP
	pushq -2784(%RBP)
	pushq -2792(%RBP)
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	jmp uuid_00000000000c886f
	jmp uuid_00000000000c8871
uuid_00000000000c886f:
	movb $1, -2856(%rbp)
uuid_00000000000c8871:
	mov -2952(%RBP),%RSP
	add $-3008, %RSP
uuid_00000000000c8874:
	mov -2872(%RBP),%RSP
	add $-3008, %RSP
uuid_00000000000c8877:
	mov -2864(%RBP),%RSP
	add $-3008, %RSP
	mov -2856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c887c
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000c8879
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8878
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c887b
uuid_00000000000c8879:
	movq -3088(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -3080(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -3072(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -3064(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -3056(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -3048(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -3040(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -3032(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -3024(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c887b:
	mov -3016(%RBP),%RSP
	add $-3088, %RSP
	jmp uuid_00000000000c887e
uuid_00000000000c887c:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2960(%rbp)
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	pushq -2984(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq -3008(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c887e:
	mov -2776(%RBP),%RSP
	add $-3008, %RSP
	jmp uuid_00000000000c8881
uuid_00000000000c887f:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2704(%rbp)
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2624(%rbp)
	pushq -2632(%rbp)
	pushq -2640(%rbp)
	pushq -2648(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2592(%rbp)
	pushq -2600(%rbp)
	pushq -2608(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8881:
	mov -2488(%RBP),%RSP
	add $-2768, %RSP
	jmp uuid_00000000000c8884
uuid_00000000000c8882:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8884:
	mov -2232(%RBP),%RSP
	add $-2480, %RSP
	jmp uuid_00000000000c8887
uuid_00000000000c8885:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8887:
	mov -1976(%RBP),%RSP
	add $-2224, %RSP
	jmp uuid_00000000000c888a
uuid_00000000000c8888:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c888a:
	mov -1720(%RBP),%RSP
	add $-1968, %RSP
	jmp uuid_00000000000c888d
uuid_00000000000c888b:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq $uuid_00000000000c8835
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8845
	jmp uuid_00000000000c8847
uuid_00000000000c8845:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq $uuid_00000000000c8835
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c8836
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq $uuid_00000000000c8836
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1728(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1728(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c8838
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq $uuid_00000000000c8838
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c8838
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq $uuid_00000000000c8838
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8847:
	mov -1720(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c888d:
	mov -1544(%RBP),%RSP
	add $-1728, %RSP
	jmp uuid_00000000000c8890
uuid_00000000000c888e:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1536(%rbp)
	pushq $uuid_00000000000c8835
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8839
	jmp uuid_00000000000c883b
uuid_00000000000c8839:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1536(%rbp)
	pushq $uuid_00000000000c8835
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c8836
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000c8836
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1552(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1552(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c8837
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c8838
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000c8838
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c8838
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000c8838
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c883b:
	mov -1544(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000c8890:
	mov -1368(%RBP),%RSP
	add $-1552, %RSP
	jmp uuid_00000000000c8893
uuid_00000000000c8891:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1008(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8893:
	mov -800(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000c8896
uuid_00000000000c8894:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8896:
	mov -232(%RBP),%RSP
	add $-792, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
preprocess_SB_apply_SB_locations_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c88b1
	jmp uuid_00000000000c88b3
uuid_00000000000c88b1:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c889e
	jmp uuid_00000000000c88a0
uuid_00000000000c889e:
	push %RBP
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000c889b
	jmp uuid_00000000000c889d
uuid_00000000000c889b:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq $uuid_00000000000c8897
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8898
	jmp uuid_00000000000c889a
uuid_00000000000c8898:
	movb $1, -408(%rbp)
uuid_00000000000c889a:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c889d:
	mov -424(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c88a0:
	mov -416(%RBP),%RSP
	add $-496, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c88ae
	jmp uuid_00000000000c88b0
uuid_00000000000c88ae:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c88a8
	jmp uuid_00000000000c88aa
uuid_00000000000c88a8:
	push %RBP
	jmp uuid_00000000000c88a5
	jmp uuid_00000000000c88a7
uuid_00000000000c88a5:
	push %RBP
	mov -512(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq $uuid_00000000000c88a1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c88a2
	jmp uuid_00000000000c88a4
uuid_00000000000c88a2:
	movb $1, -584(%rbp)
uuid_00000000000c88a4:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c88a7:
	mov -600(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c88aa:
	mov -592(%RBP),%RSP
	add $-616, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c88ab
	jmp uuid_00000000000c88ad
uuid_00000000000c88ab:
	movb $1, -312(%rbp)
uuid_00000000000c88ad:
	mov -504(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c88b0:
	mov -328(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c88b3:
	mov -320(%RBP),%RSP
	add $-616, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8923
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c88ce
	jmp uuid_00000000000c88d0
uuid_00000000000c88ce:
	push %RBP
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000c88cb
	jmp uuid_00000000000c88cd
uuid_00000000000c88cb:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c88c8
	jmp uuid_00000000000c88ca
uuid_00000000000c88c8:
	movb $1, -704(%rbp)
uuid_00000000000c88ca:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c88cd:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c88d0:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8920
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c88d7
	jmp uuid_00000000000c88d9
uuid_00000000000c88d7:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	jmp uuid_00000000000c88d4
	jmp uuid_00000000000c88d6
uuid_00000000000c88d4:
	push %RBP
	mov -808(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c88d1
	jmp uuid_00000000000c88d3
uuid_00000000000c88d1:
	movb $1, -880(%rbp)
uuid_00000000000c88d3:
	mov -960(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c88d6:
	mov -896(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c88d9:
	mov -888(%RBP),%RSP
	add $-968, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c891d
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c88e0
	jmp uuid_00000000000c88e2
uuid_00000000000c88e0:
	push %RBP
	mov -1040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c88dd
	jmp uuid_00000000000c88df
uuid_00000000000c88dd:
	push %RBP
	mov -1032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c88da
	jmp uuid_00000000000c88dc
uuid_00000000000c88da:
	movb $1, -1056(%rbp)
uuid_00000000000c88dc:
	mov -1152(%RBP),%RSP
	add $-1224, %RSP
uuid_00000000000c88df:
	mov -1072(%RBP),%RSP
	add $-1224, %RSP
uuid_00000000000c88e2:
	mov -1064(%RBP),%RSP
	add $-1224, %RSP
	mov -1056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c891a
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c88e9
	jmp uuid_00000000000c88eb
uuid_00000000000c88e9:
	push %RBP
	mov -1296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c88e6
	jmp uuid_00000000000c88e8
uuid_00000000000c88e6:
	push %RBP
	mov -1288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c88e3
	jmp uuid_00000000000c88e5
uuid_00000000000c88e3:
	movb $1, -1312(%rbp)
uuid_00000000000c88e5:
	mov -1408(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c88e8:
	mov -1328(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c88eb:
	mov -1320(%RBP),%RSP
	add $-1480, %RSP
	mov -1312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8917
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1560(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c88f2
	jmp uuid_00000000000c88f4
uuid_00000000000c88f2:
	push %RBP
	mov -1552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c88ef
	jmp uuid_00000000000c88f1
uuid_00000000000c88ef:
	push %RBP
	mov -1544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c88ec
	jmp uuid_00000000000c88ee
uuid_00000000000c88ec:
	movb $1, -1568(%rbp)
uuid_00000000000c88ee:
	mov -1664(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c88f1:
	mov -1584(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c88f4:
	mov -1576(%RBP),%RSP
	add $-1736, %RSP
	mov -1568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8914
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1816(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c88fe
	jmp uuid_00000000000c8900
uuid_00000000000c88fe:
	push %RBP
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	jmp uuid_00000000000c88fb
	jmp uuid_00000000000c88fd
uuid_00000000000c88fb:
	push %RBP
	mov -1784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c88f8
	jmp uuid_00000000000c88fa
uuid_00000000000c88f8:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c88f5
	jmp uuid_00000000000c88f7
uuid_00000000000c88f5:
	movb $1, -1824(%rbp)
uuid_00000000000c88f7:
	mov -1952(%RBP),%RSP
	add $-2024, %RSP
uuid_00000000000c88fa:
	mov -1872(%RBP),%RSP
	add $-2024, %RSP
uuid_00000000000c88fd:
	mov -1840(%RBP),%RSP
	add $-2024, %RSP
uuid_00000000000c8900:
	mov -1832(%RBP),%RSP
	add $-2024, %RSP
	mov -1824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8911
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2104(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8907
	jmp uuid_00000000000c8909
uuid_00000000000c8907:
	push %RBP
	mov -2096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8904
	jmp uuid_00000000000c8906
uuid_00000000000c8904:
	push %RBP
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	jmp uuid_00000000000c8901
	jmp uuid_00000000000c8903
uuid_00000000000c8901:
	movb $1, -2112(%rbp)
uuid_00000000000c8903:
	mov -2208(%RBP),%RSP
	add $-2264, %RSP
uuid_00000000000c8906:
	mov -2128(%RBP),%RSP
	add $-2264, %RSP
uuid_00000000000c8909:
	mov -2120(%RBP),%RSP
	add $-2264, %RSP
	mov -2112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c890e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000c890b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c890a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c890d
uuid_00000000000c890b:
	movq -2344(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -2336(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2304(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2296(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2288(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2280(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c890d:
	mov -2272(%RBP),%RSP
	add $-2344, %RSP
	jmp uuid_00000000000c8910
uuid_00000000000c890e:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8910:
	mov -2032(%RBP),%RSP
	add $-2264, %RSP
	jmp uuid_00000000000c8913
uuid_00000000000c8911:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8913:
	mov -1744(%RBP),%RSP
	add $-2024, %RSP
	jmp uuid_00000000000c8916
uuid_00000000000c8914:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8916:
	mov -1488(%RBP),%RSP
	add $-1736, %RSP
	jmp uuid_00000000000c8919
uuid_00000000000c8917:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8919:
	mov -1232(%RBP),%RSP
	add $-1480, %RSP
	jmp uuid_00000000000c891c
uuid_00000000000c891a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c891c:
	mov -976(%RBP),%RSP
	add $-1224, %RSP
	jmp uuid_00000000000c891f
uuid_00000000000c891d:
	pushq -968(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c891f:
	mov -800(%RBP),%RSP
	add $-968, %RSP
	jmp uuid_00000000000c8922
uuid_00000000000c8920:
	pushq -792(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8922:
	mov -624(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000c8925
uuid_00000000000c8923:
	pushq $uuid_00000000000c88b4
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	push %RBP
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c88be
	jmp uuid_00000000000c88c0
uuid_00000000000c88be:
	push %RBP
	mov -688(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c88bb
	jmp uuid_00000000000c88bd
uuid_00000000000c88bb:
	push %RBP
	mov -680(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c88b8
	jmp uuid_00000000000c88ba
uuid_00000000000c88b8:
	push %RBP
	mov -672(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c88b5
	jmp uuid_00000000000c88b7
uuid_00000000000c88b5:
	movb $1, -704(%rbp)
uuid_00000000000c88b7:
	mov -752(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c88ba:
	mov -736(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c88bd:
	mov -720(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c88c0:
	mov -712(%RBP),%RSP
	add $-760, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c88c5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c88c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c88c7
uuid_00000000000c88c5:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c88c1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -760(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c88c2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -744(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c88c3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -624(%rbp)
uuid_00000000000c88c7:
	mov -664(%RBP),%RSP
	add $-760, %RSP
	pushq -624(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8925:
	mov -232(%RBP),%RSP
	add $-760, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
preprocess_SB_apply_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c894d
	jmp uuid_00000000000c894f
uuid_00000000000c894d:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c894a
	jmp uuid_00000000000c894c
uuid_00000000000c894a:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8944
	jmp uuid_00000000000c8946
uuid_00000000000c8944:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8932
	jmp uuid_00000000000c8934
uuid_00000000000c8932:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8929
	jmp uuid_00000000000c892b
uuid_00000000000c8929:
	push %RBP
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000c8926
	jmp uuid_00000000000c8928
uuid_00000000000c8926:
	movb $1, -680(%rbp)
uuid_00000000000c8928:
	mov -696(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000c892b:
	mov -688(%RBP),%RSP
	add $-720, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c892f
	jmp uuid_00000000000c8931
uuid_00000000000c892f:
	push %RBP
	mov -560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c892c
	jmp uuid_00000000000c892e
uuid_00000000000c892c:
	movb $1, -584(%rbp)
uuid_00000000000c892e:
	mov -728(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c8931:
	mov -600(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c8934:
	mov -592(%RBP),%RSP
	add $-800, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8941
	jmp uuid_00000000000c8943
uuid_00000000000c8941:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c893b
	jmp uuid_00000000000c893d
uuid_00000000000c893b:
	push %RBP
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	jmp uuid_00000000000c8938
	jmp uuid_00000000000c893a
uuid_00000000000c8938:
	push %RBP
	mov -816(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8935
	jmp uuid_00000000000c8937
uuid_00000000000c8935:
	movb $1, -888(%rbp)
uuid_00000000000c8937:
	mov -968(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c893a:
	mov -904(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c893d:
	mov -896(%RBP),%RSP
	add $-976, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c893e
	jmp uuid_00000000000c8940
uuid_00000000000c893e:
	movb $1, -488(%rbp)
uuid_00000000000c8940:
	mov -808(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c8943:
	mov -504(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c8946:
	mov -496(%RBP),%RSP
	add $-976, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8947
	jmp uuid_00000000000c8949
uuid_00000000000c8947:
	movb $1, -312(%rbp)
uuid_00000000000c8949:
	mov -408(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c894c:
	mov -328(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c894f:
	mov -320(%RBP),%RSP
	add $-976, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b09
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1056(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8971
	jmp uuid_00000000000c8973
uuid_00000000000c8971:
	push %RBP
	mov -1048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8956
	jmp uuid_00000000000c8958
uuid_00000000000c8956:
	push %RBP
	jmp uuid_00000000000c8953
	jmp uuid_00000000000c8955
uuid_00000000000c8953:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8950
	jmp uuid_00000000000c8952
uuid_00000000000c8950:
	movb $1, -1160(%rbp)
uuid_00000000000c8952:
	mov -1184(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000c8955:
	mov -1176(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000c8958:
	mov -1168(%RBP),%RSP
	add $-1192, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c896e
	jmp uuid_00000000000c8970
uuid_00000000000c896e:
	push %RBP
	mov -1040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8968
	jmp uuid_00000000000c896a
uuid_00000000000c8968:
	push %RBP
	mov -1264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8965
	jmp uuid_00000000000c8967
uuid_00000000000c8965:
	push %RBP
	mov -1256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1448(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c895f
	jmp uuid_00000000000c8961
uuid_00000000000c895f:
	push %RBP
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	jmp uuid_00000000000c895c
	jmp uuid_00000000000c895e
uuid_00000000000c895c:
	push %RBP
	mov -1384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1544(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8959
	jmp uuid_00000000000c895b
uuid_00000000000c8959:
	movb $1, -1456(%rbp)
uuid_00000000000c895b:
	mov -1536(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c895e:
	mov -1472(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c8961:
	mov -1464(%RBP),%RSP
	add $-1544, %RSP
	mov -1456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8962
	jmp uuid_00000000000c8964
uuid_00000000000c8962:
	movb $1, -1280(%rbp)
uuid_00000000000c8964:
	mov -1376(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c8967:
	mov -1296(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c896a:
	mov -1288(%RBP),%RSP
	add $-1544, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c896b
	jmp uuid_00000000000c896d
uuid_00000000000c896b:
	movb $1, -1064(%rbp)
uuid_00000000000c896d:
	mov -1200(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c8970:
	mov -1080(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c8973:
	mov -1072(%RBP),%RSP
	add $-1544, %RSP
	mov -1064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b06
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1624(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8995
	jmp uuid_00000000000c8997
uuid_00000000000c8995:
	push %RBP
	mov -1616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1720(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c897a
	jmp uuid_00000000000c897c
uuid_00000000000c897a:
	push %RBP
	jmp uuid_00000000000c8977
	jmp uuid_00000000000c8979
uuid_00000000000c8977:
	push %RBP
	mov -1656(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8974
	jmp uuid_00000000000c8976
uuid_00000000000c8974:
	movb $1, -1728(%rbp)
uuid_00000000000c8976:
	mov -1752(%RBP),%RSP
	add $-1760, %RSP
uuid_00000000000c8979:
	mov -1744(%RBP),%RSP
	add $-1760, %RSP
uuid_00000000000c897c:
	mov -1736(%RBP),%RSP
	add $-1760, %RSP
	mov -1728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8992
	jmp uuid_00000000000c8994
uuid_00000000000c8992:
	push %RBP
	mov -1608(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1840(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c898c
	jmp uuid_00000000000c898e
uuid_00000000000c898c:
	push %RBP
	mov -1832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8989
	jmp uuid_00000000000c898b
uuid_00000000000c8989:
	push %RBP
	mov -1824(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2016(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8983
	jmp uuid_00000000000c8985
uuid_00000000000c8983:
	push %RBP
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	jmp uuid_00000000000c8980
	jmp uuid_00000000000c8982
uuid_00000000000c8980:
	push %RBP
	mov -1952(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2112(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c897d
	jmp uuid_00000000000c897f
uuid_00000000000c897d:
	movb $1, -2024(%rbp)
uuid_00000000000c897f:
	mov -2104(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c8982:
	mov -2040(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c8985:
	mov -2032(%RBP),%RSP
	add $-2112, %RSP
	mov -2024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8986
	jmp uuid_00000000000c8988
uuid_00000000000c8986:
	movb $1, -1848(%rbp)
uuid_00000000000c8988:
	mov -1944(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c898b:
	mov -1864(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c898e:
	mov -1856(%RBP),%RSP
	add $-2112, %RSP
	mov -1848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c898f
	jmp uuid_00000000000c8991
uuid_00000000000c898f:
	movb $1, -1632(%rbp)
uuid_00000000000c8991:
	mov -1768(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c8994:
	mov -1648(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c8997:
	mov -1640(%RBP),%RSP
	add $-2112, %RSP
	mov -1632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b03
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c89bf
	jmp uuid_00000000000c89c1
uuid_00000000000c89bf:
	push %RBP
	mov -2184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c89bc
	jmp uuid_00000000000c89be
uuid_00000000000c89bc:
	push %RBP
	mov -2176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2368(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c89b6
	jmp uuid_00000000000c89b8
uuid_00000000000c89b6:
	push %RBP
	mov -2360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2464(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c89a4
	jmp uuid_00000000000c89a6
uuid_00000000000c89a4:
	push %RBP
	mov -2456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c899b
	jmp uuid_00000000000c899d
uuid_00000000000c899b:
	push %RBP
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	jmp uuid_00000000000c8998
	jmp uuid_00000000000c899a
uuid_00000000000c8998:
	movb $1, -2568(%rbp)
uuid_00000000000c899a:
	mov -2584(%RBP),%RSP
	add $-2608, %RSP
uuid_00000000000c899d:
	mov -2576(%RBP),%RSP
	add $-2608, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c89a1
	jmp uuid_00000000000c89a3
uuid_00000000000c89a1:
	push %RBP
	mov -2448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c899e
	jmp uuid_00000000000c89a0
uuid_00000000000c899e:
	movb $1, -2472(%rbp)
uuid_00000000000c89a0:
	mov -2616(%RBP),%RSP
	add $-2688, %RSP
uuid_00000000000c89a3:
	mov -2488(%RBP),%RSP
	add $-2688, %RSP
uuid_00000000000c89a6:
	mov -2480(%RBP),%RSP
	add $-2688, %RSP
	mov -2472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c89b3
	jmp uuid_00000000000c89b5
uuid_00000000000c89b3:
	push %RBP
	mov -2352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c89ad
	jmp uuid_00000000000c89af
uuid_00000000000c89ad:
	push %RBP
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	pushq -2736(%RBP)
	pushq -2744(%RBP)
	pushq -2752(%RBP)
	pushq -2760(%RBP)
	jmp uuid_00000000000c89aa
	jmp uuid_00000000000c89ac
uuid_00000000000c89aa:
	push %RBP
	mov -2704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2864(%rbp)
	pushq $uuid_00000000000c4bba
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c89a7
	jmp uuid_00000000000c89a9
uuid_00000000000c89a7:
	movb $1, -2776(%rbp)
uuid_00000000000c89a9:
	mov -2856(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c89ac:
	mov -2792(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c89af:
	mov -2784(%RBP),%RSP
	add $-2864, %RSP
	mov -2776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c89b0
	jmp uuid_00000000000c89b2
uuid_00000000000c89b0:
	movb $1, -2376(%rbp)
uuid_00000000000c89b2:
	mov -2696(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c89b5:
	mov -2392(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c89b8:
	mov -2384(%RBP),%RSP
	add $-2864, %RSP
	mov -2376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c89b9
	jmp uuid_00000000000c89bb
uuid_00000000000c89b9:
	movb $1, -2200(%rbp)
uuid_00000000000c89bb:
	mov -2296(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c89be:
	mov -2216(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c89c1:
	mov -2208(%RBP),%RSP
	add $-2864, %RSP
	mov -2200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b00
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2944(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c89e3
	jmp uuid_00000000000c89e5
uuid_00000000000c89e3:
	push %RBP
	mov -2936(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3040(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c89c8
	jmp uuid_00000000000c89ca
uuid_00000000000c89c8:
	push %RBP
	jmp uuid_00000000000c89c5
	jmp uuid_00000000000c89c7
uuid_00000000000c89c5:
	push %RBP
	mov -2976(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c89c2
	jmp uuid_00000000000c89c4
uuid_00000000000c89c2:
	movb $1, -3048(%rbp)
uuid_00000000000c89c4:
	mov -3072(%RBP),%RSP
	add $-3080, %RSP
uuid_00000000000c89c7:
	mov -3064(%RBP),%RSP
	add $-3080, %RSP
uuid_00000000000c89ca:
	mov -3056(%RBP),%RSP
	add $-3080, %RSP
	mov -3048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c89e0
	jmp uuid_00000000000c89e2
uuid_00000000000c89e0:
	push %RBP
	mov -2928(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3160(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c89da
	jmp uuid_00000000000c89dc
uuid_00000000000c89da:
	push %RBP
	mov -3152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c89d7
	jmp uuid_00000000000c89d9
uuid_00000000000c89d7:
	push %RBP
	mov -3144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3336(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c89d1
	jmp uuid_00000000000c89d3
uuid_00000000000c89d1:
	push %RBP
	pushq -3280(%RBP)
	pushq -3288(%RBP)
	pushq -3296(%RBP)
	pushq -3304(%RBP)
	pushq -3312(%RBP)
	pushq -3320(%RBP)
	pushq -3328(%RBP)
	jmp uuid_00000000000c89ce
	jmp uuid_00000000000c89d0
uuid_00000000000c89ce:
	push %RBP
	mov -3272(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3432(%rbp)
	pushq $uuid_00000000000c4bba
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c89cb
	jmp uuid_00000000000c89cd
uuid_00000000000c89cb:
	movb $1, -3344(%rbp)
uuid_00000000000c89cd:
	mov -3424(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c89d0:
	mov -3360(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c89d3:
	mov -3352(%RBP),%RSP
	add $-3432, %RSP
	mov -3344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c89d4
	jmp uuid_00000000000c89d6
uuid_00000000000c89d4:
	movb $1, -3168(%rbp)
uuid_00000000000c89d6:
	mov -3264(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c89d9:
	mov -3184(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c89dc:
	mov -3176(%RBP),%RSP
	add $-3432, %RSP
	mov -3168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c89dd
	jmp uuid_00000000000c89df
uuid_00000000000c89dd:
	movb $1, -2952(%rbp)
uuid_00000000000c89df:
	mov -3088(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c89e2:
	mov -2968(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c89e5:
	mov -2960(%RBP),%RSP
	add $-3432, %RSP
	mov -2952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8afd
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -3512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a07
	jmp uuid_00000000000c8a09
uuid_00000000000c8a07:
	push %RBP
	mov -3504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3608(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c89ec
	jmp uuid_00000000000c89ee
uuid_00000000000c89ec:
	push %RBP
	jmp uuid_00000000000c89e9
	jmp uuid_00000000000c89eb
uuid_00000000000c89e9:
	push %RBP
	mov -3544(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c89e6
	jmp uuid_00000000000c89e8
uuid_00000000000c89e6:
	movb $1, -3616(%rbp)
uuid_00000000000c89e8:
	mov -3640(%RBP),%RSP
	add $-3648, %RSP
uuid_00000000000c89eb:
	mov -3632(%RBP),%RSP
	add $-3648, %RSP
uuid_00000000000c89ee:
	mov -3624(%RBP),%RSP
	add $-3648, %RSP
	mov -3616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a04
	jmp uuid_00000000000c8a06
uuid_00000000000c8a04:
	push %RBP
	mov -3496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3728(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c89fe
	jmp uuid_00000000000c8a00
uuid_00000000000c89fe:
	push %RBP
	mov -3720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c89fb
	jmp uuid_00000000000c89fd
uuid_00000000000c89fb:
	push %RBP
	mov -3712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3904(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c89f5
	jmp uuid_00000000000c89f7
uuid_00000000000c89f5:
	push %RBP
	pushq -3848(%RBP)
	pushq -3856(%RBP)
	pushq -3864(%RBP)
	pushq -3872(%RBP)
	pushq -3880(%RBP)
	pushq -3888(%RBP)
	pushq -3896(%RBP)
	jmp uuid_00000000000c89f2
	jmp uuid_00000000000c89f4
uuid_00000000000c89f2:
	push %RBP
	mov -3840(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq $uuid_00000000000c4bba
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c89ef
	jmp uuid_00000000000c89f1
uuid_00000000000c89ef:
	movb $1, -3912(%rbp)
uuid_00000000000c89f1:
	mov -3992(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c89f4:
	mov -3928(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c89f7:
	mov -3920(%RBP),%RSP
	add $-4000, %RSP
	mov -3912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c89f8
	jmp uuid_00000000000c89fa
uuid_00000000000c89f8:
	movb $1, -3736(%rbp)
uuid_00000000000c89fa:
	mov -3832(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c89fd:
	mov -3752(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c8a00:
	mov -3744(%RBP),%RSP
	add $-4000, %RSP
	mov -3736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a01
	jmp uuid_00000000000c8a03
uuid_00000000000c8a01:
	movb $1, -3520(%rbp)
uuid_00000000000c8a03:
	mov -3656(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c8a06:
	mov -3536(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c8a09:
	mov -3528(%RBP),%RSP
	add $-4000, %RSP
	mov -3520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8afa
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4080(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a22
	jmp uuid_00000000000c8a24
uuid_00000000000c8a22:
	push %RBP
	mov -4072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4176(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a10
	jmp uuid_00000000000c8a12
uuid_00000000000c8a10:
	push %RBP
	jmp uuid_00000000000c8a0d
	jmp uuid_00000000000c8a0f
uuid_00000000000c8a0d:
	push %RBP
	mov -4112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8a0a
	jmp uuid_00000000000c8a0c
uuid_00000000000c8a0a:
	movb $1, -4184(%rbp)
uuid_00000000000c8a0c:
	mov -4208(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c8a0f:
	mov -4200(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c8a12:
	mov -4192(%RBP),%RSP
	add $-4216, %RSP
	mov -4184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a1f
	jmp uuid_00000000000c8a21
uuid_00000000000c8a1f:
	push %RBP
	mov -4064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4296(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a19
	jmp uuid_00000000000c8a1b
uuid_00000000000c8a19:
	push %RBP
	pushq -4240(%RBP)
	pushq -4248(%RBP)
	pushq -4256(%RBP)
	pushq -4264(%RBP)
	pushq -4272(%RBP)
	pushq -4280(%RBP)
	pushq -4288(%RBP)
	jmp uuid_00000000000c8a16
	jmp uuid_00000000000c8a18
uuid_00000000000c8a16:
	push %RBP
	mov -4232(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4392(%rbp)
	pushq $uuid_00000000000c4ec7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8a13
	jmp uuid_00000000000c8a15
uuid_00000000000c8a13:
	movb $1, -4304(%rbp)
uuid_00000000000c8a15:
	mov -4384(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000c8a18:
	mov -4320(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000c8a1b:
	mov -4312(%RBP),%RSP
	add $-4392, %RSP
	mov -4304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a1c
	jmp uuid_00000000000c8a1e
uuid_00000000000c8a1c:
	movb $1, -4088(%rbp)
uuid_00000000000c8a1e:
	mov -4224(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000c8a21:
	mov -4104(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000c8a24:
	mov -4096(%RBP),%RSP
	add $-4392, %RSP
	mov -4088(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8af7
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4472(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a3d
	jmp uuid_00000000000c8a3f
uuid_00000000000c8a3d:
	push %RBP
	mov -4464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4568(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a2b
	jmp uuid_00000000000c8a2d
uuid_00000000000c8a2b:
	push %RBP
	jmp uuid_00000000000c8a28
	jmp uuid_00000000000c8a2a
uuid_00000000000c8a28:
	push %RBP
	mov -4504(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8a25
	jmp uuid_00000000000c8a27
uuid_00000000000c8a25:
	movb $1, -4576(%rbp)
uuid_00000000000c8a27:
	mov -4600(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000c8a2a:
	mov -4592(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000c8a2d:
	mov -4584(%RBP),%RSP
	add $-4608, %RSP
	mov -4576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a3a
	jmp uuid_00000000000c8a3c
uuid_00000000000c8a3a:
	push %RBP
	mov -4456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4688(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a34
	jmp uuid_00000000000c8a36
uuid_00000000000c8a34:
	push %RBP
	pushq -4632(%RBP)
	pushq -4640(%RBP)
	pushq -4648(%RBP)
	pushq -4656(%RBP)
	pushq -4664(%RBP)
	pushq -4672(%RBP)
	pushq -4680(%RBP)
	jmp uuid_00000000000c8a31
	jmp uuid_00000000000c8a33
uuid_00000000000c8a31:
	push %RBP
	mov -4624(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4784(%rbp)
	pushq $uuid_00000000000c4ec7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8a2e
	jmp uuid_00000000000c8a30
uuid_00000000000c8a2e:
	movb $1, -4696(%rbp)
uuid_00000000000c8a30:
	mov -4776(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000c8a33:
	mov -4712(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000c8a36:
	mov -4704(%RBP),%RSP
	add $-4784, %RSP
	mov -4696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a37
	jmp uuid_00000000000c8a39
uuid_00000000000c8a37:
	movb $1, -4480(%rbp)
uuid_00000000000c8a39:
	mov -4616(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000c8a3c:
	mov -4496(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000c8a3f:
	mov -4488(%RBP),%RSP
	add $-4784, %RSP
	mov -4480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8af4
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4864(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a46
	jmp uuid_00000000000c8a48
uuid_00000000000c8a46:
	push %RBP
	pushq -4808(%RBP)
	pushq -4816(%RBP)
	pushq -4824(%RBP)
	pushq -4832(%RBP)
	pushq -4840(%RBP)
	pushq -4848(%RBP)
	pushq -4856(%RBP)
	jmp uuid_00000000000c8a43
	jmp uuid_00000000000c8a45
uuid_00000000000c8a43:
	push %RBP
	mov -4800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8a40
	jmp uuid_00000000000c8a42
uuid_00000000000c8a40:
	movb $1, -4872(%rbp)
uuid_00000000000c8a42:
	mov -4952(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c8a45:
	mov -4888(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c8a48:
	mov -4880(%RBP),%RSP
	add $-4960, %RSP
	mov -4872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8af1
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -5040(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a65
	jmp uuid_00000000000c8a67
uuid_00000000000c8a65:
	push %RBP
	pushq -4984(%RBP)
	pushq -4992(%RBP)
	pushq -5000(%RBP)
	pushq -5008(%RBP)
	pushq -5016(%RBP)
	pushq -5024(%RBP)
	pushq -5032(%RBP)
	jmp uuid_00000000000c8a62
	jmp uuid_00000000000c8a64
uuid_00000000000c8a62:
	push %RBP
	mov -4976(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8a5f
	jmp uuid_00000000000c8a61
uuid_00000000000c8a5f:
	movb $1, -5048(%rbp)
uuid_00000000000c8a61:
	mov -5128(%RBP),%RSP
	add $-5136, %RSP
uuid_00000000000c8a64:
	mov -5064(%RBP),%RSP
	add $-5136, %RSP
uuid_00000000000c8a67:
	mov -5056(%RBP),%RSP
	add $-5136, %RSP
	mov -5048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8aee
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -5216(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a8d
	jmp uuid_00000000000c8a8f
uuid_00000000000c8a8d:
	push %RBP
	mov -5208(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8a8a
	jmp uuid_00000000000c8a8c
uuid_00000000000c8a8a:
	push %RBP
	mov -5200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5392(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a84
	jmp uuid_00000000000c8a86
uuid_00000000000c8a84:
	push %RBP
	pushq -5336(%RBP)
	pushq -5344(%RBP)
	pushq -5352(%RBP)
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	pushq -5384(%RBP)
	jmp uuid_00000000000c8a81
	jmp uuid_00000000000c8a83
uuid_00000000000c8a81:
	push %RBP
	mov -5328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8a7e
	jmp uuid_00000000000c8a80
uuid_00000000000c8a7e:
	movb $1, -5400(%rbp)
uuid_00000000000c8a80:
	mov -5480(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c8a83:
	mov -5416(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c8a86:
	mov -5408(%RBP),%RSP
	add $-5488, %RSP
	mov -5400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a87
	jmp uuid_00000000000c8a89
uuid_00000000000c8a87:
	movb $1, -5224(%rbp)
uuid_00000000000c8a89:
	mov -5320(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c8a8c:
	mov -5240(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c8a8f:
	mov -5232(%RBP),%RSP
	add $-5488, %RSP
	mov -5224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8aeb
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -5568(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8aab
	jmp uuid_00000000000c8aad
uuid_00000000000c8aab:
	push %RBP
	mov -5560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8aa8
	jmp uuid_00000000000c8aaa
uuid_00000000000c8aa8:
	push %RBP
	mov -5552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5744(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8aa2
	jmp uuid_00000000000c8aa4
uuid_00000000000c8aa2:
	push %RBP
	mov -5736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8a9f
	jmp uuid_00000000000c8aa1
uuid_00000000000c8a9f:
	push %RBP
	mov -5728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5920(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a99
	jmp uuid_00000000000c8a9b
uuid_00000000000c8a99:
	push %RBP
	pushq -5864(%RBP)
	pushq -5872(%RBP)
	pushq -5880(%RBP)
	pushq -5888(%RBP)
	pushq -5896(%RBP)
	pushq -5904(%RBP)
	pushq -5912(%RBP)
	jmp uuid_00000000000c8a96
	jmp uuid_00000000000c8a98
uuid_00000000000c8a96:
	push %RBP
	mov -5856(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8a93
	jmp uuid_00000000000c8a95
uuid_00000000000c8a93:
	movb $1, -5928(%rbp)
uuid_00000000000c8a95:
	mov -6008(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c8a98:
	mov -5944(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c8a9b:
	mov -5936(%RBP),%RSP
	add $-6016, %RSP
	mov -5928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a9c
	jmp uuid_00000000000c8a9e
uuid_00000000000c8a9c:
	movb $1, -5752(%rbp)
uuid_00000000000c8a9e:
	mov -5848(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c8aa1:
	mov -5768(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c8aa4:
	mov -5760(%RBP),%RSP
	add $-6016, %RSP
	mov -5752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8aa5
	jmp uuid_00000000000c8aa7
uuid_00000000000c8aa5:
	movb $1, -5576(%rbp)
uuid_00000000000c8aa7:
	mov -5672(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c8aaa:
	mov -5592(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c8aad:
	mov -5584(%RBP),%RSP
	add $-6016, %RSP
	mov -5576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ae8
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6096(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ab7
	jmp uuid_00000000000c8ab9
uuid_00000000000c8ab7:
	push %RBP
	mov -6088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8ab4
	jmp uuid_00000000000c8ab6
uuid_00000000000c8ab4:
	push %RBP
	mov -6080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8ab1
	jmp uuid_00000000000c8ab3
uuid_00000000000c8ab1:
	movb $1, -6104(%rbp)
uuid_00000000000c8ab3:
	mov -6200(%RBP),%RSP
	add $-6272, %RSP
uuid_00000000000c8ab6:
	mov -6120(%RBP),%RSP
	add $-6272, %RSP
uuid_00000000000c8ab9:
	mov -6112(%RBP),%RSP
	add $-6272, %RSP
	mov -6104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ae5
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ac0
	jmp uuid_00000000000c8ac2
uuid_00000000000c8ac0:
	push %RBP
	mov -6344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8abd
	jmp uuid_00000000000c8abf
uuid_00000000000c8abd:
	push %RBP
	mov -6336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8aba
	jmp uuid_00000000000c8abc
uuid_00000000000c8aba:
	movb $1, -6360(%rbp)
uuid_00000000000c8abc:
	mov -6456(%RBP),%RSP
	add $-6528, %RSP
uuid_00000000000c8abf:
	mov -6376(%RBP),%RSP
	add $-6528, %RSP
uuid_00000000000c8ac2:
	mov -6368(%RBP),%RSP
	add $-6528, %RSP
	mov -6360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ae2
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6608(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8acc
	jmp uuid_00000000000c8ace
uuid_00000000000c8acc:
	push %RBP
	pushq -6584(%RBP)
	pushq -6592(%RBP)
	pushq -6600(%RBP)
	jmp uuid_00000000000c8ac9
	jmp uuid_00000000000c8acb
uuid_00000000000c8ac9:
	push %RBP
	mov -6576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8ac6
	jmp uuid_00000000000c8ac8
uuid_00000000000c8ac6:
	push %RBP
	mov -6568(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8ac3
	jmp uuid_00000000000c8ac5
uuid_00000000000c8ac3:
	movb $1, -6616(%rbp)
uuid_00000000000c8ac5:
	mov -6744(%RBP),%RSP
	add $-6816, %RSP
uuid_00000000000c8ac8:
	mov -6664(%RBP),%RSP
	add $-6816, %RSP
uuid_00000000000c8acb:
	mov -6632(%RBP),%RSP
	add $-6816, %RSP
uuid_00000000000c8ace:
	mov -6624(%RBP),%RSP
	add $-6816, %RSP
	mov -6616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8adf
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6896(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ad5
	jmp uuid_00000000000c8ad7
uuid_00000000000c8ad5:
	push %RBP
	mov -6888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8ad2
	jmp uuid_00000000000c8ad4
uuid_00000000000c8ad2:
	push %RBP
	pushq -6832(%RBP)
	pushq -6840(%RBP)
	pushq -6848(%RBP)
	pushq -6856(%RBP)
	pushq -6864(%RBP)
	pushq -6872(%RBP)
	pushq -6880(%RBP)
	jmp uuid_00000000000c8acf
	jmp uuid_00000000000c8ad1
uuid_00000000000c8acf:
	movb $1, -6904(%rbp)
uuid_00000000000c8ad1:
	mov -7000(%RBP),%RSP
	add $-7056, %RSP
uuid_00000000000c8ad4:
	mov -6920(%RBP),%RSP
	add $-7056, %RSP
uuid_00000000000c8ad7:
	mov -6912(%RBP),%RSP
	add $-7056, %RSP
	mov -6904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8adc
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000c8ad9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8ad8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8adb
uuid_00000000000c8ad9:
	movq -7136(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -7128(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -7120(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -7112(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -7104(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -7096(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -7088(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -7080(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -7072(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c8adb:
	mov -7064(%RBP),%RSP
	add $-7136, %RSP
	jmp uuid_00000000000c8ade
uuid_00000000000c8adc:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7008(%rbp)
	pushq -7016(%rbp)
	pushq -7024(%rbp)
	pushq -7032(%rbp)
	pushq -7040(%rbp)
	pushq -7048(%rbp)
	pushq -7056(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6928(%rbp)
	pushq -6936(%rbp)
	pushq -6944(%rbp)
	pushq -6952(%rbp)
	pushq -6960(%rbp)
	pushq -6968(%rbp)
	pushq -6976(%rbp)
	pushq -6984(%rbp)
	pushq -6992(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8ade:
	mov -6824(%RBP),%RSP
	add $-7056, %RSP
	jmp uuid_00000000000c8ae1
uuid_00000000000c8adf:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6752(%rbp)
	pushq -6760(%rbp)
	pushq -6768(%rbp)
	pushq -6776(%rbp)
	pushq -6784(%rbp)
	pushq -6792(%rbp)
	pushq -6800(%rbp)
	pushq -6808(%rbp)
	pushq -6816(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6672(%rbp)
	pushq -6680(%rbp)
	pushq -6688(%rbp)
	pushq -6696(%rbp)
	pushq -6704(%rbp)
	pushq -6712(%rbp)
	pushq -6720(%rbp)
	pushq -6728(%rbp)
	pushq -6736(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -6640(%rbp)
	pushq -6648(%rbp)
	pushq -6656(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8ae1:
	mov -6536(%RBP),%RSP
	add $-6816, %RSP
	jmp uuid_00000000000c8ae4
uuid_00000000000c8ae2:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6464(%rbp)
	pushq -6472(%rbp)
	pushq -6480(%rbp)
	pushq -6488(%rbp)
	pushq -6496(%rbp)
	pushq -6504(%rbp)
	pushq -6512(%rbp)
	pushq -6520(%rbp)
	pushq -6528(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6384(%rbp)
	pushq -6392(%rbp)
	pushq -6400(%rbp)
	pushq -6408(%rbp)
	pushq -6416(%rbp)
	pushq -6424(%rbp)
	pushq -6432(%rbp)
	pushq -6440(%rbp)
	pushq -6448(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8ae4:
	mov -6280(%RBP),%RSP
	add $-6528, %RSP
	jmp uuid_00000000000c8ae7
uuid_00000000000c8ae5:
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6208(%rbp)
	pushq -6216(%rbp)
	pushq -6224(%rbp)
	pushq -6232(%rbp)
	pushq -6240(%rbp)
	pushq -6248(%rbp)
	pushq -6256(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6128(%rbp)
	pushq -6136(%rbp)
	pushq -6144(%rbp)
	pushq -6152(%rbp)
	pushq -6160(%rbp)
	pushq -6168(%rbp)
	pushq -6176(%rbp)
	pushq -6184(%rbp)
	pushq -6192(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8ae7:
	mov -6024(%RBP),%RSP
	add $-6272, %RSP
	jmp uuid_00000000000c8aea
uuid_00000000000c8ae8:
	push %RBP
#call function is-macro-head : Arrow<Cons<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6016(%rbp)
	pushq $2
	mov %RBX, %RBP
	call is_SB_macro_SB_head_CL_ArrowU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8aae
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6016(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5952(%rbp)
	pushq -5960(%rbp)
	pushq -5968(%rbp)
	pushq -5976(%rbp)
	pushq -5984(%rbp)
	pushq -5992(%rbp)
	pushq -6000(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	pushq -5800(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000c8ab0
uuid_00000000000c8aae:
#call function preprocess-apply-hard : Arrow<Cons<Cons<String,U64>,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6016(%rbp)
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_hard_CL_ArrowASTConsASTConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	movq -6096(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -6088(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -6080(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -6072(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -6064(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -6056(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -6048(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -6040(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -6032(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c8ab0:
	mov -6024(%RBP),%RSP
	add $-6096, %RSP
uuid_00000000000c8aea:
	mov -5496(%RBP),%RSP
	add $-6096, %RSP
	jmp uuid_00000000000c8aed
uuid_00000000000c8aeb:
	push %RBP
#call function is-macro-head : Arrow<Cons<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5488(%rbp)
	pushq $1
	mov %RBX, %RBP
	call is_SB_macro_SB_head_CL_ArrowU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8a90
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5488(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	pushq -5440(%rbp)
	pushq -5448(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000c8a92
uuid_00000000000c8a90:
#call function preprocess-apply-hard : Arrow<Cons<Cons<String,U64>,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5488(%rbp)
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_hard_CL_ArrowASTConsASTConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	movq -5568(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -5560(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -5552(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -5544(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -5536(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -5528(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -5520(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -5512(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -5504(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c8a92:
	mov -5496(%RBP),%RSP
	add $-5568, %RSP
uuid_00000000000c8aed:
	mov -5144(%RBP),%RSP
	add $-5568, %RSP
	jmp uuid_00000000000c8af0
uuid_00000000000c8aee:
	mov $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c8a7b:
#call function non-zero : Arrow<SfxList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8a7c
	jmp uuid_00000000000c8a7d
uuid_00000000000c8a7c:
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	push %RBP
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq $0
	push %RBP
	mov -5288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a71
	jmp uuid_00000000000c8a73
uuid_00000000000c8a71:
	push %RBP
	pushq -5264(%RBP)
	pushq -5272(%RBP)
	pushq -5280(%RBP)
	jmp uuid_00000000000c8a6e
	jmp uuid_00000000000c8a70
uuid_00000000000c8a6e:
	push %RBP
	mov -5256(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8a6b
	jmp uuid_00000000000c8a6d
uuid_00000000000c8a6b:
	push %RBP
	mov -5248(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8a68
	jmp uuid_00000000000c8a6a
uuid_00000000000c8a68:
	movb $1, -5296(%rbp)
uuid_00000000000c8a6a:
	mov -5360(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c8a6d:
	mov -5344(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c8a70:
	mov -5312(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c8a73:
	mov -5304(%RBP),%RSP
	add $-5408, %RSP
	mov -5296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a78
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8a77
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8a7a
uuid_00000000000c8a78:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5136(%rbp)
	pushq -5352(%rbp)
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8a74
	movq -5408(%rbp), %r15
	movq %r15, -5184(%rbp)
	movq -5400(%rbp), %r15
	movq %r15, -5176(%rbp)
	movq -5392(%rbp), %r15
	movq %r15, -5168(%rbp)
	movq -5384(%rbp), %r15
	movq %r15, -5160(%rbp)
	movq -5376(%rbp), %r15
	movq %r15, -5152(%rbp)
	movq -5368(%rbp), %r15
	movq %r15, -5144(%rbp)
	jmp uuid_00000000000c8a76
uuid_00000000000c8a74:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5136(%rbp)
	pushq -5352(%rbp)
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5424(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5424(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -5184(%RBP)
	popq -5176(%RBP)
	popq -5168(%RBP)
	popq -5160(%RBP)
	popq -5152(%RBP)
	popq -5144(%RBP)
uuid_00000000000c8a76:
	mov -5416(%RBP),%RSP
	add $-5424, %RSP
uuid_00000000000c8a7a:
	mov -5240(%RBP),%RSP
	add $-5424, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c8a7b
uuid_00000000000c8a7d:
uuid_00000000000c8af0:
	mov -4968(%RBP),%RSP
	add $-5184, %RSP
	jmp uuid_00000000000c8af3
uuid_00000000000c8af1:
	mov $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c8a5c:
#call function non-zero : Arrow<SfxList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8a5d
	jmp uuid_00000000000c8a5e
uuid_00000000000c8a5d:
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	push %RBP
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq $0
	push %RBP
	mov -5112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a52
	jmp uuid_00000000000c8a54
uuid_00000000000c8a52:
	push %RBP
	pushq -5088(%RBP)
	pushq -5096(%RBP)
	pushq -5104(%RBP)
	jmp uuid_00000000000c8a4f
	jmp uuid_00000000000c8a51
uuid_00000000000c8a4f:
	push %RBP
	mov -5080(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8a4c
	jmp uuid_00000000000c8a4e
uuid_00000000000c8a4c:
	push %RBP
	mov -5072(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8a49
	jmp uuid_00000000000c8a4b
uuid_00000000000c8a49:
	movb $1, -5120(%rbp)
uuid_00000000000c8a4b:
	mov -5184(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000c8a4e:
	mov -5168(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000c8a51:
	mov -5136(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000c8a54:
	mov -5128(%RBP),%RSP
	add $-5232, %RSP
	mov -5120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8a59
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8a58
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8a5b
uuid_00000000000c8a59:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq -5176(%rbp)
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8a55
	movq -5232(%rbp), %r15
	movq %r15, -5008(%rbp)
	movq -5224(%rbp), %r15
	movq %r15, -5000(%rbp)
	movq -5216(%rbp), %r15
	movq %r15, -4992(%rbp)
	movq -5208(%rbp), %r15
	movq %r15, -4984(%rbp)
	movq -5200(%rbp), %r15
	movq %r15, -4976(%rbp)
	movq -5192(%rbp), %r15
	movq %r15, -4968(%rbp)
	jmp uuid_00000000000c8a57
uuid_00000000000c8a55:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq -5176(%rbp)
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5248(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -5248(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -5008(%RBP)
	popq -5000(%RBP)
	popq -4992(%RBP)
	popq -4984(%RBP)
	popq -4976(%RBP)
	popq -4968(%RBP)
uuid_00000000000c8a57:
	mov -5240(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000c8a5b:
	mov -5064(%RBP),%RSP
	add $-5248, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c8a5c
uuid_00000000000c8a5e:
uuid_00000000000c8af3:
	mov -4792(%RBP),%RSP
	add $-5008, %RSP
	jmp uuid_00000000000c8af6
uuid_00000000000c8af4:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4ec7
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4608(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8af6:
	mov -4400(%RBP),%RSP
	add $-4784, %RSP
	jmp uuid_00000000000c8af9
uuid_00000000000c8af7:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4ec7
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4216(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8af9:
	mov -4008(%RBP),%RSP
	add $-4392, %RSP
	jmp uuid_00000000000c8afc
uuid_00000000000c8afa:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4bba
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3936(%rbp)
	pushq -3944(%rbp)
	pushq -3952(%rbp)
	pushq -3960(%rbp)
	pushq -3968(%rbp)
	pushq -3976(%rbp)
	pushq -3984(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3760(%rbp)
	pushq -3768(%rbp)
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -3800(%rbp)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3648(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8afc:
	mov -3440(%RBP),%RSP
	add $-4000, %RSP
	jmp uuid_00000000000c8aff
uuid_00000000000c8afd:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4bba
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3368(%rbp)
	pushq -3376(%rbp)
	pushq -3384(%rbp)
	pushq -3392(%rbp)
	pushq -3400(%rbp)
	pushq -3408(%rbp)
	pushq -3416(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3192(%rbp)
	pushq -3200(%rbp)
	pushq -3208(%rbp)
	pushq -3216(%rbp)
	pushq -3224(%rbp)
	pushq -3232(%rbp)
	pushq -3240(%rbp)
	pushq -3248(%rbp)
	pushq -3256(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3080(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8aff:
	mov -2872(%RBP),%RSP
	add $-3432, %RSP
	jmp uuid_00000000000c8b02
uuid_00000000000c8b00:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4bba
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2624(%rbp)
	pushq -2632(%rbp)
	pushq -2640(%rbp)
	pushq -2648(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -2592(%rbp)
	pushq -2600(%rbp)
	pushq -2608(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8b02:
	mov -2120(%RBP),%RSP
	add $-2864, %RSP
	jmp uuid_00000000000c8b05
uuid_00000000000c8b03:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8b05:
	mov -1552(%RBP),%RSP
	add $-2112, %RSP
	jmp uuid_00000000000c8b08
uuid_00000000000c8b06:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1192(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8b08:
	mov -984(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000c8b0b
uuid_00000000000c8b09:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c8b0b:
	mov -232(%RBP),%RSP
	add $-976, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
preprocess_SB_is_SB_suffixed_CL_ArrowU64String:
	pushq $0
	mov $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c8b1f:
#call function non-zero : Arrow<SfxList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8b20
	jmp uuid_00000000000c8b21
uuid_00000000000c8b20:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b15
	jmp uuid_00000000000c8b17
uuid_00000000000c8b15:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000c8b12
	jmp uuid_00000000000c8b14
uuid_00000000000c8b12:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8b0f
	jmp uuid_00000000000c8b11
uuid_00000000000c8b0f:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8b0c
	jmp uuid_00000000000c8b0e
uuid_00000000000c8b0c:
	movb $1, -184(%rbp)
uuid_00000000000c8b0e:
	mov -248(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c8b11:
	mov -232(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c8b14:
	mov -200(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c8b17:
	mov -192(%RBP),%RSP
	add $-296, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b1c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8b1b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8b1e
uuid_00000000000c8b1c:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8b18
	jmp uuid_00000000000c8b1a
uuid_00000000000c8b18:
	movq $1, -24(%rbp)
uuid_00000000000c8b1a:
	mov -304(%RBP),%RSP
	add $-304, %RSP
	movq -296(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000c8b1e:
	mov -128(%RBP),%RSP
	add $-304, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c8b1f
uuid_00000000000c8b21:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
preprocess_CL_ArrowNilNil:
#call function index-typedefs : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
substitute_SB_uuids_CL_ArrowASTConsASTContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b3a
	jmp uuid_00000000000c8b3c
uuid_00000000000c8b3a:
	push %RBP
	mov -392(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b28
	jmp uuid_00000000000c8b2a
uuid_00000000000c8b28:
	push %RBP
	jmp uuid_00000000000c8b25
	jmp uuid_00000000000c8b27
uuid_00000000000c8b25:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8b22
	jmp uuid_00000000000c8b24
uuid_00000000000c8b22:
	movb $1, -504(%rbp)
uuid_00000000000c8b24:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c8b27:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c8b2a:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b37
	jmp uuid_00000000000c8b39
uuid_00000000000c8b37:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b31
	jmp uuid_00000000000c8b33
uuid_00000000000c8b31:
	push %RBP
	jmp uuid_00000000000c8b2e
	jmp uuid_00000000000c8b30
uuid_00000000000c8b2e:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq $uuid_00000000000c83da
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8b2b
	jmp uuid_00000000000c8b2d
uuid_00000000000c8b2b:
	movb $1, -624(%rbp)
uuid_00000000000c8b2d:
	mov -648(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c8b30:
	mov -640(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c8b33:
	mov -632(%RBP),%RSP
	add $-656, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b34
	jmp uuid_00000000000c8b36
uuid_00000000000c8b34:
	movb $1, -408(%rbp)
uuid_00000000000c8b36:
	mov -544(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c8b39:
	mov -424(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c8b3c:
	mov -416(%RBP),%RSP
	add $-656, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bbd
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b5c
	jmp uuid_00000000000c8b5e
uuid_00000000000c8b5c:
	push %RBP
	mov -728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8b59
	jmp uuid_00000000000c8b5b
uuid_00000000000c8b59:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8b56
	jmp uuid_00000000000c8b58
uuid_00000000000c8b56:
	movb $1, -744(%rbp)
uuid_00000000000c8b58:
	mov -840(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c8b5b:
	mov -760(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c8b5e:
	mov -752(%RBP),%RSP
	add $-912, %RSP
	mov -744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bba
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b68
	jmp uuid_00000000000c8b6a
uuid_00000000000c8b68:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000c8b65
	jmp uuid_00000000000c8b67
uuid_00000000000c8b65:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8b62
	jmp uuid_00000000000c8b64
uuid_00000000000c8b62:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8b5f
	jmp uuid_00000000000c8b61
uuid_00000000000c8b5f:
	movb $1, -1000(%rbp)
uuid_00000000000c8b61:
	mov -1128(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c8b64:
	mov -1048(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c8b67:
	mov -1016(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c8b6a:
	mov -1008(%RBP),%RSP
	add $-1200, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bb7
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -1280(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bb4
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bb1
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1440(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b6e
	jmp uuid_00000000000c8b70
uuid_00000000000c8b6e:
	push %RBP
	jmp uuid_00000000000c8b6b
	jmp uuid_00000000000c8b6d
uuid_00000000000c8b6b:
	movb $1, -1448(%rbp)
uuid_00000000000c8b6d:
	mov -1464(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000c8b70:
	mov -1456(%RBP),%RSP
	add $-1464, %RSP
	mov -1448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bae
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1544(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b77
	jmp uuid_00000000000c8b79
uuid_00000000000c8b77:
	push %RBP
	jmp uuid_00000000000c8b74
	jmp uuid_00000000000c8b76
uuid_00000000000c8b74:
	push %RBP
	mov -1480(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8b71
	jmp uuid_00000000000c8b73
uuid_00000000000c8b71:
	movb $1, -1552(%rbp)
uuid_00000000000c8b73:
	mov -1576(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c8b76:
	mov -1568(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c8b79:
	mov -1560(%RBP),%RSP
	add $-1584, %RSP
	mov -1552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bab
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1664(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b80
	jmp uuid_00000000000c8b82
uuid_00000000000c8b80:
	push %RBP
	jmp uuid_00000000000c8b7d
	jmp uuid_00000000000c8b7f
uuid_00000000000c8b7d:
	push %RBP
	mov -1600(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8b7a
	jmp uuid_00000000000c8b7c
uuid_00000000000c8b7a:
	movb $1, -1672(%rbp)
uuid_00000000000c8b7c:
	mov -1696(%RBP),%RSP
	add $-1704, %RSP
uuid_00000000000c8b7f:
	mov -1688(%RBP),%RSP
	add $-1704, %RSP
uuid_00000000000c8b82:
	mov -1680(%RBP),%RSP
	add $-1704, %RSP
	mov -1672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ba8
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b89
	jmp uuid_00000000000c8b8b
uuid_00000000000c8b89:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8b86
	jmp uuid_00000000000c8b88
uuid_00000000000c8b86:
	push %RBP
	mov -1768(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8b83
	jmp uuid_00000000000c8b85
uuid_00000000000c8b83:
	movb $1, -1792(%rbp)
uuid_00000000000c8b85:
	mov -1888(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c8b88:
	mov -1808(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c8b8b:
	mov -1800(%RBP),%RSP
	add $-1960, %RSP
	mov -1792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ba5
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -2040(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b92
	jmp uuid_00000000000c8b94
uuid_00000000000c8b92:
	push %RBP
	mov -2032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8b8f
	jmp uuid_00000000000c8b91
uuid_00000000000c8b8f:
	push %RBP
	mov -2024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8b8c
	jmp uuid_00000000000c8b8e
uuid_00000000000c8b8c:
	movb $1, -2048(%rbp)
uuid_00000000000c8b8e:
	mov -2144(%RBP),%RSP
	add $-2216, %RSP
uuid_00000000000c8b91:
	mov -2064(%RBP),%RSP
	add $-2216, %RSP
uuid_00000000000c8b94:
	mov -2056(%RBP),%RSP
	add $-2216, %RSP
	mov -2048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ba2
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -2296(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b9b
	jmp uuid_00000000000c8b9d
uuid_00000000000c8b9b:
	push %RBP
	mov -2288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8b98
	jmp uuid_00000000000c8b9a
uuid_00000000000c8b98:
	push %RBP
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	jmp uuid_00000000000c8b95
	jmp uuid_00000000000c8b97
uuid_00000000000c8b95:
	movb $1, -2304(%rbp)
uuid_00000000000c8b97:
	mov -2400(%RBP),%RSP
	add $-2456, %RSP
uuid_00000000000c8b9a:
	mov -2320(%RBP),%RSP
	add $-2456, %RSP
uuid_00000000000c8b9d:
	mov -2312(%RBP),%RSP
	add $-2456, %RSP
	mov -2304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b9f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8b9e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8ba1
uuid_00000000000c8b9f:
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c8ba1:
	mov -2224(%RBP),%RSP
	add $-2456, %RSP
	jmp uuid_00000000000c8ba4
uuid_00000000000c8ba2:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c8ba4:
	mov -1968(%RBP),%RSP
	add $-2216, %RSP
	jmp uuid_00000000000c8ba7
uuid_00000000000c8ba5:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c8ba7:
	mov -1712(%RBP),%RSP
	add $-1960, %RSP
	jmp uuid_00000000000c8baa
uuid_00000000000c8ba8:
uuid_00000000000c8baa:
	mov -1592(%RBP),%RSP
	add $-1704, %RSP
	jmp uuid_00000000000c8bad
uuid_00000000000c8bab:
uuid_00000000000c8bad:
	mov -1472(%RBP),%RSP
	add $-1584, %RSP
	jmp uuid_00000000000c8bb0
uuid_00000000000c8bae:
uuid_00000000000c8bb0:
	mov -1368(%RBP),%RSP
	add $-1464, %RSP
	jmp uuid_00000000000c8bb3
uuid_00000000000c8bb1:
uuid_00000000000c8bb3:
	mov -1288(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000c8bb6
uuid_00000000000c8bb4:
uuid_00000000000c8bb6:
	mov -1208(%RBP),%RSP
	add $-1280, %RSP
	jmp uuid_00000000000c8bb9
uuid_00000000000c8bb7:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq $5
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c8bb9:
	mov -920(%RBP),%RSP
	add $-1200, %RSP
	jmp uuid_00000000000c8bbc
uuid_00000000000c8bba:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c8bbc:
	mov -664(%RBP),%RSP
	add $-912, %RSP
	jmp uuid_00000000000c8bbf
uuid_00000000000c8bbd:
uuid_00000000000c8b53:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8b54
	jmp uuid_00000000000c8b55
uuid_00000000000c8b54:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq $0
	push %RBP
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b46
	jmp uuid_00000000000c8b48
uuid_00000000000c8b46:
	push %RBP
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	jmp uuid_00000000000c8b43
	jmp uuid_00000000000c8b45
uuid_00000000000c8b43:
	push %RBP
	mov -776(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8b40
	jmp uuid_00000000000c8b42
uuid_00000000000c8b40:
	push %RBP
	mov -768(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8b3d
	jmp uuid_00000000000c8b3f
uuid_00000000000c8b3d:
	movb $1, -864(%rbp)
uuid_00000000000c8b3f:
	mov -976(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c8b42:
	mov -960(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c8b45:
	mov -880(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c8b48:
	mov -872(%RBP),%RSP
	add $-1072, %RSP
	mov -864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8b50
	push %RBP
	jmp uuid_00000000000c8b4d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8b4c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8b4f
uuid_00000000000c8b4d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c8b4f:
	mov -1080(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000c8b52
uuid_00000000000c8b50:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -968(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8b49
	movq -1072(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c8b4b
uuid_00000000000c8b49:
	movq -952(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c8b4b:
	mov -1080(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c8b52:
	mov -760(%RBP),%RSP
	add $-1080, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c8b53
uuid_00000000000c8b55:
uuid_00000000000c8bbf:
	mov -328(%RBP),%RSP
	add $-656, %RSP
	subq $72, %rsp
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bc6
	jmp uuid_00000000000c8bc8
uuid_00000000000c8bc6:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bc3
	jmp uuid_00000000000c8bc5
uuid_00000000000c8bc3:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bc0
	jmp uuid_00000000000c8bc2
uuid_00000000000c8bc0:
	movb $1, -600(%rbp)
uuid_00000000000c8bc2:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c8bc5:
	mov -616(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c8bc8:
	mov -608(%RBP),%RSP
	add $-768, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e74
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -928(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c17
	jmp uuid_00000000000c8c19
uuid_00000000000c8c17:
	push %RBP
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq $0
	push %RBP
	mov -1024(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8be1
	jmp uuid_00000000000c8be3
uuid_00000000000c8be1:
	push %RBP
	jmp uuid_00000000000c8bde
	jmp uuid_00000000000c8be0
uuid_00000000000c8bde:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bd8
	jmp uuid_00000000000c8bda
uuid_00000000000c8bd8:
	push %RBP
	jmp uuid_00000000000c8bd5
	jmp uuid_00000000000c8bd7
uuid_00000000000c8bd5:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1232(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bcf
	jmp uuid_00000000000c8bd1
uuid_00000000000c8bcf:
	push %RBP
	jmp uuid_00000000000c8bcc
	jmp uuid_00000000000c8bce
uuid_00000000000c8bcc:
	push %RBP
	mov -1168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8bc9
	jmp uuid_00000000000c8bcb
uuid_00000000000c8bc9:
	movb $1, -1240(%rbp)
uuid_00000000000c8bcb:
	mov -1264(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c8bce:
	mov -1256(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c8bd1:
	mov -1248(%RBP),%RSP
	add $-1272, %RSP
	mov -1240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bd2
	jmp uuid_00000000000c8bd4
uuid_00000000000c8bd2:
	movb $1, -1136(%rbp)
uuid_00000000000c8bd4:
	mov -1160(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c8bd7:
	mov -1152(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c8bda:
	mov -1144(%RBP),%RSP
	add $-1272, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bdb
	jmp uuid_00000000000c8bdd
uuid_00000000000c8bdb:
	movb $1, -1032(%rbp)
uuid_00000000000c8bdd:
	mov -1056(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c8be0:
	mov -1048(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c8be3:
	mov -1040(%RBP),%RSP
	add $-1272, %RSP
	mov -1032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c14
	jmp uuid_00000000000c8c16
uuid_00000000000c8c14:
	push %RBP
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c0e
	jmp uuid_00000000000c8c10
uuid_00000000000c8c0e:
	push %RBP
	mov -1344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1448(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bea
	jmp uuid_00000000000c8bec
uuid_00000000000c8bea:
	push %RBP
	jmp uuid_00000000000c8be7
	jmp uuid_00000000000c8be9
uuid_00000000000c8be7:
	push %RBP
	jmp uuid_00000000000c8be4
	jmp uuid_00000000000c8be6
uuid_00000000000c8be4:
	movb $1, -1456(%rbp)
uuid_00000000000c8be6:
	mov -1480(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c8be9:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c8bec:
	mov -1464(%RBP),%RSP
	add $-1480, %RSP
	mov -1456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c0b
	jmp uuid_00000000000c8c0d
uuid_00000000000c8c0b:
	push %RBP
	mov -1336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1560(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c05
	jmp uuid_00000000000c8c07
uuid_00000000000c8c05:
	push %RBP
	mov -1552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bf3
	jmp uuid_00000000000c8bf5
uuid_00000000000c8bf3:
	push %RBP
	jmp uuid_00000000000c8bf0
	jmp uuid_00000000000c8bf2
uuid_00000000000c8bf0:
	push %RBP
	jmp uuid_00000000000c8bed
	jmp uuid_00000000000c8bef
uuid_00000000000c8bed:
	movb $1, -1664(%rbp)
uuid_00000000000c8bef:
	mov -1688(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c8bf2:
	mov -1680(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c8bf5:
	mov -1672(%RBP),%RSP
	add $-1688, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c02
	jmp uuid_00000000000c8c04
uuid_00000000000c8c02:
	push %RBP
	mov -1544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bfc
	jmp uuid_00000000000c8bfe
uuid_00000000000c8bfc:
	push %RBP
	jmp uuid_00000000000c8bf9
	jmp uuid_00000000000c8bfb
uuid_00000000000c8bf9:
	push %RBP
	jmp uuid_00000000000c8bf6
	jmp uuid_00000000000c8bf8
uuid_00000000000c8bf6:
	movb $1, -1776(%rbp)
uuid_00000000000c8bf8:
	mov -1800(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c8bfb:
	mov -1792(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c8bfe:
	mov -1784(%RBP),%RSP
	add $-1800, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8bff
	jmp uuid_00000000000c8c01
uuid_00000000000c8bff:
	movb $1, -1568(%rbp)
uuid_00000000000c8c01:
	mov -1696(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c8c04:
	mov -1584(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c8c07:
	mov -1576(%RBP),%RSP
	add $-1800, %RSP
	mov -1568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c08
	jmp uuid_00000000000c8c0a
uuid_00000000000c8c08:
	movb $1, -1360(%rbp)
uuid_00000000000c8c0a:
	mov -1488(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c8c0d:
	mov -1376(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c8c10:
	mov -1368(%RBP),%RSP
	add $-1800, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c11
	jmp uuid_00000000000c8c13
uuid_00000000000c8c11:
	movb $1, -936(%rbp)
uuid_00000000000c8c13:
	mov -1280(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c8c16:
	mov -952(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c8c19:
	mov -944(%RBP),%RSP
	add $-1800, %RSP
	mov -936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e71
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -1960(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c66
	jmp uuid_00000000000c8c68
uuid_00000000000c8c66:
	push %RBP
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq $0
	push %RBP
	mov -2056(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c41
	jmp uuid_00000000000c8c43
uuid_00000000000c8c41:
	push %RBP
	mov -2048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2152(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c2f
	jmp uuid_00000000000c8c31
uuid_00000000000c8c2f:
	push %RBP
	mov -2144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2248(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c1d
	jmp uuid_00000000000c8c1f
uuid_00000000000c8c1d:
	push %RBP
	jmp uuid_00000000000c8c1a
	jmp uuid_00000000000c8c1c
uuid_00000000000c8c1a:
	movb $1, -2256(%rbp)
uuid_00000000000c8c1c:
	mov -2272(%RBP),%RSP
	add $-2272, %RSP
uuid_00000000000c8c1f:
	mov -2264(%RBP),%RSP
	add $-2272, %RSP
	mov -2256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c2c
	jmp uuid_00000000000c8c2e
uuid_00000000000c8c2c:
	push %RBP
	mov -2136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2352(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c26
	jmp uuid_00000000000c8c28
uuid_00000000000c8c26:
	push %RBP
	jmp uuid_00000000000c8c23
	jmp uuid_00000000000c8c25
uuid_00000000000c8c23:
	push %RBP
	jmp uuid_00000000000c8c20
	jmp uuid_00000000000c8c22
uuid_00000000000c8c20:
	movb $1, -2360(%rbp)
uuid_00000000000c8c22:
	mov -2384(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c8c25:
	mov -2376(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c8c28:
	mov -2368(%RBP),%RSP
	add $-2384, %RSP
	mov -2360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c29
	jmp uuid_00000000000c8c2b
uuid_00000000000c8c29:
	movb $1, -2160(%rbp)
uuid_00000000000c8c2b:
	mov -2280(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c8c2e:
	mov -2176(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c8c31:
	mov -2168(%RBP),%RSP
	add $-2384, %RSP
	mov -2160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c3e
	jmp uuid_00000000000c8c40
uuid_00000000000c8c3e:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2464(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c38
	jmp uuid_00000000000c8c3a
uuid_00000000000c8c38:
	push %RBP
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	jmp uuid_00000000000c8c35
	jmp uuid_00000000000c8c37
uuid_00000000000c8c35:
	push %RBP
	mov -2400(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2560(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8c32
	jmp uuid_00000000000c8c34
uuid_00000000000c8c32:
	movb $1, -2472(%rbp)
uuid_00000000000c8c34:
	mov -2552(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c8c37:
	mov -2488(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c8c3a:
	mov -2480(%RBP),%RSP
	add $-2560, %RSP
	mov -2472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c3b
	jmp uuid_00000000000c8c3d
uuid_00000000000c8c3b:
	movb $1, -2064(%rbp)
uuid_00000000000c8c3d:
	mov -2392(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c8c40:
	mov -2080(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c8c43:
	mov -2072(%RBP),%RSP
	add $-2560, %RSP
	mov -2064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c63
	jmp uuid_00000000000c8c65
uuid_00000000000c8c63:
	push %RBP
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq $0
	push %RBP
	mov -2640(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c5d
	jmp uuid_00000000000c8c5f
uuid_00000000000c8c5d:
	push %RBP
	mov -2632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2736(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c4a
	jmp uuid_00000000000c8c4c
uuid_00000000000c8c4a:
	push %RBP
	jmp uuid_00000000000c8c47
	jmp uuid_00000000000c8c49
uuid_00000000000c8c47:
	push %RBP
	mov -2672(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8c44
	jmp uuid_00000000000c8c46
uuid_00000000000c8c44:
	movb $1, -2744(%rbp)
uuid_00000000000c8c46:
	mov -2768(%RBP),%RSP
	add $-2776, %RSP
uuid_00000000000c8c49:
	mov -2760(%RBP),%RSP
	add $-2776, %RSP
uuid_00000000000c8c4c:
	mov -2752(%RBP),%RSP
	add $-2776, %RSP
	mov -2744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c5a
	jmp uuid_00000000000c8c5c
uuid_00000000000c8c5a:
	push %RBP
	mov -2624(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c54
	jmp uuid_00000000000c8c56
uuid_00000000000c8c54:
	push %RBP
	jmp uuid_00000000000c8c51
	jmp uuid_00000000000c8c53
uuid_00000000000c8c51:
	push %RBP
	mov -2792(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2896(%rbp)
	pushq $uuid_00000000000c8c4d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8c4e
	jmp uuid_00000000000c8c50
uuid_00000000000c8c4e:
	movb $1, -2864(%rbp)
uuid_00000000000c8c50:
	mov -2888(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c8c53:
	mov -2880(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c8c56:
	mov -2872(%RBP),%RSP
	add $-2896, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c57
	jmp uuid_00000000000c8c59
uuid_00000000000c8c57:
	movb $1, -2648(%rbp)
uuid_00000000000c8c59:
	mov -2784(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c8c5c:
	mov -2664(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c8c5f:
	mov -2656(%RBP),%RSP
	add $-2896, %RSP
	mov -2648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c60
	jmp uuid_00000000000c8c62
uuid_00000000000c8c60:
	movb $1, -1968(%rbp)
uuid_00000000000c8c62:
	mov -2568(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c8c65:
	mov -1984(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c8c68:
	mov -1976(%RBP),%RSP
	add $-2896, %RSP
	mov -1968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e6e
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -3056(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c9c
	jmp uuid_00000000000c8c9e
uuid_00000000000c8c9c:
	push %RBP
	pushq -2984(%RBP)
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq -3048(%RBP)
	pushq $0
	push %RBP
	mov -3152(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c78
	jmp uuid_00000000000c8c7a
uuid_00000000000c8c78:
	push %RBP
	jmp uuid_00000000000c8c75
	jmp uuid_00000000000c8c77
uuid_00000000000c8c75:
	push %RBP
	mov -3136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c6f
	jmp uuid_00000000000c8c71
uuid_00000000000c8c6f:
	push %RBP
	jmp uuid_00000000000c8c6c
	jmp uuid_00000000000c8c6e
uuid_00000000000c8c6c:
	push %RBP
	mov -3192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8c69
	jmp uuid_00000000000c8c6b
uuid_00000000000c8c69:
	movb $1, -3264(%rbp)
uuid_00000000000c8c6b:
	mov -3288(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c8c6e:
	mov -3280(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c8c71:
	mov -3272(%RBP),%RSP
	add $-3296, %RSP
	mov -3264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c72
	jmp uuid_00000000000c8c74
uuid_00000000000c8c72:
	movb $1, -3160(%rbp)
uuid_00000000000c8c74:
	mov -3184(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c8c77:
	mov -3176(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c8c7a:
	mov -3168(%RBP),%RSP
	add $-3296, %RSP
	mov -3160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c99
	jmp uuid_00000000000c8c9b
uuid_00000000000c8c99:
	push %RBP
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq -2952(%RBP)
	pushq -2960(%RBP)
	pushq -2968(%RBP)
	pushq -2976(%RBP)
	pushq $0
	push %RBP
	mov -3376(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c93
	jmp uuid_00000000000c8c95
uuid_00000000000c8c93:
	push %RBP
	mov -3368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3472(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c81
	jmp uuid_00000000000c8c83
uuid_00000000000c8c81:
	push %RBP
	jmp uuid_00000000000c8c7e
	jmp uuid_00000000000c8c80
uuid_00000000000c8c7e:
	push %RBP
	jmp uuid_00000000000c8c7b
	jmp uuid_00000000000c8c7d
uuid_00000000000c8c7b:
	movb $1, -3480(%rbp)
uuid_00000000000c8c7d:
	mov -3504(%RBP),%RSP
	add $-3504, %RSP
uuid_00000000000c8c80:
	mov -3496(%RBP),%RSP
	add $-3504, %RSP
uuid_00000000000c8c83:
	mov -3488(%RBP),%RSP
	add $-3504, %RSP
	mov -3480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c90
	jmp uuid_00000000000c8c92
uuid_00000000000c8c90:
	push %RBP
	mov -3360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3584(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c8a
	jmp uuid_00000000000c8c8c
uuid_00000000000c8c8a:
	push %RBP
	jmp uuid_00000000000c8c87
	jmp uuid_00000000000c8c89
uuid_00000000000c8c87:
	push %RBP
	jmp uuid_00000000000c8c84
	jmp uuid_00000000000c8c86
uuid_00000000000c8c84:
	movb $1, -3592(%rbp)
uuid_00000000000c8c86:
	mov -3616(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c8c89:
	mov -3608(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c8c8c:
	mov -3600(%RBP),%RSP
	add $-3616, %RSP
	mov -3592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c8d
	jmp uuid_00000000000c8c8f
uuid_00000000000c8c8d:
	movb $1, -3384(%rbp)
uuid_00000000000c8c8f:
	mov -3512(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c8c92:
	mov -3400(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c8c95:
	mov -3392(%RBP),%RSP
	add $-3616, %RSP
	mov -3384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8c96
	jmp uuid_00000000000c8c98
uuid_00000000000c8c96:
	movb $1, -3064(%rbp)
uuid_00000000000c8c98:
	mov -3304(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c8c9b:
	mov -3080(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c8c9e:
	mov -3072(%RBP),%RSP
	add $-3616, %RSP
	mov -3064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e6b
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -3776(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8cdf
	jmp uuid_00000000000c8ce1
uuid_00000000000c8cdf:
	push %RBP
	pushq -3704(%RBP)
	pushq -3712(%RBP)
	pushq -3720(%RBP)
	pushq -3728(%RBP)
	pushq -3736(%RBP)
	pushq -3744(%RBP)
	pushq -3752(%RBP)
	pushq -3760(%RBP)
	pushq -3768(%RBP)
	pushq $0
	push %RBP
	mov -3872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ccd
	jmp uuid_00000000000c8ccf
uuid_00000000000c8ccd:
	push %RBP
	mov -3864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8cca
	jmp uuid_00000000000c8ccc
uuid_00000000000c8cca:
	push %RBP
	mov -3856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8cc7
	jmp uuid_00000000000c8cc9
uuid_00000000000c8cc7:
	movb $1, -3880(%rbp)
uuid_00000000000c8cc9:
	mov -3976(%RBP),%RSP
	add $-4048, %RSP
uuid_00000000000c8ccc:
	mov -3896(%RBP),%RSP
	add $-4048, %RSP
uuid_00000000000c8ccf:
	mov -3888(%RBP),%RSP
	add $-4048, %RSP
	mov -3880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8cdc
	jmp uuid_00000000000c8cde
uuid_00000000000c8cdc:
	push %RBP
	pushq -3632(%RBP)
	pushq -3640(%RBP)
	pushq -3648(%RBP)
	pushq -3656(%RBP)
	pushq -3664(%RBP)
	pushq -3672(%RBP)
	pushq -3680(%RBP)
	pushq -3688(%RBP)
	pushq -3696(%RBP)
	pushq $0
	push %RBP
	mov -4128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8cd6
	jmp uuid_00000000000c8cd8
uuid_00000000000c8cd6:
	push %RBP
	mov -4120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8cd3
	jmp uuid_00000000000c8cd5
uuid_00000000000c8cd3:
	push %RBP
	mov -4112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8cd0
	jmp uuid_00000000000c8cd2
uuid_00000000000c8cd0:
	movb $1, -4136(%rbp)
uuid_00000000000c8cd2:
	mov -4232(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000c8cd5:
	mov -4152(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000c8cd8:
	mov -4144(%RBP),%RSP
	add $-4304, %RSP
	mov -4136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8cd9
	jmp uuid_00000000000c8cdb
uuid_00000000000c8cd9:
	movb $1, -3784(%rbp)
uuid_00000000000c8cdb:
	mov -4056(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000c8cde:
	mov -3800(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000c8ce1:
	mov -3792(%RBP),%RSP
	add $-4304, %RSP
	mov -3784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e68
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -4464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d06
	jmp uuid_00000000000c8d08
uuid_00000000000c8d06:
	push %RBP
	pushq -4392(%RBP)
	pushq -4400(%RBP)
	pushq -4408(%RBP)
	pushq -4416(%RBP)
	pushq -4424(%RBP)
	pushq -4432(%RBP)
	pushq -4440(%RBP)
	pushq -4448(%RBP)
	pushq -4456(%RBP)
	pushq $0
	push %RBP
	mov -4560(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8cf1
	jmp uuid_00000000000c8cf3
uuid_00000000000c8cf1:
	push %RBP
	pushq -4536(%RBP)
	pushq -4544(%RBP)
	pushq -4552(%RBP)
	jmp uuid_00000000000c8cee
	jmp uuid_00000000000c8cf0
uuid_00000000000c8cee:
	push %RBP
	mov -4528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8ceb
	jmp uuid_00000000000c8ced
uuid_00000000000c8ceb:
	push %RBP
	mov -4520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8ce8
	jmp uuid_00000000000c8cea
uuid_00000000000c8ce8:
	movb $1, -4568(%rbp)
uuid_00000000000c8cea:
	mov -4696(%RBP),%RSP
	add $-4768, %RSP
uuid_00000000000c8ced:
	mov -4616(%RBP),%RSP
	add $-4768, %RSP
uuid_00000000000c8cf0:
	mov -4584(%RBP),%RSP
	add $-4768, %RSP
uuid_00000000000c8cf3:
	mov -4576(%RBP),%RSP
	add $-4768, %RSP
	mov -4568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d03
	jmp uuid_00000000000c8d05
uuid_00000000000c8d03:
	push %RBP
	pushq -4320(%RBP)
	pushq -4328(%RBP)
	pushq -4336(%RBP)
	pushq -4344(%RBP)
	pushq -4352(%RBP)
	pushq -4360(%RBP)
	pushq -4368(%RBP)
	pushq -4376(%RBP)
	pushq -4384(%RBP)
	pushq $0
	push %RBP
	mov -4848(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8cfd
	jmp uuid_00000000000c8cff
uuid_00000000000c8cfd:
	push %RBP
	pushq -4824(%RBP)
	pushq -4832(%RBP)
	pushq -4840(%RBP)
	jmp uuid_00000000000c8cfa
	jmp uuid_00000000000c8cfc
uuid_00000000000c8cfa:
	push %RBP
	mov -4816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8cf7
	jmp uuid_00000000000c8cf9
uuid_00000000000c8cf7:
	push %RBP
	mov -4808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8cf4
	jmp uuid_00000000000c8cf6
uuid_00000000000c8cf4:
	movb $1, -4856(%rbp)
uuid_00000000000c8cf6:
	mov -4984(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000c8cf9:
	mov -4904(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000c8cfc:
	mov -4872(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000c8cff:
	mov -4864(%RBP),%RSP
	add $-5056, %RSP
	mov -4856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d00
	jmp uuid_00000000000c8d02
uuid_00000000000c8d00:
	movb $1, -4472(%rbp)
uuid_00000000000c8d02:
	mov -4776(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000c8d05:
	mov -4488(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000c8d08:
	mov -4480(%RBP),%RSP
	add $-5056, %RSP
	mov -4472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e65
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -5216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d28
	jmp uuid_00000000000c8d2a
uuid_00000000000c8d28:
	push %RBP
	pushq -5144(%RBP)
	pushq -5152(%RBP)
	pushq -5160(%RBP)
	pushq -5168(%RBP)
	pushq -5176(%RBP)
	pushq -5184(%RBP)
	pushq -5192(%RBP)
	pushq -5200(%RBP)
	pushq -5208(%RBP)
	pushq $0
	push %RBP
	mov -5312(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d15
	jmp uuid_00000000000c8d17
uuid_00000000000c8d15:
	push %RBP
	jmp uuid_00000000000c8d12
	jmp uuid_00000000000c8d14
uuid_00000000000c8d12:
	push %RBP
	mov -5248(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5352(%rbp)
	pushq $uuid_00000000000c8838
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8d0f
	jmp uuid_00000000000c8d11
uuid_00000000000c8d0f:
	movb $1, -5320(%rbp)
uuid_00000000000c8d11:
	mov -5344(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000c8d14:
	mov -5336(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000c8d17:
	mov -5328(%RBP),%RSP
	add $-5352, %RSP
	mov -5320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d25
	jmp uuid_00000000000c8d27
uuid_00000000000c8d25:
	push %RBP
	pushq -5072(%RBP)
	pushq -5080(%RBP)
	pushq -5088(%RBP)
	pushq -5096(%RBP)
	pushq -5104(%RBP)
	pushq -5112(%RBP)
	pushq -5120(%RBP)
	pushq -5128(%RBP)
	pushq -5136(%RBP)
	pushq $0
	push %RBP
	mov -5432(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d1f
	jmp uuid_00000000000c8d21
uuid_00000000000c8d1f:
	push %RBP
	jmp uuid_00000000000c8d1c
	jmp uuid_00000000000c8d1e
uuid_00000000000c8d1c:
	push %RBP
	mov -5368(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5472(%rbp)
	pushq $uuid_00000000000c8d18
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8d19
	jmp uuid_00000000000c8d1b
uuid_00000000000c8d19:
	movb $1, -5440(%rbp)
uuid_00000000000c8d1b:
	mov -5464(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000c8d1e:
	mov -5456(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000c8d21:
	mov -5448(%RBP),%RSP
	add $-5472, %RSP
	mov -5440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d22
	jmp uuid_00000000000c8d24
uuid_00000000000c8d22:
	movb $1, -5224(%rbp)
uuid_00000000000c8d24:
	mov -5360(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000c8d27:
	mov -5240(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000c8d2a:
	mov -5232(%RBP),%RSP
	add $-5472, %RSP
	mov -5224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e62
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -5632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d43
	jmp uuid_00000000000c8d45
uuid_00000000000c8d43:
	push %RBP
	pushq -5560(%RBP)
	pushq -5568(%RBP)
	pushq -5576(%RBP)
	pushq -5584(%RBP)
	pushq -5592(%RBP)
	pushq -5600(%RBP)
	pushq -5608(%RBP)
	pushq -5616(%RBP)
	pushq -5624(%RBP)
	pushq $0
	push %RBP
	mov -5728(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d31
	jmp uuid_00000000000c8d33
uuid_00000000000c8d31:
	push %RBP
	jmp uuid_00000000000c8d2e
	jmp uuid_00000000000c8d30
uuid_00000000000c8d2e:
	push %RBP
	mov -5664(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8d2b
	jmp uuid_00000000000c8d2d
uuid_00000000000c8d2b:
	movb $1, -5736(%rbp)
uuid_00000000000c8d2d:
	mov -5760(%RBP),%RSP
	add $-5768, %RSP
uuid_00000000000c8d30:
	mov -5752(%RBP),%RSP
	add $-5768, %RSP
uuid_00000000000c8d33:
	mov -5744(%RBP),%RSP
	add $-5768, %RSP
	mov -5736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d40
	jmp uuid_00000000000c8d42
uuid_00000000000c8d40:
	push %RBP
	pushq -5488(%RBP)
	pushq -5496(%RBP)
	pushq -5504(%RBP)
	pushq -5512(%RBP)
	pushq -5520(%RBP)
	pushq -5528(%RBP)
	pushq -5536(%RBP)
	pushq -5544(%RBP)
	pushq -5552(%RBP)
	pushq $0
	push %RBP
	mov -5848(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d3a
	jmp uuid_00000000000c8d3c
uuid_00000000000c8d3a:
	push %RBP
	jmp uuid_00000000000c8d37
	jmp uuid_00000000000c8d39
uuid_00000000000c8d37:
	push %RBP
	mov -5784(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8d34
	jmp uuid_00000000000c8d36
uuid_00000000000c8d34:
	movb $1, -5856(%rbp)
uuid_00000000000c8d36:
	mov -5880(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000c8d39:
	mov -5872(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000c8d3c:
	mov -5864(%RBP),%RSP
	add $-5888, %RSP
	mov -5856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d3d
	jmp uuid_00000000000c8d3f
uuid_00000000000c8d3d:
	movb $1, -5640(%rbp)
uuid_00000000000c8d3f:
	mov -5776(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000c8d42:
	mov -5656(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000c8d45:
	mov -5648(%RBP),%RSP
	add $-5888, %RSP
	mov -5640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e5f
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -6048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d61
	jmp uuid_00000000000c8d63
uuid_00000000000c8d61:
	push %RBP
	pushq -5976(%RBP)
	pushq -5984(%RBP)
	pushq -5992(%RBP)
	pushq -6000(%RBP)
	pushq -6008(%RBP)
	pushq -6016(%RBP)
	pushq -6024(%RBP)
	pushq -6032(%RBP)
	pushq -6040(%RBP)
	pushq $0
	push %RBP
	mov -6144(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d4f
	jmp uuid_00000000000c8d51
uuid_00000000000c8d4f:
	push %RBP
	jmp uuid_00000000000c8d4c
	jmp uuid_00000000000c8d4e
uuid_00000000000c8d4c:
	push %RBP
	mov -6080(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8d49
	jmp uuid_00000000000c8d4b
uuid_00000000000c8d49:
	movb $1, -6152(%rbp)
uuid_00000000000c8d4b:
	mov -6176(%RBP),%RSP
	add $-6184, %RSP
uuid_00000000000c8d4e:
	mov -6168(%RBP),%RSP
	add $-6184, %RSP
uuid_00000000000c8d51:
	mov -6160(%RBP),%RSP
	add $-6184, %RSP
	mov -6152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d5e
	jmp uuid_00000000000c8d60
uuid_00000000000c8d5e:
	push %RBP
	pushq -5904(%RBP)
	pushq -5912(%RBP)
	pushq -5920(%RBP)
	pushq -5928(%RBP)
	pushq -5936(%RBP)
	pushq -5944(%RBP)
	pushq -5952(%RBP)
	pushq -5960(%RBP)
	pushq -5968(%RBP)
	pushq $0
	push %RBP
	mov -6264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d58
	jmp uuid_00000000000c8d5a
uuid_00000000000c8d58:
	push %RBP
	jmp uuid_00000000000c8d55
	jmp uuid_00000000000c8d57
uuid_00000000000c8d55:
	push %RBP
	mov -6200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8d52
	jmp uuid_00000000000c8d54
uuid_00000000000c8d52:
	movb $1, -6272(%rbp)
uuid_00000000000c8d54:
	mov -6296(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c8d57:
	mov -6288(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c8d5a:
	mov -6280(%RBP),%RSP
	add $-6304, %RSP
	mov -6272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d5b
	jmp uuid_00000000000c8d5d
uuid_00000000000c8d5b:
	movb $1, -6056(%rbp)
uuid_00000000000c8d5d:
	mov -6192(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c8d60:
	mov -6072(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c8d63:
	mov -6064(%RBP),%RSP
	add $-6304, %RSP
	mov -6056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e5c
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -6464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d91
	jmp uuid_00000000000c8d93
uuid_00000000000c8d91:
	push %RBP
	pushq -6392(%RBP)
	pushq -6400(%RBP)
	pushq -6408(%RBP)
	pushq -6416(%RBP)
	pushq -6424(%RBP)
	pushq -6432(%RBP)
	pushq -6440(%RBP)
	pushq -6448(%RBP)
	pushq -6456(%RBP)
	pushq $0
	push %RBP
	mov -6560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d6d
	jmp uuid_00000000000c8d6f
uuid_00000000000c8d6d:
	push %RBP
	pushq -6504(%RBP)
	pushq -6512(%RBP)
	pushq -6520(%RBP)
	pushq -6528(%RBP)
	pushq -6536(%RBP)
	pushq -6544(%RBP)
	pushq -6552(%RBP)
	jmp uuid_00000000000c8d6a
	jmp uuid_00000000000c8d6c
uuid_00000000000c8d6a:
	push %RBP
	mov -6496(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8d67
	jmp uuid_00000000000c8d69
uuid_00000000000c8d67:
	movb $1, -6568(%rbp)
uuid_00000000000c8d69:
	mov -6648(%RBP),%RSP
	add $-6656, %RSP
uuid_00000000000c8d6c:
	mov -6584(%RBP),%RSP
	add $-6656, %RSP
uuid_00000000000c8d6f:
	mov -6576(%RBP),%RSP
	add $-6656, %RSP
	mov -6568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d8e
	jmp uuid_00000000000c8d90
uuid_00000000000c8d8e:
	push %RBP
	pushq -6320(%RBP)
	pushq -6328(%RBP)
	pushq -6336(%RBP)
	pushq -6344(%RBP)
	pushq -6352(%RBP)
	pushq -6360(%RBP)
	pushq -6368(%RBP)
	pushq -6376(%RBP)
	pushq -6384(%RBP)
	pushq $0
	push %RBP
	mov -6736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d88
	jmp uuid_00000000000c8d8a
uuid_00000000000c8d88:
	push %RBP
	mov -6728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6832(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d76
	jmp uuid_00000000000c8d78
uuid_00000000000c8d76:
	push %RBP
	jmp uuid_00000000000c8d73
	jmp uuid_00000000000c8d75
uuid_00000000000c8d73:
	push %RBP
	mov -6768(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8d70
	jmp uuid_00000000000c8d72
uuid_00000000000c8d70:
	movb $1, -6840(%rbp)
uuid_00000000000c8d72:
	mov -6864(%RBP),%RSP
	add $-6872, %RSP
uuid_00000000000c8d75:
	mov -6856(%RBP),%RSP
	add $-6872, %RSP
uuid_00000000000c8d78:
	mov -6848(%RBP),%RSP
	add $-6872, %RSP
	mov -6840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d85
	jmp uuid_00000000000c8d87
uuid_00000000000c8d85:
	push %RBP
	mov -6720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6952(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d7f
	jmp uuid_00000000000c8d81
uuid_00000000000c8d7f:
	push %RBP
	jmp uuid_00000000000c8d7c
	jmp uuid_00000000000c8d7e
uuid_00000000000c8d7c:
	push %RBP
	mov -6888(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6992(%rbp)
	pushq $uuid_00000000000c8c4d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8d79
	jmp uuid_00000000000c8d7b
uuid_00000000000c8d79:
	movb $1, -6960(%rbp)
uuid_00000000000c8d7b:
	mov -6984(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c8d7e:
	mov -6976(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c8d81:
	mov -6968(%RBP),%RSP
	add $-6992, %RSP
	mov -6960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d82
	jmp uuid_00000000000c8d84
uuid_00000000000c8d82:
	movb $1, -6744(%rbp)
uuid_00000000000c8d84:
	mov -6880(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c8d87:
	mov -6760(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c8d8a:
	mov -6752(%RBP),%RSP
	add $-6992, %RSP
	mov -6744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d8b
	jmp uuid_00000000000c8d8d
uuid_00000000000c8d8b:
	movb $1, -6472(%rbp)
uuid_00000000000c8d8d:
	mov -6664(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c8d90:
	mov -6488(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c8d93:
	mov -6480(%RBP),%RSP
	add $-6992, %RSP
	mov -6472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e59
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -7152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8dc2
	jmp uuid_00000000000c8dc4
uuid_00000000000c8dc2:
	push %RBP
	pushq -7080(%RBP)
	pushq -7088(%RBP)
	pushq -7096(%RBP)
	pushq -7104(%RBP)
	pushq -7112(%RBP)
	pushq -7120(%RBP)
	pushq -7128(%RBP)
	pushq -7136(%RBP)
	pushq -7144(%RBP)
	pushq $0
	push %RBP
	mov -7248(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d9d
	jmp uuid_00000000000c8d9f
uuid_00000000000c8d9d:
	push %RBP
	jmp uuid_00000000000c8d9a
	jmp uuid_00000000000c8d9c
uuid_00000000000c8d9a:
	push %RBP
	mov -7184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7288(%rbp)
	pushq $uuid_00000000000c8838
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8d97
	jmp uuid_00000000000c8d99
uuid_00000000000c8d97:
	movb $1, -7256(%rbp)
uuid_00000000000c8d99:
	mov -7280(%RBP),%RSP
	add $-7288, %RSP
uuid_00000000000c8d9c:
	mov -7272(%RBP),%RSP
	add $-7288, %RSP
uuid_00000000000c8d9f:
	mov -7264(%RBP),%RSP
	add $-7288, %RSP
	mov -7256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8dbf
	jmp uuid_00000000000c8dc1
uuid_00000000000c8dbf:
	push %RBP
	pushq -7008(%RBP)
	pushq -7016(%RBP)
	pushq -7024(%RBP)
	pushq -7032(%RBP)
	pushq -7040(%RBP)
	pushq -7048(%RBP)
	pushq -7056(%RBP)
	pushq -7064(%RBP)
	pushq -7072(%RBP)
	pushq $0
	push %RBP
	mov -7368(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8db9
	jmp uuid_00000000000c8dbb
uuid_00000000000c8db9:
	push %RBP
	mov -7360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7464(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8da6
	jmp uuid_00000000000c8da8
uuid_00000000000c8da6:
	push %RBP
	jmp uuid_00000000000c8da3
	jmp uuid_00000000000c8da5
uuid_00000000000c8da3:
	push %RBP
	jmp uuid_00000000000c8da0
	jmp uuid_00000000000c8da2
uuid_00000000000c8da0:
	movb $1, -7472(%rbp)
uuid_00000000000c8da2:
	mov -7496(%RBP),%RSP
	add $-7496, %RSP
uuid_00000000000c8da5:
	mov -7488(%RBP),%RSP
	add $-7496, %RSP
uuid_00000000000c8da8:
	mov -7480(%RBP),%RSP
	add $-7496, %RSP
	mov -7472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8db6
	jmp uuid_00000000000c8db8
uuid_00000000000c8db6:
	push %RBP
	mov -7352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7576(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8db0
	jmp uuid_00000000000c8db2
uuid_00000000000c8db0:
	push %RBP
	jmp uuid_00000000000c8dad
	jmp uuid_00000000000c8daf
uuid_00000000000c8dad:
	push %RBP
	mov -7512(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7616(%rbp)
	pushq $uuid_00000000000c8da9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8daa
	jmp uuid_00000000000c8dac
uuid_00000000000c8daa:
	movb $1, -7584(%rbp)
uuid_00000000000c8dac:
	mov -7608(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c8daf:
	mov -7600(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c8db2:
	mov -7592(%RBP),%RSP
	add $-7616, %RSP
	mov -7584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8db3
	jmp uuid_00000000000c8db5
uuid_00000000000c8db3:
	movb $1, -7376(%rbp)
uuid_00000000000c8db5:
	mov -7504(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c8db8:
	mov -7392(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c8dbb:
	mov -7384(%RBP),%RSP
	add $-7616, %RSP
	mov -7376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8dbc
	jmp uuid_00000000000c8dbe
uuid_00000000000c8dbc:
	movb $1, -7160(%rbp)
uuid_00000000000c8dbe:
	mov -7296(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c8dc1:
	mov -7176(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c8dc4:
	mov -7168(%RBP),%RSP
	add $-7616, %RSP
	mov -7160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e56
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -7776(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8def
	jmp uuid_00000000000c8df1
uuid_00000000000c8def:
	push %RBP
	pushq -7704(%RBP)
	pushq -7712(%RBP)
	pushq -7720(%RBP)
	pushq -7728(%RBP)
	pushq -7736(%RBP)
	pushq -7744(%RBP)
	pushq -7752(%RBP)
	pushq -7760(%RBP)
	pushq -7768(%RBP)
	pushq $0
	push %RBP
	mov -7872(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8dcb
	jmp uuid_00000000000c8dcd
uuid_00000000000c8dcb:
	push %RBP
	pushq -7816(%RBP)
	pushq -7824(%RBP)
	pushq -7832(%RBP)
	pushq -7840(%RBP)
	pushq -7848(%RBP)
	pushq -7856(%RBP)
	pushq -7864(%RBP)
	jmp uuid_00000000000c8dc8
	jmp uuid_00000000000c8dca
uuid_00000000000c8dc8:
	push %RBP
	mov -7808(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8dc5
	jmp uuid_00000000000c8dc7
uuid_00000000000c8dc5:
	movb $1, -7880(%rbp)
uuid_00000000000c8dc7:
	mov -7960(%RBP),%RSP
	add $-7968, %RSP
uuid_00000000000c8dca:
	mov -7896(%RBP),%RSP
	add $-7968, %RSP
uuid_00000000000c8dcd:
	mov -7888(%RBP),%RSP
	add $-7968, %RSP
	mov -7880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8dec
	jmp uuid_00000000000c8dee
uuid_00000000000c8dec:
	push %RBP
	pushq -7632(%RBP)
	pushq -7640(%RBP)
	pushq -7648(%RBP)
	pushq -7656(%RBP)
	pushq -7664(%RBP)
	pushq -7672(%RBP)
	pushq -7680(%RBP)
	pushq -7688(%RBP)
	pushq -7696(%RBP)
	pushq $0
	push %RBP
	mov -8048(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8de6
	jmp uuid_00000000000c8de8
uuid_00000000000c8de6:
	push %RBP
	mov -8040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8144(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8dd4
	jmp uuid_00000000000c8dd6
uuid_00000000000c8dd4:
	push %RBP
	jmp uuid_00000000000c8dd1
	jmp uuid_00000000000c8dd3
uuid_00000000000c8dd1:
	push %RBP
	mov -8080(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8dce
	jmp uuid_00000000000c8dd0
uuid_00000000000c8dce:
	movb $1, -8152(%rbp)
uuid_00000000000c8dd0:
	mov -8176(%RBP),%RSP
	add $-8184, %RSP
uuid_00000000000c8dd3:
	mov -8168(%RBP),%RSP
	add $-8184, %RSP
uuid_00000000000c8dd6:
	mov -8160(%RBP),%RSP
	add $-8184, %RSP
	mov -8152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8de3
	jmp uuid_00000000000c8de5
uuid_00000000000c8de3:
	push %RBP
	mov -8032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ddd
	jmp uuid_00000000000c8ddf
uuid_00000000000c8ddd:
	push %RBP
	jmp uuid_00000000000c8dda
	jmp uuid_00000000000c8ddc
uuid_00000000000c8dda:
	push %RBP
	mov -8200(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8304(%rbp)
	pushq $uuid_00000000000c8da9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8dd7
	jmp uuid_00000000000c8dd9
uuid_00000000000c8dd7:
	movb $1, -8272(%rbp)
uuid_00000000000c8dd9:
	mov -8296(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c8ddc:
	mov -8288(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c8ddf:
	mov -8280(%RBP),%RSP
	add $-8304, %RSP
	mov -8272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8de0
	jmp uuid_00000000000c8de2
uuid_00000000000c8de0:
	movb $1, -8056(%rbp)
uuid_00000000000c8de2:
	mov -8192(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c8de5:
	mov -8072(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c8de8:
	mov -8064(%RBP),%RSP
	add $-8304, %RSP
	mov -8056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8de9
	jmp uuid_00000000000c8deb
uuid_00000000000c8de9:
	movb $1, -7784(%rbp)
uuid_00000000000c8deb:
	mov -7976(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c8dee:
	mov -7800(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c8df1:
	mov -7792(%RBP),%RSP
	add $-8304, %RSP
	mov -7784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e53
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -8464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e2f
	jmp uuid_00000000000c8e31
uuid_00000000000c8e2f:
	push %RBP
	pushq -8392(%RBP)
	pushq -8400(%RBP)
	pushq -8408(%RBP)
	pushq -8416(%RBP)
	pushq -8424(%RBP)
	pushq -8432(%RBP)
	pushq -8440(%RBP)
	pushq -8448(%RBP)
	pushq -8456(%RBP)
	pushq $0
	push %RBP
	mov -8560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8df8
	jmp uuid_00000000000c8dfa
uuid_00000000000c8df8:
	push %RBP
	pushq -8504(%RBP)
	pushq -8512(%RBP)
	pushq -8520(%RBP)
	pushq -8528(%RBP)
	pushq -8536(%RBP)
	pushq -8544(%RBP)
	pushq -8552(%RBP)
	jmp uuid_00000000000c8df5
	jmp uuid_00000000000c8df7
uuid_00000000000c8df5:
	push %RBP
	mov -8496(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8df2
	jmp uuid_00000000000c8df4
uuid_00000000000c8df2:
	movb $1, -8568(%rbp)
uuid_00000000000c8df4:
	mov -8648(%RBP),%RSP
	add $-8656, %RSP
uuid_00000000000c8df7:
	mov -8584(%RBP),%RSP
	add $-8656, %RSP
uuid_00000000000c8dfa:
	mov -8576(%RBP),%RSP
	add $-8656, %RSP
	mov -8568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e2c
	jmp uuid_00000000000c8e2e
uuid_00000000000c8e2c:
	push %RBP
	pushq -8320(%RBP)
	pushq -8328(%RBP)
	pushq -8336(%RBP)
	pushq -8344(%RBP)
	pushq -8352(%RBP)
	pushq -8360(%RBP)
	pushq -8368(%RBP)
	pushq -8376(%RBP)
	pushq -8384(%RBP)
	pushq $0
	push %RBP
	mov -8736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e26
	jmp uuid_00000000000c8e28
uuid_00000000000c8e26:
	push %RBP
	mov -8728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8832(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e01
	jmp uuid_00000000000c8e03
uuid_00000000000c8e01:
	push %RBP
	jmp uuid_00000000000c8dfe
	jmp uuid_00000000000c8e00
uuid_00000000000c8dfe:
	push %RBP
	mov -8768(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8dfb
	jmp uuid_00000000000c8dfd
uuid_00000000000c8dfb:
	movb $1, -8840(%rbp)
uuid_00000000000c8dfd:
	mov -8864(%RBP),%RSP
	add $-8872, %RSP
uuid_00000000000c8e00:
	mov -8856(%RBP),%RSP
	add $-8872, %RSP
uuid_00000000000c8e03:
	mov -8848(%RBP),%RSP
	add $-8872, %RSP
	mov -8840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e23
	jmp uuid_00000000000c8e25
uuid_00000000000c8e23:
	push %RBP
	mov -8720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8952(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e1d
	jmp uuid_00000000000c8e1f
uuid_00000000000c8e1d:
	push %RBP
	mov -8944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9048(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e0a
	jmp uuid_00000000000c8e0c
uuid_00000000000c8e0a:
	push %RBP
	jmp uuid_00000000000c8e07
	jmp uuid_00000000000c8e09
uuid_00000000000c8e07:
	push %RBP
	mov -8984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8e04
	jmp uuid_00000000000c8e06
uuid_00000000000c8e04:
	movb $1, -9056(%rbp)
uuid_00000000000c8e06:
	mov -9080(%RBP),%RSP
	add $-9088, %RSP
uuid_00000000000c8e09:
	mov -9072(%RBP),%RSP
	add $-9088, %RSP
uuid_00000000000c8e0c:
	mov -9064(%RBP),%RSP
	add $-9088, %RSP
	mov -9056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e1a
	jmp uuid_00000000000c8e1c
uuid_00000000000c8e1a:
	push %RBP
	mov -8936(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9168(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e14
	jmp uuid_00000000000c8e16
uuid_00000000000c8e14:
	push %RBP
	jmp uuid_00000000000c8e11
	jmp uuid_00000000000c8e13
uuid_00000000000c8e11:
	push %RBP
	mov -9104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9208(%rbp)
	pushq $uuid_00000000000c8e0d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8e0e
	jmp uuid_00000000000c8e10
uuid_00000000000c8e0e:
	movb $1, -9176(%rbp)
uuid_00000000000c8e10:
	mov -9200(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c8e13:
	mov -9192(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c8e16:
	mov -9184(%RBP),%RSP
	add $-9208, %RSP
	mov -9176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e17
	jmp uuid_00000000000c8e19
uuid_00000000000c8e17:
	movb $1, -8960(%rbp)
uuid_00000000000c8e19:
	mov -9096(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c8e1c:
	mov -8976(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c8e1f:
	mov -8968(%RBP),%RSP
	add $-9208, %RSP
	mov -8960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e20
	jmp uuid_00000000000c8e22
uuid_00000000000c8e20:
	movb $1, -8744(%rbp)
uuid_00000000000c8e22:
	mov -8880(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c8e25:
	mov -8760(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c8e28:
	mov -8752(%RBP),%RSP
	add $-9208, %RSP
	mov -8744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e29
	jmp uuid_00000000000c8e2b
uuid_00000000000c8e29:
	movb $1, -8472(%rbp)
uuid_00000000000c8e2b:
	mov -8664(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c8e2e:
	mov -8488(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c8e31:
	mov -8480(%RBP),%RSP
	add $-9208, %RSP
	mov -8472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e50
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -9368(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e46
	jmp uuid_00000000000c8e48
uuid_00000000000c8e46:
	push %RBP
	pushq -9296(%RBP)
	pushq -9304(%RBP)
	pushq -9312(%RBP)
	pushq -9320(%RBP)
	pushq -9328(%RBP)
	pushq -9336(%RBP)
	pushq -9344(%RBP)
	pushq -9352(%RBP)
	pushq -9360(%RBP)
	jmp uuid_00000000000c8e43
	jmp uuid_00000000000c8e45
uuid_00000000000c8e43:
	push %RBP
	pushq -9224(%RBP)
	pushq -9232(%RBP)
	pushq -9240(%RBP)
	pushq -9248(%RBP)
	pushq -9256(%RBP)
	pushq -9264(%RBP)
	pushq -9272(%RBP)
	pushq -9280(%RBP)
	pushq -9288(%RBP)
	pushq $0
	push %RBP
	mov -9544(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e3d
	jmp uuid_00000000000c8e3f
uuid_00000000000c8e3d:
	push %RBP
	jmp uuid_00000000000c8e3a
	jmp uuid_00000000000c8e3c
uuid_00000000000c8e3a:
	push %RBP
	mov -9480(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8e37
	jmp uuid_00000000000c8e39
uuid_00000000000c8e37:
	movb $1, -9552(%rbp)
uuid_00000000000c8e39:
	mov -9576(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000c8e3c:
	mov -9568(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000c8e3f:
	mov -9560(%RBP),%RSP
	add $-9584, %RSP
	mov -9552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e40
	jmp uuid_00000000000c8e42
uuid_00000000000c8e40:
	movb $1, -9376(%rbp)
uuid_00000000000c8e42:
	mov -9472(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000c8e45:
	mov -9392(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000c8e48:
	mov -9384(%RBP),%RSP
	add $-9584, %RSP
	mov -9376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e4d
	push %RBP
	jmp uuid_00000000000c8e4a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8e49
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8e4c
uuid_00000000000c8e4a:
uuid_00000000000c8e4c:
	mov -9592(%RBP),%RSP
	add $-9592, %RSP
	jmp uuid_00000000000c8e4f
uuid_00000000000c8e4d:
#call function close : Arrow<Context+CaseNumber<1>,Array<Context+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextCaseNumber1ContextCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -9584(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9400(%rbp)
	pushq -9408(%rbp)
	pushq -9416(%rbp)
	pushq -9424(%rbp)
	pushq -9432(%rbp)
	pushq -9440(%rbp)
	pushq -9448(%rbp)
	pushq -9456(%rbp)
	pushq -9464(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c8e4f:
	mov -9216(%RBP),%RSP
	add $-9584, %RSP
	jmp uuid_00000000000c8e52
uuid_00000000000c8e50:
	push %RBP
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8656(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %R14
	mov 0(%R14), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e34
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8656(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -9088(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4db3
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8592(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq $uuid_00000000000c4db3
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9224(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8592(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq -9224(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c8e32
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c8e33
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -8656(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c4cf3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8872(%rbp)
	pushq -9232(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8592(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq -9232(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	jmp uuid_00000000000c8e36
uuid_00000000000c8e34:
uuid_00000000000c8e36:
	mov -9216(%RBP),%RSP
	add $-9216, %RSP
uuid_00000000000c8e52:
	mov -8312(%RBP),%RSP
	add $-9216, %RSP
	jmp uuid_00000000000c8e55
uuid_00000000000c8e53:
#call function close : Arrow<Context+CaseNumber<1>,Array<Context+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextCaseNumber1ContextCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8184(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -7920(%RBP)
	pushq -7928(%RBP)
	pushq -7936(%RBP)
	pushq -7944(%RBP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c8e55:
	mov -7624(%RBP),%RSP
	add $-8304, %RSP
	jmp uuid_00000000000c8e58
uuid_00000000000c8e56:
uuid_00000000000c8e58:
	mov -7000(%RBP),%RSP
	add $-7616, %RSP
	jmp uuid_00000000000c8e5b
uuid_00000000000c8e59:
	push %RBP
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6656(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %R14
	mov 0(%R14), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8d94
	jmp uuid_00000000000c8d96
uuid_00000000000c8d94:
#call function close : Arrow<Context+CaseNumber<1>,Array<Context+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextCaseNumber1ContextCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -6872(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -6608(%RBP)
	pushq -6616(%RBP)
	pushq -6624(%RBP)
	pushq -6632(%RBP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c8d96:
	mov -7000(%RBP),%RSP
	add $-7000, %RSP
uuid_00000000000c8e5b:
	mov -6312(%RBP),%RSP
	add $-7000, %RSP
	jmp uuid_00000000000c8e5e
uuid_00000000000c8e5c:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6304(%rbp)
	pushq -6184(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8d64
	jmp uuid_00000000000c8d66
uuid_00000000000c8d64:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c8d66:
	mov -6312(%RBP),%RSP
	add $-6312, %RSP
uuid_00000000000c8e5e:
	mov -5896(%RBP),%RSP
	add $-6312, %RSP
	jmp uuid_00000000000c8e61
uuid_00000000000c8e5f:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5888(%rbp)
	pushq -5768(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8d46
	jmp uuid_00000000000c8d48
uuid_00000000000c8d46:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c8d48:
	mov -5896(%RBP),%RSP
	add $-5896, %RSP
uuid_00000000000c8e61:
	mov -5480(%RBP),%RSP
	add $-5896, %RSP
	jmp uuid_00000000000c8e64
uuid_00000000000c8e62:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c8e64:
	mov -5064(%RBP),%RSP
	add $-5472, %RSP
	jmp uuid_00000000000c8e67
uuid_00000000000c8e65:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -4704(%rbp)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8d0c
	jmp uuid_00000000000c8d0e
uuid_00000000000c8d0c:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8d09
	jmp uuid_00000000000c8d0b
uuid_00000000000c8d09:
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c8d0b:
	mov -5264(%RBP),%RSP
	add $-5264, %RSP
uuid_00000000000c8d0e:
	mov -5160(%RBP),%RSP
	add $-5264, %RSP
uuid_00000000000c8e67:
	mov -4312(%RBP),%RSP
	add $-5264, %RSP
	jmp uuid_00000000000c8e6a
uuid_00000000000c8e68:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4240(%rbp)
	pushq -4248(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -3984(%rbp)
	pushq -3992(%rbp)
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	pushq -4024(%rbp)
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4312(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8ce5
	jmp uuid_00000000000c8ce7
uuid_00000000000c8ce5:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4160(%rbp)
	pushq -4168(%rbp)
	pushq -4176(%rbp)
	pushq -4184(%rbp)
	pushq -4192(%rbp)
	pushq -4200(%rbp)
	pushq -4208(%rbp)
	pushq -4216(%rbp)
	pushq -4224(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	pushq -3928(%rbp)
	pushq -3936(%rbp)
	pushq -3944(%rbp)
	pushq -3952(%rbp)
	pushq -3960(%rbp)
	pushq -3968(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8ce2
	jmp uuid_00000000000c8ce4
uuid_00000000000c8ce2:
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4312(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c8ce4:
	mov -4512(%RBP),%RSP
	add $-4512, %RSP
uuid_00000000000c8ce7:
	mov -4408(%RBP),%RSP
	add $-4512, %RSP
uuid_00000000000c8e6a:
	mov -3624(%RBP),%RSP
	add $-4512, %RSP
	jmp uuid_00000000000c8e6d
uuid_00000000000c8e6b:
	push %RBP
#call function preprocess-is-suffixed : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_is_SB_suffixed_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-lone-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call is_SB_lone_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8cc4
	jmp uuid_00000000000c8cc6
uuid_00000000000c8cc4:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	pushq -3632(%rbp)
	pushq -3640(%rbp)
	pushq -3648(%rbp)
	pushq -3656(%rbp)
	pushq -3664(%rbp)
	pushq -3672(%rbp)
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	pushq -3752(%rbp)
	pushq -3760(%rbp)
	pushq -3768(%rbp)
	pushq -3776(%rbp)
	pushq $0
	push %RBP
	mov -3936(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8cb7
	jmp uuid_00000000000c8cb9
uuid_00000000000c8cb7:
	push %RBP
	pushq -3864(%RBP)
	pushq -3872(%RBP)
	pushq -3880(%RBP)
	pushq -3888(%RBP)
	pushq -3896(%RBP)
	pushq -3904(%RBP)
	pushq -3912(%RBP)
	pushq -3920(%RBP)
	pushq -3928(%RBP)
	pushq $0
	push %RBP
	mov -4032(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ca5
	jmp uuid_00000000000c8ca7
uuid_00000000000c8ca5:
	push %RBP
	mov -4024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8ca2
	jmp uuid_00000000000c8ca4
uuid_00000000000c8ca2:
	push %RBP
	mov -4016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8c9f
	jmp uuid_00000000000c8ca1
uuid_00000000000c8c9f:
	movb $1, -4040(%rbp)
uuid_00000000000c8ca1:
	mov -4136(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000c8ca4:
	mov -4056(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000c8ca7:
	mov -4048(%RBP),%RSP
	add $-4208, %RSP
	mov -4040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8cb4
	jmp uuid_00000000000c8cb6
uuid_00000000000c8cb4:
	push %RBP
	pushq -3792(%RBP)
	pushq -3800(%RBP)
	pushq -3808(%RBP)
	pushq -3816(%RBP)
	pushq -3824(%RBP)
	pushq -3832(%RBP)
	pushq -3840(%RBP)
	pushq -3848(%RBP)
	pushq -3856(%RBP)
	pushq $0
	push %RBP
	mov -4288(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8cae
	jmp uuid_00000000000c8cb0
uuid_00000000000c8cae:
	push %RBP
	mov -4280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8cab
	jmp uuid_00000000000c8cad
uuid_00000000000c8cab:
	push %RBP
	mov -4272(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8ca8
	jmp uuid_00000000000c8caa
uuid_00000000000c8ca8:
	movb $1, -4296(%rbp)
uuid_00000000000c8caa:
	mov -4392(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c8cad:
	mov -4312(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c8cb0:
	mov -4304(%RBP),%RSP
	add $-4464, %RSP
	mov -4296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8cb1
	jmp uuid_00000000000c8cb3
uuid_00000000000c8cb1:
	movb $1, -3944(%rbp)
uuid_00000000000c8cb3:
	mov -4216(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c8cb6:
	mov -3960(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c8cb9:
	mov -3952(%RBP),%RSP
	add $-4464, %RSP
	mov -3944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8cc1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8cc0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8cc3
uuid_00000000000c8cc1:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4144(%rbp)
	pushq -4152(%rbp)
	pushq -4160(%rbp)
	pushq -4168(%rbp)
	pushq -4176(%rbp)
	pushq -4184(%rbp)
	pushq -4192(%rbp)
	pushq -4200(%rbp)
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq -4536(%rbp)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8cbd
	jmp uuid_00000000000c8cbf
uuid_00000000000c8cbd:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	pushq -4120(%rbp)
	pushq -4128(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8cba
	jmp uuid_00000000000c8cbc
uuid_00000000000c8cba:
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq -4536(%rbp)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c8cbc:
	mov -4672(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000c8cbf:
	mov -4568(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000c8cc3:
	mov -3784(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000c8cc6:
	mov -3624(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000c8e6d:
	mov -2904(%RBP),%RSP
	add $-4672, %RSP
	jmp uuid_00000000000c8e70
uuid_00000000000c8e6e:
#call function close : Arrow<Context+CaseNumber<1>,Array<Context+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextCaseNumber1ContextCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2776(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c8e70:
	mov -1808(%RBP),%RSP
	add $-2896, %RSP
	jmp uuid_00000000000c8e73
uuid_00000000000c8e71:
uuid_00000000000c8e73:
	mov -776(%RBP),%RSP
	add $-1800, %RSP
	jmp uuid_00000000000c8e76
uuid_00000000000c8e74:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c8e76:
	mov -440(%RBP),%RSP
	add $-768, %RSP
	subq $96, %rsp
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	addq $96, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
destructure_SB_lhs_CL_ArrowFContextConsFragmentListConsSConsTypeFContext:
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e89
	jmp uuid_00000000000c8e8b
uuid_00000000000c8e89:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e7a
	jmp uuid_00000000000c8e7c
uuid_00000000000c8e7a:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8e77
	jmp uuid_00000000000c8e79
uuid_00000000000c8e77:
	movb $1, -536(%rbp)
uuid_00000000000c8e79:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c8e7c:
	mov -544(%RBP),%RSP
	add $-560, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e86
	jmp uuid_00000000000c8e88
uuid_00000000000c8e86:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e80
	jmp uuid_00000000000c8e82
uuid_00000000000c8e80:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	pushq $uuid_00000000000c544f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8e7d
	jmp uuid_00000000000c8e7f
uuid_00000000000c8e7d:
	movb $1, -600(%rbp)
uuid_00000000000c8e7f:
	mov -616(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c8e82:
	mov -608(%RBP),%RSP
	add $-624, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e83
	jmp uuid_00000000000c8e85
uuid_00000000000c8e83:
	movb $1, -488(%rbp)
uuid_00000000000c8e85:
	mov -568(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c8e88:
	mov -504(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c8e8b:
	mov -496(%RBP),%RSP
	add $-624, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ee5
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $0
	push %RBP
	mov -656(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ec7
	jmp uuid_00000000000c8ec9
uuid_00000000000c8ec7:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8eb8
	jmp uuid_00000000000c8eba
uuid_00000000000c8eb8:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8eaf
	jmp uuid_00000000000c8eb1
uuid_00000000000c8eaf:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ea0
	jmp uuid_00000000000c8ea2
uuid_00000000000c8ea0:
	push %RBP
	mov -792(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8e9d
	jmp uuid_00000000000c8e9f
uuid_00000000000c8e9d:
	movb $1, -808(%rbp)
uuid_00000000000c8e9f:
	mov -824(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c8ea2:
	mov -816(%RBP),%RSP
	add $-832, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8eac
	jmp uuid_00000000000c8eae
uuid_00000000000c8eac:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ea6
	jmp uuid_00000000000c8ea8
uuid_00000000000c8ea6:
	push %RBP
	mov -856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq $uuid_00000000000c544f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8ea3
	jmp uuid_00000000000c8ea5
uuid_00000000000c8ea3:
	movb $1, -872(%rbp)
uuid_00000000000c8ea5:
	mov -888(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000c8ea8:
	mov -880(%RBP),%RSP
	add $-896, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ea9
	jmp uuid_00000000000c8eab
uuid_00000000000c8ea9:
	movb $1, -760(%rbp)
uuid_00000000000c8eab:
	mov -840(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000c8eae:
	mov -776(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000c8eb1:
	mov -768(%RBP),%RSP
	add $-896, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8eb5
	jmp uuid_00000000000c8eb7
uuid_00000000000c8eb5:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8eb2
	jmp uuid_00000000000c8eb4
uuid_00000000000c8eb2:
	movb $1, -712(%rbp)
uuid_00000000000c8eb4:
	mov -904(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c8eb7:
	mov -728(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c8eba:
	mov -720(%RBP),%RSP
	add $-928, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ec4
	jmp uuid_00000000000c8ec6
uuid_00000000000c8ec4:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ebe
	jmp uuid_00000000000c8ec0
uuid_00000000000c8ebe:
	push %RBP
	mov -952(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -992(%rbp)
	pushq $uuid_00000000000c54a5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8ebb
	jmp uuid_00000000000c8ebd
uuid_00000000000c8ebb:
	movb $1, -968(%rbp)
uuid_00000000000c8ebd:
	mov -984(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c8ec0:
	mov -976(%RBP),%RSP
	add $-992, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ec1
	jmp uuid_00000000000c8ec3
uuid_00000000000c8ec1:
	movb $1, -664(%rbp)
uuid_00000000000c8ec3:
	mov -936(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c8ec6:
	mov -680(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c8ec9:
	mov -672(%RBP),%RSP
	add $-992, %RSP
	mov -664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ee2
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov -1024(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8edf
	push %RBP
	jmp uuid_00000000000c8edc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8edb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8ede
uuid_00000000000c8edc:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c8eda
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c48b6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c8ede:
	mov -1032(%RBP),%RSP
	add $-1032, %RSP
	jmp uuid_00000000000c8ee1
uuid_00000000000c8edf:
uuid_00000000000c8ee1:
	mov -1000(%RBP),%RSP
	add $-1024, %RSP
	jmp uuid_00000000000c8ee4
uuid_00000000000c8ee2:
#call function p1 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call p1_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	push %RBP
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq $0
	push %RBP
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ed0
	jmp uuid_00000000000c8ed2
uuid_00000000000c8ed0:
	push %RBP
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	jmp uuid_00000000000c8ecd
	jmp uuid_00000000000c8ecf
uuid_00000000000c8ecd:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8eca
	jmp uuid_00000000000c8ecc
uuid_00000000000c8eca:
	movb $1, -1368(%rbp)
uuid_00000000000c8ecc:
	mov -1544(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c8ecf:
	mov -1384(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c8ed2:
	mov -1376(%RBP),%RSP
	add $-1712, %RSP
	mov -1368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ed7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8ed6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8ed9
uuid_00000000000c8ed7:
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8ed3
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c8e95
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8ed5
uuid_00000000000c8ed3:
uuid_00000000000c8ed5:
	mov -1744(%RBP),%RSP
	add $-1744, %RSP
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -832(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	movq -1712(%rbp), %r15
	movq %r15, -416(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -408(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -400(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -392(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -384(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -376(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -368(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1624(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1608(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -256(%rbp)
uuid_00000000000c8ed9:
	mov -1192(%RBP),%RSP
	add $-1864, %RSP
#call function destructure-lhs : Arrow<Cons<Cons<Cons<FContext,Type>,S>,FragmentList>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov %RBX, %RBP
	call destructure_SB_lhs_CL_ArrowFContextConsFragmentListConsSConsTypeFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c8ee4:
	mov -632(%RBP),%RSP
	add $-1864, %RSP
	jmp uuid_00000000000c8ee7
uuid_00000000000c8ee5:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	push %RBP
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e92
	jmp uuid_00000000000c8e94
uuid_00000000000c8e92:
	push %RBP
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000c8e8f
	jmp uuid_00000000000c8e91
uuid_00000000000c8e8f:
	push %RBP
	jmp uuid_00000000000c8e8c
	jmp uuid_00000000000c8e8e
uuid_00000000000c8e8c:
	movb $1, -1000(%rbp)
uuid_00000000000c8e8e:
	mov -1176(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c8e91:
	mov -1016(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c8e94:
	mov -1008(%RBP),%RSP
	add $-1176, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8e9a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8e99
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8e9c
uuid_00000000000c8e9a:
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8e96
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c8e95
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8e98
uuid_00000000000c8e96:
uuid_00000000000c8e98:
	mov -1208(%RBP),%RSP
	add $-1208, %RSP
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -560(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c8e9c:
	mov -824(%RBP),%RSP
	add $-1328, %RSP
uuid_00000000000c8ee7:
	mov -456(%RBP),%RSP
	add $-1328, %RSP
	subq $200, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $424, %rsp
	ret
fragment_CL__CL_chain_SB_gnu_CL_ArrowFragmentConsFragmentFragment:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -272(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -240(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c6d83
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c7f5b
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c7f5b
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c7f5b
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c4f91
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c4f91
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c4f91
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c7f7b
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c7f7b
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c7f7b
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c554e
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c554e
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c554e
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_CL__CL_chain_SB_blob_CL_ArrowFragmentConsFragmentFragment:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -272(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -240(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c6d83
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c7f5b
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c7f5b
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c7f5b
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c4f91
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c4f91
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c4f91
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c7f7b
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c7f7b
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c7f7b
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c554e
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c554e
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c554e
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_CL__CL_chain_SB_c_CL_ArrowFragmentConsFragmentFragment:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -272(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c6d83
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c7f5c
	pushq $2
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c74c2
	pushq $2
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c6d83
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000c8ee8
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c7f5b
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c7f5b
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c7f5b
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragmentList:
uuid_00000000000c8ef6:
#call function non-zero : Arrow<FragmentList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8ef7
	jmp uuid_00000000000c8ef8
uuid_00000000000c8ef7:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8eef
	jmp uuid_00000000000c8ef1
uuid_00000000000c8eef:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000c8eec
	jmp uuid_00000000000c8eee
uuid_00000000000c8eec:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8ee9
	jmp uuid_00000000000c8eeb
uuid_00000000000c8ee9:
	movb $1, -680(%rbp)
uuid_00000000000c8eeb:
	mov -856(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c8eee:
	mov -696(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c8ef1:
	mov -688(%RBP),%RSP
	add $-1024, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8ef3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8ef2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8ef5
uuid_00000000000c8ef3:
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	movq -1024(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c8ef5:
	mov -504(%RBP),%RSP
	add $-1024, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c8ef6
uuid_00000000000c8ef8:
	subq $152, %rsp
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment:
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %r15
	pushq 0(%r15)
	push %RBP
	pushq -320(%rbp)
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8f00
	push %RBP
	pushq -320(%rbp)
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8efd
	push %RBP
	pushq -320(%rbp)
	mov -368(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8efa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8ef9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8efc
uuid_00000000000c8efa:
#call function fragment::chain-gnu : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_SB_gnu_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c8efc:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000c8eff
uuid_00000000000c8efd:
#call function fragment::chain-blob : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_SB_blob_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c8eff:
	mov -344(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c8f02
uuid_00000000000c8f00:
#call function fragment::chain-c : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_SB_c_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c8f02:
	mov -328(%RBP),%RSP
	add $-336, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_CL__CL_expression_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c6d83
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fragment_CL__CL_expression_CL_ArrowFragmentS:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $uuid_00000000000c6d83
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	subq $152, %rsp
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
fragment_CL__CL_get_CL_ArrowSConsStringFragment:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8f15
	jmp uuid_00000000000c8f17
uuid_00000000000c8f15:
	push %RBP
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	jmp uuid_00000000000c8f12
	jmp uuid_00000000000c8f14
uuid_00000000000c8f12:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8f0f
	jmp uuid_00000000000c8f11
uuid_00000000000c8f0f:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000c8f0c
	jmp uuid_00000000000c8f0e
uuid_00000000000c8f0c:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8f09
	jmp uuid_00000000000c8f0b
uuid_00000000000c8f09:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8f06
	jmp uuid_00000000000c8f08
uuid_00000000000c8f06:
	push %RBP
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000c8f03
	jmp uuid_00000000000c8f05
uuid_00000000000c8f03:
	movb $1, -512(%rbp)
uuid_00000000000c8f05:
	mov -872(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c8f08:
	mov -816(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c8f0b:
	mov -800(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c8f0e:
	mov -768(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c8f11:
	mov -560(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c8f14:
	mov -528(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c8f17:
	mov -520(%RBP),%RSP
	add $-944, %RSP
	mov -512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8f2f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8f2e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8f31
uuid_00000000000c8f2f:
uuid_00000000000c8f2b:
#call function non-zero : Arrow<FragmentKV,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8f2c
	jmp uuid_00000000000c8f2d
uuid_00000000000c8f2c:
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	push %RBP
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq $0
	push %RBP
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8f21
	jmp uuid_00000000000c8f23
uuid_00000000000c8f21:
	push %RBP
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	jmp uuid_00000000000c8f1e
	jmp uuid_00000000000c8f20
uuid_00000000000c8f1e:
	push %RBP
	mov -1016(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8f1b
	jmp uuid_00000000000c8f1d
uuid_00000000000c8f1b:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8f18
	jmp uuid_00000000000c8f1a
uuid_00000000000c8f18:
	movb $1, -1056(%rbp)
uuid_00000000000c8f1a:
	mov -1120(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c8f1d:
	mov -1104(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c8f20:
	mov -1072(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c8f23:
	mov -1064(%RBP),%RSP
	add $-1168, %RSP
	mov -1056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8f28
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8f27
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8f2a
uuid_00000000000c8f28:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8f24
	movq -1168(%rbp), %r15
	movq %r15, -864(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -856(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -848(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -840(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -832(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -824(%rbp)
	jmp uuid_00000000000c8f26
uuid_00000000000c8f24:
	movq -1096(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -176(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
uuid_00000000000c8f26:
	mov -1176(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c8f2a:
	mov -1000(%RBP),%RSP
	add $-1176, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c8f2b
uuid_00000000000c8f2d:
uuid_00000000000c8f31:
	mov -352(%RBP),%RSP
	add $-944, %RSP
	subq $24, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
fragment_CL__CL_label_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c6d83
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c6d81
	pushq $0
	pushq $uuid_00000000000c4e32
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4e32
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %r15
	pushq 0(%r15)
	push %RBP
	pushq -200(%rbp)
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8f36
	push %RBP
	jmp uuid_00000000000c8f33
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8f32
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8f35
uuid_00000000000c8f33:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $uuid_00000000000c6d83
	pushq $0
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c8f35:
	mov -224(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c8f38
uuid_00000000000c8f36:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $uuid_00000000000c6d83
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c8f38:
	mov -208(%RBP),%RSP
	add $-216, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $uuid_00000000000c6d81
	pushq $0
	pushq $uuid_00000000000c51f3
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	subq $152, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
fragment_CL__CL_new_CL_ArrowFragmentNil:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
#call function close : Arrow<FragmentKV+CaseNumber<1>,Array<FragmentKV+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVCaseNumber1FragmentKVCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment-context::new : Arrow<Nil,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_new_CL_ArrowFContextNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $1
	pushq $0
	subq $152, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8f4b
	jmp uuid_00000000000c8f4d
uuid_00000000000c8f4b:
	push %RBP
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	jmp uuid_00000000000c8f48
	jmp uuid_00000000000c8f4a
uuid_00000000000c8f48:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8f45
	jmp uuid_00000000000c8f47
uuid_00000000000c8f45:
	push %RBP
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	jmp uuid_00000000000c8f42
	jmp uuid_00000000000c8f44
uuid_00000000000c8f42:
	push %RBP
	mov -760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8f3f
	jmp uuid_00000000000c8f41
uuid_00000000000c8f3f:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8f3c
	jmp uuid_00000000000c8f3e
uuid_00000000000c8f3c:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000c8f39
	jmp uuid_00000000000c8f3b
uuid_00000000000c8f39:
	movb $1, -832(%rbp)
uuid_00000000000c8f3b:
	mov -1192(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c8f3e:
	mov -1136(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c8f41:
	mov -1120(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c8f44:
	mov -1088(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c8f47:
	mov -880(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c8f4a:
	mov -848(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c8f4d:
	mov -840(%RBP),%RSP
	add $-1264, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8f4f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8f4e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8f51
uuid_00000000000c8f4f:
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1128(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $0
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
uuid_00000000000c8f51:
	mov -672(%RBP),%RSP
	add $-1264, %RSP
	subq $152, %rsp
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $360, %rsp
	ret
fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8f64
	jmp uuid_00000000000c8f66
uuid_00000000000c8f64:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000c8f61
	jmp uuid_00000000000c8f63
uuid_00000000000c8f61:
	push %RBP
	mov -600(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8f5e
	jmp uuid_00000000000c8f60
uuid_00000000000c8f5e:
	push %RBP
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	jmp uuid_00000000000c8f5b
	jmp uuid_00000000000c8f5d
uuid_00000000000c8f5b:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8f58
	jmp uuid_00000000000c8f5a
uuid_00000000000c8f58:
	push %RBP
	mov -560(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8f55
	jmp uuid_00000000000c8f57
uuid_00000000000c8f55:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000c8f52
	jmp uuid_00000000000c8f54
uuid_00000000000c8f52:
	movb $1, -640(%rbp)
uuid_00000000000c8f54:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c8f57:
	mov -944(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c8f5a:
	mov -928(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c8f5d:
	mov -896(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c8f60:
	mov -688(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c8f63:
	mov -656(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c8f66:
	mov -648(%RBP),%RSP
	add $-1072, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8f68
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8f67
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8f6a
uuid_00000000000c8f68:
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -160(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq $0
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
uuid_00000000000c8f6a:
	mov -480(%RBP),%RSP
	add $-1072, %RSP
	subq $152, %rsp
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8f7d
	jmp uuid_00000000000c8f7f
uuid_00000000000c8f7d:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c8f7a
	jmp uuid_00000000000c8f7c
uuid_00000000000c8f7a:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8f77
	jmp uuid_00000000000c8f79
uuid_00000000000c8f77:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	jmp uuid_00000000000c8f74
	jmp uuid_00000000000c8f76
uuid_00000000000c8f74:
	push %RBP
	mov -480(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8f71
	jmp uuid_00000000000c8f73
uuid_00000000000c8f71:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8f6e
	jmp uuid_00000000000c8f70
uuid_00000000000c8f6e:
	push %RBP
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000c8f6b
	jmp uuid_00000000000c8f6d
uuid_00000000000c8f6b:
	movb $1, -552(%rbp)
uuid_00000000000c8f6d:
	mov -912(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c8f70:
	mov -856(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c8f73:
	mov -840(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c8f76:
	mov -808(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c8f79:
	mov -600(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c8f7c:
	mov -568(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c8f7f:
	mov -560(%RBP),%RSP
	add $-984, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8f81
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8f80
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8f83
uuid_00000000000c8f81:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -848(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c8f83:
	mov -392(%RBP),%RSP
	add $-984, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $232, %rsp
	ret
fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8f96
	jmp uuid_00000000000c8f98
uuid_00000000000c8f96:
	push %RBP
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	jmp uuid_00000000000c8f93
	jmp uuid_00000000000c8f95
uuid_00000000000c8f93:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8f90
	jmp uuid_00000000000c8f92
uuid_00000000000c8f90:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c8f8d
	jmp uuid_00000000000c8f8f
uuid_00000000000c8f8d:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8f8a
	jmp uuid_00000000000c8f8c
uuid_00000000000c8f8a:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8f87
	jmp uuid_00000000000c8f89
uuid_00000000000c8f87:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	jmp uuid_00000000000c8f84
	jmp uuid_00000000000c8f86
uuid_00000000000c8f84:
	movb $1, -504(%rbp)
uuid_00000000000c8f86:
	mov -864(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c8f89:
	mov -808(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c8f8c:
	mov -792(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c8f8f:
	mov -760(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c8f92:
	mov -552(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c8f95:
	mov -520(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c8f98:
	mov -512(%RBP),%RSP
	add $-936, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8f9a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8f99
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8f9c
uuid_00000000000c8f9a:
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -800(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c8f9c:
	mov -344(%RBP),%RSP
	add $-936, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
fragment_CL__CL_set_SB_vararg_CL_ArrowFragmentConsListArray_QM_FragmentFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8faf
	jmp uuid_00000000000c8fb1
uuid_00000000000c8faf:
	push %RBP
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	jmp uuid_00000000000c8fac
	jmp uuid_00000000000c8fae
uuid_00000000000c8fac:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8fa9
	jmp uuid_00000000000c8fab
uuid_00000000000c8fa9:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c8fa6
	jmp uuid_00000000000c8fa8
uuid_00000000000c8fa6:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8fa3
	jmp uuid_00000000000c8fa5
uuid_00000000000c8fa3:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8fa0
	jmp uuid_00000000000c8fa2
uuid_00000000000c8fa0:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	jmp uuid_00000000000c8f9d
	jmp uuid_00000000000c8f9f
uuid_00000000000c8f9d:
	movb $1, -504(%rbp)
uuid_00000000000c8f9f:
	mov -864(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c8fa2:
	mov -808(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c8fa5:
	mov -792(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c8fa8:
	mov -760(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c8fab:
	mov -552(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c8fae:
	mov -520(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c8fb1:
	mov -512(%RBP),%RSP
	add $-936, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8fb3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8fb2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8fb5
uuid_00000000000c8fb3:
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -800(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c8fb5:
	mov -344(%RBP),%RSP
	add $-936, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c8fc8
	jmp uuid_00000000000c8fca
uuid_00000000000c8fc8:
	push %RBP
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	jmp uuid_00000000000c8fc5
	jmp uuid_00000000000c8fc7
uuid_00000000000c8fc5:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8fc2
	jmp uuid_00000000000c8fc4
uuid_00000000000c8fc2:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000c8fbf
	jmp uuid_00000000000c8fc1
uuid_00000000000c8fbf:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c8fbc
	jmp uuid_00000000000c8fbe
uuid_00000000000c8fbc:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c8fb9
	jmp uuid_00000000000c8fbb
uuid_00000000000c8fb9:
	push %RBP
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000c8fb6
	jmp uuid_00000000000c8fb8
uuid_00000000000c8fb6:
	movb $1, -512(%rbp)
uuid_00000000000c8fb8:
	mov -872(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c8fbb:
	mov -816(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c8fbe:
	mov -800(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c8fc1:
	mov -768(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c8fc4:
	mov -560(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c8fc7:
	mov -528(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c8fca:
	mov -520(%RBP),%RSP
	add $-944, %RSP
	mov -512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c8fcc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8fcb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8fce
uuid_00000000000c8fcc:
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -808(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c8fce:
	mov -352(%RBP),%RSP
	add $-944, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $192, %rsp
	ret
main:
	pushq $1
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c9019:
	mov -32(%RBP), %RAX
	mov -8(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c901a
	jmp uuid_00000000000c901b
uuid_00000000000c901a:
	mov -16(%RBP), %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000c8fcf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9016
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000c8fd5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9013
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000c8fda
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9010
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000c8fe0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c900d
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000c8fe1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c900a
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000c8fe2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9007
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000c8fe3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9004
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000c8fe4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9001
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c8fe5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8ffe
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000c8fe6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8ffb
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c8fe7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8ff8
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000c8fe8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8ff5
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000c8fe9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8ff2
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000c8fea
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8fef
	push %RBP
	pushq -64(%rbp)
	jmp uuid_00000000000c8fec
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c8feb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c8fee
uuid_00000000000c8fec:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -304(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c8fee:
	mov -296(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000c8ff1
uuid_00000000000c8fef:
	mov -32(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -16(%RBP), %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	movq %R15, %r15
	movq $config_SB_target_CL_String, %r14
	movq %r15, 0(%r14)
uuid_00000000000c8ff1:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c8ff4
uuid_00000000000c8ff2:
	mov $config_SB_profile_SB_invocations_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c8ff4:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c8ff7
uuid_00000000000c8ff5:
	mov $config_SB_preprocess_CL_U8, %r15
	movb $0, 0(%r15)
uuid_00000000000c8ff7:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c8ffa
uuid_00000000000c8ff8:
	mov $config_SB_preprocess_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c8ffa:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c8ffd
uuid_00000000000c8ffb:
	mov $config_SB_strict_CL_U8, %r15
	movb $0, 0(%r15)
uuid_00000000000c8ffd:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c9000
uuid_00000000000c8ffe:
	mov $config_SB_strict_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c9000:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c9003
uuid_00000000000c9001:
	pushq $0
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
uuid_00000000000c9003:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c9006
uuid_00000000000c9004:
	pushq $1
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
uuid_00000000000c9006:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c9009
uuid_00000000000c9007:
	pushq $2
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
uuid_00000000000c9009:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c900c
uuid_00000000000c900a:
	pushq $3
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
uuid_00000000000c900c:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c900f
uuid_00000000000c900d:
	pushq $4
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
uuid_00000000000c900f:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c9012
uuid_00000000000c9010:
	pushq $2
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %R15
	popq 0(%R15)
	mov $config_SB_platform_SB_prefix_CL_String, %r15
	movq $uuid_00000000000c8fdb, 0(%r15)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_target_CL_String, %r15
	pushq 0(%r15)
	pushq $uuid_00000000000c4960
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8fdd
	jmp uuid_00000000000c8fdf
uuid_00000000000c8fdd:
	mov $config_SB_target_CL_String, %r15
	movq $uuid_00000000000c8fdc, 0(%r15)
uuid_00000000000c8fdf:
	mov -120(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000c9012:
	mov -104(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c9015
uuid_00000000000c9013:
	pushq $1
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %R15
	popq 0(%R15)
	mov $config_SB_platform_SB_prefix_CL_String, %r15
	movq $uuid_00000000000c49b5, 0(%r15)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_target_CL_String, %r15
	pushq 0(%r15)
	pushq $uuid_00000000000c4960
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8fd7
	jmp uuid_00000000000c8fd9
uuid_00000000000c8fd7:
	mov $config_SB_target_CL_String, %r15
	movq $uuid_00000000000c8fd6, 0(%r15)
uuid_00000000000c8fd9:
	mov -104(%RBP),%RSP
	add $-104, %RSP
uuid_00000000000c9015:
	mov -88(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000c9018
uuid_00000000000c9016:
	pushq $0
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2, %R15
	popq 0(%R15)
	mov $config_SB_platform_SB_prefix_CL_String, %r15
	movq $uuid_00000000000c8fd0, 0(%r15)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_target_CL_String, %r15
	pushq 0(%r15)
	pushq $uuid_00000000000c4960
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c8fd2
	jmp uuid_00000000000c8fd4
uuid_00000000000c8fd2:
	mov $config_SB_target_CL_String, %r15
	movq $uuid_00000000000c8fd1, 0(%r15)
uuid_00000000000c8fd4:
	mov -88(%RBP),%RSP
	add $-88, %RSP
uuid_00000000000c9018:
	mov -72(%RBP),%RSP
	add $-88, %RSP
	mov -32(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9019
uuid_00000000000c901b:
	pushq $1
uuid_00000000000c9047:
	mov -64(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9048
	jmp uuid_00000000000c9049
uuid_00000000000c9048:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9044
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9022
	jmp uuid_00000000000c9024
uuid_00000000000c9022:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c901f
	jmp uuid_00000000000c9021
uuid_00000000000c901f:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c901c
	jmp uuid_00000000000c901e
uuid_00000000000c901c:
	movb $1, -160(%rbp)
uuid_00000000000c901e:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c9021:
	mov -176(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c9024:
	mov -168(%RBP),%RSP
	add $-232, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9041
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9031
	jmp uuid_00000000000c9033
uuid_00000000000c9031:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9028
	jmp uuid_00000000000c902a
uuid_00000000000c9028:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c9025
	jmp uuid_00000000000c9027
uuid_00000000000c9025:
	movb $1, -320(%rbp)
uuid_00000000000c9027:
	mov -336(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c902a:
	mov -328(%RBP),%RSP
	add $-344, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c902e
	jmp uuid_00000000000c9030
uuid_00000000000c902e:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c902b
	jmp uuid_00000000000c902d
uuid_00000000000c902b:
	movb $1, -272(%rbp)
uuid_00000000000c902d:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c9030:
	mov -288(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c9033:
	mov -280(%RBP),%RSP
	add $-376, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c903e
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9037
	jmp uuid_00000000000c9039
uuid_00000000000c9037:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c9034
	jmp uuid_00000000000c9036
uuid_00000000000c9034:
	movb $1, -416(%rbp)
uuid_00000000000c9036:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c9039:
	mov -424(%RBP),%RSP
	add $-440, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c903b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c903a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c903d
uuid_00000000000c903b:
#call function tokenize : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	mov %RBX, %RBP
	call tokenize_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movb $0, -64(%rbp)
uuid_00000000000c903d:
	mov -384(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000c9040
uuid_00000000000c903e:
#call function tokenize : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	mov %RBX, %RBP
	call tokenize_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -376(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c9040:
	mov -240(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000c9043
uuid_00000000000c9041:
	movq -232(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c9043:
	mov -128(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c9046
uuid_00000000000c9044:
	movb $0, -64(%rbp)
uuid_00000000000c9046:
	mov -96(%RBP),%RSP
	add $-120, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000c9047
uuid_00000000000c9049:
	mov $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %r15
	pushq 0(%r15)
	push %RBP
	pushq -72(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c905f
	push %RBP
	pushq -72(%rbp)
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c905c
	push %RBP
	pushq -72(%rbp)
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9059
	push %RBP
	pushq -72(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9056
	push %RBP
	pushq -72(%rbp)
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9053
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c9052
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c9055
uuid_00000000000c9053:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call preprocess_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typecheck : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call typecheck_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c9055:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c9058
uuid_00000000000c9056:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call preprocess_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typecheck : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call typecheck_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c9058:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c905b
uuid_00000000000c9059:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call preprocess_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c905b:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c905e
uuid_00000000000c905c:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c905e:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000c9061
uuid_00000000000c905f:
#call function print : Arrow<List<Token>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call print_CL_ArrowNilListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c9061:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $24, %rsp
	ret
print_CL_ArrowNilListToken:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c489a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000c9076:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9077
	jmp uuid_00000000000c9078
uuid_00000000000c9077:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c906c
	jmp uuid_00000000000c906e
uuid_00000000000c906c:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c9069
	jmp uuid_00000000000c906b
uuid_00000000000c9069:
	push %RBP
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000c9066
	jmp uuid_00000000000c9068
uuid_00000000000c9066:
	movb $1, -248(%rbp)
uuid_00000000000c9068:
	mov -344(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c906b:
	mov -264(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c906e:
	mov -256(%RBP),%RSP
	add $-400, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9073
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c9072
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c9075
uuid_00000000000c9073:
	push %RBP
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c906f
	jmp uuid_00000000000c9071
uuid_00000000000c906f:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c4cb2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c9071:
	mov -408(%RBP),%RSP
	add $-408, %RSP
#call function print : Arrow<Token,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movb $1, -88(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -296(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c9075:
	mov -168(%RBP),%RSP
	add $-408, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9076
uuid_00000000000c9078:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c489b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
non_SB_zero_CL_ArrowU64ListToken:
	mov $1, %RAX
	push %RAX
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_SS:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_FContextFContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $200
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -200(%rbp), %r15
	movq %r15, 0(%r14)
	movq -192(%rbp), %r15
	movq %r15, 8(%r14)
	movq -184(%rbp), %r15
	movq %r15, 16(%r14)
	movq -176(%rbp), %r15
	movq %r15, 24(%r14)
	movq -168(%rbp), %r15
	movq %r15, 32(%r14)
	movq -160(%rbp), %r15
	movq %r15, 40(%r14)
	movq -152(%rbp), %r15
	movq %r15, 48(%r14)
	movq -144(%rbp), %r15
	movq %r15, 56(%r14)
	movq -136(%rbp), %r15
	movq %r15, 64(%r14)
	movq -128(%rbp), %r15
	movq %r15, 72(%r14)
	movq -120(%rbp), %r15
	movq %r15, 80(%r14)
	movq -112(%rbp), %r15
	movq %r15, 88(%r14)
	movq -104(%rbp), %r15
	movq %r15, 96(%r14)
	movq -96(%rbp), %r15
	movq %r15, 104(%r14)
	movq -88(%rbp), %r15
	movq %r15, 112(%r14)
	movq -80(%rbp), %r15
	movq %r15, 120(%r14)
	movq -72(%rbp), %r15
	movq %r15, 128(%r14)
	movq -64(%rbp), %r15
	movq %r15, 136(%r14)
	movq -56(%rbp), %r15
	movq %r15, 144(%r14)
	movq -48(%rbp), %r15
	movq %r15, 152(%r14)
	movq -40(%rbp), %r15
	movq %r15, 160(%r14)
	movq -32(%rbp), %r15
	movq %r15, 168(%r14)
	movq -24(%rbp), %r15
	movq %r15, 176(%r14)
	movq -16(%rbp), %r15
	movq %r15, 184(%r14)
	movq -8(%rbp), %r15
	movq %r15, 192(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
close_CL_ArrowArray_QM_FragmentKVFragmentKV:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_FragmentKVCaseNumber1FragmentKVCaseNumber1:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_ContextCaseNumber1ContextCaseNumber1:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $96
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -96(%rbp), %r15
	movq %r15, 0(%r14)
	movq -88(%rbp), %r15
	movq %r15, 8(%r14)
	movq -80(%rbp), %r15
	movq %r15, 16(%r14)
	movq -72(%rbp), %r15
	movq %r15, 24(%r14)
	movq -64(%rbp), %r15
	movq %r15, 32(%r14)
	movq -56(%rbp), %r15
	movq %r15, 40(%r14)
	movq -48(%rbp), %r15
	movq %r15, 48(%r14)
	movq -40(%rbp), %r15
	movq %r15, 56(%r14)
	movq -32(%rbp), %r15
	movq %r15, 64(%r14)
	movq -24(%rbp), %r15
	movq %r15, 72(%r14)
	movq -16(%rbp), %r15
	movq %r15, 80(%r14)
	movq -8(%rbp), %r15
	movq %r15, 88(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
close_CL_ArrowArray_QM_ContextContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $96
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -96(%rbp), %r15
	movq %r15, 0(%r14)
	movq -88(%rbp), %r15
	movq %r15, 8(%r14)
	movq -80(%rbp), %r15
	movq %r15, 16(%r14)
	movq -72(%rbp), %r15
	movq %r15, 24(%r14)
	movq -64(%rbp), %r15
	movq %r15, 32(%r14)
	movq -56(%rbp), %r15
	movq %r15, 40(%r14)
	movq -48(%rbp), %r15
	movq %r15, 48(%r14)
	movq -40(%rbp), %r15
	movq %r15, 56(%r14)
	movq -32(%rbp), %r15
	movq %r15, 64(%r14)
	movq -24(%rbp), %r15
	movq %r15, 72(%r14)
	movq -16(%rbp), %r15
	movq %r15, 80(%r14)
	movq -8(%rbp), %r15
	movq %r15, 88(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
close_CL_ArrowArray_QM_ASTAST:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
non_SB_zero_CL_ArrowU64ListArray_QM_Fragment:
	mov $1, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64ListFragment:
	mov $1, %RAX
	push %RAX
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
is_CL_ArrowU64ConsSized8Sized8:
	pushq $0
	pushq $1
uuid_00000000000c9084:
	mov $8, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9085
	jmp uuid_00000000000c9086
uuid_00000000000c9085:
	mov %RBP, %R15
	add $-8, %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	mov %RBP, %R15
	add $-16, %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	mov -48(%RBP), %RAX
	mov -56(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9081
	movq $0, -40(%rbp)
	jmp uuid_00000000000c9083
uuid_00000000000c9081:
uuid_00000000000c9083:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	mov -32(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c9084
uuid_00000000000c9086:
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
close_CL_ArrowArray_QM_TypeType:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_SCaseNumber3SCaseNumber3:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_StringStringListStringStringList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $32
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -32(%rbp), %r15
	movq %r15, 0(%r14)
	movq -24(%rbp), %r15
	movq %r15, 8(%r14)
	movq -16(%rbp), %r15
	movq %r15, 16(%r14)
	movq -8(%rbp), %r15
	movq %r15, 24(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
reverse_CL_ArrowListTokenListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c909c:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c909d
	jmp uuid_00000000000c909e
uuid_00000000000c909d:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9095
	jmp uuid_00000000000c9097
uuid_00000000000c9095:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c9092
	jmp uuid_00000000000c9094
uuid_00000000000c9092:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	jmp uuid_00000000000c908f
	jmp uuid_00000000000c9091
uuid_00000000000c908f:
	movb $1, -312(%rbp)
uuid_00000000000c9091:
	mov -408(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c9094:
	mov -328(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c9097:
	mov -320(%RBP),%RSP
	add $-464, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9099
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c9098
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c909b
uuid_00000000000c9099:
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -400(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c909b:
	mov -232(%RBP),%RSP
	add $-464, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c909c
uuid_00000000000c909e:
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_ListTokenListTokenListTokenListToken:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
cons_CL_ArrowListTokenConsListTokenToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	subq $72, %rsp
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
head_CL_ArrowTokenListToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c90b6
	push %RBP
	jmp uuid_00000000000c90b3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c90b2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c90b5
uuid_00000000000c90b3:
uuid_00000000000c90b5:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c90b8
uuid_00000000000c90b6:
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c90b1
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c90b8:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	pushq -8(%RBP)
	pushq -16(%RBP)
	pushq -24(%RBP)
	pushq -32(%RBP)
	pushq -40(%RBP)
	pushq -48(%RBP)
	pushq -56(%RBP)
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_ListTypeListType:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $40
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -40(%rbp), %r15
	movq %r15, 0(%r14)
	movq -32(%rbp), %r15
	movq %r15, 8(%r14)
	movq -24(%rbp), %r15
	movq %r15, 16(%r14)
	movq -16(%rbp), %r15
	movq %r15, 24(%r14)
	movq -8(%rbp), %r15
	movq %r15, 32(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
cons_CL_ArrowListTypeConsListTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	subq $40, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $40
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -40(%rbp), %r15
	movq %r15, 0(%r14)
	movq -32(%rbp), %r15
	movq %r15, 8(%r14)
	movq -24(%rbp), %r15
	movq %r15, 16(%r14)
	movq -16(%rbp), %r15
	movq %r15, 24(%r14)
	movq -8(%rbp), %r15
	movq %r15, 32(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
close_CL_ArrowArray_QM_SfxListSfxList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_MacroListMacroList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
close_CL_ArrowArray_QM_ASTCaseNumber9ASTCaseNumber9:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_FragmentListFragmentList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c90e8
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -104(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c90dc
	jmp uuid_00000000000c90de
uuid_00000000000c90dc:
	movq $1, -88(%rbp)
uuid_00000000000c90de:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c90e2:
	mov -88(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c90e3
	jmp uuid_00000000000c90e4
uuid_00000000000c90e3:
	mov -96(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -96(%rbp)
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	mov -104(%RBP), %RAX
	movq %RAX, -128(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c90df
	jmp uuid_00000000000c90e1
uuid_00000000000c90df:
	movq $1, -88(%rbp)
uuid_00000000000c90e1:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	add $8, %RSP
	jmp uuid_00000000000c90e2
uuid_00000000000c90e4:
	push %RBP
	mov -88(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c90e5
	jmp uuid_00000000000c90e7
uuid_00000000000c90e5:
	mov -112(%RBP), %RAX
	push %RAX
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	mov -152(%rbp), %r15
	mov %r15, -48(%rbp)
uuid_00000000000c90e7:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c90ea
uuid_00000000000c90e8:
uuid_00000000000c90ea:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized24:
	pushq $0
	pushq $0
uuid_00000000000c90ee:
	mov -40(%RBP), %RAX
	mov $24, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c90ef
	jmp uuid_00000000000c90f0
uuid_00000000000c90ef:
	push %RBP
	mov %RBP, %R15
	add $-24, %R15
	mov -40(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c90eb
	jmp uuid_00000000000c90ed
uuid_00000000000c90eb:
	movq $1, -48(%rbp)
uuid_00000000000c90ed:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
	add $8, %RSP
	jmp uuid_00000000000c90ee
uuid_00000000000c90f0:
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9116
	jmp uuid_00000000000c9118
uuid_00000000000c9116:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -64(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $24, %RAX
	mov -96(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $0
	pushq -104(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000c9113:
	mov -120(%RBP), %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9114
	jmp uuid_00000000000c9115
uuid_00000000000c9114:
	mov -80(%RBP), %R15
	mov -120(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9110
	jmp uuid_00000000000c9112
uuid_00000000000c9110:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9109
	jmp uuid_00000000000c910b
uuid_00000000000c9109:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c9106
	jmp uuid_00000000000c9108
uuid_00000000000c9106:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c9103
	jmp uuid_00000000000c9105
uuid_00000000000c9103:
	movb $1, -216(%rbp)
uuid_00000000000c9105:
	mov -248(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c9108:
	mov -232(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c910b:
	mov -224(%RBP),%RSP
	add $-256, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c910d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c910c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c910f
uuid_00000000000c910d:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,U64>,?>,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -96(%rbp)
	pushq -256(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsStringConsU64Array_QM_TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c910f:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-256, %RSP
	push %RAX
uuid_00000000000c9112:
	pop %RAX
	mov -152(%RBP),%RSP
	add $-256, %RSP
	mov -120(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -120(%rbp)
	add $24, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9113
uuid_00000000000c9115:
	movq -112(%rbp), %r15
	movq %r15, -80(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -80(%rbp)
	movq -96(%rbp), %r15
	movq %r15, -72(%rbp)
	mov -96(%rbp), %r15
	mov %r15, -72(%rbp)
uuid_00000000000c9118:
	mov -88(%RBP),%RSP
	add $-120, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,U64>,?>,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsStringConsU64Array_QM_TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -128(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9119
	mov -64(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000c911b
uuid_00000000000c9119:
uuid_00000000000c911b:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsU64ConsStringConsU64Array_QM_TupleU64String:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -64(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9120
	jmp uuid_00000000000c9122
uuid_00000000000c9120:
	movq $1, -48(%rbp)
uuid_00000000000c9122:
	mov -96(%RBP),%RSP
	add $-96, %RSP
uuid_00000000000c9126:
	mov -48(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9127
	jmp uuid_00000000000c9128
uuid_00000000000c9127:
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -56(%rbp)
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	mov -64(%RBP), %RAX
	movq %RAX, -88(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9123
	jmp uuid_00000000000c9125
uuid_00000000000c9123:
	movq $1, -48(%rbp)
uuid_00000000000c9125:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9126
uuid_00000000000c9128:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	mov -120(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -112(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -104(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
max_CL_ArrowU64ConsU64U64:
	push %RBP
	mov -8(%RBP), %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9129
	jmp uuid_00000000000c912b
uuid_00000000000c9129:
	movq -16(%rbp), %r15
	movq %r15, -8(%rbp)
	mov -16(%rbp), %r15
	mov %r15, -8(%rbp)
uuid_00000000000c912b:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
max_CL_ArrowI64ConsI64I64:
	push %RBP
	mov -8(%RBP), %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c912c
	jmp uuid_00000000000c912e
uuid_00000000000c912c:
	movq -16(%rbp), %r15
	movq %r15, -8(%rbp)
	mov -16(%rbp), %r15
	mov %r15, -8(%rbp)
uuid_00000000000c912e:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
close_CL_ArrowArray_QM_ListTokenListToken:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
cons_CL_ArrowListStringConsListStringString:
	pushq -8(%rbp)
#call function close : Arrow<List<String>,Array<List<String>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListStringListString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
close_CL_ArrowArray_QM_ListStringListString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64ListString:
	mov $1, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
cons_CL_ArrowListArray_QM_FragmentConsListArray_QM_FragmentArray_QM_Fragment:
	pushq -8(%rbp)
#call function close : Arrow<List<Array<Fragment,?>>,Array<List<Array<Fragment,?>>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListArray_QM_FragmentListArray_QM_Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
close_CL_ArrowArray_QM_ListArray_QM_FragmentListArray_QM_Fragment:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_FragmentFragment:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $152
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -152(%rbp), %r15
	movq %r15, 0(%r14)
	movq -144(%rbp), %r15
	movq %r15, 8(%r14)
	movq -136(%rbp), %r15
	movq %r15, 16(%r14)
	movq -128(%rbp), %r15
	movq %r15, 24(%r14)
	movq -120(%rbp), %r15
	movq %r15, 32(%r14)
	movq -112(%rbp), %r15
	movq %r15, 40(%r14)
	movq -104(%rbp), %r15
	movq %r15, 48(%r14)
	movq -96(%rbp), %r15
	movq %r15, 56(%r14)
	movq -88(%rbp), %r15
	movq %r15, 64(%r14)
	movq -80(%rbp), %r15
	movq %r15, 72(%r14)
	movq -72(%rbp), %r15
	movq %r15, 80(%r14)
	movq -64(%rbp), %r15
	movq %r15, 88(%r14)
	movq -56(%rbp), %r15
	movq %r15, 96(%r14)
	movq -48(%rbp), %r15
	movq %r15, 104(%r14)
	movq -40(%rbp), %r15
	movq %r15, 112(%r14)
	movq -32(%rbp), %r15
	movq %r15, 120(%r14)
	movq -24(%rbp), %r15
	movq %r15, 128(%r14)
	movq -16(%rbp), %r15
	movq %r15, 136(%r14)
	movq -8(%rbp), %r15
	movq %r15, 144(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $160, %rsp
	ret
_DT_length_CL_ArrowU64ListFragment:
	pushq $0
uuid_00000000000c9152:
#call function non-zero : Arrow<List<Fragment>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9153
	jmp uuid_00000000000c9154
uuid_00000000000c9153:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c914b
	jmp uuid_00000000000c914d
uuid_00000000000c914b:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c9148
	jmp uuid_00000000000c914a
uuid_00000000000c9148:
	push %RBP
	jmp uuid_00000000000c9145
	jmp uuid_00000000000c9147
uuid_00000000000c9145:
	movb $1, -536(%rbp)
uuid_00000000000c9147:
	mov -728(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c914a:
	mov -552(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c914d:
	mov -544(%RBP),%RSP
	add $-728, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c914f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c914e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c9151
uuid_00000000000c914f:
	movq -720(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -688(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -680(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -672(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -664(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -640(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -616(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c9151:
	mov -360(%RBP),%RSP
	add $-728, %RSP
	mov -184(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -184(%rbp)
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9152
uuid_00000000000c9154:
	mov -184(%rbp), %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
cons_CL_ArrowListFragmentConsListFragmentFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
#call function close : Arrow<List<Fragment>,Array<List<Fragment>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListFragmentListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	subq $168, %rsp
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
close_CL_ArrowArray_QM_ListFragmentListFragment:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
is_CL_ArrowU64ConsSized24Sized24:
	pushq $0
	pushq $1
uuid_00000000000c9161:
	mov $24, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -64(%RBP), %RAX
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9162
	jmp uuid_00000000000c9163
uuid_00000000000c9162:
	mov %RBP, %R15
	add $-24, %R15
	mov -64(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	mov %RBP, %R15
	add $-48, %R15
	mov -64(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	mov -80(%RBP), %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c915e
	movq $0, -72(%rbp)
	jmp uuid_00000000000c9160
uuid_00000000000c915e:
uuid_00000000000c9160:
	mov -96(%RBP),%RSP
	add $-96, %RSP
	mov -64(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -64(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c9161
uuid_00000000000c9163:
	mov -72(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_TContextTContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $120
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -120(%rbp), %r15
	movq %r15, 0(%r14)
	movq -112(%rbp), %r15
	movq %r15, 8(%r14)
	movq -104(%rbp), %r15
	movq %r15, 16(%r14)
	movq -96(%rbp), %r15
	movq %r15, 24(%r14)
	movq -88(%rbp), %r15
	movq %r15, 32(%r14)
	movq -80(%rbp), %r15
	movq %r15, 40(%r14)
	movq -72(%rbp), %r15
	movq %r15, 48(%r14)
	movq -64(%rbp), %r15
	movq %r15, 56(%r14)
	movq -56(%rbp), %r15
	movq %r15, 64(%r14)
	movq -48(%rbp), %r15
	movq %r15, 72(%r14)
	movq -40(%rbp), %r15
	movq %r15, 80(%r14)
	movq -32(%rbp), %r15
	movq %r15, 88(%r14)
	movq -24(%rbp), %r15
	movq %r15, 96(%r14)
	movq -16(%rbp), %r15
	movq %r15, 104(%r14)
	movq -8(%rbp), %r15
	movq %r15, 112(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $128, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqTypeStringConsTypeConsStringHashtableEqTypeString:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9188
	jmp uuid_00000000000c918a
uuid_00000000000c9188:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -80(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $40, %RAX
	mov -112(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $0
	pushq -120(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000c9185:
	mov -136(%RBP), %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9186
	jmp uuid_00000000000c9187
uuid_00000000000c9186:
	mov -96(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9182
	jmp uuid_00000000000c9184
uuid_00000000000c9182:
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c917c
	jmp uuid_00000000000c917e
uuid_00000000000c917c:
	push %RBP
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	jmp uuid_00000000000c9179
	jmp uuid_00000000000c917b
uuid_00000000000c9179:
	push %RBP
	mov -240(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c9176
	jmp uuid_00000000000c9178
uuid_00000000000c9176:
	movb $1, -280(%rbp)
uuid_00000000000c9178:
	mov -328(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c917b:
	mov -296(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c917e:
	mov -288(%RBP),%RSP
	add $-336, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c917f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c910c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c9181
uuid_00000000000c917f:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Type>,?>,U64>,String>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -112(%rbp)
	pushq -336(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTypeConsStringConsU64Array_QM_TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c9181:
	pop %RAX
	mov -232(%RBP),%RSP
	add $-336, %RSP
	push %RAX
uuid_00000000000c9184:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-336, %RSP
	mov -136(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -136(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9185
uuid_00000000000c9187:
	movq -128(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -128(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -112(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000c918a:
	mov -104(%RBP),%RSP
	add $-136, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Type>,?>,U64>,String>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTypeConsStringConsU64Array_QM_TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c918b
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -80(%rbp)
	jmp uuid_00000000000c918d
uuid_00000000000c918b:
uuid_00000000000c918d:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsTypeConsStringConsU64Array_QM_TupleTypeString:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -80(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9192
	jmp uuid_00000000000c9194
uuid_00000000000c9192:
	movq $1, -64(%rbp)
uuid_00000000000c9194:
	mov -128(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000c9198:
	mov -64(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9199
	jmp uuid_00000000000c919a
uuid_00000000000c9199:
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -72(%rbp)
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	mov -80(%RBP), %RAX
	movq %RAX, -120(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9195
	jmp uuid_00000000000c9197
uuid_00000000000c9195:
	movq $1, -64(%rbp)
uuid_00000000000c9197:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9198
uuid_00000000000c919a:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	mov -168(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -160(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -152(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -144(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -136(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized40:
	pushq $0
	pushq $0
uuid_00000000000c919e:
	mov -56(%RBP), %RAX
	mov $40, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c919f
	jmp uuid_00000000000c91a0
uuid_00000000000c919f:
	push %RBP
	mov %RBP, %R15
	add $-40, %R15
	mov -56(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c919b
	jmp uuid_00000000000c919d
uuid_00000000000c919b:
	movq $1, -64(%rbp)
uuid_00000000000c919d:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
	add $8, %RSP
	jmp uuid_00000000000c919e
uuid_00000000000c91a0:
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
non_SB_zero_CL_ArrowU64ListStackToSpecialize:
	mov $1, %RAX
	push %RAX
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
cons_CL_ArrowListStackToSpecializeConsListStackToSpecializeStackToSpecialize:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
#call function close : Arrow<List<StackToSpecialize>,Array<List<StackToSpecialize>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListStackToSpecializeListStackToSpecialize
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	subq $200, %rsp
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $392, %rsp
	ret
close_CL_ArrowArray_QM_ListStackToSpecializeListStackToSpecialize:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $200
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -200(%rbp), %r15
	movq %r15, 0(%r14)
	movq -192(%rbp), %r15
	movq %r15, 8(%r14)
	movq -184(%rbp), %r15
	movq %r15, 16(%r14)
	movq -176(%rbp), %r15
	movq %r15, 24(%r14)
	movq -168(%rbp), %r15
	movq %r15, 32(%r14)
	movq -160(%rbp), %r15
	movq %r15, 40(%r14)
	movq -152(%rbp), %r15
	movq %r15, 48(%r14)
	movq -144(%rbp), %r15
	movq %r15, 56(%r14)
	movq -136(%rbp), %r15
	movq %r15, 64(%r14)
	movq -128(%rbp), %r15
	movq %r15, 72(%r14)
	movq -120(%rbp), %r15
	movq %r15, 80(%r14)
	movq -112(%rbp), %r15
	movq %r15, 88(%r14)
	movq -104(%rbp), %r15
	movq %r15, 96(%r14)
	movq -96(%rbp), %r15
	movq %r15, 104(%r14)
	movq -88(%rbp), %r15
	movq %r15, 112(%r14)
	movq -80(%rbp), %r15
	movq %r15, 120(%r14)
	movq -72(%rbp), %r15
	movq %r15, 128(%r14)
	movq -64(%rbp), %r15
	movq %r15, 136(%r14)
	movq -56(%rbp), %r15
	movq %r15, 144(%r14)
	movq -48(%rbp), %r15
	movq %r15, 152(%r14)
	movq -40(%rbp), %r15
	movq %r15, 160(%r14)
	movq -32(%rbp), %r15
	movq %r15, 168(%r14)
	movq -24(%rbp), %r15
	movq %r15, 176(%r14)
	movq -16(%rbp), %r15
	movq %r15, 184(%r14)
	movq -8(%rbp), %r15
	movq %r15, 192(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
non_SB_zero_CL_ArrowU64ListType:
	mov $1, %RAX
	push %RAX
	mov -40(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_AD__CL_ArrowListTypeConsListTypeListType:
#call function reverse : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c91c8:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c91c9
	jmp uuid_00000000000c91ca
uuid_00000000000c91c9:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c91c1
	jmp uuid_00000000000c91c3
uuid_00000000000c91c1:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c91be
	jmp uuid_00000000000c91c0
uuid_00000000000c91be:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c91bb
	jmp uuid_00000000000c91bd
uuid_00000000000c91bb:
	movb $1, -184(%rbp)
uuid_00000000000c91bd:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c91c0:
	mov -200(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c91c3:
	mov -192(%RBP),%RSP
	add $-272, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c91c5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c91c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c91c7
uuid_00000000000c91c5:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	movq -240(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c91c7:
	mov -136(%RBP),%RSP
	add $-272, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c91c8
uuid_00000000000c91ca:
	subq $40, %rsp
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
reverse_CL_ArrowListTypeListType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c91df:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c91e0
	jmp uuid_00000000000c91e1
uuid_00000000000c91e0:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c91d9
	jmp uuid_00000000000c91db
uuid_00000000000c91d9:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c91d6
	jmp uuid_00000000000c91d8
uuid_00000000000c91d6:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c91d3
	jmp uuid_00000000000c91d5
uuid_00000000000c91d3:
	movb $1, -184(%rbp)
uuid_00000000000c91d5:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c91d8:
	mov -200(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c91db:
	mov -192(%RBP),%RSP
	add $-272, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c91dc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c9098
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c91de
uuid_00000000000c91dc:
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	movq -240(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c91de:
	mov -136(%RBP),%RSP
	add $-272, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c91df
uuid_00000000000c91e1:
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_length_CL_ArrowU64ListType:
	pushq $0
uuid_00000000000c91f2:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c91f3
	jmp uuid_00000000000c91f4
uuid_00000000000c91f3:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c91ec
	jmp uuid_00000000000c91ee
uuid_00000000000c91ec:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c91e9
	jmp uuid_00000000000c91eb
uuid_00000000000c91e9:
	push %RBP
	jmp uuid_00000000000c91e6
	jmp uuid_00000000000c91e8
uuid_00000000000c91e6:
	movb $1, -152(%rbp)
uuid_00000000000c91e8:
	mov -216(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c91eb:
	mov -168(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c91ee:
	mov -160(%RBP),%RSP
	add $-216, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c91ef
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c914e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c91f1
uuid_00000000000c91ef:
	movq -208(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c91f1:
	mov -104(%RBP),%RSP
	add $-216, %RSP
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c91f2
uuid_00000000000c91f4:
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_lookup_CL_ArrowTypeConsTypeConsStringHashtableEqTypeString:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9211
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -80(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -96(%RBP), %R15
	mov -112(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -120(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9205
	jmp uuid_00000000000c9207
uuid_00000000000c9205:
	movq $1, -104(%rbp)
uuid_00000000000c9207:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c920b:
	mov -104(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c920c
	jmp uuid_00000000000c920d
uuid_00000000000c920c:
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -80(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -112(%rbp)
	mov -96(%RBP), %R15
	mov -112(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	mov -120(%RBP), %RAX
	movq %RAX, -160(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9208
	jmp uuid_00000000000c920a
uuid_00000000000c9208:
	movq $1, -104(%rbp)
uuid_00000000000c920a:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	add $8, %RSP
	jmp uuid_00000000000c920b
uuid_00000000000c920d:
	push %RBP
	mov -104(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c920e
	jmp uuid_00000000000c9210
uuid_00000000000c920e:
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	movq -200(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -192(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000c9210:
	mov -176(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c9213
uuid_00000000000c9211:
uuid_00000000000c9213:
	mov -88(%RBP),%RSP
	add $-88, %RSP
	subq $24, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -112(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c923c
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -112(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -128(%RBP), %R15
	mov -144(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -152(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9230
	jmp uuid_00000000000c9232
uuid_00000000000c9230:
	movq $1, -136(%rbp)
uuid_00000000000c9232:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c9236:
	mov -136(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9237
	jmp uuid_00000000000c9238
uuid_00000000000c9237:
	mov -144(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -112(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -144(%rbp)
	mov -128(%RBP), %R15
	mov -144(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	mov -152(%RBP), %RAX
	movq %RAX, -224(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9233
	jmp uuid_00000000000c9235
uuid_00000000000c9233:
	movq $1, -136(%rbp)
uuid_00000000000c9235:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9236
uuid_00000000000c9238:
	push %RBP
	mov -136(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9239
	jmp uuid_00000000000c923b
uuid_00000000000c9239:
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	movq -296(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -248(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000c923b:
	mov -240(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c923e
uuid_00000000000c923c:
uuid_00000000000c923e:
	mov -120(%RBP),%RSP
	add $-120, %RSP
	subq $56, %rsp
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $104, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized72:
	pushq $0
	pushq $0
uuid_00000000000c9242:
	mov -88(%RBP), %RAX
	mov $72, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9243
	jmp uuid_00000000000c9244
uuid_00000000000c9243:
	push %RBP
	mov %RBP, %R15
	add $-72, %R15
	mov -88(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c923f
	jmp uuid_00000000000c9241
uuid_00000000000c923f:
	movq $1, -96(%rbp)
uuid_00000000000c9241:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -88(%rbp)
	add $8, %RSP
	jmp uuid_00000000000c9242
uuid_00000000000c9244:
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_TContextCaseNumber2TContextCaseNumber2:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $120
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -120(%rbp), %r15
	movq %r15, 0(%r14)
	movq -112(%rbp), %r15
	movq %r15, 8(%r14)
	movq -104(%rbp), %r15
	movq %r15, 16(%r14)
	movq -96(%rbp), %r15
	movq %r15, 24(%r14)
	movq -88(%rbp), %r15
	movq %r15, 32(%r14)
	movq -80(%rbp), %r15
	movq %r15, 40(%r14)
	movq -72(%rbp), %r15
	movq %r15, 48(%r14)
	movq -64(%rbp), %r15
	movq %r15, 56(%r14)
	movq -56(%rbp), %r15
	movq %r15, 64(%r14)
	movq -48(%rbp), %r15
	movq %r15, 72(%r14)
	movq -40(%rbp), %r15
	movq %r15, 80(%r14)
	movq -32(%rbp), %r15
	movq %r15, 88(%r14)
	movq -24(%rbp), %r15
	movq %r15, 96(%r14)
	movq -16(%rbp), %r15
	movq %r15, 104(%r14)
	movq -8(%rbp), %r15
	movq %r15, 112(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $128, %rsp
	ret
_DT_nth_CL_ArrowTypeConsTypeConsU64ListType:
uuid_00000000000c925b:
	mov -48(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c925c
	jmp uuid_00000000000c925d
uuid_00000000000c925c:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9251
	jmp uuid_00000000000c9253
uuid_00000000000c9251:
	push %RBP
	mov -160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c924e
	jmp uuid_00000000000c9250
uuid_00000000000c924e:
	push %RBP
	jmp uuid_00000000000c924b
	jmp uuid_00000000000c924d
uuid_00000000000c924b:
	movb $1, -176(%rbp)
uuid_00000000000c924d:
	mov -240(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c9250:
	mov -192(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c9253:
	mov -184(%RBP),%RSP
	add $-240, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9258
	push %RBP
	jmp uuid_00000000000c9255
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c9254
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c9257
uuid_00000000000c9255:
uuid_00000000000c9257:
	mov -248(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c925a
uuid_00000000000c9258:
	movq -232(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c925a:
	mov -128(%RBP),%RSP
	add $-240, %RSP
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c925b
uuid_00000000000c925d:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9264
	jmp uuid_00000000000c9266
uuid_00000000000c9264:
	push %RBP
	jmp uuid_00000000000c9261
	jmp uuid_00000000000c9263
uuid_00000000000c9261:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	jmp uuid_00000000000c925e
	jmp uuid_00000000000c9260
uuid_00000000000c925e:
	movb $1, -176(%rbp)
uuid_00000000000c9260:
	mov -200(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000c9263:
	mov -192(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000c9266:
	mov -184(%RBP),%RSP
	add $-224, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c926b
	push %RBP
	jmp uuid_00000000000c9268
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c9267
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c926a
uuid_00000000000c9268:
uuid_00000000000c926a:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c926d
uuid_00000000000c926b:
	movq -224(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000c926d:
	mov -128(%RBP),%RSP
	add $-224, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqTupleTypeTypeStringConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -112(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -120(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c929f
	jmp uuid_00000000000c92a1
uuid_00000000000c929f:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -112(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $72, %RAX
	mov -144(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $0
	pushq -152(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000c929c:
	mov -168(%RBP), %RAX
	mov -120(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c929d
	jmp uuid_00000000000c929e
uuid_00000000000c929d:
	mov -128(%RBP), %R15
	mov -168(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9299
	jmp uuid_00000000000c929b
uuid_00000000000c9299:
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9293
	jmp uuid_00000000000c9295
uuid_00000000000c9293:
	push %RBP
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000c9290
	jmp uuid_00000000000c9292
uuid_00000000000c9290:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c928d
	jmp uuid_00000000000c928f
uuid_00000000000c928d:
	movb $1, -408(%rbp)
uuid_00000000000c928f:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c9292:
	mov -424(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c9295:
	mov -416(%RBP),%RSP
	add $-496, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9296
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c910c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c9298
uuid_00000000000c9296:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Tuple<Type,Type>>,?>,U64>,String>,Tuple<Type,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -144(%rbp)
	pushq -496(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTupleTypeTypeConsStringConsU64Array_QM_TupleTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c9298:
	pop %RAX
	mov -328(%RBP),%RSP
	add $-496, %RSP
	push %RAX
uuid_00000000000c929b:
	pop %RAX
	mov -248(%RBP),%RSP
	add $-496, %RSP
	mov -168(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -168(%rbp)
	add $72, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c929c
uuid_00000000000c929e:
	movq -160(%rbp), %r15
	movq %r15, -128(%rbp)
	mov -160(%rbp), %r15
	mov %r15, -128(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -120(%rbp)
	mov -144(%rbp), %r15
	mov %r15, -120(%rbp)
uuid_00000000000c92a1:
	mov -136(%RBP),%RSP
	add $-168, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Tuple<Type,Type>>,?>,U64>,String>,Tuple<Type,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTupleTypeTypeConsStringConsU64Array_QM_TupleTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -176(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c92a2
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -112(%rbp)
	jmp uuid_00000000000c92a4
uuid_00000000000c92a2:
uuid_00000000000c92a4:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $104, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsTupleTypeTypeConsStringConsU64Array_QM_TupleTupleTypeTypeString:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -112(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c92b7
	jmp uuid_00000000000c92b9
uuid_00000000000c92b7:
	movq $1, -96(%rbp)
uuid_00000000000c92b9:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c92bd:
	mov -96(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c92be
	jmp uuid_00000000000c92bf
uuid_00000000000c92be:
	mov -104(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -104(%rbp)
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	mov -112(%RBP), %RAX
	movq %RAX, -184(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c92ba
	jmp uuid_00000000000c92bc
uuid_00000000000c92ba:
	movq $1, -96(%rbp)
uuid_00000000000c92bc:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	add $8, %RSP
	jmp uuid_00000000000c92bd
uuid_00000000000c92bf:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	mov -264(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -256(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -248(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -240(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -232(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -224(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -216(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -208(%RBP), %RAX
	mov %RAX, 56(%R15)
	mov -200(%RBP), %RAX
	mov %RAX, 64(%R15)
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
uuid_00000000000c92de:
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c92df
	jmp uuid_00000000000c92e0
uuid_00000000000c92df:
	mov -8(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov -96(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c92cf
	jmp uuid_00000000000c92d1
uuid_00000000000c92cf:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov -16(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c92cc
	jmp uuid_00000000000c92ce
uuid_00000000000c92cc:
	mov -24(%RBP), %RAX
	movq %RAX, -64(%rbp)
	movb $0, -88(%rbp)
uuid_00000000000c92ce:
	mov -112(%RBP),%RSP
	add $-112, %RSP
uuid_00000000000c92d1:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c92db
	jmp uuid_00000000000c92dd
uuid_00000000000c92db:
	push %RBP
	mov -96(%RBP), %RAX
	mov -80(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c92d8
	push %RBP
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c92d5
	mov -32(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c92d7
uuid_00000000000c92d5:
	movb $0, -88(%rbp)
uuid_00000000000c92d7:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c92da
uuid_00000000000c92d8:
	push %RBP
	mov -40(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c92d2
	mov -40(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c92d4
uuid_00000000000c92d2:
	movb $0, -88(%rbp)
uuid_00000000000c92d4:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c92da:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c92dd:
	mov -120(%RBP),%RSP
	add $-136, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c92de
uuid_00000000000c92e0:
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function close : Arrow<BTreeEq<String,U64>,Array<BTreeEq<String,U64>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_BTreeEqU64StringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c92ee:
	mov -48(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c92ef
	jmp uuid_00000000000c92f0
uuid_00000000000c92ef:
	mov -8(%rbp), %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov -40(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c92eb
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c92e8
	mov -88(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c92ea
uuid_00000000000c92e8:
	mov -56(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 16(%R15)
	movb $0, -48(%rbp)
uuid_00000000000c92ea:
	mov -120(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c92ed
uuid_00000000000c92eb:
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c92e5
	mov -96(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c92e7
uuid_00000000000c92e5:
	mov -56(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 8(%R15)
	movb $0, -48(%rbp)
uuid_00000000000c92e7:
	mov -120(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000c92ed:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c92ee
uuid_00000000000c92f0:
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_BTreeEqU64StringBTreeEqU64String:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_lookup_CL_ArrowStringConsStringConsStringHashtableEqStringString:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9317
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -104(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c930b
	jmp uuid_00000000000c930d
uuid_00000000000c930b:
	movq $1, -88(%rbp)
uuid_00000000000c930d:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c9311:
	mov -88(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9312
	jmp uuid_00000000000c9313
uuid_00000000000c9312:
	mov -96(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -96(%rbp)
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	mov -104(%RBP), %RAX
	movq %RAX, -128(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c930e
	jmp uuid_00000000000c9310
uuid_00000000000c930e:
	movq $1, -88(%rbp)
uuid_00000000000c9310:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9311
uuid_00000000000c9313:
	push %RBP
	mov -88(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9314
	jmp uuid_00000000000c9316
uuid_00000000000c9314:
	mov -112(%RBP), %RAX
	push %RAX
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	mov -152(%rbp), %r15
	mov %r15, -48(%rbp)
uuid_00000000000c9316:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c9319
uuid_00000000000c9317:
uuid_00000000000c9319:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqStringStringConsStringConsStringHashtableEqStringString:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c933e
	jmp uuid_00000000000c9340
uuid_00000000000c933e:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -64(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $24, %RAX
	mov -96(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $0
	pushq -104(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000c933b:
	mov -120(%RBP), %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c933c
	jmp uuid_00000000000c933d
uuid_00000000000c933c:
	mov -80(%RBP), %R15
	mov -120(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9338
	jmp uuid_00000000000c933a
uuid_00000000000c9338:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9332
	jmp uuid_00000000000c9334
uuid_00000000000c9332:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c932f
	jmp uuid_00000000000c9331
uuid_00000000000c932f:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c932c
	jmp uuid_00000000000c932e
uuid_00000000000c932c:
	movb $1, -216(%rbp)
uuid_00000000000c932e:
	mov -248(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c9331:
	mov -232(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c9334:
	mov -224(%RBP),%RSP
	add $-256, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9335
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c910c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c9337
uuid_00000000000c9335:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,String>,?>,U64>,String>,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -96(%rbp)
	pushq -256(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsStringConsStringConsU64Array_QM_TupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c9337:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-256, %RSP
	push %RAX
uuid_00000000000c933a:
	pop %RAX
	mov -152(%RBP),%RSP
	add $-256, %RSP
	mov -120(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -120(%rbp)
	add $24, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c933b
uuid_00000000000c933d:
	movq -112(%rbp), %r15
	movq %r15, -80(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -80(%rbp)
	movq -96(%rbp), %r15
	movq %r15, -72(%rbp)
	mov -96(%rbp), %r15
	mov %r15, -72(%rbp)
uuid_00000000000c9340:
	mov -88(%RBP),%RSP
	add $-120, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,String>,?>,U64>,String>,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsStringConsStringConsU64Array_QM_TupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -128(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9341
	mov -64(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000c9343
uuid_00000000000c9341:
uuid_00000000000c9343:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsStringConsStringConsU64Array_QM_TupleStringString:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -64(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9348
	jmp uuid_00000000000c934a
uuid_00000000000c9348:
	movq $1, -48(%rbp)
uuid_00000000000c934a:
	mov -96(%RBP),%RSP
	add $-96, %RSP
uuid_00000000000c934e:
	mov -48(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c934f
	jmp uuid_00000000000c9350
uuid_00000000000c934f:
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -56(%rbp)
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	mov -64(%RBP), %RAX
	movq %RAX, -88(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c934b
	jmp uuid_00000000000c934d
uuid_00000000000c934b:
	movq $1, -48(%rbp)
uuid_00000000000c934d:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	add $8, %RSP
	jmp uuid_00000000000c934e
uuid_00000000000c9350:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	mov -120(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -112(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -104(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c937b
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<Tuple<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -96(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -112(%RBP), %R15
	mov -128(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,Type>,Tuple<String,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c936f
	jmp uuid_00000000000c9371
uuid_00000000000c936f:
	movq $1, -120(%rbp)
uuid_00000000000c9371:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c9375:
	mov -120(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9376
	jmp uuid_00000000000c9377
uuid_00000000000c9376:
	mov -128(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -96(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -128(%rbp)
	mov -112(%RBP), %R15
	mov -128(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,Type>,Tuple<String,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9372
	jmp uuid_00000000000c9374
uuid_00000000000c9372:
	movq $1, -120(%rbp)
uuid_00000000000c9374:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9375
uuid_00000000000c9377:
	push %RBP
	mov -120(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9378
	jmp uuid_00000000000c937a
uuid_00000000000c9378:
	mov -176(%RBP), %RAX
	push %RAX
	movq -248(%rbp), %r15
	movq %r15, -80(%rbp)
	mov -248(%rbp), %r15
	mov %r15, -80(%rbp)
uuid_00000000000c937a:
	mov -240(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c937d
uuid_00000000000c937b:
uuid_00000000000c937d:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	mov -80(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized56:
	pushq $0
	pushq $0
uuid_00000000000c9381:
	mov -72(%RBP), %RAX
	mov $56, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9382
	jmp uuid_00000000000c9383
uuid_00000000000c9382:
	push %RBP
	mov %RBP, %R15
	add $-56, %R15
	mov -72(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c937e
	jmp uuid_00000000000c9380
uuid_00000000000c937e:
	movq $1, -80(%rbp)
uuid_00000000000c9380:
	mov -88(%RBP),%RSP
	add $-88, %RSP
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -72(%rbp)
	add $8, %RSP
	jmp uuid_00000000000c9381
uuid_00000000000c9383:
	mov -80(%rbp), %RAX
	mov %rbp, %rsp
	sub $64, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c93ae
	jmp uuid_00000000000c93b0
uuid_00000000000c93ae:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c939c
	jmp uuid_00000000000c939e
uuid_00000000000c939c:
	push %RBP
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	jmp uuid_00000000000c9399
	jmp uuid_00000000000c939b
uuid_00000000000c9399:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c9396
	jmp uuid_00000000000c9398
uuid_00000000000c9396:
	movb $1, -352(%rbp)
uuid_00000000000c9398:
	mov -400(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c939b:
	mov -368(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c939e:
	mov -360(%RBP),%RSP
	add $-408, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c93ab
	jmp uuid_00000000000c93ad
uuid_00000000000c93ab:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c93a5
	jmp uuid_00000000000c93a7
uuid_00000000000c93a5:
	push %RBP
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	jmp uuid_00000000000c93a2
	jmp uuid_00000000000c93a4
uuid_00000000000c93a2:
	push %RBP
	mov -424(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c939f
	jmp uuid_00000000000c93a1
uuid_00000000000c939f:
	movb $1, -464(%rbp)
uuid_00000000000c93a1:
	mov -512(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c93a4:
	mov -480(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c93a7:
	mov -472(%RBP),%RSP
	add $-520, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c93a8
	jmp uuid_00000000000c93aa
uuid_00000000000c93a8:
	movb $1, -288(%rbp)
uuid_00000000000c93aa:
	mov -416(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c93ad:
	mov -304(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c93b0:
	mov -296(%RBP),%RSP
	add $-520, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c93b8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c93b7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c93ba
uuid_00000000000c93b8:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -520(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c93b4
	jmp uuid_00000000000c93b6
uuid_00000000000c93b4:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c93b1
	jmp uuid_00000000000c93b3
uuid_00000000000c93b1:
	movq $1, -96(%rbp)
uuid_00000000000c93b3:
	mov -536(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c93b6:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c93ba:
	mov -192(%RBP),%RSP
	add $-536, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
deep_SB_hash_CL_ArrowU64TupleTypeString:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c93c9
	jmp uuid_00000000000c93cb
uuid_00000000000c93c9:
	push %RBP
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	jmp uuid_00000000000c93c6
	jmp uuid_00000000000c93c8
uuid_00000000000c93c6:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c93c3
	jmp uuid_00000000000c93c5
uuid_00000000000c93c3:
	movb $1, -152(%rbp)
uuid_00000000000c93c5:
	mov -200(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c93c8:
	mov -168(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c93cb:
	mov -160(%RBP),%RSP
	add $-208, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c93cd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c93cc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c93cf
uuid_00000000000c93cd:
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000c93cf:
	mov -104(%RBP),%RSP
	add $-208, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqU64TupleTypeStringConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -104(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9403
	jmp uuid_00000000000c9405
uuid_00000000000c9403:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -96(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $56, %RAX
	mov -128(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $0
	pushq -136(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000c9400:
	mov -152(%RBP), %RAX
	mov -104(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9401
	jmp uuid_00000000000c9402
uuid_00000000000c9401:
	mov -112(%RBP), %R15
	mov -152(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c93fd
	jmp uuid_00000000000c93ff
uuid_00000000000c93fd:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c93f7
	jmp uuid_00000000000c93f9
uuid_00000000000c93f7:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c93f4
	jmp uuid_00000000000c93f6
uuid_00000000000c93f4:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	jmp uuid_00000000000c93f1
	jmp uuid_00000000000c93f3
uuid_00000000000c93f1:
	movb $1, -344(%rbp)
uuid_00000000000c93f3:
	mov -376(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c93f6:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c93f9:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c93fa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c910c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c93fc
uuid_00000000000c93fa:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<String,Type>,U64>,?>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -128(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleTypeStringConsU64Array_QM_TupleU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c93fc:
	pop %RAX
	mov -280(%RBP),%RSP
	add $-416, %RSP
	push %RAX
uuid_00000000000c93ff:
	pop %RAX
	mov -216(%RBP),%RSP
	add $-416, %RSP
	mov -152(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -152(%rbp)
	add $56, %rsp
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9400
uuid_00000000000c9402:
	movq -144(%rbp), %r15
	movq %r15, -112(%rbp)
	mov -144(%rbp), %r15
	mov %r15, -112(%rbp)
	movq -128(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -128(%rbp), %r15
	mov %r15, -104(%rbp)
uuid_00000000000c9405:
	mov -120(%RBP),%RSP
	add $-152, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<String,Type>,U64>,?>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleTypeStringConsU64Array_QM_TupleU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -160(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9406
	mov -96(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	jmp uuid_00000000000c9408
uuid_00000000000c9406:
uuid_00000000000c9408:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleTypeStringConsU64Array_QM_TupleU64TupleTypeString:
	pushq $0
#call function deep-hash : Arrow<Tuple<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -96(%RBP)
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,Type>,Tuple<String,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c941d
	jmp uuid_00000000000c941f
uuid_00000000000c941d:
	movq $1, -80(%rbp)
uuid_00000000000c941f:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c9423:
	mov -80(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9424
	jmp uuid_00000000000c9425
uuid_00000000000c9424:
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -88(%rbp)
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	pushq -96(%RBP)
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,Type>,Tuple<String,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9420
	jmp uuid_00000000000c9422
uuid_00000000000c9420:
	movq $1, -80(%rbp)
uuid_00000000000c9422:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9423
uuid_00000000000c9425:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	mov -248(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -240(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -232(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -224(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -216(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -208(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -200(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -80(%rbp), %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringHashtableEqU64TupleU64TupleU64String:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9467
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<Tuple<Tuple<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -96(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -112(%RBP), %R15
	mov -128(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<Tuple<String,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c945b
	jmp uuid_00000000000c945d
uuid_00000000000c945b:
	movq $1, -120(%rbp)
uuid_00000000000c945d:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c9461:
	mov -120(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9462
	jmp uuid_00000000000c9463
uuid_00000000000c9462:
	mov -128(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -96(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -128(%rbp)
	mov -112(%RBP), %R15
	mov -128(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<Tuple<String,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c945e
	jmp uuid_00000000000c9460
uuid_00000000000c945e:
	movq $1, -120(%rbp)
uuid_00000000000c9460:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9461
uuid_00000000000c9463:
	push %RBP
	mov -120(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9464
	jmp uuid_00000000000c9466
uuid_00000000000c9464:
	mov -176(%RBP), %RAX
	push %RAX
	movq -248(%rbp), %r15
	movq %r15, -80(%rbp)
	mov -248(%rbp), %r15
	mov %r15, -80(%rbp)
uuid_00000000000c9466:
	mov -240(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c9469
uuid_00000000000c9467:
uuid_00000000000c9469:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	mov -80(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c94a5
	jmp uuid_00000000000c94a7
uuid_00000000000c94a5:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9493
	jmp uuid_00000000000c9495
uuid_00000000000c9493:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c9490
	jmp uuid_00000000000c9492
uuid_00000000000c9490:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	jmp uuid_00000000000c948d
	jmp uuid_00000000000c948f
uuid_00000000000c948d:
	movb $1, -352(%rbp)
uuid_00000000000c948f:
	mov -384(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c9492:
	mov -368(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c9495:
	mov -360(%RBP),%RSP
	add $-408, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c94a2
	jmp uuid_00000000000c94a4
uuid_00000000000c94a2:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c949c
	jmp uuid_00000000000c949e
uuid_00000000000c949c:
	push %RBP
	mov -448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c9499
	jmp uuid_00000000000c949b
uuid_00000000000c9499:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	jmp uuid_00000000000c9496
	jmp uuid_00000000000c9498
uuid_00000000000c9496:
	movb $1, -464(%rbp)
uuid_00000000000c9498:
	mov -496(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c949b:
	mov -480(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c949e:
	mov -472(%RBP),%RSP
	add $-520, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c949f
	jmp uuid_00000000000c94a1
uuid_00000000000c949f:
	movb $1, -288(%rbp)
uuid_00000000000c94a1:
	mov -416(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c94a4:
	mov -304(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c94a7:
	mov -296(%RBP),%RSP
	add $-520, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c94ae
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c93b7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c94b0
uuid_00000000000c94ae:
	push %RBP
#call function == : Arrow<Cons<Tuple<String,U64>,Tuple<String,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c94ab
	jmp uuid_00000000000c94ad
uuid_00000000000c94ab:
	push %RBP
	mov -488(%RBP), %RAX
	mov -376(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c94a8
	jmp uuid_00000000000c94aa
uuid_00000000000c94a8:
	movq $1, -96(%rbp)
uuid_00000000000c94aa:
	mov -536(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c94ad:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c94b0:
	mov -192(%RBP),%RSP
	add $-536, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c94db
	jmp uuid_00000000000c94dd
uuid_00000000000c94db:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c94c9
	jmp uuid_00000000000c94cb
uuid_00000000000c94c9:
	push %RBP
	mov -224(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c94c6
	jmp uuid_00000000000c94c8
uuid_00000000000c94c6:
	push %RBP
	mov -216(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c94c3
	jmp uuid_00000000000c94c5
uuid_00000000000c94c3:
	movb $1, -240(%rbp)
uuid_00000000000c94c5:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c94c8:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c94cb:
	mov -248(%RBP),%RSP
	add $-280, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c94d8
	jmp uuid_00000000000c94da
uuid_00000000000c94d8:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c94d2
	jmp uuid_00000000000c94d4
uuid_00000000000c94d2:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c94cf
	jmp uuid_00000000000c94d1
uuid_00000000000c94cf:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c94cc
	jmp uuid_00000000000c94ce
uuid_00000000000c94cc:
	movb $1, -320(%rbp)
uuid_00000000000c94ce:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c94d1:
	mov -336(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c94d4:
	mov -328(%RBP),%RSP
	add $-360, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c94d5
	jmp uuid_00000000000c94d7
uuid_00000000000c94d5:
	movb $1, -192(%rbp)
uuid_00000000000c94d7:
	mov -288(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c94da:
	mov -208(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c94dd:
	mov -200(%RBP),%RSP
	add $-360, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c94e4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c93b7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c94e6
uuid_00000000000c94e4:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c94e1
	jmp uuid_00000000000c94e3
uuid_00000000000c94e1:
	push %RBP
	mov -344(%RBP), %RAX
	mov -264(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c94de
	jmp uuid_00000000000c94e0
uuid_00000000000c94de:
	movq $1, -64(%rbp)
uuid_00000000000c94e0:
	mov -376(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c94e3:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c94e6:
	mov -128(%RBP),%RSP
	add $-376, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
deep_SB_hash_CL_ArrowU64TupleU64TupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c94fd
	jmp uuid_00000000000c94ff
uuid_00000000000c94fd:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c94fa
	jmp uuid_00000000000c94fc
uuid_00000000000c94fa:
	push %RBP
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	jmp uuid_00000000000c94f7
	jmp uuid_00000000000c94f9
uuid_00000000000c94f7:
	movb $1, -152(%rbp)
uuid_00000000000c94f9:
	mov -184(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c94fc:
	mov -168(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c94ff:
	mov -160(%RBP),%RSP
	add $-208, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9500
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c93cc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c9502
uuid_00000000000c9500:
#call function deep-hash : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<Tuple<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000c9502:
	mov -104(%RBP),%RSP
	add $-208, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
deep_SB_hash_CL_ArrowU64TupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9511
	jmp uuid_00000000000c9513
uuid_00000000000c9511:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c950e
	jmp uuid_00000000000c9510
uuid_00000000000c950e:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c950b
	jmp uuid_00000000000c950d
uuid_00000000000c950b:
	movb $1, -104(%rbp)
uuid_00000000000c950d:
	mov -136(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000c9510:
	mov -120(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000c9513:
	mov -112(%RBP),%RSP
	add $-144, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9514
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c93cc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c9516
uuid_00000000000c9514:
#call function deep-hash : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c9516:
	mov -72(%RBP),%RSP
	add $-144, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqU64TupleU64TupleU64StringConsU64ConsTupleU64TupleU64StringHashtableEqU64TupleU64TupleU64String:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -104(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9562
	jmp uuid_00000000000c9564
uuid_00000000000c9562:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -96(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $56, %RAX
	mov -128(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $0
	pushq -136(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000c955f:
	mov -152(%RBP), %RAX
	mov -104(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9560
	jmp uuid_00000000000c9561
uuid_00000000000c9560:
	mov -112(%RBP), %R15
	mov -152(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c955c
	jmp uuid_00000000000c955e
uuid_00000000000c955c:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9556
	jmp uuid_00000000000c9558
uuid_00000000000c9556:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c9553
	jmp uuid_00000000000c9555
uuid_00000000000c9553:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	jmp uuid_00000000000c9550
	jmp uuid_00000000000c9552
uuid_00000000000c9550:
	movb $1, -344(%rbp)
uuid_00000000000c9552:
	mov -376(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c9555:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c9558:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9559
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c910c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c955b
uuid_00000000000c9559:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<Tuple<String,U64>,U64>,U64>,?>,U64>,Tuple<Tuple<String,U64>,U64>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -128(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringConsU64Array_QM_TupleU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c955b:
	pop %RAX
	mov -280(%RBP),%RSP
	add $-416, %RSP
	push %RAX
uuid_00000000000c955e:
	pop %RAX
	mov -216(%RBP),%RSP
	add $-416, %RSP
	mov -152(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -152(%rbp)
	add $56, %rsp
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c955f
uuid_00000000000c9561:
	movq -144(%rbp), %r15
	movq %r15, -112(%rbp)
	mov -144(%rbp), %r15
	mov %r15, -112(%rbp)
	movq -128(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -128(%rbp), %r15
	mov %r15, -104(%rbp)
uuid_00000000000c9564:
	mov -120(%RBP),%RSP
	add $-152, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<Tuple<String,U64>,U64>,U64>,?>,U64>,Tuple<Tuple<String,U64>,U64>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringConsU64Array_QM_TupleU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -160(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9565
	mov -96(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	jmp uuid_00000000000c9567
uuid_00000000000c9565:
uuid_00000000000c9567:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringConsU64Array_QM_TupleU64TupleU64TupleU64String:
	pushq $0
#call function deep-hash : Arrow<Tuple<Tuple<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -96(%RBP)
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<Tuple<String,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c958d
	jmp uuid_00000000000c958f
uuid_00000000000c958d:
	movq $1, -80(%rbp)
uuid_00000000000c958f:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c9593:
	mov -80(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9594
	jmp uuid_00000000000c9595
uuid_00000000000c9594:
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -88(%rbp)
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	pushq -96(%RBP)
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<Tuple<String,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9590
	jmp uuid_00000000000c9592
uuid_00000000000c9590:
	movq $1, -80(%rbp)
uuid_00000000000c9592:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9593
uuid_00000000000c9595:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	mov -248(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -240(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -232(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -224(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -216(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -208(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -200(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -80(%rbp), %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
non_SB_zero_CL_ArrowU64ListTupleTypeTupleStringString:
	mov $1, %RAX
	push %RAX
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
cons_CL_ArrowListTupleTypeTupleStringStringConsListTupleTypeTupleStringStringTupleTypeTupleStringString:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
#call function close : Arrow<List<Tuple<Tuple<String,String>,Type>>,Array<List<Tuple<Tuple<String,String>,Type>>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTupleTypeTupleStringStringListTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	subq $72, %rsp
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
close_CL_ArrowArray_QM_ListTupleTypeTupleStringStringListTupleTypeTupleStringString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_bind_CL_ArrowHashtableIsTypeASTConsTypeConsASTHashtableIsTypeAST:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -152(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9613
	jmp uuid_00000000000c9615
uuid_00000000000c9613:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -144(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $104, %RAX
	mov -176(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $0
	pushq -184(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000c9610:
	mov -200(%RBP), %RAX
	mov -152(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9611
	jmp uuid_00000000000c9612
uuid_00000000000c9611:
	mov -160(%RBP), %R15
	mov -200(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<104>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized104
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c960d
	jmp uuid_00000000000c960f
uuid_00000000000c960d:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9606
	jmp uuid_00000000000c9608
uuid_00000000000c9606:
	push %RBP
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	jmp uuid_00000000000c9603
	jmp uuid_00000000000c9605
uuid_00000000000c9603:
	push %RBP
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	jmp uuid_00000000000c9600
	jmp uuid_00000000000c9602
uuid_00000000000c9600:
	movb $1, -536(%rbp)
uuid_00000000000c9602:
	mov -584(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c9605:
	mov -552(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c9608:
	mov -544(%RBP),%RSP
	add $-656, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c960a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c9609
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c960c
uuid_00000000000c960a:
#call function .bind-is : Arrow<Cons<Cons<Cons<Array<Tuple<AST,Type>,?>,U64>,AST>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -176(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_is_CL_ArrowU64ConsTypeConsASTConsU64Array_QM_TupleTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c960c:
	pop %RAX
	mov -424(%RBP),%RSP
	add $-656, %RSP
	push %RAX
uuid_00000000000c960f:
	pop %RAX
	mov -312(%RBP),%RSP
	add $-656, %RSP
	mov -200(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -200(%rbp)
	add $104, %rsp
	add $104, %rsp
	add $104, %rsp
	add $8, %rsp
	add $24, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9610
uuid_00000000000c9612:
	movq -192(%rbp), %r15
	movq %r15, -160(%rbp)
	mov -192(%rbp), %r15
	mov %r15, -160(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -152(%rbp)
	mov -176(%rbp), %r15
	mov %r15, -152(%rbp)
uuid_00000000000c9615:
	mov -168(%RBP),%RSP
	add $-200, %RSP
#call function .bind-is : Arrow<Cons<Cons<Cons<Array<Tuple<AST,Type>,?>,U64>,AST>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_is_CL_ArrowU64ConsTypeConsASTConsU64Array_QM_TupleTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -208(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9616
	mov -144(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -144(%rbp)
	jmp uuid_00000000000c9618
uuid_00000000000c9616:
uuid_00000000000c9618:
	mov -216(%RBP),%RSP
	add $-216, %RSP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
_DT_bind_SB_is_CL_ArrowU64ConsTypeConsASTConsU64Array_QM_TupleTypeAST:
	pushq $0
#call function hash : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call hash_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c961d
	jmp uuid_00000000000c961f
uuid_00000000000c961d:
	movq $1, -128(%rbp)
uuid_00000000000c961f:
	mov -320(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c9623:
	mov -128(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<104>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized104
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9624
	jmp uuid_00000000000c9625
uuid_00000000000c9624:
	mov -136(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -136(%rbp)
	mov -8(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9620
	jmp uuid_00000000000c9622
uuid_00000000000c9620:
	movq $1, -128(%rbp)
uuid_00000000000c9622:
	mov -328(%RBP),%RSP
	add $-328, %RSP
	add $8, %RSP
	jmp uuid_00000000000c9623
uuid_00000000000c9625:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	mov -424(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -416(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -408(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -400(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -392(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -384(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -376(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -368(%RBP), %RAX
	mov %RAX, 56(%R15)
	mov -360(%RBP), %RAX
	mov %RAX, 64(%R15)
	mov -352(%RBP), %RAX
	mov %RAX, 72(%R15)
	mov -344(%RBP), %RAX
	mov %RAX, 80(%R15)
	mov -336(%RBP), %RAX
	mov %RAX, 88(%R15)
	mov -328(%RBP), %RAX
	mov %RAX, 96(%R15)
	mov -128(%rbp), %RAX
	mov %rbp, %rsp
	sub $120, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized104:
	pushq $0
	pushq $0
uuid_00000000000c9629:
	mov -120(%RBP), %RAX
	mov $104, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c962a
	jmp uuid_00000000000c962b
uuid_00000000000c962a:
	push %RBP
	mov %RBP, %R15
	add $-104, %R15
	mov -120(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9626
	jmp uuid_00000000000c9628
uuid_00000000000c9626:
	movq $1, -128(%rbp)
uuid_00000000000c9628:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	mov -120(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -120(%rbp)
	add $8, %RSP
	jmp uuid_00000000000c9629
uuid_00000000000c962b:
	mov -128(%rbp), %RAX
	mov %rbp, %rsp
	sub $112, %rsp
	ret
is_CL_ArrowU64ConsSized72Sized72:
	pushq $0
	pushq $1
uuid_00000000000c962f:
	mov $72, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -160(%RBP), %RAX
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9630
	jmp uuid_00000000000c9631
uuid_00000000000c9630:
	mov %RBP, %R15
	add $-72, %R15
	mov -160(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	mov %RBP, %R15
	add $-144, %R15
	mov -160(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	mov -176(%RBP), %RAX
	mov -184(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c962c
	movq $0, -168(%rbp)
	jmp uuid_00000000000c962e
uuid_00000000000c962c:
uuid_00000000000c962e:
	mov -192(%RBP),%RSP
	add $-192, %RSP
	mov -160(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -160(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c962f
uuid_00000000000c9631:
	mov -168(%rbp), %RAX
	mov %rbp, %rsp
	sub $152, %rsp
	ret
hash_CL_ArrowU64Sized72:
	pushq $0
	pushq $0
uuid_00000000000c9632:
	mov $72, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -88(%RBP), %RAX
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9633
	jmp uuid_00000000000c9634
uuid_00000000000c9633:
	mov %RBP, %R15
	add $-72, %R15
	mov -88(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	mov %R15, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -88(%rbp)
	mov -96(%RBP),%RAX
	shl $10,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%RBP),%RAX
	shr $6,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -96(%rbp)
	jmp uuid_00000000000c9632
uuid_00000000000c9634:
	mov -96(%RBP),%RAX
	shl $3,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%RBP),%RAX
	shr $11,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%RBP),%RAX
	shl $15,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_lookup_CL_ArrowTypeConsTypeConsASTHashtableIsTypeAST:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9651
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function hash : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call hash_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -144(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -160(%RBP), %R15
	mov -176(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9645
	jmp uuid_00000000000c9647
uuid_00000000000c9645:
	movq $1, -168(%rbp)
uuid_00000000000c9647:
	mov -360(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c964b:
	mov -168(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<104>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized104
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c964c
	jmp uuid_00000000000c964d
uuid_00000000000c964c:
	mov -176(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -144(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -176(%rbp)
	mov -160(%RBP), %R15
	mov -176(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9648
	jmp uuid_00000000000c964a
uuid_00000000000c9648:
	movq $1, -168(%rbp)
uuid_00000000000c964a:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	add $8, %RSP
	jmp uuid_00000000000c964b
uuid_00000000000c964d:
	push %RBP
	mov -168(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c964e
	jmp uuid_00000000000c9650
uuid_00000000000c964e:
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	movq -392(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -112(%rbp)
uuid_00000000000c9650:
	mov -368(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c9653
uuid_00000000000c9651:
uuid_00000000000c9653:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	subq $24, %rsp
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsListTypeListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9663
	jmp uuid_00000000000c9665
uuid_00000000000c9663:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9660
	jmp uuid_00000000000c9662
uuid_00000000000c9660:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c965d
	jmp uuid_00000000000c965f
uuid_00000000000c965d:
	movb $1, -288(%rbp)
uuid_00000000000c965f:
	mov -352(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c9662:
	mov -304(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c9665:
	mov -296(%RBP),%RSP
	add $-392, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c968e
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c967e
	jmp uuid_00000000000c9680
uuid_00000000000c967e:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c966c
	jmp uuid_00000000000c966e
uuid_00000000000c966c:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c9669
	jmp uuid_00000000000c966b
uuid_00000000000c9669:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c9666
	jmp uuid_00000000000c9668
uuid_00000000000c9666:
	movb $1, -560(%rbp)
uuid_00000000000c9668:
	mov -624(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c966b:
	mov -576(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c966e:
	mov -568(%RBP),%RSP
	add $-648, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c967b
	jmp uuid_00000000000c967d
uuid_00000000000c967b:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9675
	jmp uuid_00000000000c9677
uuid_00000000000c9675:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c9672
	jmp uuid_00000000000c9674
uuid_00000000000c9672:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000c966f
	jmp uuid_00000000000c9671
uuid_00000000000c966f:
	movb $1, -704(%rbp)
uuid_00000000000c9671:
	mov -768(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c9674:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c9677:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c9678
	jmp uuid_00000000000c967a
uuid_00000000000c9678:
	movb $1, -496(%rbp)
uuid_00000000000c967a:
	mov -656(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c967d:
	mov -512(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c9680:
	mov -504(%RBP),%RSP
	add $-792, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c968b
	push %RBP
	jmp uuid_00000000000c9688
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c480f
	pushq $uuid_00000000000c9687
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c968a
uuid_00000000000c9688:
uuid_00000000000c968a:
	mov -800(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000c968d
uuid_00000000000c968b:
	push %RBP
#call function == : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9684
	jmp uuid_00000000000c9686
uuid_00000000000c9684:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c9681
	jmp uuid_00000000000c9683
uuid_00000000000c9681:
	movq $1, -96(%rbp)
uuid_00000000000c9683:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c9686:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c968d:
	mov -400(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000c9690
uuid_00000000000c968e:
	movq $1, -96(%rbp)
uuid_00000000000c9690:
	mov -192(%RBP),%RSP
	add $-392, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
hash_CL_ArrowU64Sized8:
	pushq $0
	pushq $0
uuid_00000000000c9691:
	mov $8, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -24(%RBP), %RAX
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c9692
	jmp uuid_00000000000c9693
uuid_00000000000c9692:
	mov %RBP, %R15
	add $-8, %R15
	mov -24(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	mov %R15, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
	mov -32(%RBP),%RAX
	shl $10,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $6,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	jmp uuid_00000000000c9691
uuid_00000000000c9693:
	mov -32(%RBP),%RAX
	shl $3,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $11,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shl $15,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
.data
uuid_00000000000c480f:
	.ascii "Pattern Match Failure"
	.zero 1
uuid_00000000000c4810:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 83 Column: 5"
	.zero 1
uuid_00000000000c4871:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 99 Column: 5"
	.zero 1
uuid_00000000000c4881:
	.ascii "()"
	.zero 1
uuid_00000000000c4891:
	.ascii "("
	.zero 1
uuid_00000000000c4892:
	.ascii " "
	.zero 1
uuid_00000000000c4893:
	.ascii ")"
	.zero 1
uuid_00000000000c489a:
	.ascii "["
	.zero 1
uuid_00000000000c489b:
	.ascii "]"
	.zero 1
uuid_00000000000c489c:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 121 Column: 5"
	.zero 1
uuid_00000000000c48a9:
	.ascii " at "
	.zero 1
uuid_00000000000c48b5:
	.ascii "Unable to open file: "
	.zero 1
uuid_00000000000c48b6:
	.ascii "\n"
	.zero 1
uuid_00000000000c48ba:
	.ascii "File Read Error ["
	.zero 1
uuid_00000000000c48bb:
	.ascii "]: "
	.zero 1
uuid_00000000000c48d4:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 356 Column: 5"
	.zero 1
uuid_00000000000c48e4:
	.ascii "0"
	.zero 1
uuid_00000000000c48e8:
	.ascii "-"
	.zero 1
uuid_00000000000c48f8:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 465 Column: 8"
	.zero 1
uuid_00000000000c491d:
	.ascii "1"
	.zero 1
uuid_00000000000c491e:
	.ascii "2"
	.zero 1
uuid_00000000000c491f:
	.ascii "3"
	.zero 1
uuid_00000000000c4920:
	.ascii "4"
	.zero 1
uuid_00000000000c4921:
	.ascii "5"
	.zero 1
uuid_00000000000c4922:
	.ascii "6"
	.zero 1
uuid_00000000000c4923:
	.ascii "7"
	.zero 1
uuid_00000000000c4924:
	.ascii "8"
	.zero 1
uuid_00000000000c4925:
	.ascii "9"
	.zero 1
uuid_00000000000c4926:
	.ascii "a"
	.zero 1
uuid_00000000000c4927:
	.ascii "b"
	.zero 1
uuid_00000000000c4928:
	.ascii "c"
	.zero 1
uuid_00000000000c4929:
	.ascii "d"
	.zero 1
uuid_00000000000c492a:
	.ascii "e"
	.zero 1
uuid_00000000000c492b:
	.ascii "f"
	.zero 1
uuid_00000000000c492c:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 498 Column: 8"
	.zero 1
uuid_00000000000c4960:
	.ascii ""
	.zero 1
malloc_SB_block_SB_head_CL_U64:
.zero 8
malloc_SB_block_SB_tail_CL_U64:
.zero 8
malloc_SB_first_SB_free_CL_U64:
.zero 8
malloc_SB_page_SB_tail_CL_U64:
.zero 8
malloc_SB_large_SB_size_CL_U64:
.zero 8
point_SB_of_SB_interest_CL_U64:
.zero 8
rc_SB_magic_SB_number_CL_U64:
.zero 8
assemble_SB_header_SB_section_CL_SSCaseNumber3:
.zero 24
assemble_SB_text_SB_section_CL_SSCaseNumber3:
.zero 24
assemble_SB_init_SB_section_CL_SSCaseNumber3:
.zero 24
assemble_SB_data_SB_section_CL_SSCaseNumber3:
.zero 24
assemble_SB_profile_SB_onexit_CL_SSCaseNumber3:
.zero 24
assemble_SB_final_CL_String:
.zero 8
assemble_SB_argv_SB_referenced_CL_U8:
.zero 8
main_SB_with_SB_argv_CL_U8:
.zero 8
main_SB_with_CL_U8:
.zero 8
config_SB_platform_SB_prefix_CL_String:
.zero 8
uuid_00000000000c49b5:
	.ascii "PLATFORM/BLOB/"
	.zero 1
config_SB_profile_SB_invocations_CL_U8:
.zero 8
config_SB_strict_CL_U8:
.zero 8
config_SB_preprocess_CL_U8:
.zero 8
config_SB_target_CL_String:
.zero 8
config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber2:
.zero 8
config_SB_mode_CL_CompileModeCompileModeCaseNumber0:
.zero 8
preprocess_SB_macros_CL_MacroListMacroListCaseNumber1:
.zero 168
ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1:
.zero 72
ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10:
.zero 72
global_SB_type_SB_context_CL_TContextTContextCaseNumber2:
.zero 120
global_SB_ctx_CL_FContextFContextCaseNumber1:
.zero 200
parse_SB_suffixes_CL_SfxListSfxListCaseNumber1:
.zero 48
stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1:
.zero 200
uuid_00000000000c49be:
	.ascii "_EX_"
	.zero 1
uuid_00000000000c49bf:
	.ascii "_DL_"
	.zero 1
uuid_00000000000c49c0:
	.ascii "_MD_"
	.zero 1
uuid_00000000000c49c1:
	.ascii "_AM_"
	.zero 1
uuid_00000000000c49c2:
	.ascii "_ML_"
	.zero 1
uuid_00000000000c49c3:
	.ascii "_AD_"
	.zero 1
uuid_00000000000c49c4:
	.ascii "_SB_"
	.zero 1
uuid_00000000000c49c5:
	.ascii "_DT_"
	.zero 1
uuid_00000000000c49c6:
	.ascii "_DV_"
	.zero 1
uuid_00000000000c49c7:
	.ascii "_CL_"
	.zero 1
uuid_00000000000c49c8:
	.ascii "_SC_"
	.zero 1
uuid_00000000000c49c9:
	.ascii "_LT_"
	.zero 1
uuid_00000000000c49ca:
	.ascii "_EQ_"
	.zero 1
uuid_00000000000c49cb:
	.ascii "_GT_"
	.zero 1
uuid_00000000000c49cc:
	.ascii "_QM_"
	.zero 1
uuid_00000000000c49cd:
	.ascii "_AT_"
	.zero 1
uuid_00000000000c49ce:
	.ascii "_LB_"
	.zero 1
uuid_00000000000c49cf:
	.ascii "_RB_"
	.zero 1
uuid_00000000000c49d0:
	.ascii "_HT_"
	.zero 1
uuid_00000000000c49d1:
	.ascii "_US_"
	.zero 1
uuid_00000000000c49d2:
	.ascii "_TK_"
	.zero 1
uuid_00000000000c49d3:
	.ascii "_BR_"
	.zero 1
uuid_00000000000c49d4:
	.ascii "_TL_"
	.zero 1
uuid_00000000000c49d5:
	.ascii "File: SRC/mangle-identifier.lm Line: 10 Column: 8"
	.zero 1
uuid_00000000000c4a21:
	.ascii "?"
	.zero 1
uuid_00000000000c4a3a:
	.ascii "File: SRC/mangle-identifier.lm Line: 55 Column: 32"
	.zero 1
uuid_00000000000c4a4a:
	.ascii "File: SRC/mangle-identifier.lm Line: 49 Column: 5"
	.zero 1
uuid_00000000000c4a69:
	.ascii "Nil"
	.zero 1
uuid_00000000000c4a73:
	.ascii "void"
	.zero 1
uuid_00000000000c4a74:
	.ascii "U8"
	.zero 1
uuid_00000000000c4a7e:
	.ascii "unsigned char"
	.zero 1
uuid_00000000000c4a7f:
	.ascii "U16"
	.zero 1
uuid_00000000000c4a89:
	.ascii "unsigned short"
	.zero 1
uuid_00000000000c4a8a:
	.ascii "U32"
	.zero 1
uuid_00000000000c4a94:
	.ascii "unsigned int"
	.zero 1
uuid_00000000000c4a95:
	.ascii "U64"
	.zero 1
uuid_00000000000c4a9f:
	.ascii "unsigned long"
	.zero 1
uuid_00000000000c4aa0:
	.ascii "I8"
	.zero 1
uuid_00000000000c4aaa:
	.ascii "signed char"
	.zero 1
uuid_00000000000c4aab:
	.ascii "I16"
	.zero 1
uuid_00000000000c4ab5:
	.ascii "signed short"
	.zero 1
uuid_00000000000c4ab6:
	.ascii "I32"
	.zero 1
uuid_00000000000c4ac0:
	.ascii "signed int"
	.zero 1
uuid_00000000000c4ac1:
	.ascii "I64"
	.zero 1
uuid_00000000000c4acb:
	.ascii "signed long"
	.zero 1
uuid_00000000000c4acc:
	.ascii "String"
	.zero 1
uuid_00000000000c4ad6:
	.ascii "char*"
	.zero 1
uuid_00000000000c4ae9:
	.ascii "Array"
	.zero 1
uuid_00000000000c4af3:
	.ascii "*"
	.zero 1
uuid_00000000000c4afd:
	.ascii "File: SRC/mangle-c-type.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c4b2b:
	.ascii "\\"
	.zero 1
uuid_00000000000c4b2c:
	.ascii "Illegal Character: "
	.zero 1
uuid_00000000000c4b2d:
	.ascii "Illegal Escape Sequence In String "
	.zero 1
uuid_00000000000c4b2e:
	.ascii "File: SRC/escape-string.lm Line: 12 Column: 11"
	.zero 1
uuid_00000000000c4b53:
	.ascii "\\\\\""
	.zero 1
uuid_00000000000c4b54:
	.ascii ";"
	.zero 1
uuid_00000000000c4b55:
	.ascii "\\\\\\\\"
	.zero 1
uuid_00000000000c4b56:
	.ascii "'"
	.zero 1
uuid_00000000000c4b57:
	.ascii "λ"
	.zero 1
uuid_00000000000c4b58:
	.ascii "\\\\n"
	.zero 1
uuid_00000000000c4b59:
	.ascii "#"
	.zero 1
uuid_00000000000c4b5a:
	.ascii "	"
	.zero 1
uuid_00000000000c4b5b:
	.ascii "File: SRC/escape-string.lm Line: 50 Column: 14"
	.zero 1
uuid_00000000000c4b7d:
	.ascii "\\\\"
	.zero 1
uuid_00000000000c4b81:
	.ascii "\\n"
	.zero 1
uuid_00000000000c4b82:
	.ascii "File: SRC/escape-string.lm Line: 45 Column: 8"
	.zero 1
uuid_00000000000c4ba1:
	.ascii "File: SRC/escape-string.lm Line: 85 Column: 5"
	.zero 1
uuid_00000000000c4bba:
	.ascii "as"
	.zero 1
uuid_00000000000c4bcd:
	.ascii "In Coercion\n"
	.zero 1
uuid_00000000000c4bce:
	.ascii ":\n"
	.zero 1
uuid_00000000000c4bcf:
	.ascii "As: "
	.zero 1
uuid_00000000000c4bd9:
	.ascii "In Function Application\n"
	.zero 1
uuid_00000000000c4bda:
	.ascii "Return:\n"
	.zero 1
uuid_00000000000c4bdb:
	.ascii "File: SRC/error-formatting.lm Line: 12 Column: 5"
	.zero 1
uuid_00000000000c4be5:
	.ascii "."
	.zero 1
uuid_00000000000c4bef:
	.ascii "File: SRC/is-variable.lm Line: 9 Column: 5"
	.zero 1
uuid_00000000000c4c83:
	.ascii "@"
	.zero 1
uuid_00000000000c4c87:
	.ascii "Used"
	.zero 1
uuid_00000000000c4c88:
	.ascii "Unused"
	.zero 1
uuid_00000000000c4c89:
	.ascii "Return"
	.zero 1
uuid_00000000000c4c8a:
	.ascii "Tail"
	.zero 1
uuid_00000000000c4c8b:
	.ascii "Call"
	.zero 1
uuid_00000000000c4c8c:
	.ascii "File: SRC/to-string.lm Line: 9 Column: 5"
	.zero 1
uuid_00000000000c4cb2:
	.ascii ","
	.zero 1
uuid_00000000000c4cb3:
	.ascii "File: SRC/to-string.lm Line: 27 Column: 5"
	.zero 1
uuid_00000000000c4ccc:
	.ascii "+"
	.zero 1
uuid_00000000000c4cdf:
	.ascii "..."
	.zero 1
uuid_00000000000c4cf2:
	.ascii "<"
	.zero 1
uuid_00000000000c4cf3:
	.ascii ">"
	.zero 1
uuid_00000000000c4cf4:
	.ascii "File: SRC/to-string.lm Line: 46 Column: 5"
	.zero 1
uuid_00000000000c4d67:
	.ascii "File: SRC/is-equal.lm Line: 4 Column: 5"
	.zero 1
type_SB_index_CL_HashtableIsTypeAST:
.zero 32
uuid_00000000000c4d92:
	.ascii "GlobalVariable"
	.zero 1
uuid_00000000000c4d93:
	.ascii "mov"
	.zero 1
uuid_00000000000c4d94:
	.ascii "Cons"
	.zero 1
uuid_00000000000c4db3:
	.ascii ":"
	.zero 1
uuid_00000000000c4dde:
	.ascii "File: SRC/infer-expr.lm Line: 28 Column: 11"
	.zero 1
uuid_00000000000c4e0f:
	.ascii "File: SRC/infer-expr.lm Line: 57 Column: 14"
	.zero 1
uuid_00000000000c4e1f:
	.ascii "gensym-label"
	.zero 1
uuid_00000000000c4e32:
	.ascii "Label"
	.zero 1
uuid_00000000000c4e3c:
	.ascii "label"
	.zero 1
uuid_00000000000c4e4f:
	.ascii "if"
	.zero 1
uuid_00000000000c4ea1:
	.ascii "Reg8"
	.zero 1
uuid_00000000000c4ea5:
	.ascii "Reg16"
	.zero 1
uuid_00000000000c4ea9:
	.ascii "Reg32"
	.zero 1
uuid_00000000000c4ead:
	.ascii "Reg64"
	.zero 1
uuid_00000000000c4eb1:
	.ascii "File: SRC/infer-expr.lm Line: 89 Column: 11"
	.zero 1
uuid_00000000000c4ec7:
	.ascii "sizeof"
	.zero 1
uuid_00000000000c4ee3:
	.ascii "File: SRC/infer-expr.lm Line: 115 Column: 11"
	.zero 1
uuid_00000000000c4ee7:
	.ascii "scope"
	.zero 1
uuid_00000000000c4efa:
	.ascii "open"
	.zero 1
uuid_00000000000c4f43:
	.ascii "push-deref"
	.zero 1
uuid_00000000000c4f44:
	.ascii "StackVariable"
	.zero 1
uuid_00000000000c4f45:
	.ascii "File: SRC/infer-expr.lm Line: 127 Column: 11"
	.zero 1
uuid_00000000000c4f6d:
	.ascii "Variable Name Is Already Bound In Outer Scope"
	.zero 1
uuid_00000000000c4f74:
	.ascii "Unable to infer type of expression"
	.zero 1
uuid_00000000000c4f8d:
	.ascii "File: SRC/infer-expr.lm Line: 151 Column: 11"
	.zero 1
uuid_00000000000c4f91:
	.ascii "del"
	.zero 1
uuid_00000000000c4fb3:
	.ascii "File: SRC/infer-expr.lm Line: 169 Column: 11"
	.zero 1
uuid_00000000000c4fbd:
	.ascii "Rc"
	.zero 1
uuid_00000000000c4fbe:
	.ascii "inc"
	.zero 1
uuid_00000000000c4fbf:
	.ascii "Tuple"
	.zero 1
uuid_00000000000c4fcc:
	.ascii "Constructor"
	.zero 1
uuid_00000000000c4fcd:
	.ascii "CaseNumber"
	.zero 1
uuid_00000000000c4fce:
	.ascii "Sized"
	.zero 1
uuid_00000000000c4fcf:
	.ascii "FieldsSized"
	.zero 1
uuid_00000000000c4fd0:
	.ascii "push"
	.zero 1
uuid_00000000000c4fd1:
	.ascii "File: SRC/infer-expr.lm Line: 213 Column: 14"
	.zero 1
uuid_00000000000c5008:
	.ascii "File: SRC/infer-expr.lm Line: 231 Column: 14"
	.zero 1
uuid_00000000000c500f:
	.ascii "Arrow"
	.zero 1
uuid_00000000000c5010:
	.ascii "cdecl::return"
	.zero 1
uuid_00000000000c5038:
	.ascii "Unknown Term In Type Inference\n"
	.zero 1
uuid_00000000000c5039:
	.ascii "File: SRC/infer-expr.lm Line: 8 Column: 5"
	.zero 1
alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1:
.zero 72
uuid_00000000000c50f4:
	.ascii "File: SRC/alias.lm Line: 11 Column: 8"
	.zero 1
uuid_00000000000c50f8:
	.ascii "File: SRC/alias.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000c5138:
	.ascii "File: SRC/alias.lm Line: 31 Column: 8"
	.zero 1
uuid_00000000000c513c:
	.ascii "File: SRC/alias.lm Line: 30 Column: 5"
	.zero 1
class_SB_exists_SB_index_CL_HashtableEqU64String:
.zero 32
parameter_SB_is_SB_flat_SB_index_CL_HashtableEqU64TupleU64TupleU64String:
.zero 32
is_SB_special_SB_index_CL_HashtableEqU64TupleTypeString:
.zero 32
lone_SB_index_CL_HashtableEqU64String:
.zero 32
tag_SB_is_SB_fragment_SB_index_CL_HashtableEqU64String:
.zero 32
global_SB_symbol_SB_registry_CL_HashtableEqU64TupleTypeString:
.zero 32
uuid_00000000000c5143:
	.ascii "Duplicate Global Symbol "
	.zero 1
uuid_00000000000c5144:
	.ascii " : "
	.zero 1
class_SB_to_SB_only_SB_child_CL_HashtableEqStringString:
.zero 32
tag_SB_to_SB_index_SB_index_CL_HashtableEqU64String:
.zero 32
unknown_SB_index_SB_of_SB_tag_CL_U64:
.zero 8
class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0:
.zero 48
tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString:
.zero 32
uuid_00000000000c5169:
	.ascii "Unexpected Class In index-class-of-tag: "
	.zero 1
uuid_00000000000c516a:
	.ascii "File: SRC/class-of-tag.lm Line: 6 Column: 5"
	.zero 1
class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String:
.zero 32
tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString:
.zero 32
uuid_00000000000c5183:
	.ascii "Tag"
	.zero 1
uuid_00000000000c519f:
	.ascii "File: SRC/fields-of-tag.lm Line: 17 Column: 64"
	.zero 1
uuid_00000000000c51a6:
	.ascii "Invalid Tag In fields-of-tag "
	.zero 1
uuid_00000000000c51a7:
	.ascii "File: SRC/fields-of-tag.lm Line: 15 Column: 5"
	.zero 1
uuid_00000000000c51ae:
	.ascii "Fields"
	.zero 1
type_SB_constructors_SB_index_CL_HashtableEqTypeString:
.zero 32
type_SB_complex_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString:
.zero 32
uuid_00000000000c51c0:
	.ascii "ERROR: set-type-fields\n"
	.zero 1
uuid_00000000000c51c1:
	.ascii "File: SRC/type-complex-fields.lm Line: 6 Column: 5"
	.zero 1
uuid_00000000000c51e9:
	.ascii "File: SRC/get-vararg-inner.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c51f3:
	.ascii "LocalVariable"
	.zero 1
uuid_00000000000c521b:
	.ascii "File: SRC/is-constructor.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c523d:
	.ascii "File: SRC/is-constructor.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000c5259:
	.ascii "File: SRC/is-constructor.lm Line: 28 Column: 5"
	.zero 1
uuid_00000000000c52c0:
	.ascii "Field"
	.zero 1
uuid_00000000000c52df:
	.ascii "File: SRC/is-open.lm Line: 16 Column: 11"
	.zero 1
uuid_00000000000c52e6:
	.ascii "File: SRC/is-open.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c530e:
	.ascii "File: SRC/is-vararg.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c5339:
	.ascii "File: SRC/is-parameterized.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c5367:
	.ascii "File: SRC/is-sized.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c5383:
	.ascii "Constant"
	.zero 1
uuid_00000000000c53ba:
	.ascii "File: SRC/has-representation.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c53d3:
	.ascii "File: SRC/guess-representation.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000c5404:
	.ascii "File: SRC/deep-hash.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c541e:
	.ascii "File: SRC/deep-hash.lm Line: 26 Column: 5"
	.zero 1
uuid_00000000000c5425:
	.ascii " != "
	.zero 1
uuid_00000000000c5426:
	.ascii "Type Ascription Inequality"
	.zero 1
uuid_00000000000c543f:
	.ascii "File: SRC/typeof.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c544f:
	.ascii "Var"
	.zero 1
uuid_00000000000c5459:
	.ascii "Lit"
	.zero 1
uuid_00000000000c54a5:
	.ascii "App"
	.zero 1
uuid_00000000000c54b2:
	.ascii "Abs"
	.zero 1
uuid_00000000000c54b3:
	.ascii "File: SRC/to-s.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c54ea:
	.ascii "File: SRC/p.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c5503:
	.ascii "File: SRC/and.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c551c:
	.ascii "File: SRC/union.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c5535:
	.ascii "File: SRC/union.lm Line: 21 Column: 8"
	.zero 1
uuid_00000000000c554e:
	.ascii "program"
	.zero 1
uuid_00000000000c554f:
	.ascii "File: SRC/union.lm Line: 36 Column: 28"
	.zero 1
uuid_00000000000c5562:
	.ascii "File: SRC/tag-of.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c559c:
	.ascii "File: SRC/can-unify.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c55b8:
	.ascii "Meta"
	.zero 1
uuid_00000000000c572a:
	.ascii "GT"
	.zero 1
uuid_00000000000c575e:
	.ascii "File: SRC/can-unify.lm Line: 21 Column: 5"
	.zero 1
uuid_00000000000c5801:
	.ascii "File: SRC/unify.lm Line: 37 Column: 11"
	.zero 1
uuid_00000000000c5841:
	.ascii "File: SRC/unify.lm Line: 47 Column: 11"
	.zero 1
uuid_00000000000c59a1:
	.ascii "File: SRC/unify.lm Line: 12 Column: 5"
	.zero 1
uuid_00000000000c59fc:
	.ascii "File: SRC/unify.lm Line: 130 Column: 5"
	.zero 1
uuid_00000000000c5a31:
	.ascii "File: SRC/fields-of-type.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c5ada:
	.ascii "File: SRC/sizeof-type.lm Line: 25 Column: 11"
	.zero 1
uuid_00000000000c5aed:
	.ascii "Unexpected Type sizeof-type "
	.zero 1
uuid_00000000000c5aee:
	.ascii "File: SRC/sizeof-type.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c5b24:
	.ascii "File: SRC/has-infinite.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c5b7c:
	.ascii "File: SRC/has-infinite.lm Line: 26 Column: 5"
	.zero 1
uuid_00000000000c5b9f:
	.ascii "File: SRC/has-forward.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c5be8:
	.ascii "File: SRC/has-forward.lm Line: 19 Column: 5"
	.zero 1
uuid_00000000000c5bfb:
	.ascii "AL"
	.zero 1
uuid_00000000000c5bfc:
	.ascii "BL"
	.zero 1
uuid_00000000000c5bfd:
	.ascii "CL"
	.zero 1
uuid_00000000000c5bfe:
	.ascii "DL"
	.zero 1
uuid_00000000000c5bff:
	.ascii "SIL"
	.zero 1
uuid_00000000000c5c00:
	.ascii "DIL"
	.zero 1
uuid_00000000000c5c01:
	.ascii "BPL"
	.zero 1
uuid_00000000000c5c02:
	.ascii "SPL"
	.zero 1
uuid_00000000000c5c03:
	.ascii "R8B"
	.zero 1
uuid_00000000000c5c04:
	.ascii "R9B"
	.zero 1
uuid_00000000000c5c05:
	.ascii "R10B"
	.zero 1
uuid_00000000000c5c06:
	.ascii "R11B"
	.zero 1
uuid_00000000000c5c07:
	.ascii "R12B"
	.zero 1
uuid_00000000000c5c08:
	.ascii "R13B"
	.zero 1
uuid_00000000000c5c09:
	.ascii "R14B"
	.zero 1
uuid_00000000000c5c0a:
	.ascii "R15B"
	.zero 1
uuid_00000000000c5c0b:
	.ascii "File: SRC/is-reg8.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c5c51:
	.ascii "File: SRC/is-reg8.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000c5c5b:
	.ascii "AX"
	.zero 1
uuid_00000000000c5c5c:
	.ascii "BX"
	.zero 1
uuid_00000000000c5c5d:
	.ascii "CX"
	.zero 1
uuid_00000000000c5c5e:
	.ascii "DX"
	.zero 1
uuid_00000000000c5c5f:
	.ascii "SI"
	.zero 1
uuid_00000000000c5c60:
	.ascii "DI"
	.zero 1
uuid_00000000000c5c61:
	.ascii "BP"
	.zero 1
uuid_00000000000c5c62:
	.ascii "SP"
	.zero 1
uuid_00000000000c5c63:
	.ascii "R8W"
	.zero 1
uuid_00000000000c5c64:
	.ascii "R9W"
	.zero 1
uuid_00000000000c5c65:
	.ascii "R10W"
	.zero 1
uuid_00000000000c5c66:
	.ascii "R11W"
	.zero 1
uuid_00000000000c5c67:
	.ascii "R12W"
	.zero 1
uuid_00000000000c5c68:
	.ascii "R13W"
	.zero 1
uuid_00000000000c5c69:
	.ascii "R14W"
	.zero 1
uuid_00000000000c5c6a:
	.ascii "R15W"
	.zero 1
uuid_00000000000c5c6b:
	.ascii "File: SRC/is-reg16.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c5cb1:
	.ascii "File: SRC/is-reg16.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000c5cbb:
	.ascii "EAX"
	.zero 1
uuid_00000000000c5cbc:
	.ascii "EBX"
	.zero 1
uuid_00000000000c5cbd:
	.ascii "ECX"
	.zero 1
uuid_00000000000c5cbe:
	.ascii "EDX"
	.zero 1
uuid_00000000000c5cbf:
	.ascii "ESI"
	.zero 1
uuid_00000000000c5cc0:
	.ascii "EDI"
	.zero 1
uuid_00000000000c5cc1:
	.ascii "EBP"
	.zero 1
uuid_00000000000c5cc2:
	.ascii "ESP"
	.zero 1
uuid_00000000000c5cc3:
	.ascii "R8D"
	.zero 1
uuid_00000000000c5cc4:
	.ascii "R9D"
	.zero 1
uuid_00000000000c5cc5:
	.ascii "R10D"
	.zero 1
uuid_00000000000c5cc6:
	.ascii "R11D"
	.zero 1
uuid_00000000000c5cc7:
	.ascii "R12D"
	.zero 1
uuid_00000000000c5cc8:
	.ascii "R13D"
	.zero 1
uuid_00000000000c5cc9:
	.ascii "R14D"
	.zero 1
uuid_00000000000c5cca:
	.ascii "R15D"
	.zero 1
uuid_00000000000c5ccb:
	.ascii "File: SRC/is-reg32.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c5d11:
	.ascii "File: SRC/is-reg32.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000c5d1b:
	.ascii "RAX"
	.zero 1
uuid_00000000000c5d1c:
	.ascii "RBX"
	.zero 1
uuid_00000000000c5d1d:
	.ascii "RCX"
	.zero 1
uuid_00000000000c5d1e:
	.ascii "RDX"
	.zero 1
uuid_00000000000c5d1f:
	.ascii "RSI"
	.zero 1
uuid_00000000000c5d20:
	.ascii "RDI"
	.zero 1
uuid_00000000000c5d21:
	.ascii "RBP"
	.zero 1
uuid_00000000000c5d22:
	.ascii "RSP"
	.zero 1
uuid_00000000000c5d23:
	.ascii "R8"
	.zero 1
uuid_00000000000c5d24:
	.ascii "R9"
	.zero 1
uuid_00000000000c5d25:
	.ascii "R10"
	.zero 1
uuid_00000000000c5d26:
	.ascii "R11"
	.zero 1
uuid_00000000000c5d27:
	.ascii "R12"
	.zero 1
uuid_00000000000c5d28:
	.ascii "R13"
	.zero 1
uuid_00000000000c5d29:
	.ascii "R14"
	.zero 1
uuid_00000000000c5d2a:
	.ascii "R15"
	.zero 1
uuid_00000000000c5d2b:
	.ascii "File: SRC/is-reg64.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c5d71:
	.ascii "File: SRC/is-reg64.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000c5d87:
	.ascii "File: SRC/with-tag.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000c5daf:
	.ascii "File: SRC/with-size.lm Line: 8 Column: 5"
	.zero 1
uuid_00000000000c5dc3:
	.ascii "File: SRC/with-size.lm Line: 19 Column: 5"
	.zero 1
uuid_00000000000c5e09:
	.ascii "File: SRC/with-size.lm Line: 30 Column: 5"
	.zero 1
uuid_00000000000c5e2e:
	.ascii "File: SRC/with-fields.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c5e3e:
	.ascii "LMStruct"
	.zero 1
uuid_00000000000c5e42:
	.ascii "File: SRC/with-platform-props.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000c5e70:
	.ascii "File: SRC/without-tag.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000c5e9e:
	.ascii "File: SRC/without-tag.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c5ebe:
	.ascii "File: SRC/without-tag.lm Line: 27 Column: 5"
	.zero 1
uuid_00000000000c5ee6:
	.ascii "File: SRC/without-constructor.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c5f00:
	.ascii "File: SRC/without-representation.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c5f22:
	.ascii "Literal"
	.zero 1
uuid_00000000000c5f7a:
	.ascii "File: SRC/without-representation.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000c5faf:
	.ascii "File: SRC/without-size-unless-class.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c5fd7:
	.ascii "File: SRC/without-size-unless-class.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000c6017:
	.ascii "File: SRC/without-size-unless-class.lm Line: 46 Column: 5"
	.zero 1
uuid_00000000000c6037:
	.ascii "File: SRC/without-size.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c6071:
	.ascii "File: SRC/without-size.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000c60ae:
	.ascii "File: SRC/without-platform-props.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c60d6:
	.ascii "File: SRC/with-only-tag.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c60fe:
	.ascii "File: SRC/with-only-class.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c6115:
	.ascii "File: SRC/with-only-representation.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c618e:
	.ascii "File: SRC/with-only-representation.lm Line: 19 Column: 5"
	.zero 1
uuid_00000000000c61c5:
	.ascii "File: SRC/normalize.lm Line: 13 Column: 5"
	.zero 1
uuid_00000000000c61ff:
	.ascii "Malformed Type Definition"
	.zero 1
uuid_00000000000c6200:
	.ascii "File: SRC/type-of-s.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c6228:
	.ascii "Mark Field "
	.zero 1
uuid_00000000000c6229:
	.ascii "File: SRC/type-of-s-with-fields.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000c624b:
	.ascii "File: SRC/type-of-s-with-fields.lm Line: 25 Column: 11"
	.zero 1
uuid_00000000000c626d:
	.ascii "File: SRC/type-of-s-with-fields.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c62c5:
	.ascii "Unknown LHS"
	.zero 1
uuid_00000000000c62c6:
	.ascii "File: SRC/typeof-lhs.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c62ee:
	.ascii "File: SRC/cons-head.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c6310:
	.ascii "File: SRC/cons-tail.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c6320:
	.ascii "File: SRC/parameter-number.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c633f:
	.ascii "File: SRC/parameter-number.lm Line: 16 Column: 5"
	.zero 1
uuid_00000000000c6349:
	.ascii "Function Application Yielded No Matches\n"
	.zero 1
uuid_00000000000c634a:
	.ascii "\nWith Argument : "
	.zero 1
uuid_00000000000c634b:
	.ascii "Options: "
	.zero 1
uuid_00000000000c634f:
	.ascii "Function Application Yielded An Irreducible Plurality Of Matches\n"
	.zero 1
uuid_00000000000c6350:
	.ascii "With Argument "
	.zero 1
uuid_00000000000c6351:
	.ascii "Matched "
	.zero 1
uuid_00000000000c635b:
	.ascii "File: SRC/apply.lm Line: 30 Column: 11"
	.zero 1
uuid_00000000000c6389:
	.ascii "Application Did Not Close Before Specialization:\n"
	.zero 1
uuid_00000000000c638a:
	.ascii "Function "
	.zero 1
uuid_00000000000c638b:
	.ascii "Argument "
	.zero 1
uuid_00000000000c6392:
	.ascii "Function Not Simple Arrow: "
	.zero 1
uuid_00000000000c6393:
	.ascii "File: SRC/apply.lm Line: 42 Column: 8"
	.zero 1
uuid_00000000000c639a:
	.ascii "File: SRC/apply.lm Line: 41 Column: 5"
	.zero 1
uuid_00000000000c63c8:
	.ascii "File: SRC/apply.lm Line: 81 Column: 33"
	.zero 1
uuid_00000000000c6402:
	.ascii "File: SRC/apply.lm Line: 72 Column: 5"
	.zero 1
uuid_00000000000c644c:
	.ascii "File: SRC/apply-plural.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c646a:
	.ascii "File: SRC/reduce-plural.lm Line: 5 Column: 41"
	.zero 1
uuid_00000000000c648c:
	.ascii "File: SRC/reduce-plural.lm Line: 19 Column: 11"
	.zero 1
uuid_00000000000c6496:
	.ascii "File: SRC/reduce-plural.lm Line: 15 Column: 27"
	.zero 1
uuid_00000000000c64b5:
	.ascii "File: SRC/reduce-plural.lm Line: 37 Column: 11"
	.zero 1
uuid_00000000000c64bf:
	.ascii "File: SRC/reduce-plural.lm Line: 33 Column: 27"
	.zero 1
uuid_00000000000c64fb:
	.ascii "File: SRC/try-specialize.lm Line: 17 Column: 20"
	.zero 1
uuid_00000000000c650b:
	.ascii "File: SRC/try-specialize.lm Line: 5 Column: 35"
	.zero 1
uuid_00000000000c6545:
	.ascii "File: SRC/unify-hint.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c655c:
	.ascii "File: SRC/unify-hint.lm Line: 24 Column: 5"
	.zero 1
uuid_00000000000c6566:
	.ascii "|"
	.zero 1
uuid_00000000000c659d:
	.ascii "File: SRC/infer-type-definition.lm Line: 19 Column: 14"
	.zero 1
uuid_00000000000c65b0:
	.ascii "File: SRC/infer-type-definition.lm Line: 26 Column: 17"
	.zero 1
uuid_00000000000c65ba:
	.ascii "File: SRC/infer-type-definition.lm Line: 8 Column: 5"
	.zero 1
uuid_00000000000c65ce:
	.ascii "File: SRC/arity.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c65de:
	.ascii "File: SRC/arity.lm Line: 16 Column: 5"
	.zero 1
uuid_00000000000c6600:
	.ascii "File: SRC/cons-arity.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c6628:
	.ascii "File: SRC/implicit-tail.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c662f:
	.ascii "Unknown Referenced Variable"
	.zero 1
uuid_00000000000c664e:
	.ascii "File: SRC/typeof-var-raw.lm Line: 4 Column: 28"
	.zero 1
types_SB_have_SB_changed_CL_U8:
.zero 8
uuid_00000000000c6661:
	.ascii "File: SRC/typecheck.lm Line: 7 Column: 25"
	.zero 1
uuid_00000000000c6671:
	.ascii "File: SRC/typecheck.lm Line: 14 Column: 42"
	.zero 1
uuid_00000000000c66a0:
	.ascii "File: SRC/typecheck.lm Line: 22 Column: 43"
	.zero 1
uuid_00000000000c66e3:
	.ascii "File: SRC/substitute.lm Line: 4 Column: 27"
	.zero 1
uuid_00000000000c6700:
	.ascii "File: SRC/substitute.lm Line: 27 Column: 5"
	.zero 1
uuid_00000000000c671f:
	.ascii "File: SRC/substitute.lm Line: 44 Column: 34"
	.zero 1
uuid_00000000000c673b:
	.ascii "File: SRC/substitute.lm Line: 41 Column: 5"
	.zero 1
uuid_00000000000c6755:
	.ascii "File: SRC/substitute.lm Line: 73 Column: 5"
	.zero 1
uuid_00000000000c679e:
	.ascii "File: SRC/substitute.lm Line: 90 Column: 34"
	.zero 1
uuid_00000000000c67c0:
	.ascii "File: SRC/substitute.lm Line: 87 Column: 5"
	.zero 1
uuid_00000000000c6845:
	.ascii "Unexpected Substitute LHS"
	.zero 1
uuid_00000000000c6846:
	.ascii "File: SRC/substitute.lm Line: 128 Column: 5"
	.zero 1
uuid_00000000000c6895:
	.ascii "File: SRC/substitute.lm Line: 168 Column: 34"
	.zero 1
uuid_00000000000c68db:
	.ascii "File: SRC/substitute.lm Line: 187 Column: 34"
	.zero 1
uuid_00000000000c692d:
	.ascii "Unexpected Substitution Term:"
	.zero 1
uuid_00000000000c692e:
	.ascii "File: SRC/substitute.lm Line: 159 Column: 5"
	.zero 1
uuid_00000000000c696b:
	.ascii "File: SRC/substitute.lm Line: 247 Column: 34"
	.zero 1
uuid_00000000000c697b:
	.ascii "File: SRC/substitute.lm Line: 243 Column: 5"
	.zero 1
uuid_00000000000c69a9:
	.ascii "File: SRC/specialize.lm Line: 14 Column: 20"
	.zero 1
uuid_00000000000c69b6:
	.ascii "File: SRC/specialize.lm Line: 7 Column: 38"
	.zero 1
uuid_00000000000c69d7:
	.ascii "File: SRC/mark-constructor-flat-parameters.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c6a08:
	.ascii "File: SRC/mark-constructor-flat-parameters.lm Line: 16 Column: 5"
	.zero 1
uuid_00000000000c6a30:
	.ascii "Size Of Type Cannot Be Determined Due To Forward Reference: "
	.zero 1
uuid_00000000000c6a34:
	.ascii "Size Of Type Is Infinite: "
	.zero 1
uuid_00000000000c6a38:
	.ascii "File: SRC/infer-type-constructor.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c6a5d:
	.ascii "File: SRC/infer-global-context.lm Line: 9 Column: 11"
	.zero 1
uuid_00000000000c6aa9:
	.ascii "Hooks Must Not Return Values."
	.zero 1
uuid_00000000000c6aec:
	.ascii "Global Bindings Must Be Ascripted"
	.zero 1
uuid_00000000000c6aed:
	.ascii "File: SRC/infer-global-context.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c6b06:
	.ascii "File: SRC/assert-well-typed.lm Line: 3 Column: 26"
	.zero 1
uuid_00000000000c6bd3:
	.ascii "set"
	.zero 1
uuid_00000000000c6c4f:
	.ascii "Unknown Term In Assert Well Typed "
	.zero 1
uuid_00000000000c6c50:
	.ascii "File: SRC/assert-well-typed.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000c6cf0:
	.ascii "Invalid LHS"
	.zero 1
uuid_00000000000c6cf1:
	.ascii "File: SRC/infer-ctx.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c6d0b:
	.ascii "File: SRC/infer-tctx.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c6d2a:
	.ascii "File: SRC/infer-tctx.lm Line: 15 Column: 5"
	.zero 1
uuid_00000000000c6d37:
	.ascii "	mov $60, %rax\n"
	.zero 1
uuid_00000000000c6d38:
	.ascii "	mov $0, %rdi\n"
	.zero 1
uuid_00000000000c6d39:
	.ascii "	syscall\n"
	.zero 1
uuid_00000000000c6d3a:
	.ascii ".data\n"
	.zero 1
uuid_00000000000c6d3b:
	.ascii ".global _start\n"
	.zero 1
uuid_00000000000c6d3c:
	.ascii ".text\n"
	.zero 1
uuid_00000000000c6d3d:
	.ascii "_start:\n"
	.zero 1
uuid_00000000000c6d3e:
	.ascii "	mov %rsp,%rbp\n"
	.zero 1
uuid_00000000000c6d3f:
	.ascii "	mov %rbp,%rsp\n"
	.zero 1
uuid_00000000000c6d43:
	.ascii "	popq %r8\n"
	.zero 1
uuid_00000000000c6d44:
	.ascii "	movq %rsp, %r9\n"
	.zero 1
uuid_00000000000c6d48:
	.ascii "	push %rbp\n"
	.zero 1
uuid_00000000000c6d49:
	.ascii "	mov %rsp, %rbp\n"
	.zero 1
uuid_00000000000c6d4a:
	.ascii "	pushq %r8\n"
	.zero 1
uuid_00000000000c6d4b:
	.ascii "	pushq %r9\n"
	.zero 1
uuid_00000000000c6d4f:
	.ascii "	call main\n"
	.zero 1
uuid_00000000000c6d50:
	.ascii "	mov %rbp, %rsp\n"
	.zero 1
uuid_00000000000c6d51:
	.ascii "	pop %rbp\n"
	.zero 1
uuid_00000000000c6d55:
	.ascii "File: SRC/compile.lm Line: 2 Column: 20"
	.zero 1
uuid_00000000000c6d7d:
	.ascii "main"
	.zero 1
uuid_00000000000c6d81:
	.ascii "fragment-type"
	.zero 1
uuid_00000000000c6d82:
	.ascii "Global"
	.zero 1
uuid_00000000000c6d83:
	.ascii "expression"
	.zero 1
uuid_00000000000c6da8:
	.ascii "File: SRC/compile-c.lm Line: 4 Column: 39"
	.zero 1
uuid_00000000000c6df1:
	.ascii "Function"
	.zero 1
uuid_00000000000c6df2:
	.ascii "File: SRC/compile-blob.lm Line: 10 Column: 11"
	.zero 1
uuid_00000000000c6e02:
	.ascii "File: SRC/compile-blob.lm Line: 4 Column: 39"
	.zero 1
uuid_00000000000c6e57:
	.ascii "File: SRC/compile-blob.lm Line: 31 Column: 39"
	.zero 1
uuid_00000000000c6eac:
	.ascii "File: SRC/compile-gnu.lm Line: 4 Column: 39"
	.zero 1
uuid_00000000000c6eb9:
	.ascii "File: SRC/compile-finish.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c6ec6:
	.ascii "TODO: compile finish blob\n"
	.zero 1
uuid_00000000000c6ed3:
	.ascii "File: SRC/compile-program-ordered.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c6f04:
	.ascii "File: SRC/compile-program-ordered.lm Line: 11 Column: 5"
	.zero 1
uuid_00000000000c6f6b:
	.ascii "File: SRC/compile-c-function-args.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c6f75:
	.ascii "#include <stdio.h>\n#include <stdlib.h>\n\n"
	.zero 1
uuid_00000000000c6f94:
	.ascii "File: SRC/fragment-context::lookup.lm Line: 11 Column: 27"
	.zero 1
uuid_00000000000c6f9b:
	.ascii "Context::lookup "
	.zero 1
uuid_00000000000c6f9c:
	.ascii "\nCandidates:\n"
	.zero 1
uuid_00000000000c6faf:
	.ascii "File: SRC/fragment-context::lookup.lm Line: 43 Column: 30"
	.zero 1
uuid_00000000000c6fb6:
	.ascii "Context::lookup Could Not Find Symbol"
	.zero 1
uuid_00000000000c7008:
	.ascii "File: SRC/fragment-context::lookups.lm Line: 10 Column: 27"
	.zero 1
uuid_00000000000c700f:
	.ascii "Context::lookups "
	.zero 1
uuid_00000000000c7025:
	.ascii "File: SRC/fragment-context::lookup-vararg.lm Line: 4 Column: 27"
	.zero 1
uuid_00000000000c707d:
	.ascii "File: SRC/with-location.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c70a8:
	.ascii "File: SRC/with-location.lm Line: 57 Column: 5"
	.zero 1
uuid_00000000000c70f4:
	.ascii "File: SRC/without-location.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c711f:
	.ascii "File: SRC/without-location.lm Line: 52 Column: 5"
	.zero 1
uuid_00000000000c712f:
	.ascii "File: SRC/with-key.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c7133:
	.ascii "Unknown"
	.zero 1
uuid_00000000000c7185:
	.ascii "File: SRC/location-of.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c71aa:
	.ascii "File: SRC/unique.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c71ba:
	.ascii "File: SRC/print-verbose.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c71cd:
	.ascii "File: SRC/non-zero.lm Line: 4 Column: 5"
	.zero 1
already_SB_tokenized_CL_ListStringListStringCaseNumber1:
.zero 24
uuid_00000000000c71e9:
	.ascii "File: SRC/tokenize.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c71f0:
	.ascii "LIB/"
	.zero 1
uuid_00000000000c71ff:
	.ascii "File: SRC/tokenize.lm Line: 28 Column: 8"
	.zero 1
uuid_00000000000c7298:
	.ascii "File: SRC/tokenize.lm Line: 38 Column: 8"
	.zero 1
uuid_00000000000c72ca:
	.ascii "Hanging Parentheses In File: "
	.zero 1
uuid_00000000000c72cb:
	.ascii " Count: "
	.zero 1
uuid_00000000000c72d8:
	.ascii "FFI"
	.zero 1
uuid_00000000000c72e2:
	.ascii "File: SRC/is-ffi.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c72fe:
	.ascii "File: SRC/is-nil.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c7311:
	.ascii "File: SRC/is-seq.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c732a:
	.ascii "File: SRC/is-arrow.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c7346:
	.ascii "File: SRC/is-array.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c7359:
	.ascii "Hook"
	.zero 1
uuid_00000000000c7363:
	.ascii "File: SRC/is-hook.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c7376:
	.ascii "Blob"
	.zero 1
uuid_00000000000c7380:
	.ascii "File: SRC/is-blob.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c739c:
	.ascii "File: SRC/is-stack-variable.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c73b8:
	.ascii "File: SRC/is-cons.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c73cb:
	.ascii "ImpureCtx"
	.zero 1
uuid_00000000000c73d5:
	.ascii "File: SRC/is-impure-ctx.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c73f1:
	.ascii "File: SRC/is-string.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c740d:
	.ascii "File: SRC/is-rc.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c7420:
	.ascii "OntoStack"
	.zero 1
uuid_00000000000c743c:
	.ascii "File: SRC/is-onto-stack.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c744f:
	.ascii "ImpureOffset"
	.zero 1
uuid_00000000000c746b:
	.ascii "File: SRC/is-impure-offset.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c747e:
	.ascii "BranchConditional"
	.zero 1
uuid_00000000000c7488:
	.ascii "File: SRC/is-branchconditional.lm Line: 4 Column: 5"
	.zero 1
is_SB_lm_SB_struct_SB_index_CL_HashtableEqU64String:
.zero 32
uuid_00000000000c749b:
	.ascii "File: SRC/plus.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c74b1:
	.ascii "File: SRC/print.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c74c1:
	.ascii " = "
	.zero 1
uuid_00000000000c74c2:
	.ascii ";\n"
	.zero 1
uuid_00000000000c74c3:
	.ascii "File: SRC/print.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000c74dc:
	.ascii "File: SRC/print.lm Line: 25 Column: 5"
	.zero 1
uuid_00000000000c74e6:
	.ascii "EOF"
	.zero 1
uuid_00000000000c750e:
	.ascii "type "
	.zero 1
uuid_00000000000c7518:
	.ascii " := "
	.zero 1
uuid_00000000000c7537:
	.ascii "File: SRC/print.lm Line: 40 Column: 5"
	.zero 1
uuid_00000000000c7559:
	.ascii "Fragment Context:\n"
	.zero 1
uuid_00000000000c7569:
	.ascii "File: SRC/print.lm Line: 84 Column: 27"
	.zero 1
uuid_00000000000c7585:
	.ascii "Fragment\n"
	.zero 1
uuid_00000000000c7586:
	.ascii "	Offset = "
	.zero 1
uuid_00000000000c7593:
	.ascii "File: SRC/print.lm Line: 99 Column: 33"
	.zero 1
uuid_00000000000c759a:
	.ascii "File: SRC/print.lm Line: 94 Column: 5"
	.zero 1
uuid_00000000000c75a7:
	.ascii "File: SRC/print.lm Line: 111 Column: 5"
	.zero 1
uuid_00000000000c75ba:
	.ascii "In File "
	.zero 1
uuid_00000000000c75bb:
	.ascii " Line "
	.zero 1
uuid_00000000000c75bc:
	.ascii " Column "
	.zero 1
uuid_00000000000c75bd:
	.ascii "File: SRC/print.lm Line: 122 Column: 5"
	.zero 1
uuid_00000000000c75d9:
	.ascii " +\n"
	.zero 1
uuid_00000000000c75da:
	.ascii " + "
	.zero 1
uuid_00000000000c75e7:
	.ascii "File: SRC/print.lm Line: 135 Column: 29"
	.zero 1
uuid_00000000000c760d:
	.ascii "File: SRC/print.lm Line: 159 Column: 35"
	.zero 1
uuid_00000000000c7620:
	.ascii "File: SRC/reverse.lm Line: 4 Column: 26"
	.zero 1
uuid_00000000000c7636:
	.ascii "(Variable "
	.zero 1
uuid_00000000000c7640:
	.ascii "(Literal "
	.zero 1
uuid_00000000000c7650:
	.ascii "(Type ("
	.zero 1
uuid_00000000000c7651:
	.ascii "))"
	.zero 1
uuid_00000000000c765b:
	.ascii "(Global ("
	.zero 1
uuid_00000000000c7665:
	.ascii "(App ("
	.zero 1
uuid_00000000000c7672:
	.ascii "(Lambda ("
	.zero 1
uuid_00000000000c7685:
	.ascii "File: SRC/serialize-ast.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c76c0:
	.ascii "File: SRC/serialize-ast.lm Line: 59 Column: 43"
	.zero 1
uuid_00000000000c76ca:
	.ascii "(Variable ?)"
	.zero 1
uuid_00000000000c76da:
	.ascii "(Literal And) "
	.zero 1
uuid_00000000000c76ed:
	.ascii ") "
	.zero 1
uuid_00000000000c76ee:
	.ascii "File: SRC/serialize-ast.lm Line: 72 Column: 37"
	.zero 1
uuid_00000000000c7716:
	.ascii "File: SRC/slot.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c7735:
	.ascii "File: SRC/slot.lm Line: 30 Column: 14"
	.zero 1
uuid_00000000000c774b:
	.ascii "File: SRC/slot.lm Line: 26 Column: 5"
	.zero 1
uuid_SB_counter_CL_U64:
.zero 8
uuid_00000000000c7755:
	.ascii "uuid_"
	.zero 1
uuid_00000000000c7768:
	.ascii "File: SRC/var-name-if-var.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c77ad:
	.ascii "File: SRC/remove-parens.lm Line: 7 Column: 33"
	.zero 1
uuid_00000000000c77b7:
	.ascii "File: SRC/remove-parens.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c77ed:
	.ascii "File: SRC/parse-lambda.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c7813:
	.ascii "File: SRC/parse-lambda.lm Line: 16 Column: 38"
	.zero 1
uuid_00000000000c7820:
	.ascii "File: SRC/parse-lambda.lm Line: 14 Column: 5"
	.zero 1
uuid_00000000000c7842:
	.ascii "File: SRC/parse-lambda.lm Line: 33 Column: 14"
	.zero 1
uuid_00000000000c784f:
	.ascii "Expected Dot For Lambda Body\n"
	.zero 1
uuid_00000000000c7859:
	.ascii "File: SRC/parse-lambda.lm Line: 30 Column: 8"
	.zero 1
uuid_00000000000c78a7:
	.ascii "File: SRC/parse-many-expressions.lm Line: 18 Column: 14"
	.zero 1
uuid_00000000000c78ab:
	.ascii "File: SRC/parse-many-expressions.lm Line: 6 Column: 8"
	.zero 1
uuid_00000000000c78de:
	.ascii "File: SRC/parse-one-expression.lm Line: 12 Column: 11"
	.zero 1
uuid_00000000000c78f7:
	.ascii "Unexpected Closing Parentheses"
	.zero 1
uuid_00000000000c7916:
	.ascii "File: SRC/parse-one-expression.lm Line: 24 Column: 11"
	.zero 1
uuid_00000000000c7944:
	.ascii "File: SRC/parse-one-expression.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c7970:
	.ascii "macro"
	.zero 1
uuid_00000000000c79a1:
	.ascii "File: SRC/parse-toplevel.lm Line: 18 Column: 26"
	.zero 1
uuid_00000000000c79a8:
	.ascii "File: SRC/parse-toplevel.lm Line: 14 Column: 20"
	.zero 1
uuid_00000000000c79ac:
	.ascii "File: SRC/parse-toplevel.lm Line: 11 Column: 14"
	.zero 1
uuid_00000000000c79b0:
	.ascii "meta"
	.zero 1
uuid_00000000000c79cf:
	.ascii "File: SRC/parse-toplevel.lm Line: 36 Column: 14"
	.zero 1
uuid_00000000000c79d3:
	.ascii "type"
	.zero 1
uuid_00000000000c79e9:
	.ascii "fragment"
	.zero 1
uuid_00000000000c7a11:
	.ascii "File: SRC/parse-toplevel.lm Line: 50 Column: 34"
	.zero 1
uuid_00000000000c7a15:
	.ascii "File: SRC/parse-toplevel.lm Line: 48 Column: 14"
	.zero 1
uuid_00000000000c7a40:
	.ascii "File: SRC/parse-toplevel.lm Line: 70 Column: 34"
	.zero 1
uuid_00000000000c7a44:
	.ascii "File: SRC/parse-toplevel.lm Line: 68 Column: 14"
	.zero 1
uuid_00000000000c7a72:
	.ascii "suffix"
	.zero 1
uuid_00000000000c7a88:
	.ascii "atom"
	.zero 1
uuid_00000000000c7ad8:
	.ascii "size"
	.zero 1
uuid_00000000000c7b03:
	.ascii "import"
	.zero 1
uuid_00000000000c7b37:
	.ascii "zero"
	.zero 1
uuid_00000000000c7b4d:
	.ascii "non-zero"
	.zero 1
uuid_00000000000c7b4e:
	.ascii "t"
	.zero 1
uuid_00000000000c7b4f:
	.ascii "!="
	.zero 1
uuid_00000000000c7b50:
	.ascii ".0"
	.zero 1
uuid_00000000000c7b51:
	.ascii ":="
	.zero 1
uuid_00000000000c7b79:
	.ascii "File: SRC/parse-toplevel.lm Line: 150 Column: 14"
	.zero 1
uuid_00000000000c7b86:
	.ascii "File: SRC/parse-toplevel.lm Line: 162 Column: 14"
	.zero 1
uuid_00000000000c7b8a:
	.ascii "File: SRC/parse-toplevel.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000c7bb3:
	.ascii "File: SRC/parse-type-comma-sep.lm Line: 7 Column: 8"
	.zero 1
uuid_00000000000c7bee:
	.ascii "File: SRC/parse-type-single.lm Line: 9 Column: 11"
	.zero 1
uuid_00000000000c7bf8:
	.ascii "File: SRC/parse-type-single.lm Line: 59 Column: 11"
	.zero 1
uuid_00000000000c7c1a:
	.ascii "Unexpected Parameterized Type: "
	.zero 1
uuid_00000000000c7c1b:
	.ascii "File: SRC/parse-type-single.lm Line: 86 Column: 25"
	.zero 1
uuid_00000000000c7c25:
	.ascii "File: SRC/parse-type-single.lm Line: 68 Column: 14"
	.zero 1
uuid_00000000000c7c49:
	.ascii "File: SRC/parse-type.lm Line: 12 Column: 8"
	.zero 1
uuid_00000000000c7c62:
	.ascii "File: SRC/parse-type.lm Line: 22 Column: 14"
	.zero 1
uuid_00000000000c7c7b:
	.ascii "File: SRC/parse-type.lm Line: 51 Column: 8"
	.zero 1
uuid_00000000000c7ce1:
	.ascii "File: SRC/take-one-expr.lm Line: 19 Column: 11"
	.zero 1
uuid_00000000000c7ceb:
	.ascii "File: SRC/take-one-expr.lm Line: 6 Column: 30"
	.zero 1
uuid_00000000000c7cf5:
	.ascii "src"
	.zero 1
cstring_SB_cache_CL_StringStringListStringStringListCaseNumber1:
.zero 32
uuid_00000000000c7cf6:
	.ascii "File: SRC/compile-declare-cstring.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c7d00:
	.ascii "TODO declare cstring blob\n"
	.zero 1
uuid_00000000000c7d01:
	.ascii "\""
	.zero 1
uuid_00000000000c7d02:
	.ascii "\\\\t"
	.zero 1
uuid_00000000000c7d03:
	.ascii "File: SRC/compile-declare-cstring.lm Line: 39 Column: 11"
	.zero 1
uuid_00000000000c7d3a:
	.ascii "File: SRC/compile-declare-cstring.lm Line: 75 Column: 32"
	.zero 1
uuid_00000000000c7d41:
	.ascii ":\n	.ascii \""
	.zero 1
uuid_00000000000c7d42:
	.ascii "\"\n	.zero 1\n"
	.zero 1
uuid_00000000000c7da9:
	.ascii "File: SRC/compile-destructure-args.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c7db3:
	.ascii "({})"
	.zero 1
uuid_00000000000c7dd2:
	.ascii "True"
	.zero 1
uuid_00000000000c7dd3:
	.ascii "False"
	.zero 1
uuid_00000000000c7dd4:
	.ascii "\\t"
	.zero 1
uuid_00000000000c7dd5:
	.ascii "10"
	.zero 1
uuid_00000000000c7dd6:
	.ascii "\\s"
	.zero 1
uuid_00000000000c7dd7:
	.ascii "32"
	.zero 1
uuid_00000000000c7dd8:
	.ascii "\\o"
	.zero 1
uuid_00000000000c7dd9:
	.ascii "35"
	.zero 1
uuid_00000000000c7dda:
	.ascii "\\`"
	.zero 1
uuid_00000000000c7ddb:
	.ascii "39"
	.zero 1
uuid_00000000000c7ddc:
	.ascii "\\["
	.zero 1
uuid_00000000000c7ddd:
	.ascii "40"
	.zero 1
uuid_00000000000c7dde:
	.ascii "\\]"
	.zero 1
uuid_00000000000c7ddf:
	.ascii "41"
	.zero 1
uuid_00000000000c7de0:
	.ascii "\\:"
	.zero 1
uuid_00000000000c7de1:
	.ascii "59"
	.zero 1
uuid_00000000000c7de2:
	.ascii "File: SRC/compile-expr-direct.lm Line: 37 Column: 20"
	.zero 1
uuid_00000000000c7ec1:
	.ascii "File: SRC/compile-expr-direct.lm Line: 88 Column: 14"
	.zero 1
uuid_00000000000c7f04:
	.ascii "(("
	.zero 1
uuid_00000000000c7f05:
	.ascii ")("
	.zero 1
uuid_00000000000c7f2d:
	.ascii "into-branch-conditional"
	.zero 1
uuid_00000000000c7f34:
	.ascii "rsp-offset"
	.zero 1
uuid_00000000000c7f35:
	.ascii "end-offset"
	.zero 1
uuid_00000000000c7f36:
	.ascii "return-size"
	.zero 1
uuid_00000000000c7f37:
	.ascii "ImplicitContext"
	.zero 1
uuid_00000000000c7f38:
	.ascii "ictx"
	.zero 1
uuid_00000000000c7f39:
	.ascii "primitive::if"
	.zero 1
uuid_00000000000c7f5b:
	.ascii "frame"
	.zero 1
uuid_00000000000c7f5c:
	.ascii "({"
	.zero 1
uuid_00000000000c7f5d:
	.ascii "="
	.zero 1
uuid_00000000000c7f5e:
	.ascii ";({});})\n"
	.zero 1
uuid_00000000000c7f77:
	.ascii "File: SRC/compile-expr-direct.lm Line: 226 Column: 14"
	.zero 1
uuid_00000000000c7f7b:
	.ascii "unframe"
	.zero 1
uuid_00000000000c7f7c:
	.ascii "	add $"
	.zero 1
uuid_00000000000c7f7d:
	.ascii ", %rsp\n"
	.zero 1
uuid_00000000000c7ff0:
	.ascii "File: SRC/compile-expr-direct.lm Line: 257 Column: 14"
	.zero 1
uuid_00000000000c8003:
	.ascii "File: SRC/compile-expr-direct.lm Line: 6 Column: 5"
	.zero 1
uuid_00000000000c802e:
	.ascii "File: SRC/compile-expr.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c8035:
	.ascii "File: SRC/compile-global.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c804b:
	.ascii "cdecl::args-size"
	.zero 1
uuid_00000000000c804f:
	.ascii ");\n"
	.zero 1
uuid_00000000000c8050:
	.ascii "){"
	.zero 1
uuid_00000000000c8051:
	.ascii "}\n"
	.zero 1
uuid_00000000000c8076:
	.ascii "File: SRC/compile-global.lm Line: 13 Column: 5"
	.zero 1
uuid_00000000000c807d:
	.ascii "TODO Compile Global Blob\n"
	.zero 1
uuid_00000000000c808a:
	.ascii "File: SRC/compile-global.lm Line: 92 Column: 14"
	.zero 1
uuid_00000000000c8094:
	.ascii "_COUNTER"
	.zero 1
uuid_00000000000c8095:
	.ascii ":\n.zero 8\n"
	.zero 1
uuid_00000000000c8096:
	.ascii "_LABEL:\n	.ascii	\"\\\\t"
	.zero 1
uuid_00000000000c8097:
	.ascii "\\\\n\"\n	.zero 1\n"
	.zero 1
uuid_00000000000c8098:
	.ascii "	mov $"
	.zero 1
uuid_00000000000c8099:
	.ascii ", %RBX\n	mov 0(%RBX), %RAX\n"
	.zero 1
uuid_00000000000c809a:
	.ascii "	inc %RAX\n	mov %RAX, 0(%RBX)\n"
	.zero 1
uuid_00000000000c809b:
	.ascii "	push %RBP\n	mov %RSP, %RBP\n	push %RAX\n	call print_CL_ArrowNilU64\n	mov %RBP, %RSP\n	pop %RBP\n"
	.zero 1
uuid_00000000000c809c:
	.ascii "	push %RBP\n	mov %RSP, %RBP\n	push $"
	.zero 1
uuid_00000000000c809d:
	.ascii "_LABEL\n"
	.zero 1
uuid_00000000000c809e:
	.ascii "	call print_CL_ArrowNilString\n	mov %RBP, %RSP\n	pop %RBP\n"
	.zero 1
uuid_00000000000c80a2:
	.ascii "	sub $"
	.zero 1
uuid_00000000000c80a3:
	.ascii "	ret\n"
	.zero 1
uuid_00000000000c80c8:
	.ascii ":\n.zero "
	.zero 1
uuid_00000000000c80c9:
	.ascii "File: SRC/compile-global.lm Line: 75 Column: 5"
	.zero 1
uuid_00000000000c8103:
	.ascii "File: SRC/compile-push-rvalue.lm Line: 11 Column: 11"
	.zero 1
uuid_00000000000c8110:
	.ascii "File: SRC/compile-push-rvalue.lm Line: 8 Column: 5"
	.zero 1
uuid_00000000000c8117:
	.ascii "File: SRC/compile-stack-call-push-args.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c8124:
	.ascii "FunctionArguments"
	.zero 1
uuid_00000000000c8128:
	.ascii "function-id"
	.zero 1
uuid_00000000000c8129:
	.ascii "function-name"
	.zero 1
uuid_00000000000c812a:
	.ascii "function-type"
	.zero 1
uuid_00000000000c812b:
	.ascii "args-size"
	.zero 1
uuid_00000000000c812c:
	.ascii "used"
	.zero 1
uuid_00000000000c812d:
	.ascii "args"
	.zero 1
uuid_00000000000c812e:
	.ascii "primitive::call"
	.zero 1
uuid_00000000000c8144:
	.ascii "File: SRC/compile-stack-calls.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c8166:
	.ascii "File: SRC/translate-local-variables.lm Line: 11 Column: 17"
	.zero 1
uuid_00000000000c816a:
	.ascii "File: SRC/translate-local-variables.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000c8171:
	.ascii "File: SRC/translate-local-variables.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c8184:
	.ascii "L"
	.zero 1
uuid_00000000000c8188:
	.ascii "File: SRC/cc-blob.lm Line: 7 Column: 5"
	.zero 1
uuid_00000000000c8198:
	.ascii "File: SRC/cc-blob.lm Line: 30 Column: 5"
	.zero 1
uuid_00000000000c81ed:
	.ascii "File: SRC/cc-args.lm Line: 9 Column: 14"
	.zero 1
uuid_00000000000c823f:
	.ascii "Codegen Unexpected RHS"
	.zero 1
uuid_00000000000c8243:
	.ascii "File: SRC/cc-args.lm Line: 75 Column: 14"
	.zero 1
uuid_00000000000c8256:
	.ascii "File: SRC/cc-args.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c82cf:
	.ascii "for-arg-i"
	.zero 1
uuid_00000000000c830f:
	.ascii "for-arg"
	.zero 1
uuid_00000000000c8346:
	.ascii "File: SRC/blob-render.lm Line: 37 Column: 11"
	.zero 1
uuid_00000000000c837a:
	.ascii "for-atom"
	.zero 1
uuid_00000000000c83b1:
	.ascii "File: SRC/blob-render.lm Line: 53 Column: 34"
	.zero 1
uuid_00000000000c83c4:
	.ascii "range"
	.zero 1
uuid_00000000000c83da:
	.ascii "uuid"
	.zero 1
uuid_00000000000c83ed:
	.ascii "align"
	.zero 1
uuid_00000000000c8409:
	.ascii "=="
	.zero 1
uuid_00000000000c8446:
	.ascii "/"
	.zero 1
uuid_00000000000c847d:
	.ascii "%"
	.zero 1
uuid_00000000000c84f0:
	.ascii "File: SRC/blob-render.lm Line: 151 Column: 11"
	.zero 1
uuid_00000000000c852a:
	.ascii "File: SRC/blob-render.lm Line: 175 Column: 14"
	.zero 1
uuid_00000000000c8531:
	.ascii "Unknown Render Term "
	.zero 1
uuid_00000000000c8532:
	.ascii "File: SRC/blob-render.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c85cc:
	.ascii "File: SRC/blob-render.lm Line: 205 Column: 5"
	.zero 1
uuid_00000000000c863c:
	.ascii "File: SRC/extract-uuids.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c8679:
	.ascii "File: SRC/index-typedefs.lm Line: 3 Column: 31"
	.zero 1
uuid_00000000000c86f2:
	.ascii "Invalid Typedef"
	.zero 1
uuid_00000000000c86f3:
	.ascii "File: SRC/index-typedefs.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000c876f:
	.ascii "Unrecognized Macro Pattern\n"
	.zero 1
uuid_00000000000c8770:
	.ascii "File: SRC/is-macro-head.lm Line: 5 Column: 30"
	.zero 1
uuid_00000000000c87c2:
	.ascii "File: SRC/preprocess-apply-hard.lm Line: 11 Column: 11"
	.zero 1
uuid_00000000000c87cc:
	.ascii "File: SRC/preprocess-apply-hard.lm Line: 25 Column: 14"
	.zero 1
uuid_00000000000c87d6:
	.ascii "File: SRC/preprocess-apply-hard.lm Line: 6 Column: 30"
	.zero 1
uuid_00000000000c87e0:
	.ascii "Invalid Macro Application\n"
	.zero 1
uuid_00000000000c8835:
	.ascii "_t"
	.zero 1
uuid_00000000000c8836:
	.ascii "Token"
	.zero 1
uuid_00000000000c8837:
	.ascii "Literal+Constant+String"
	.zero 1
uuid_00000000000c8838:
	.ascii "_"
	.zero 1
uuid_00000000000c8878:
	.ascii "File: SRC/preprocess-apply-literals.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c8897:
	.ascii ":Location:"
	.zero 1
uuid_00000000000c88a1:
	.ascii "p"
	.zero 1
uuid_00000000000c88b4:
	.ascii "Location Unknown"
	.zero 1
uuid_00000000000c88c1:
	.ascii "File: "
	.zero 1
uuid_00000000000c88c2:
	.ascii " Line: "
	.zero 1
uuid_00000000000c88c3:
	.ascii " Column: "
	.zero 1
uuid_00000000000c88c4:
	.ascii "File: SRC/preprocess-apply-locations.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000c890a:
	.ascii "File: SRC/preprocess-apply-locations.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c8a58:
	.ascii "File: SRC/preprocess-apply.lm Line: 38 Column: 38"
	.zero 1
uuid_00000000000c8a77:
	.ascii "File: SRC/preprocess-apply.lm Line: 56 Column: 38"
	.zero 1
uuid_00000000000c8ad8:
	.ascii "File: SRC/preprocess-apply.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c8b1b:
	.ascii "File: SRC/preprocess-is-suffixed.lm Line: 5 Column: 32"
	.zero 1
uuid_00000000000c8b4c:
	.ascii "File: SRC/substitute-uuids.lm Line: 7 Column: 33"
	.zero 1
uuid_00000000000c8b9e:
	.ascii "File: SRC/substitute-uuids.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c8c4d:
	.ascii ":Literal:"
	.zero 1
uuid_00000000000c8cc0:
	.ascii "File: SRC/try-destructure-macro.lm Line: 13 Column: 14"
	.zero 1
uuid_00000000000c8d18:
	.ascii ":Any:"
	.zero 1
uuid_00000000000c8da9:
	.ascii ":Variable:"
	.zero 1
uuid_00000000000c8e0d:
	.ascii ":Tag:"
	.zero 1
uuid_00000000000c8e32:
	.ascii "Constant+Literal+U64"
	.zero 1
uuid_00000000000c8e33:
	.ascii "Tag<"
	.zero 1
uuid_00000000000c8e49:
	.ascii "File: SRC/try-destructure-macro.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c8e95:
	.ascii "Fragment Has No Type:\n"
	.zero 1
uuid_00000000000c8e99:
	.ascii "File: SRC/destructure-lhs.lm Line: 7 Column: 11"
	.zero 1
uuid_00000000000c8ed6:
	.ascii "File: SRC/destructure-lhs.lm Line: 24 Column: 11"
	.zero 1
uuid_00000000000c8eda:
	.ascii "Unexpected Destructure LHS: "
	.zero 1
uuid_00000000000c8edb:
	.ascii "File: SRC/destructure-lhs.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c8ee8:
	.ascii ";\n})"
	.zero 1
uuid_00000000000c8ef2:
	.ascii "File: SRC/fragment::chain.lm Line: 74 Column: 36"
	.zero 1
uuid_00000000000c8ef9:
	.ascii "File: SRC/fragment::chain.lm Line: 85 Column: 5"
	.zero 1
uuid_00000000000c8f27:
	.ascii "File: SRC/fragment::get.lm Line: 7 Column: 33"
	.zero 1
uuid_00000000000c8f2e:
	.ascii "File: SRC/fragment::get.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c8f32:
	.ascii "File: SRC/fragment::local-variable.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c8f4e:
	.ascii "File: SRC/fragment::set-context.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c8f67:
	.ascii "File: SRC/fragment::set-offset.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c8f80:
	.ascii "File: SRC/fragment::set-term.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c8f99:
	.ascii "File: SRC/fragment::set-type.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c8fb2:
	.ascii "File: SRC/fragment::set-vararg.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c8fcb:
	.ascii "File: SRC/fragment::set.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c8fcf:
	.ascii "--c"
	.zero 1
uuid_00000000000c8fd0:
	.ascii "PLATFORM/C/"
	.zero 1
uuid_00000000000c8fd1:
	.ascii "tmp.c"
	.zero 1
uuid_00000000000c8fd5:
	.ascii "--blob"
	.zero 1
uuid_00000000000c8fd6:
	.ascii "tmp.txt"
	.zero 1
uuid_00000000000c8fda:
	.ascii "--gnu"
	.zero 1
uuid_00000000000c8fdb:
	.ascii "PLATFORM/GNU-X86/"
	.zero 1
uuid_00000000000c8fdc:
	.ascii "tmp.s"
	.zero 1
uuid_00000000000c8fe0:
	.ascii "--tokenize"
	.zero 1
uuid_00000000000c8fe1:
	.ascii "--parse"
	.zero 1
uuid_00000000000c8fe2:
	.ascii "--preprocess"
	.zero 1
uuid_00000000000c8fe3:
	.ascii "--typecheck"
	.zero 1
uuid_00000000000c8fe4:
	.ascii "--compile"
	.zero 1
uuid_00000000000c8fe5:
	.ascii "--strict"
	.zero 1
uuid_00000000000c8fe6:
	.ascii "--gradual"
	.zero 1
uuid_00000000000c8fe7:
	.ascii "--macro"
	.zero 1
uuid_00000000000c8fe8:
	.ascii "--nomacro"
	.zero 1
uuid_00000000000c8fe9:
	.ascii "--profile-invocations"
	.zero 1
uuid_00000000000c8fea:
	.ascii "-o"
	.zero 1
uuid_00000000000c8feb:
	.ascii "File: SRC/main.lm Line: 6 Column: 8"
	.zero 1
uuid_00000000000c903a:
	.ascii "File: SRC/main.lm Line: 48 Column: 37"
	.zero 1
uuid_00000000000c9052:
	.ascii "File: SRC/main.lm Line: 56 Column: 5"
	.zero 1
uuid_00000000000c9072:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 57 Column: 25"
	.zero 1
uuid_00000000000c9098:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 44 Column: 25"
	.zero 1
uuid_00000000000c90b1:
	.ascii "List::head is fallible\n"
	.zero 1
uuid_00000000000c90b2:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000c910c:
	.ascii "File: PLATFORM/GNU-X86/LIB/hashtable.lm Line: 89 Column: 14"
	.zero 1
uuid_00000000000c914e:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 33 Column: 8"
	.zero 1
uuid_00000000000c91c4:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 20 Column: 26"
	.zero 1
uuid_00000000000c9254:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 71 Column: 8"
	.zero 1
uuid_00000000000c9267:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 78 Column: 5"
	.zero 1
uuid_00000000000c93b7:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000c93cc:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 61 Column: 5"
	.zero 1
uuid_00000000000c9609:
	.ascii "File: PLATFORM/GNU-X86/LIB/hashtable.lm Line: 17 Column: 14"
	.zero 1
uuid_00000000000c9687:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 44 Column: 5"
	.zero 1
