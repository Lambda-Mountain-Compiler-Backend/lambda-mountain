.global _start
.text
_start:
	mov %rsp,%rbp
	mov $malloc_SB_block_SB_head_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_block_SB_tail_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_first_SB_free_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_page_SB_tail_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_large_SB_size_CL_U64, %r15
	movq $1024, 0(%r15)
	mov $point_SB_of_SB_interest_CL_U64, %r15
	movq $0, 0(%r15)
	mov $rc_SB_magic_SB_number_CL_U64, %r15
	movq $423809104, 0(%r15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_text_SB_section_CL_SSCaseNumber3, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_init_SB_section_CL_SSCaseNumber3, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_data_SB_section_CL_SSCaseNumber3, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_profile_SB_onexit_CL_SSCaseNumber3, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	mov $assemble_SB_final_CL_String, %r15
	movq $uuid_00000000000be796, 0(%r15)
	mov $assemble_SB_argv_SB_referenced_CL_U8, %r15
	movb $0, 0(%r15)
	mov $main_SB_with_SB_argv_CL_U8, %r15
	movb $0, 0(%r15)
	mov $main_SB_with_CL_U8, %r15
	movb $0, 0(%r15)
	mov $config_SB_profile_SB_invocations_CL_U8, %r15
	movb $0, 0(%r15)
	mov $config_SB_strict_CL_U8, %r15
	movb $1, 0(%r15)
	mov $config_SB_preprocess_CL_U8, %r15
	movb $1, 0(%r15)
	mov $config_SB_target_CL_String, %r15
	movq $uuid_00000000000be7e8, 0(%r15)
	pushq $1
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber1, %R15
	popq 0(%R15)
	pushq $0
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $preprocess_SB_macros_CL_MacroListMacroListCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	movq $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	movq $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $global_SB_ctx_CL_FContextFContextCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $type_SB_index_CL_BTreeIsTypeASTBTreeIsTypeASTCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $class_SB_exists_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $parameter_SB_is_SB_flat_SB_index_CL_BTreeEqU64TupleU64TupleU64StringBTreeEqU64TupleU64TupleU64StringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $is_SB_special_SB_index_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $lone_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $tag_SB_is_SB_fragment_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $global_SB_symbol_SB_registry_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $class_SB_to_SB_only_SB_child_CL_BTreeEqStringStringBTreeEqStringStringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $tag_SB_to_SB_index_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %r15
	movq $99999, 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $tag_SB_to_SB_class_SB_index_CL_BTreeEqTypeStringBTreeEqTypeStringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $class_SB_to_SB_yes_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $tag_SB_to_SB_fields_SB_index_CL_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeStringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $type_SB_constructors_SB_index_CL_BTreeEqTypeStringBTreeEqTypeStringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $type_SB_complex_SB_fields_SB_index_CL_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeStringCaseNumber0, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	mov $types_SB_have_SB_changed_CL_U8, %r15
	movb $1, 0(%r15)
	pushq $0
	pushq $0
	pushq $1
	movq $already_SB_tokenized_CL_ListStringListStringCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	mov $uuid_SB_counter_CL_U64, %r15
	movq $0, 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $cstring_SB_cache_CL_StringStringListStringStringListCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	mov %rbp,%rsp
	popq %r8
	movq %rsp, %r9
	push %rbp
	mov %rsp, %rbp
	pushq %r8
	pushq %r9
	call main
	mov %rbp, %rsp
	pop %rbp
	mov $60, %rax
	mov $0, %rdi
	syscall
_EQ__EQ__CL_ArrowU64ConsStringString:
	pushq $0
	pushq $0
	pushq $0
	mov -8(%rbp), %R8
	mov -16(%rbp), %R9
	cmp $0,%R8
	je uuid_00000000000be63c
	cmp $0,%R8
	je uuid_00000000000be63d
	cmp $0,%R9
	je uuid_00000000000be63d
uuid_00000000000be63b:
	mov %R8, %r14
	movb 0(%r14), %r15b
	movb %r15b, -32(%rbp)
	mov %R9, %r14
	movb 0(%r14), %r15b
	movb %r15b, -40(%rbp)
	mov -32(%RBP), %AL
	mov -40(%RBP), %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	movq %RAX, -48(%rbp)
	mov -48(%rbp), %R10
	cmp $0,%R10
	je uuid_00000000000be63d
	mov -32(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	movq %RAX, -48(%rbp)
	mov -48(%rbp), %R10
	cmp $0,%R10
	jne uuid_00000000000be63c
	inc %R8
	inc %R9
	jmp uuid_00000000000be63b
uuid_00000000000be63c:
	mov $1, %RAX
	jmp uuid_00000000000be63e
uuid_00000000000be63d:
	mov $0, %RAX
	jmp uuid_00000000000be63e
uuid_00000000000be63e:
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
_EX__EQ__CL_ArrowU64ConsStringString:
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
_AD__CL_ArrowSConsSS:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be642
	jmp uuid_00000000000be644
uuid_00000000000be642:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be63f
	movq -48(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -40(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -32(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000be641
uuid_00000000000be63f:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000be641:
	mov -72(%RBP),%RSP
	add $-72, %RSP
uuid_00000000000be644:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
deep_SB_hash_CL_ArrowU64U64:
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
non_SB_zero_CL_ArrowU64S:
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be64a
	push %RBP
	jmp uuid_00000000000be647
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be646
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be649
uuid_00000000000be647:
uuid_00000000000be649:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000be64c
uuid_00000000000be64a:
	movq $0, -40(%rbp)
uuid_00000000000be64c:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64String:
	pushq $0
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000be64d
	jmp uuid_00000000000be64f
uuid_00000000000be64d:
	movq $1, -24(%rbp)
uuid_00000000000be64f:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsSS:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be656
	jmp uuid_00000000000be658
uuid_00000000000be656:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be653
	jmp uuid_00000000000be655
uuid_00000000000be653:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be650
	jmp uuid_00000000000be652
uuid_00000000000be650:
	movb $1, -192(%rbp)
uuid_00000000000be652:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000be655:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000be658:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be6b4
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be66b
	jmp uuid_00000000000be66d
uuid_00000000000be66b:
	push %RBP
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be65c
	jmp uuid_00000000000be65e
uuid_00000000000be65c:
	push %RBP
	mov -368(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000be659
	jmp uuid_00000000000be65b
uuid_00000000000be659:
	movb $1, -384(%rbp)
uuid_00000000000be65b:
	mov -400(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000be65e:
	mov -392(%RBP),%RSP
	add $-408, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be668
	jmp uuid_00000000000be66a
uuid_00000000000be668:
	push %RBP
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be662
	jmp uuid_00000000000be664
uuid_00000000000be662:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000be65f
	jmp uuid_00000000000be661
uuid_00000000000be65f:
	movb $1, -448(%rbp)
uuid_00000000000be661:
	mov -464(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000be664:
	mov -456(%RBP),%RSP
	add $-472, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be665
	jmp uuid_00000000000be667
uuid_00000000000be665:
	movb $1, -336(%rbp)
uuid_00000000000be667:
	mov -416(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000be66a:
	mov -352(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000be66d:
	mov -344(%RBP),%RSP
	add $-472, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be6b1
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be686
	jmp uuid_00000000000be688
uuid_00000000000be686:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be674
	jmp uuid_00000000000be676
uuid_00000000000be674:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be671
	jmp uuid_00000000000be673
uuid_00000000000be671:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be66e
	jmp uuid_00000000000be670
uuid_00000000000be66e:
	movb $1, -592(%rbp)
uuid_00000000000be670:
	mov -640(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000be673:
	mov -608(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000be676:
	mov -600(%RBP),%RSP
	add $-664, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be683
	jmp uuid_00000000000be685
uuid_00000000000be683:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be67d
	jmp uuid_00000000000be67f
uuid_00000000000be67d:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be67a
	jmp uuid_00000000000be67c
uuid_00000000000be67a:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be677
	jmp uuid_00000000000be679
uuid_00000000000be677:
	movb $1, -704(%rbp)
uuid_00000000000be679:
	mov -752(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000be67c:
	mov -720(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000be67f:
	mov -712(%RBP),%RSP
	add $-776, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be680
	jmp uuid_00000000000be682
uuid_00000000000be680:
	movb $1, -544(%rbp)
uuid_00000000000be682:
	mov -672(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000be685:
	mov -560(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000be688:
	mov -552(%RBP),%RSP
	add $-776, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be6ae
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -840(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be6a1
	jmp uuid_00000000000be6a3
uuid_00000000000be6a1:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be692
	jmp uuid_00000000000be694
uuid_00000000000be692:
	push %RBP
	mov -880(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000be68f
	jmp uuid_00000000000be691
uuid_00000000000be68f:
	movb $1, -896(%rbp)
uuid_00000000000be691:
	mov -912(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000be694:
	mov -904(%RBP),%RSP
	add $-920, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be69e
	jmp uuid_00000000000be6a0
uuid_00000000000be69e:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be698
	jmp uuid_00000000000be69a
uuid_00000000000be698:
	push %RBP
	mov -944(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000be695
	jmp uuid_00000000000be697
uuid_00000000000be695:
	movb $1, -960(%rbp)
uuid_00000000000be697:
	mov -976(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000be69a:
	mov -968(%RBP),%RSP
	add $-984, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be69b
	jmp uuid_00000000000be69d
uuid_00000000000be69b:
	movb $1, -848(%rbp)
uuid_00000000000be69d:
	mov -928(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000be6a0:
	mov -864(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000be6a3:
	mov -856(%RBP),%RSP
	add $-984, %RSP
	mov -848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be6ab
	push %RBP
	jmp uuid_00000000000be6a8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be6a7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be6aa
uuid_00000000000be6a8:
uuid_00000000000be6aa:
	mov -992(%RBP),%RSP
	add $-992, %RSP
	jmp uuid_00000000000be6ad
uuid_00000000000be6ab:
	push %RBP
	mov -984(%RBP), %RAX
	mov -920(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be6a4
	jmp uuid_00000000000be6a6
uuid_00000000000be6a4:
	movq $1, -64(%rbp)
uuid_00000000000be6a6:
	mov -992(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000be6ad:
	mov -784(%RBP),%RSP
	add $-992, %RSP
	jmp uuid_00000000000be6b0
uuid_00000000000be6ae:
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be68c
	jmp uuid_00000000000be68e
uuid_00000000000be68c:
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be689
	jmp uuid_00000000000be68b
uuid_00000000000be689:
	movq $1, -64(%rbp)
uuid_00000000000be68b:
	mov -792(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000be68e:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000be6b0:
	mov -480(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000be6b3
uuid_00000000000be6b1:
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000be6b3:
	mov -272(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000be6b6
uuid_00000000000be6b4:
	movq $1, -64(%rbp)
uuid_00000000000be6b6:
	mov -128(%RBP),%RSP
	add $-264, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_EX__EQ__CL_ArrowU64ConsSS:
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
print_CL_ArrowNilS:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be6dc
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be6bb
	jmp uuid_00000000000be6bd
uuid_00000000000be6bb:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000be6b8
	jmp uuid_00000000000be6ba
uuid_00000000000be6b8:
	movb $1, -128(%rbp)
uuid_00000000000be6ba:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000be6bd:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be6d9
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be6c4
	jmp uuid_00000000000be6c6
uuid_00000000000be6c4:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be6c1
	jmp uuid_00000000000be6c3
uuid_00000000000be6c1:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be6be
	jmp uuid_00000000000be6c0
uuid_00000000000be6be:
	movb $1, -192(%rbp)
uuid_00000000000be6c0:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000be6c3:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000be6c6:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be6d6
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be6cd
	jmp uuid_00000000000be6cf
uuid_00000000000be6cd:
	push %RBP
	mov -288(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000be6ca
	jmp uuid_00000000000be6cc
uuid_00000000000be6ca:
	movb $1, -304(%rbp)
uuid_00000000000be6cc:
	mov -320(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000be6cf:
	mov -312(%RBP),%RSP
	add $-328, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be6d3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be6d2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be6d5
uuid_00000000000be6d3:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6d0
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6d1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be6d5:
	mov -272(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000be6d8
uuid_00000000000be6d6:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c7
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c8
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be6d8:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000be6db
uuid_00000000000be6d9:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be6db:
	mov -96(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000be6de
uuid_00000000000be6dc:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6b7
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be6de:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
fail_CL_ArrowNilString:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fail_CL_ArrowNilConsStringString:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6df
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
exit_CL_ArrowNilU64:
	mov $60, %RAX
	mov -8(%rbp), %RDI
	syscall
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilString:
	mov -8(%rbp), %R15
	mov $0, %RDX
uuid_00000000000be6e0:
	mov 0(%R15), %R14B
	cmp $0,%R14B
	je uuid_00000000000be6e1
	inc %RDX
	inc %R15
	jmp uuid_00000000000be6e0
uuid_00000000000be6e1:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $1
	pushq -8(%rbp)
	push %RDX
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
eprint_CL_ArrowNilString:
	mov -8(%rbp), %R15
	mov $0, %RDX
uuid_00000000000be6e2:
	mov 0(%R15), %R14B
	cmp $0,%R14B
	je uuid_00000000000be6e3
	inc %RDX
	inc %R15
	jmp uuid_00000000000be6e2
uuid_00000000000be6e3:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $2
	pushq -8(%rbp)
	push %RDX
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU64:
	pushq $0
	mov -8(%rbp), %R15
	mov $0, %R14
uuid_00000000000be6e4:
	mov	%R15, %RAX
	mov $0, %RDX
	mov $10, %RCX
	div %RCX
	push %RDX
	inc %R14
	mov	%RAX, %R15
	cmp $0,%R15
	jne uuid_00000000000be6e4
uuid_00000000000be6e5:
	pop %RDX
	movb %DL, -24(%rbp)
	addb $48, -24(%rbp)
	dec %R14
	mov $1, %RAX
	mov $1, %RDI
	mov	%rbp, %r12
	addq $-24, %r12
	mov	%R12, %RSI
	mov $1, %RDX
	syscall
	cmp $0,%R14
	jne uuid_00000000000be6e5
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilASCII:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $1
	mov	%rbp, %r12
	addq $0, %r12
	push %R12
	pushq $1
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
print_CL_ArrowNilI64:
	pushq $0
	mov -8(%rbp), %R15
	mov $0, %R14
	cmp $0,%R15
	jge uuid_00000000000be6e6
	neg %R15
	movb $45, -24(%rbp)
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $1
	mov	%rbp, %r12
	addq $-24, %r12
	push %R12
	pushq $1
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be6e6:
	mov	%R15, %RAX
	mov $0, %RDX
	mov $10, %RCX
	div %RCX
	push %RDX
	inc %R14
	mov	%RAX, %R15
	cmp $0,%R15
	jne uuid_00000000000be6e6
uuid_00000000000be6e7:
	pop %RDX
	movb %DL, -24(%rbp)
	addb $48, -24(%rbp)
	dec %R14
	mov $1, %RAX
	mov $1, %RDI
	mov	%rbp, %r12
	addq $-24, %r12
	mov	%R12, %RSI
	mov $1, %RDX
	syscall
	cmp $0,%R14
	jne uuid_00000000000be6e7
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU32:
	mov $0, %R15
	mov -8(%rbp), %R15D
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU16:
	mov $0, %R15
	mov -8(%rbp), %R15W
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU8:
	mov $0, %R15
	mov -8(%rbp), %R15B
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilI32:
	mov $0, %R15
	mov -8(%rbp), %R15D
	movsx %R15D,%R15
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilI16:
	mov $0, %R15
	mov -8(%rbp), %R15W
	movsx %R15W,%R15
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilI8:
	mov $0, %R15
	mov -8(%rbp), %R15B
	movsx %R15B,%R15
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64:
	mov -8(%rbp), %RAX
	mov -16(%rbp), %RDI
	mov -24(%rbp), %RSI
	mov -32(%rbp), %RDX
	syscall
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
read_SB_file_CL_ArrowStringString:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $2
	pushq -8(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -24(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be6ed
	jmp uuid_00000000000be6ef
uuid_00000000000be6ed:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6eb
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be6ef:
	mov -32(%RBP),%RSP
	add $-32, %RSP
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1025
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $1024
uuid_00000000000be6f5:
	mov -56(%RBP), %RAX
	mov $1024, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be6f6
	jmp uuid_00000000000be6f7
uuid_00000000000be6f6:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -24(%rbp)
	mov -40(%RBP), %RAX
	mov -48(%RBP), %R14
	addq %R14,%RAX
	push %RAX
	pushq $1024
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -56(%rbp)
	push %RBP
	mov -56(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be6f2
	jmp uuid_00000000000be6f4
uuid_00000000000be6f2:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6f0
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6f1
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be6f4:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	mov -48(%RBP), %RAX
	mov -56(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, -48(%rbp)
#call function realloc : Arrow<Cons<Array<?,?>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov -48(%RBP), %RAX
	mov $1025, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	add $8, %RSP
	jmp uuid_00000000000be6f5
uuid_00000000000be6f7:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $3
	pushq -24(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov -48(%RBP), %R13
	mov -40(%RBP), %R15
	add %R13, %R15
	movb $0, 0(%R15)
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
clone_SB_rope_CL_ArrowStringS:
#call function malloc : Arrow<Cons<U64,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $1024
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function clone-rope-impl : Arrow<Cons<Cons<Array<?,?>,S>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	mov %RBX, %RBP
	call clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function realloc : Arrow<Cons<Array<?,?>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov -48(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	mov -48(%RBP), %R13
	mov -40(%RBP), %R15
	add %R13, %R15
	movb $0, 0(%R15)
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be711
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be6fe
	jmp uuid_00000000000be700
uuid_00000000000be6fe:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be6fb
	jmp uuid_00000000000be6fd
uuid_00000000000be6fb:
	push %RBP
	mov -120(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be6f8
	jmp uuid_00000000000be6fa
uuid_00000000000be6f8:
	movb $1, -144(%rbp)
uuid_00000000000be6fa:
	mov -192(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000be6fd:
	mov -160(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000be700:
	mov -152(%RBP),%RSP
	add $-216, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be70e
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be704
	jmp uuid_00000000000be706
uuid_00000000000be704:
	push %RBP
	mov -240(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000be701
	jmp uuid_00000000000be703
uuid_00000000000be701:
	movb $1, -256(%rbp)
uuid_00000000000be703:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000be706:
	mov -264(%RBP),%RSP
	add $-280, %RSP
	mov -256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be70b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be70a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be70d
uuid_00000000000be70b:
	pushq $0
	mov -280(%RBP), %R15
	mov -288(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	push %RAX
uuid_00000000000be707:
	mov -296(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be708
	jmp uuid_00000000000be709
uuid_00000000000be708:
#call function realloc : Arrow<Cons<Array<?,?>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
	mov -296(%RBP), %R14B
	mov -40(%RBP), %R13
	mov -8(%RBP), %R15
	add %R13, %R15
	movb %R14B, 0(%R15)
	mov -288(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -288(%rbp)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
	mov -280(%RBP), %R15
	mov -288(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	movb %R15B, -296(%rbp)
	jmp uuid_00000000000be707
uuid_00000000000be709:
uuid_00000000000be70d:
	mov -224(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000be710
uuid_00000000000be70e:
#call function clone-rope-impl : Arrow<Cons<Cons<Array<?,?>,S>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
#call function clone-rope-impl : Arrow<Cons<Cons<Array<?,?>,S>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000be710:
	mov -112(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000be713
uuid_00000000000be711:
uuid_00000000000be713:
	mov -80(%RBP),%RSP
	add $-104, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
clone_SB_rope_CL_ArrowStringU8:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $2
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %r14
	mov -8(%rbp),%r15b
	mov %r15b, 0(%r14)
	mov -24(%rbp), %r15
	movb $0, 1(%r15)
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
length_CL_ArrowU64String:
	pushq $0
uuid_00000000000be714:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000be715
	jmp uuid_00000000000be716
uuid_00000000000be715:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000be714
uuid_00000000000be716:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
write_SB_file_CL_ArrowNilConsStringString:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $2
	pushq -8(%rbp)
	pushq $577
	pushq $420
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq -32(%rbp)
	pushq -16(%rbp)
#call function length : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call length_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $3
	pushq -32(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
to_SB_string_CL_ArrowStringU64:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
uuid_00000000000be717:
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be718
	jmp uuid_00000000000be719
uuid_00000000000be718:
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	mov %RAX, %RAX
	mov $48, %R14
	addq %R14,%RAX
	push %RAX
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	movq %RAX, -8(%rbp)
	mov -56(%rbp), %R8
	movb %R8B, -48(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	add $8, %rsp
	jmp uuid_00000000000be717
uuid_00000000000be719:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be71b
	pushq $0
	pushq $uuid_00000000000be71a
	pushq $2
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000be71d
uuid_00000000000be71b:
uuid_00000000000be71d:
	mov -56(%RBP),%RSP
	add $-56, %RSP
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_string_CL_ArrowStringI64:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	push %RBP
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be71f
	jmp uuid_00000000000be721
uuid_00000000000be71f:
	pushq $0
	pushq $uuid_00000000000be71e
	pushq $2
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	mov $0, %RAX
	mov -8(%RBP), %R14
	subq %R14,%RAX
	movq %RAX, -8(%rbp)
uuid_00000000000be721:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	pushq $0
uuid_00000000000be722:
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be723
	jmp uuid_00000000000be724
uuid_00000000000be723:
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	mov %RAX, %RAX
	mov $48, %R14
	addq %R14,%RAX
	push %RAX
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	movq %RAX, -8(%rbp)
	mov -88(%rbp), %R8
	movb %R8B, -80(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	add $8, %rsp
	jmp uuid_00000000000be722
uuid_00000000000be724:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be725
	pushq $0
	pushq $uuid_00000000000be71a
	pushq $2
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	jmp uuid_00000000000be727
uuid_00000000000be725:
uuid_00000000000be727:
	mov -88(%RBP),%RSP
	add $-88, %RSP
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_i64_CL_ArrowI64String:
	pushq $0
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $45, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be728
	jmp uuid_00000000000be72a
uuid_00000000000be728:
	movb $1, -24(%rbp)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000be72a:
	mov -32(%RBP),%RSP
	add $-32, %RSP
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -24(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be72b
	jmp uuid_00000000000be72d
uuid_00000000000be72b:
	mov $0, %RAX
	mov -40(%RBP), %R14
	subq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000be72d:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_u64_CL_ArrowU64String:
	pushq $0
uuid_00000000000be750:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000be751
	jmp uuid_00000000000be752
uuid_00000000000be751:
	mov -24(%RBP), %RAX
	mov $10, %R14
	mul %R14
	movq %RAX, -24(%rbp)
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -32(%rbp)
	mov -48(%RBP), %AL
	mov $48, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be74d
	push %RBP
	pushq -32(%rbp)
	mov -64(%RBP), %AL
	mov $49, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be74a
	push %RBP
	pushq -32(%rbp)
	mov -80(%RBP), %AL
	mov $50, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be747
	push %RBP
	pushq -32(%rbp)
	mov -96(%RBP), %AL
	mov $51, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be744
	push %RBP
	pushq -32(%rbp)
	mov -112(%RBP), %AL
	mov $52, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be741
	push %RBP
	pushq -32(%rbp)
	mov -128(%RBP), %AL
	mov $53, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be73e
	push %RBP
	pushq -32(%rbp)
	mov -144(%RBP), %AL
	mov $54, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be73b
	push %RBP
	pushq -32(%rbp)
	mov -160(%RBP), %AL
	mov $55, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be738
	push %RBP
	pushq -32(%rbp)
	mov -176(%RBP), %AL
	mov $56, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be735
	push %RBP
	pushq -32(%rbp)
	mov -192(%RBP), %AL
	mov $57, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be732
	push %RBP
	jmp uuid_00000000000be72f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be72e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be731
uuid_00000000000be72f:
uuid_00000000000be731:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000be734
uuid_00000000000be732:
	mov -24(%RBP), %RAX
	mov $9, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000be734:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000be737
uuid_00000000000be735:
	mov -24(%RBP), %RAX
	mov $8, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000be737:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000be73a
uuid_00000000000be738:
	mov -24(%RBP), %RAX
	mov $7, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000be73a:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000be73d
uuid_00000000000be73b:
	mov -24(%RBP), %RAX
	mov $6, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000be73d:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000be740
uuid_00000000000be73e:
	mov -24(%RBP), %RAX
	mov $5, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000be740:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000be743
uuid_00000000000be741:
	mov -24(%RBP), %RAX
	mov $4, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000be743:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000be746
uuid_00000000000be744:
	mov -24(%RBP), %RAX
	mov $3, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000be746:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000be749
uuid_00000000000be747:
	mov -24(%RBP), %RAX
	mov $2, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000be749:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000be74c
uuid_00000000000be74a:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000be74c:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000be74f
uuid_00000000000be74d:
uuid_00000000000be74f:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000be750
uuid_00000000000be752:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_hex_CL_ArrowStringU64:
	pushq $0
	pushq $0
	pushq $3
	pushq $16
uuid_00000000000be793:
	mov -48(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be794
	jmp uuid_00000000000be795
uuid_00000000000be794:
	mov -8(%RBP), %RAX
	mov $16, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be790
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be78d
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be78a
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be787
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be784
	push %RBP
	pushq -56(%rbp)
	mov -152(%RBP), %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be781
	push %RBP
	pushq -56(%rbp)
	mov -168(%RBP), %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be77e
	push %RBP
	pushq -56(%rbp)
	mov -184(%RBP), %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be77b
	push %RBP
	pushq -56(%rbp)
	mov -200(%RBP), %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be778
	push %RBP
	pushq -56(%rbp)
	mov -216(%RBP), %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be775
	push %RBP
	pushq -56(%rbp)
	mov -232(%RBP), %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be772
	push %RBP
	pushq -56(%rbp)
	mov -248(%RBP), %RAX
	mov $11, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be76f
	push %RBP
	pushq -56(%rbp)
	mov -264(%RBP), %RAX
	mov $12, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be76c
	push %RBP
	pushq -56(%rbp)
	mov -280(%RBP), %RAX
	mov $13, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be769
	push %RBP
	pushq -56(%rbp)
	mov -296(%RBP), %RAX
	mov $14, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be766
	push %RBP
	pushq -56(%rbp)
	mov -312(%RBP), %RAX
	mov $15, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be763
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be762
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be765
uuid_00000000000be763:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be761
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be765:
	mov -304(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000be768
uuid_00000000000be766:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be760
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be768:
	mov -288(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000be76b
uuid_00000000000be769:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be75f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be76b:
	mov -272(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000be76e
uuid_00000000000be76c:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be75e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be76e:
	mov -256(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000be771
uuid_00000000000be76f:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be75d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be771:
	mov -240(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000be774
uuid_00000000000be772:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be75c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be774:
	mov -224(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000be777
uuid_00000000000be775:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be75b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be777:
	mov -208(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000be77a
uuid_00000000000be778:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be75a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be77a:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000be77d
uuid_00000000000be77b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be759
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be77d:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000be780
uuid_00000000000be77e:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be758
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be780:
	mov -160(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000be783
uuid_00000000000be781:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be757
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be783:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000be786
uuid_00000000000be784:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be756
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be786:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000be789
uuid_00000000000be787:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be755
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be789:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000be78c
uuid_00000000000be78a:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be754
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be78c:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000be78f
uuid_00000000000be78d:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be753
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be78f:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000be792
uuid_00000000000be790:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be71a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be792:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	mov -8(%RBP), %RAX
	mov $16, %R14
	mov $0, %RDX
	div %R14
	movq %RAX, -8(%rbp)
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000be793
uuid_00000000000be795:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
has_SB_prefix_CL_ArrowU64ConsStringString:
	pushq $1
uuid_00000000000be79d:
	mov -16(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000be79e
	jmp uuid_00000000000be79f
uuid_00000000000be79e:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000be79a
	movq $0, -32(%rbp)
	movq $uuid_00000000000be796, -16(%rbp)
	jmp uuid_00000000000be79c
uuid_00000000000be79a:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov -16(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	mov -48(%RBP), %AL
	mov -56(%RBP), %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be797
	movq $0, -32(%rbp)
	movq $uuid_00000000000be796, -16(%rbp)
	jmp uuid_00000000000be799
uuid_00000000000be797:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -16(%RBP), %RAX
	inc %RAX
	movq %RAX, -16(%rbp)
uuid_00000000000be799:
	mov -64(%RBP),%RSP
	add $-64, %RSP
uuid_00000000000be79c:
	mov -40(%RBP),%RSP
	add $-64, %RSP
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000be79d
uuid_00000000000be79f:
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
remove_SB_prefix_CL_ArrowStringConsStringString:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be7a3
	jmp uuid_00000000000be7a5
uuid_00000000000be7a3:
uuid_00000000000be7a0:
	mov -16(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000be7a1
	jmp uuid_00000000000be7a2
uuid_00000000000be7a1:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -16(%RBP), %RAX
	inc %RAX
	movq %RAX, -16(%rbp)
	jmp uuid_00000000000be7a0
uuid_00000000000be7a2:
uuid_00000000000be7a5:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
replace_CL_ArrowStringConsStringConsStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000be7a9:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000be7aa
	jmp uuid_00000000000be7ab
uuid_00000000000be7aa:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be7a6
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000be7a8
uuid_00000000000be7a6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -24(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function remove-prefix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call remove_SB_prefix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
uuid_00000000000be7a8:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	add $8, %RSP
	jmp uuid_00000000000be7a9
uuid_00000000000be7ab:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
has_SB_suffix_CL_ArrowU64ConsStringString:
	pushq $0
uuid_00000000000be7af:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000be7b0
	jmp uuid_00000000000be7b1
uuid_00000000000be7b0:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be7ac
	jmp uuid_00000000000be7ae
uuid_00000000000be7ac:
	movq $1, -32(%rbp)
uuid_00000000000be7ae:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %RSP
	jmp uuid_00000000000be7af
uuid_00000000000be7b1:
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
remove_SB_suffix_CL_ArrowStringConsStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000be7b5:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000be7b6
	jmp uuid_00000000000be7b7
uuid_00000000000be7b6:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be7b2
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	jmp uuid_00000000000be7b4
uuid_00000000000be7b2:
	movq $uuid_00000000000be71a, -8(%rbp)
uuid_00000000000be7b4:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %RSP
	jmp uuid_00000000000be7b5
uuid_00000000000be7b7:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
deep_SB_hash_CL_ArrowU64String:
	pushq $0
	pushq $0
uuid_00000000000be7b8:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000be7b9
	jmp uuid_00000000000be7ba
uuid_00000000000be7b9:
	mov $0, %R14
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov -40(%rbp), %R14B
	mov %R14, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -32(%RBP),%RAX
	shl $10,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $6,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	jmp uuid_00000000000be7b8
uuid_00000000000be7ba:
	mov -32(%RBP),%RAX
	shl $3,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $11,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shl $15,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_ML__CL_ArrowStringConsU64String:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000be7bb:
	mov -16(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be7bc
	jmp uuid_00000000000be7bd
uuid_00000000000be7bc:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	mov -16(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -16(%rbp)
	jmp uuid_00000000000be7bb
uuid_00000000000be7bd:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
not_CL_ArrowU64U64:
	pushq $0
	push %RBP
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be7be
	jmp uuid_00000000000be7c0
uuid_00000000000be7be:
	movq $1, -24(%rbp)
uuid_00000000000be7c0:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
not_CL_ArrowU64U8:
	pushq $0
	push %RBP
	mov -8(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be7c1
	jmp uuid_00000000000be7c3
uuid_00000000000be7c1:
	movq $1, -24(%rbp)
uuid_00000000000be7c3:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock:
	mov -8(%RBP), %R15
	add $0, %R15
	mov 0(%R15), %R15
	push %R15
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_prev_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -8(%RBP), %R15
	add $8, %R15
	mov 0(%R15), %R15
	push %R15
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -8(%RBP), %R15
	add $16, %R15
	mov 0(%R15), %R15
	push %R15
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock:
	mov -8(%RBP), %RAX
	mov $24, %R14
	addq %R14,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
set_DT_block_SB_size_CL_ArrowNilConsU64Array_QM_MallocBlock:
	mov -16(%RBP), %R14
	mov -8(%RBP), %R15
	mov %R14, 0(%R15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -16(%RBP), %R14
	mov -8(%RBP), %R15
	mov %R14, 8(%R15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -16(%RBP), %R14
	mov -8(%RBP), %R15
	mov %R14, 16(%R15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
malloc_SB_new_SB_page_CL_ArrowNilNil:
	mov $12, %RAX
	mov $0, %RDI
	syscall
	mov	%RAX, %R8
	movq %R8, %r15
	movq $malloc_SB_block_SB_head_CL_U64, %r14
	movq %r15, 0(%r14)
	movq %R8, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	mov $12, %RAX
	mov	%R8, %RDI
	syscall
	movq %R8, %r15
	movq $malloc_SB_page_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_:
	mov -8(%RBP), %RAX
	mov $24, %R14
	subq %R14,%RAX
	push %RAX
#call function .block-size : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -16(%RBP), %RAX
	subq %R14,%RAX
	push %RAX
	push %RBP
#call function .free-space : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_free_SB_space_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -40(%RBP), %RAX
	cmp %R14,%RAX
	setle %AL
	andq $1,%RAX
	push %RAX
#call function .block-size : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be7ca
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -56(%RBP), %RAX
	mov $24, %R14
	subq %R14,%RAX
	push %RAX
	pushq $0
uuid_00000000000be7c7:
	mov -72(%RBP), %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be7c8
	jmp uuid_00000000000be7c9
uuid_00000000000be7c8:
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %R15B, %R14B
	mov -72(%RBP), %R13
	mov -80(%RBP), %R15
	add %R13, %R15
	mov %R14B, 0(%R15)
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -72(%rbp)
	add $8, %rsp
	add $8, %rsp
	jmp uuid_00000000000be7c7
uuid_00000000000be7c9:
#call function free : Arrow<Array<?,?>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call free_CL_ArrowNilArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -64(%rbp), %r15
	movq %r15, -32(%rbp)
	mov -64(%rbp), %r15
	mov %r15, -32(%rbp)
	jmp uuid_00000000000be7cc
uuid_00000000000be7ca:
#call function set.block-size : Arrow<Cons<Array<MallocBlock,?>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_size_CL_ArrowNilConsU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be7c4
	jmp uuid_00000000000be7c6
uuid_00000000000be7c4:
	mov $malloc_SB_block_SB_tail_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov -40(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
uuid_00000000000be7c6:
	mov -56(%RBP),%RSP
	add $-56, %RSP
uuid_00000000000be7cc:
	mov -48(%RBP),%RSP
	add $-56, %RSP
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
_DT_free_SB_space_CL_ArrowU64Array_QM_MallocBlock:
	pushq $0
	push %RBP
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be7cd
#call function .block-size : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov $24, %RAX
	addq %R14,%RAX
	mov %RAX, %R14
	mov -8(%RBP), %RAX
	addq %R14,%RAX
	push %RAX
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	subq %R14,%RAX
	movq %RAX, -24(%rbp)
	jmp uuid_00000000000be7cf
uuid_00000000000be7cd:
	movq $1073741824, -24(%rbp)
uuid_00000000000be7cf:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
free_CL_ArrowNilArray_QM__QM_:
	mov -8(%RBP), %RAX
	mov $24, %R14
	subq %R14,%RAX
	push %RAX
#call function .block-prev : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_prev_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -32(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be7d0
	jmp uuid_00000000000be7d2
uuid_00000000000be7d0:
#call function set.block-next : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be7d2:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be7d3
	jmp uuid_00000000000be7d5
uuid_00000000000be7d3:
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be7d5:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov %rbp, %rsp
	sub $16, %rsp
	ret
malloc_CL_ArrowArray_QM__QM_U64:
#call function malloc : Arrow<Cons<U64,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
malloc_CL_ArrowArray_QM__QM_ConsU64U64:
	push %RBP
	mov $malloc_SB_block_SB_head_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be7d6
	jmp uuid_00000000000be7d8
uuid_00000000000be7d6:
#call function malloc-new-page : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call malloc_SB_new_SB_page_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be7d8:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov $malloc_SB_first_SB_free_CL_U64, %r15
	pushq 0(%r15)
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be7d9
	jmp uuid_00000000000be7db
uuid_00000000000be7d9:
	mov $malloc_SB_block_SB_head_CL_U64, %r14
	movq 0(%r14), %r15
	movq %r15, -40(%rbp)
	mov 0(%r14), %r15
	mov %r15, -40(%rbp)
uuid_00000000000be7db:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	pushq $0
uuid_00000000000be7df:
#call function .free-space : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_free_SB_space_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -16(%RBP), %RAX
	mov $24, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be7e0
	jmp uuid_00000000000be7e1
uuid_00000000000be7e0:
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	mov $malloc_SB_first_SB_free_CL_U64, %r14
	movq -40(%rbp), %r15
	movq %r15, 0(%r14)
	mov -40(%rbp), %r15
	mov %r15, 0(%r14)
	push %RBP
	mov -16(%RBP), %RAX
	mov $malloc_SB_large_SB_size_CL_U64, %R14
	mov 0(%R14), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be7dc
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
	jmp uuid_00000000000be7de
uuid_00000000000be7dc:
uuid_00000000000be7de:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	add $8, %RSP
	jmp uuid_00000000000be7df
uuid_00000000000be7e1:
	mov $malloc_SB_block_SB_tail_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov $8, %RAX
	mov -64(%RBP), %R14
	subq %R14,%RAX
	mov %RAX, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov $malloc_SB_block_SB_tail_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov -72(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
	mov $malloc_SB_block_SB_tail_CL_U64, %r15
	pushq 0(%r15)
	mov -80(%RBP), %RAX
	mov $24, %R14
	addq %R14,%RAX
	push %RAX
	mov -88(%RBP), %RAX
	mov -8(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be7e2
	jmp uuid_00000000000be7e4
uuid_00000000000be7e2:
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be7e4:
	mov -104(%RBP),%RSP
	add $-104, %RSP
#call function set.block-next : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function set.block-size : Arrow<Cons<Array<MallocBlock,?>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_size_CL_ArrowNilConsU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function set.block-next : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $0
	mov %RBX, %RBP
	call set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
	mov -80(%RBP), %RAX
	mov -40(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be7e5
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be7e7
uuid_00000000000be7e5:
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $0
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be7e7:
	mov -112(%RBP),%RSP
	add $-112, %RSP
	mov -88(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
non_SB_zero_CL_ArrowU64Type:
	mov $3, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64AST:
	mov $10, %RAX
	push %RAX
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
non_SB_zero_CL_ArrowU64FragmentKV:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64FragmentList:
	mov $1, %RAX
	push %RAX
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
non_SB_zero_CL_ArrowU64Context:
	mov $2, %RAX
	push %RAX
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
non_SB_zero_CL_ArrowU64TContext:
	mov $2, %RAX
	push %RAX
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $128, %rsp
	ret
non_SB_zero_CL_ArrowU64FContext:
	mov $1, %RAX
	push %RAX
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
non_SB_zero_CL_ArrowU64STypeList:
	mov $1, %RAX
	push %RAX
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
non_SB_zero_CL_ArrowU64StringTypeList:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64StringList:
	mov $1, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64StringU64List:
	mov $1, %RAX
	push %RAX
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
non_SB_zero_CL_ArrowU64StringStringList:
	mov $1, %RAX
	push %RAX
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
non_SB_zero_CL_ArrowU64StringSList:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64MacroList:
	mov $1, %RAX
	push %RAX
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
non_SB_zero_CL_ArrowU64SfxList:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
mangle_SB_identifier_CL_ArrowSString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000be84d:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000be84e
	jmp uuid_00000000000be84f
uuid_00000000000be84e:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -48(%rbp)
	mov -64(%RBP), %AL
	mov $33, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be84a
	push %RBP
	pushq -48(%rbp)
	mov -80(%RBP), %AL
	mov $36, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be847
	push %RBP
	pushq -48(%rbp)
	mov -96(%RBP), %AL
	mov $37, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be844
	push %RBP
	pushq -48(%rbp)
	mov -112(%RBP), %AL
	mov $38, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be841
	push %RBP
	pushq -48(%rbp)
	mov -128(%RBP), %AL
	mov $42, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be83e
	push %RBP
	pushq -48(%rbp)
	mov -144(%RBP), %AL
	mov $43, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be83b
	push %RBP
	pushq -48(%rbp)
	mov -160(%RBP), %AL
	mov $45, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be838
	push %RBP
	pushq -48(%rbp)
	mov -176(%RBP), %AL
	mov $46, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be835
	push %RBP
	pushq -48(%rbp)
	mov -192(%RBP), %AL
	mov $47, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be832
	push %RBP
	pushq -48(%rbp)
	mov -208(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be82f
	push %RBP
	pushq -48(%rbp)
	mov -224(%RBP), %AL
	mov $59, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be82c
	push %RBP
	pushq -48(%rbp)
	mov -240(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be829
	push %RBP
	pushq -48(%rbp)
	mov -256(%RBP), %AL
	mov $61, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be826
	push %RBP
	pushq -48(%rbp)
	mov -272(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be823
	push %RBP
	pushq -48(%rbp)
	mov -288(%RBP), %AL
	mov $63, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be820
	push %RBP
	pushq -48(%rbp)
	mov -304(%RBP), %AL
	mov $64, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be81d
	push %RBP
	pushq -48(%rbp)
	mov -320(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be81a
	push %RBP
	pushq -48(%rbp)
	mov -336(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be817
	push %RBP
	pushq -48(%rbp)
	mov -352(%RBP), %AL
	mov $94, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be814
	push %RBP
	pushq -48(%rbp)
	mov -368(%RBP), %AL
	mov $95, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be811
	push %RBP
	pushq -48(%rbp)
	mov -384(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be80e
	push %RBP
	pushq -48(%rbp)
	mov -400(%RBP), %AL
	mov $124, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be80b
	push %RBP
	pushq -48(%rbp)
	mov -416(%RBP), %AL
	mov $126, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be808
	push %RBP
	pushq -48(%rbp)
	jmp uuid_00000000000be805
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be804
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be807
uuid_00000000000be805:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be807:
	mov -424(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000be80a
uuid_00000000000be808:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be803
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be80a:
	mov -408(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000be80d
uuid_00000000000be80b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be802
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be80d:
	mov -392(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000be810
uuid_00000000000be80e:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be801
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be810:
	mov -376(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000be813
uuid_00000000000be811:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be800
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be813:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000be816
uuid_00000000000be814:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7ff
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be816:
	mov -344(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000be819
uuid_00000000000be817:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7fe
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be819:
	mov -328(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000be81c
uuid_00000000000be81a:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7fd
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be81c:
	mov -312(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000be81f
uuid_00000000000be81d:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7fc
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be81f:
	mov -296(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000be822
uuid_00000000000be820:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7fb
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be822:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000be825
uuid_00000000000be823:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7fa
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be825:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000be828
uuid_00000000000be826:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7f9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be828:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000be82b
uuid_00000000000be829:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7f8
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be82b:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000be82e
uuid_00000000000be82c:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7f7
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be82e:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000be831
uuid_00000000000be82f:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7f6
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be831:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000be834
uuid_00000000000be832:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7f5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be834:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000be837
uuid_00000000000be835:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7f4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be837:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000be83a
uuid_00000000000be838:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7f3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be83a:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000be83d
uuid_00000000000be83b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7f2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be83d:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000be840
uuid_00000000000be83e:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7f1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be840:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000be843
uuid_00000000000be841:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7f0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be843:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000be846
uuid_00000000000be844:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7ef
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be846:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000be849
uuid_00000000000be847:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7ee
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be849:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000be84c
uuid_00000000000be84a:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7ed
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be84c:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000be84d
uuid_00000000000be84f:
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
mangle_SB_identifier_CL_ArrowSType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be883
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be854
	jmp uuid_00000000000be856
uuid_00000000000be854:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000be851
	jmp uuid_00000000000be853
uuid_00000000000be851:
	movb $1, -152(%rbp)
uuid_00000000000be853:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000be856:
	mov -160(%RBP),%RSP
	add $-176, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be880
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be85d
	jmp uuid_00000000000be85f
uuid_00000000000be85d:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be85a
	jmp uuid_00000000000be85c
uuid_00000000000be85a:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000be857
	jmp uuid_00000000000be859
uuid_00000000000be857:
	movb $1, -216(%rbp)
uuid_00000000000be859:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000be85c:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000be85f:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be87d
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be876
	jmp uuid_00000000000be878
uuid_00000000000be876:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be873
	jmp uuid_00000000000be875
uuid_00000000000be873:
	push %RBP
	mov -304(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be870
	jmp uuid_00000000000be872
uuid_00000000000be870:
	movb $1, -328(%rbp)
uuid_00000000000be872:
	mov -376(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000be875:
	mov -344(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000be878:
	mov -336(%RBP),%RSP
	add $-400, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be87a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be879
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be87c
uuid_00000000000be87a:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000be87c:
	mov -296(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000be87f
uuid_00000000000be87d:
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000be86d:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be86e
	jmp uuid_00000000000be86f
uuid_00000000000be86e:
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be866
	jmp uuid_00000000000be868
uuid_00000000000be866:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be863
	jmp uuid_00000000000be865
uuid_00000000000be863:
	push %RBP
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	jmp uuid_00000000000be860
	jmp uuid_00000000000be862
uuid_00000000000be860:
	movb $1, -384(%rbp)
uuid_00000000000be862:
	mov -448(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000be865:
	mov -400(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000be868:
	mov -392(%RBP),%RSP
	add $-472, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be86a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be869
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be86c
uuid_00000000000be86a:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	movq -440(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -240(%rbp)
uuid_00000000000be86c:
	mov -336(%RBP),%RSP
	add $-472, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000be86d
uuid_00000000000be86f:
uuid_00000000000be87f:
	mov -184(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000be882
uuid_00000000000be880:
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000be882:
	mov -120(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000be885
uuid_00000000000be883:
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be850
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000be885:
	mov -88(%RBP),%RSP
	add $-112, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mangle_SB_identifier_CL_ArrowStringConsTypeString:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be7f6
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
escape_SB_string_CL_ArrowStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000be8ab:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000be8ac
	jmp uuid_00000000000be8ad
uuid_00000000000be8ac:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8a8
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000be8aa
uuid_00000000000be8a8:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8a5
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8a2
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be89f
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be89c
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be899
	push %RBP
	pushq -56(%rbp)
	mov -152(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be896
	push %RBP
	pushq -56(%rbp)
	mov -168(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be893
	push %RBP
	pushq -56(%rbp)
	mov -184(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be890
	push %RBP
	pushq -56(%rbp)
	mov -200(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be88d
	push %RBP
	pushq -56(%rbp)
	jmp uuid_00000000000be88a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be889
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be88c
uuid_00000000000be88a:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be887
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U8,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be888
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be88c:
	mov -208(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000be88f
uuid_00000000000be88d:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $32
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be88f:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000be892
uuid_00000000000be890:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $9
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be892:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000be895
uuid_00000000000be893:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $35
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be895:
	mov -160(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000be898
uuid_00000000000be896:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $10
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be898:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000be89b
uuid_00000000000be899:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $39
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be89b:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000be89e
uuid_00000000000be89c:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $41
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be89e:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000be8a1
uuid_00000000000be89f:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be886
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be8a1:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000be8a4
uuid_00000000000be8a2:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $40
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be8a4:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000be8a7
uuid_00000000000be8a5:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $59
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be8a7:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000be8aa:
	mov -48(%RBP),%RSP
	add $-72, %RSP
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000be8ab
uuid_00000000000be8ad:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
escape_SB_literal_CL_ArrowStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000be8ea:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000be8eb
	jmp uuid_00000000000be8ec
uuid_00000000000be8eb:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -48(%rbp)
	mov -64(%RBP), %AL
	mov $34, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8e7
	push %RBP
	pushq -48(%rbp)
	mov -80(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8e4
	push %RBP
	pushq -48(%rbp)
	mov -96(%RBP), %AL
	mov $10, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8e1
	push %RBP
	pushq -48(%rbp)
	jmp uuid_00000000000be8de
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be8dd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be8e0
uuid_00000000000be8de:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be8e0:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000be8e3
uuid_00000000000be8e1:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be8dc
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be8e3:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000be8e6
uuid_00000000000be8e4:
	pushq $uuid_00000000000be796
	mov -8(%RBP), %RAX
	inc %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8d5
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8d2
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8cf
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8cc
	push %RBP
	pushq -96(%rbp)
	mov -176(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8c9
	push %RBP
	pushq -96(%rbp)
	mov -192(%RBP), %AL
	mov $108, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8c6
	push %RBP
	pushq -96(%rbp)
	mov -208(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8c3
	push %RBP
	pushq -96(%rbp)
	mov -224(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8c0
	push %RBP
	pushq -96(%rbp)
	mov -240(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8bd
	push %RBP
	pushq -96(%rbp)
	mov -256(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be8ba
	push %RBP
	jmp uuid_00000000000be8b7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be8b6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be8b9
uuid_00000000000be8b7:
uuid_00000000000be8b9:
	mov -264(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000be8bc
uuid_00000000000be8ba:
	movq $uuid_00000000000be8b5, -88(%rbp)
uuid_00000000000be8bc:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000be8bf
uuid_00000000000be8bd:
	movq $uuid_00000000000be6c8, -88(%rbp)
uuid_00000000000be8bf:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000be8c2
uuid_00000000000be8c0:
	movq $uuid_00000000000be8b4, -88(%rbp)
uuid_00000000000be8c2:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000be8c5
uuid_00000000000be8c3:
	movq $uuid_00000000000be8b3, -88(%rbp)
uuid_00000000000be8c5:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000be8c8
uuid_00000000000be8c6:
	movq $uuid_00000000000be8b2, -88(%rbp)
uuid_00000000000be8c8:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000be8cb
uuid_00000000000be8c9:
	movq $uuid_00000000000be8b1, -88(%rbp)
uuid_00000000000be8cb:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000be8ce
uuid_00000000000be8cc:
	movq $uuid_00000000000be6c9, -88(%rbp)
uuid_00000000000be8ce:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000be8d1
uuid_00000000000be8cf:
	movq $uuid_00000000000be8b0, -88(%rbp)
uuid_00000000000be8d1:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000be8d4
uuid_00000000000be8d2:
	movq $uuid_00000000000be6c7, -88(%rbp)
uuid_00000000000be8d4:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000be8d7
uuid_00000000000be8d5:
	movq $uuid_00000000000be8af, -88(%rbp)
uuid_00000000000be8d7:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -88(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000be8d9
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be8d8
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000be8db
uuid_00000000000be8d9:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -88(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000be8db:
	mov -120(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000be8e6:
	mov -72(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000be8e9
uuid_00000000000be8e7:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be8ae
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000be8e9:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000be8ea
uuid_00000000000be8ec:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
escape_SB_string_CL_ArrowSS:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be8f0
	jmp uuid_00000000000be8f2
uuid_00000000000be8f0:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000be8ed
	jmp uuid_00000000000be8ef
uuid_00000000000be8ed:
	movb $1, -96(%rbp)
uuid_00000000000be8ef:
	mov -112(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000be8f2:
	mov -104(%RBP),%RSP
	add $-120, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be903
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be8f9
	jmp uuid_00000000000be8fb
uuid_00000000000be8f9:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be8f6
	jmp uuid_00000000000be8f8
uuid_00000000000be8f6:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be8f3
	jmp uuid_00000000000be8f5
uuid_00000000000be8f3:
	movb $1, -160(%rbp)
uuid_00000000000be8f5:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000be8f8:
	mov -176(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000be8fb:
	mov -168(%RBP),%RSP
	add $-232, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be900
	push %RBP
	jmp uuid_00000000000be8fd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be8fc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be8ff
uuid_00000000000be8fd:
uuid_00000000000be8ff:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000be902
uuid_00000000000be900:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000be902:
	mov -128(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000be905
uuid_00000000000be903:
	pushq $0
#call function escape-string : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000be905:
	mov -64(%RBP),%RSP
	add $-120, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
exit_SB_error_CL_ArrowNilConsASTString:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be925
	jmp uuid_00000000000be927
uuid_00000000000be925:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be912
	jmp uuid_00000000000be914
uuid_00000000000be912:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be909
	jmp uuid_00000000000be90b
uuid_00000000000be909:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000be906
	jmp uuid_00000000000be908
uuid_00000000000be906:
	movb $1, -440(%rbp)
uuid_00000000000be908:
	mov -456(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000be90b:
	mov -448(%RBP),%RSP
	add $-480, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be90f
	jmp uuid_00000000000be911
uuid_00000000000be90f:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be90c
	jmp uuid_00000000000be90e
uuid_00000000000be90c:
	movb $1, -344(%rbp)
uuid_00000000000be90e:
	mov -488(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000be911:
	mov -360(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000be914:
	mov -352(%RBP),%RSP
	add $-560, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be922
	jmp uuid_00000000000be924
uuid_00000000000be922:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be91c
	jmp uuid_00000000000be91e
uuid_00000000000be91c:
	push %RBP
	jmp uuid_00000000000be919
	jmp uuid_00000000000be91b
uuid_00000000000be919:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq $uuid_00000000000be915
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be916
	jmp uuid_00000000000be918
uuid_00000000000be916:
	movb $1, -648(%rbp)
uuid_00000000000be918:
	mov -672(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000be91b:
	mov -664(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000be91e:
	mov -656(%RBP),%RSP
	add $-680, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be91f
	jmp uuid_00000000000be921
uuid_00000000000be91f:
	movb $1, -248(%rbp)
uuid_00000000000be921:
	mov -568(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000be924:
	mov -264(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000be927:
	mov -256(%RBP),%RSP
	add $-680, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be93d
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be931
	jmp uuid_00000000000be933
uuid_00000000000be931:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be92e
	jmp uuid_00000000000be930
uuid_00000000000be92e:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000be92b
	jmp uuid_00000000000be92d
uuid_00000000000be92b:
	movb $1, -768(%rbp)
uuid_00000000000be92d:
	mov -864(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000be930:
	mov -784(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000be933:
	mov -776(%RBP),%RSP
	add $-936, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be93a
	push %RBP
	jmp uuid_00000000000be937
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be936
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be939
uuid_00000000000be937:
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be939:
	mov -944(%RBP),%RSP
	add $-944, %RSP
	jmp uuid_00000000000be93c
uuid_00000000000be93a:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be934
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be929
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be929
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be935
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be93c:
	mov -688(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000be93f
uuid_00000000000be93d:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be928
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be929
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be92a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000be93f:
	mov -168(%RBP),%RSP
	add $-680, %RSP
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
is_SB_variable_CL_ArrowU64String:
	pushq $0
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -32(%rbp)
	mov -48(%RBP), %AL
	mov $33, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9db
	push %RBP
	pushq -32(%rbp)
	mov -64(%RBP), %AL
	mov $36, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9d8
	push %RBP
	pushq -32(%rbp)
	mov -80(%RBP), %AL
	mov $37, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9d5
	push %RBP
	pushq -32(%rbp)
	mov -96(%RBP), %AL
	mov $38, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9d2
	push %RBP
	pushq -32(%rbp)
	mov -112(%RBP), %AL
	mov $42, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9cf
	push %RBP
	pushq -32(%rbp)
	mov -128(%RBP), %AL
	mov $43, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9cc
	push %RBP
	pushq -32(%rbp)
	mov -144(%RBP), %AL
	mov $45, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9c9
	push %RBP
	pushq -32(%rbp)
	mov -160(%RBP), %AL
	mov $46, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9c6
	push %RBP
	pushq -32(%rbp)
	mov -176(%RBP), %AL
	mov $47, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9c3
	push %RBP
	pushq -32(%rbp)
	mov -192(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9c0
	push %RBP
	pushq -32(%rbp)
	mov -208(%RBP), %AL
	mov $59, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9bd
	push %RBP
	pushq -32(%rbp)
	mov -224(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9ba
	push %RBP
	pushq -32(%rbp)
	mov -240(%RBP), %AL
	mov $61, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9b7
	push %RBP
	pushq -32(%rbp)
	mov -256(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9b4
	push %RBP
	pushq -32(%rbp)
	mov -272(%RBP), %AL
	mov $63, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9b1
	push %RBP
	pushq -32(%rbp)
	mov -288(%RBP), %AL
	mov $64, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9ae
	push %RBP
	pushq -32(%rbp)
	mov -304(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9ab
	push %RBP
	pushq -32(%rbp)
	mov -320(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9a8
	push %RBP
	pushq -32(%rbp)
	mov -336(%RBP), %AL
	mov $94, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9a5
	push %RBP
	pushq -32(%rbp)
	mov -352(%RBP), %AL
	mov $95, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be9a2
	push %RBP
	pushq -32(%rbp)
	mov -368(%RBP), %AL
	mov $97, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be99f
	push %RBP
	pushq -32(%rbp)
	mov -384(%RBP), %AL
	mov $98, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be99c
	push %RBP
	pushq -32(%rbp)
	mov -400(%RBP), %AL
	mov $99, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be999
	push %RBP
	pushq -32(%rbp)
	mov -416(%RBP), %AL
	mov $100, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be996
	push %RBP
	pushq -32(%rbp)
	mov -432(%RBP), %AL
	mov $101, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be993
	push %RBP
	pushq -32(%rbp)
	mov -448(%RBP), %AL
	mov $102, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be990
	push %RBP
	pushq -32(%rbp)
	mov -464(%RBP), %AL
	mov $103, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be98d
	push %RBP
	pushq -32(%rbp)
	mov -480(%RBP), %AL
	mov $104, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be98a
	push %RBP
	pushq -32(%rbp)
	mov -496(%RBP), %AL
	mov $105, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be987
	push %RBP
	pushq -32(%rbp)
	mov -512(%RBP), %AL
	mov $106, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be984
	push %RBP
	pushq -32(%rbp)
	mov -528(%RBP), %AL
	mov $107, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be981
	push %RBP
	pushq -32(%rbp)
	mov -544(%RBP), %AL
	mov $108, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be97e
	push %RBP
	pushq -32(%rbp)
	mov -560(%RBP), %AL
	mov $109, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be97b
	push %RBP
	pushq -32(%rbp)
	mov -576(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be978
	push %RBP
	pushq -32(%rbp)
	mov -592(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be975
	push %RBP
	pushq -32(%rbp)
	mov -608(%RBP), %AL
	mov $112, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be972
	push %RBP
	pushq -32(%rbp)
	mov -624(%RBP), %AL
	mov $113, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be96f
	push %RBP
	pushq -32(%rbp)
	mov -640(%RBP), %AL
	mov $114, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be96c
	push %RBP
	pushq -32(%rbp)
	mov -656(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be969
	push %RBP
	pushq -32(%rbp)
	mov -672(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be966
	push %RBP
	pushq -32(%rbp)
	mov -688(%RBP), %AL
	mov $117, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be963
	push %RBP
	pushq -32(%rbp)
	mov -704(%RBP), %AL
	mov $118, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be960
	push %RBP
	pushq -32(%rbp)
	mov -720(%RBP), %AL
	mov $119, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be95d
	push %RBP
	pushq -32(%rbp)
	mov -736(%RBP), %AL
	mov $120, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be95a
	push %RBP
	pushq -32(%rbp)
	mov -752(%RBP), %AL
	mov $121, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be957
	push %RBP
	pushq -32(%rbp)
	mov -768(%RBP), %AL
	mov $122, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be954
	push %RBP
	pushq -32(%rbp)
	mov -784(%RBP), %AL
	mov $124, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be951
	push %RBP
	pushq -32(%rbp)
	mov -800(%RBP), %AL
	mov $126, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be94e
	push %RBP
	jmp uuid_00000000000be94b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be94a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be94d
uuid_00000000000be94b:
uuid_00000000000be94d:
	mov -808(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000be950
uuid_00000000000be94e:
	movb $1, -24(%rbp)
uuid_00000000000be950:
	mov -792(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000be953
uuid_00000000000be951:
	movb $1, -24(%rbp)
uuid_00000000000be953:
	mov -776(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000be956
uuid_00000000000be954:
	movb $1, -24(%rbp)
uuid_00000000000be956:
	mov -760(%RBP),%RSP
	add $-768, %RSP
	jmp uuid_00000000000be959
uuid_00000000000be957:
	movb $1, -24(%rbp)
uuid_00000000000be959:
	mov -744(%RBP),%RSP
	add $-752, %RSP
	jmp uuid_00000000000be95c
uuid_00000000000be95a:
	movb $1, -24(%rbp)
uuid_00000000000be95c:
	mov -728(%RBP),%RSP
	add $-736, %RSP
	jmp uuid_00000000000be95f
uuid_00000000000be95d:
	movb $1, -24(%rbp)
uuid_00000000000be95f:
	mov -712(%RBP),%RSP
	add $-720, %RSP
	jmp uuid_00000000000be962
uuid_00000000000be960:
	movb $1, -24(%rbp)
uuid_00000000000be962:
	mov -696(%RBP),%RSP
	add $-704, %RSP
	jmp uuid_00000000000be965
uuid_00000000000be963:
	movb $1, -24(%rbp)
uuid_00000000000be965:
	mov -680(%RBP),%RSP
	add $-688, %RSP
	jmp uuid_00000000000be968
uuid_00000000000be966:
	movb $1, -24(%rbp)
uuid_00000000000be968:
	mov -664(%RBP),%RSP
	add $-672, %RSP
	jmp uuid_00000000000be96b
uuid_00000000000be969:
	movb $1, -24(%rbp)
uuid_00000000000be96b:
	mov -648(%RBP),%RSP
	add $-656, %RSP
	jmp uuid_00000000000be96e
uuid_00000000000be96c:
	movb $1, -24(%rbp)
uuid_00000000000be96e:
	mov -632(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000be971
uuid_00000000000be96f:
	movb $1, -24(%rbp)
uuid_00000000000be971:
	mov -616(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000be974
uuid_00000000000be972:
	movb $1, -24(%rbp)
uuid_00000000000be974:
	mov -600(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000be977
uuid_00000000000be975:
	movb $1, -24(%rbp)
uuid_00000000000be977:
	mov -584(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000be97a
uuid_00000000000be978:
	movb $1, -24(%rbp)
uuid_00000000000be97a:
	mov -568(%RBP),%RSP
	add $-576, %RSP
	jmp uuid_00000000000be97d
uuid_00000000000be97b:
	movb $1, -24(%rbp)
uuid_00000000000be97d:
	mov -552(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000be980
uuid_00000000000be97e:
	movb $1, -24(%rbp)
uuid_00000000000be980:
	mov -536(%RBP),%RSP
	add $-544, %RSP
	jmp uuid_00000000000be983
uuid_00000000000be981:
	movb $1, -24(%rbp)
uuid_00000000000be983:
	mov -520(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000be986
uuid_00000000000be984:
	movb $1, -24(%rbp)
uuid_00000000000be986:
	mov -504(%RBP),%RSP
	add $-512, %RSP
	jmp uuid_00000000000be989
uuid_00000000000be987:
	movb $1, -24(%rbp)
uuid_00000000000be989:
	mov -488(%RBP),%RSP
	add $-496, %RSP
	jmp uuid_00000000000be98c
uuid_00000000000be98a:
	movb $1, -24(%rbp)
uuid_00000000000be98c:
	mov -472(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000be98f
uuid_00000000000be98d:
	movb $1, -24(%rbp)
uuid_00000000000be98f:
	mov -456(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000be992
uuid_00000000000be990:
	movb $1, -24(%rbp)
uuid_00000000000be992:
	mov -440(%RBP),%RSP
	add $-448, %RSP
	jmp uuid_00000000000be995
uuid_00000000000be993:
	movb $1, -24(%rbp)
uuid_00000000000be995:
	mov -424(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000be998
uuid_00000000000be996:
	movb $1, -24(%rbp)
uuid_00000000000be998:
	mov -408(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000be99b
uuid_00000000000be999:
	movb $1, -24(%rbp)
uuid_00000000000be99b:
	mov -392(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000be99e
uuid_00000000000be99c:
	movb $1, -24(%rbp)
uuid_00000000000be99e:
	mov -376(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000be9a1
uuid_00000000000be99f:
	movb $1, -24(%rbp)
uuid_00000000000be9a1:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000be9a4
uuid_00000000000be9a2:
	movb $1, -24(%rbp)
uuid_00000000000be9a4:
	mov -344(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000be9a7
uuid_00000000000be9a5:
	movb $1, -24(%rbp)
uuid_00000000000be9a7:
	mov -328(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000be9aa
uuid_00000000000be9a8:
	movb $1, -24(%rbp)
uuid_00000000000be9aa:
	mov -312(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000be9ad
uuid_00000000000be9ab:
	movb $1, -24(%rbp)
uuid_00000000000be9ad:
	mov -296(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000be9b0
uuid_00000000000be9ae:
	movb $1, -24(%rbp)
uuid_00000000000be9b0:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000be9b3
uuid_00000000000be9b1:
	movb $1, -24(%rbp)
uuid_00000000000be9b3:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000be9b6
uuid_00000000000be9b4:
	movb $1, -24(%rbp)
uuid_00000000000be9b6:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000be9b9
uuid_00000000000be9b7:
	movb $1, -24(%rbp)
uuid_00000000000be9b9:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000be9bc
uuid_00000000000be9ba:
	movb $1, -24(%rbp)
uuid_00000000000be9bc:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000be9bf
uuid_00000000000be9bd:
	movb $1, -24(%rbp)
uuid_00000000000be9bf:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000be9c2
uuid_00000000000be9c0:
	push %RBP
	mov -8(%RBP), %RAX
	inc %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000be944
	jmp uuid_00000000000be946
uuid_00000000000be944:
	movb $1, -24(%rbp)
uuid_00000000000be946:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	inc %RAX
	push %RAX
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be947
	jmp uuid_00000000000be949
uuid_00000000000be947:
	movb $1, -24(%rbp)
uuid_00000000000be949:
	mov -208(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000be9c2:
	mov -184(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000be9c5
uuid_00000000000be9c3:
	movb $1, -24(%rbp)
uuid_00000000000be9c5:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000be9c8
uuid_00000000000be9c6:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000be940
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be941
	movb $1, -24(%rbp)
	jmp uuid_00000000000be943
uuid_00000000000be941:
uuid_00000000000be943:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000be9c8:
	mov -152(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000be9cb
uuid_00000000000be9c9:
	movb $1, -24(%rbp)
uuid_00000000000be9cb:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000be9ce
uuid_00000000000be9cc:
	movb $1, -24(%rbp)
uuid_00000000000be9ce:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000be9d1
uuid_00000000000be9cf:
	movb $1, -24(%rbp)
uuid_00000000000be9d1:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000be9d4
uuid_00000000000be9d2:
	movb $1, -24(%rbp)
uuid_00000000000be9d4:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000be9d7
uuid_00000000000be9d5:
	movb $1, -24(%rbp)
uuid_00000000000be9d7:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000be9da
uuid_00000000000be9d8:
	movb $1, -24(%rbp)
uuid_00000000000be9da:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000be9dd
uuid_00000000000be9db:
	movb $1, -24(%rbp)
uuid_00000000000be9dd:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000be9de
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000be9df
	jmp uuid_00000000000be9e1
uuid_00000000000be9df:
	movb $0, -24(%rbp)
uuid_00000000000be9e1:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -24(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_string_CL_ArrowStringIsUsed:
	pushq $uuid_00000000000be796
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be9f4
	push %RBP
	pushq -32(%rbp)
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be9f1
	push %RBP
	pushq -32(%rbp)
	mov -80(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be9ee
	push %RBP
	pushq -32(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be9eb
	push %RBP
	pushq -32(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be9e8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000be9e7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000be9ea
uuid_00000000000be9e8:
	movq $uuid_00000000000be9e6, -24(%rbp)
uuid_00000000000be9ea:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000be9ed
uuid_00000000000be9eb:
	movq $uuid_00000000000be9e5, -24(%rbp)
uuid_00000000000be9ed:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000be9f0
uuid_00000000000be9ee:
	movq $uuid_00000000000be9e4, -24(%rbp)
uuid_00000000000be9f0:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000be9f3
uuid_00000000000be9f1:
	movq $uuid_00000000000be9e3, -24(%rbp)
uuid_00000000000be9f3:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000be9f6
uuid_00000000000be9f4:
	movq $uuid_00000000000be9e2, -24(%rbp)
uuid_00000000000be9f6:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_string_CL_ArrowStringType:
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
to_SB_string_CL_ArrowSListType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea13
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be9ff
	jmp uuid_00000000000bea01
uuid_00000000000be9ff:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000be9fc
	jmp uuid_00000000000be9fe
uuid_00000000000be9fc:
	push %RBP
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	jmp uuid_00000000000be9f9
	jmp uuid_00000000000be9fb
uuid_00000000000be9f9:
	movb $1, -216(%rbp)
uuid_00000000000be9fb:
	mov -280(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000be9fe:
	mov -232(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000bea01:
	mov -224(%RBP),%RSP
	add $-304, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bea10
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea08
	jmp uuid_00000000000bea0a
uuid_00000000000bea08:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bea05
	jmp uuid_00000000000bea07
uuid_00000000000bea05:
	push %RBP
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	jmp uuid_00000000000bea02
	jmp uuid_00000000000bea04
uuid_00000000000bea02:
	movb $1, -360(%rbp)
uuid_00000000000bea04:
	mov -424(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000bea07:
	mov -376(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000bea0a:
	mov -368(%RBP),%RSP
	add $-448, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bea0d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bea0c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bea0f
uuid_00000000000bea0d:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<List<Type>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowSListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000bea0b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000bea0f:
	mov -312(%RBP),%RSP
	add $-448, %RSP
	jmp uuid_00000000000bea12
uuid_00000000000bea10:
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000bea12:
	mov -168(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000bea15
uuid_00000000000bea13:
uuid_00000000000bea15:
	mov -120(%RBP),%RSP
	add $-160, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
to_SB_string_SB_impl_CL_ArrowSType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea5d
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea19
	jmp uuid_00000000000bea1b
uuid_00000000000bea19:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bea16
	jmp uuid_00000000000bea18
uuid_00000000000bea16:
	movb $1, -152(%rbp)
uuid_00000000000bea18:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bea1b:
	mov -160(%RBP),%RSP
	add $-176, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bea5a
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea22
	jmp uuid_00000000000bea24
uuid_00000000000bea22:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bea1f
	jmp uuid_00000000000bea21
uuid_00000000000bea1f:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bea1c
	jmp uuid_00000000000bea1e
uuid_00000000000bea1c:
	movb $1, -216(%rbp)
uuid_00000000000bea1e:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000bea21:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000bea24:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bea57
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea2c
	jmp uuid_00000000000bea2e
uuid_00000000000bea2c:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea29
	jmp uuid_00000000000bea2b
uuid_00000000000bea29:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bea26
	jmp uuid_00000000000bea28
uuid_00000000000bea26:
	movb $1, -328(%rbp)
uuid_00000000000bea28:
	mov -392(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000bea2b:
	mov -344(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000bea2e:
	mov -336(%RBP),%RSP
	add $-400, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bea54
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea3f
	jmp uuid_00000000000bea41
uuid_00000000000bea3f:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea35
	jmp uuid_00000000000bea37
uuid_00000000000bea35:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea32
	jmp uuid_00000000000bea34
uuid_00000000000bea32:
	push %RBP
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	jmp uuid_00000000000bea2f
	jmp uuid_00000000000bea31
uuid_00000000000bea2f:
	movb $1, -504(%rbp)
uuid_00000000000bea31:
	mov -568(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000bea34:
	mov -520(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000bea37:
	mov -512(%RBP),%RSP
	add $-592, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bea3c
	jmp uuid_00000000000bea3e
uuid_00000000000bea3c:
	push %RBP
	mov -416(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq $uuid_00000000000bea38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bea39
	jmp uuid_00000000000bea3b
uuid_00000000000bea39:
	movb $1, -440(%rbp)
uuid_00000000000bea3b:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000bea3e:
	mov -456(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000bea41:
	mov -448(%RBP),%RSP
	add $-608, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bea51
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea48
	jmp uuid_00000000000bea4a
uuid_00000000000bea48:
	push %RBP
	mov -632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bea45
	jmp uuid_00000000000bea47
uuid_00000000000bea45:
	push %RBP
	mov -624(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bea42
	jmp uuid_00000000000bea44
uuid_00000000000bea42:
	movb $1, -648(%rbp)
uuid_00000000000bea44:
	mov -712(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000bea47:
	mov -664(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000bea4a:
	mov -656(%RBP),%RSP
	add $-720, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bea4e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bea4d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bea50
uuid_00000000000bea4e:
	pushq $0
	pushq -720(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000bea4b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<List<Type>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowSListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000bea4c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000bea50:
	mov -616(%RBP),%RSP
	add $-720, %RSP
	jmp uuid_00000000000bea53
uuid_00000000000bea51:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000bea38
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000bea53:
	mov -408(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000bea56
uuid_00000000000bea54:
	pushq $0
	pushq -400(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000bea56:
	mov -296(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000bea59
uuid_00000000000bea57:
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000bea25
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000bea59:
	mov -184(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000bea5c
uuid_00000000000bea5a:
	pushq $0
	pushq -176(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000bea5c:
	mov -120(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000bea5f
uuid_00000000000bea5d:
	pushq $0
	pushq $uuid_00000000000be850
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000bea5f:
	mov -88(%RBP),%RSP
	add $-112, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTypeType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea66
	jmp uuid_00000000000bea68
uuid_00000000000bea66:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea63
	jmp uuid_00000000000bea65
uuid_00000000000bea63:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea60
	jmp uuid_00000000000bea62
uuid_00000000000bea60:
	movb $1, -192(%rbp)
uuid_00000000000bea62:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000bea65:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000bea68:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beacd
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea7b
	jmp uuid_00000000000bea7d
uuid_00000000000bea7b:
	push %RBP
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea6c
	jmp uuid_00000000000bea6e
uuid_00000000000bea6c:
	push %RBP
	mov -368(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bea69
	jmp uuid_00000000000bea6b
uuid_00000000000bea69:
	movb $1, -384(%rbp)
uuid_00000000000bea6b:
	mov -400(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000bea6e:
	mov -392(%RBP),%RSP
	add $-408, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bea78
	jmp uuid_00000000000bea7a
uuid_00000000000bea78:
	push %RBP
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea72
	jmp uuid_00000000000bea74
uuid_00000000000bea72:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bea6f
	jmp uuid_00000000000bea71
uuid_00000000000bea6f:
	movb $1, -448(%rbp)
uuid_00000000000bea71:
	mov -464(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000bea74:
	mov -456(%RBP),%RSP
	add $-472, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bea75
	jmp uuid_00000000000bea77
uuid_00000000000bea75:
	movb $1, -336(%rbp)
uuid_00000000000bea77:
	mov -416(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000bea7a:
	mov -352(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000bea7d:
	mov -344(%RBP),%RSP
	add $-472, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beaca
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea96
	jmp uuid_00000000000bea98
uuid_00000000000bea96:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea84
	jmp uuid_00000000000bea86
uuid_00000000000bea84:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bea81
	jmp uuid_00000000000bea83
uuid_00000000000bea81:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bea7e
	jmp uuid_00000000000bea80
uuid_00000000000bea7e:
	movb $1, -592(%rbp)
uuid_00000000000bea80:
	mov -640(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000bea83:
	mov -608(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000bea86:
	mov -600(%RBP),%RSP
	add $-664, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bea93
	jmp uuid_00000000000bea95
uuid_00000000000bea93:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bea8d
	jmp uuid_00000000000bea8f
uuid_00000000000bea8d:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bea8a
	jmp uuid_00000000000bea8c
uuid_00000000000bea8a:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bea87
	jmp uuid_00000000000bea89
uuid_00000000000bea87:
	movb $1, -704(%rbp)
uuid_00000000000bea89:
	mov -752(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000bea8c:
	mov -720(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000bea8f:
	mov -712(%RBP),%RSP
	add $-776, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bea90
	jmp uuid_00000000000bea92
uuid_00000000000bea90:
	movb $1, -544(%rbp)
uuid_00000000000bea92:
	mov -672(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000bea95:
	mov -560(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000bea98:
	mov -552(%RBP),%RSP
	add $-776, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beac7
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -840(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beab7
	jmp uuid_00000000000beab9
uuid_00000000000beab7:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beaa5
	jmp uuid_00000000000beaa7
uuid_00000000000beaa5:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000beaa2
	jmp uuid_00000000000beaa4
uuid_00000000000beaa2:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bea9f
	jmp uuid_00000000000beaa1
uuid_00000000000bea9f:
	movb $1, -896(%rbp)
uuid_00000000000beaa1:
	mov -960(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000beaa4:
	mov -912(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000beaa7:
	mov -904(%RBP),%RSP
	add $-968, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beab4
	jmp uuid_00000000000beab6
uuid_00000000000beab4:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq $0
	push %RBP
	mov -1000(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beaae
	jmp uuid_00000000000beab0
uuid_00000000000beaae:
	push %RBP
	mov -992(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000beaab
	jmp uuid_00000000000beaad
uuid_00000000000beaab:
	push %RBP
	mov -984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000beaa8
	jmp uuid_00000000000beaaa
uuid_00000000000beaa8:
	movb $1, -1008(%rbp)
uuid_00000000000beaaa:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000beaad:
	mov -1024(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000beab0:
	mov -1016(%RBP),%RSP
	add $-1080, %RSP
	mov -1008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beab1
	jmp uuid_00000000000beab3
uuid_00000000000beab1:
	movb $1, -848(%rbp)
uuid_00000000000beab3:
	mov -976(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000beab6:
	mov -864(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000beab9:
	mov -856(%RBP),%RSP
	add $-1080, %RSP
	mov -848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beac4
	push %RBP
	jmp uuid_00000000000beac1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000beac0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000beac3
uuid_00000000000beac1:
uuid_00000000000beac3:
	mov -1088(%RBP),%RSP
	add $-1088, %RSP
	jmp uuid_00000000000beac6
uuid_00000000000beac4:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -968(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000beabd
	jmp uuid_00000000000beabf
uuid_00000000000beabd:
	push %RBP
#call function == : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000beaba
	jmp uuid_00000000000beabc
uuid_00000000000beaba:
	movq $1, -64(%rbp)
uuid_00000000000beabc:
	mov -1096(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000beabf:
	mov -1088(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000beac6:
	mov -784(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000beac9
uuid_00000000000beac7:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bea9c
	jmp uuid_00000000000bea9e
uuid_00000000000bea9c:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bea99
	jmp uuid_00000000000bea9b
uuid_00000000000bea99:
	movq $1, -64(%rbp)
uuid_00000000000bea9b:
	mov -792(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000bea9e:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000beac9:
	mov -480(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000beacc
uuid_00000000000beaca:
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000beacc:
	mov -272(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000beacf
uuid_00000000000beacd:
	movq $1, -64(%rbp)
uuid_00000000000beacf:
	mov -128(%RBP),%RSP
	add $-264, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
typeof_CL_ArrowTypeAST:
#call function .lookup : Arrow<Cons<Cons<BTreeIs<AST,Type>,AST>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_index_CL_BTreeIsTypeASTBTreeIsTypeASTCaseNumber0, %r15
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTypeConsTypeConsASTBTreeIsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
ascript_CL_ArrowNilConsTypeAST:
#call function .bind : Arrow<Cons<Cons<Array<BTreeIs<AST,Type>,?>,AST>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$type_SB_index_CL_BTreeIsTypeASTBTreeIsTypeASTCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsTypeConsASTArray_QM_BTreeIsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bede2
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beddf
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beae3
	jmp uuid_00000000000beae5
uuid_00000000000beae3:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000beae0
	jmp uuid_00000000000beae2
uuid_00000000000beae0:
	push %RBP
	mov -536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000beadd
	jmp uuid_00000000000beadf
uuid_00000000000beadd:
	movb $1, -560(%rbp)
uuid_00000000000beadf:
	mov -656(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000beae2:
	mov -576(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000beae5:
	mov -568(%RBP),%RSP
	add $-728, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beddc
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -808(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beaec
	jmp uuid_00000000000beaee
uuid_00000000000beaec:
	push %RBP
	jmp uuid_00000000000beae9
	jmp uuid_00000000000beaeb
uuid_00000000000beae9:
	push %RBP
	jmp uuid_00000000000beae6
	jmp uuid_00000000000beae8
uuid_00000000000beae6:
	movb $1, -816(%rbp)
uuid_00000000000beae8:
	mov -840(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000beaeb:
	mov -832(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000beaee:
	mov -824(%RBP),%RSP
	add $-840, %RSP
	mov -816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedd9
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beaf5
	jmp uuid_00000000000beaf7
uuid_00000000000beaf5:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000beaf2
	jmp uuid_00000000000beaf4
uuid_00000000000beaf2:
	push %RBP
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	jmp uuid_00000000000beaef
	jmp uuid_00000000000beaf1
uuid_00000000000beaef:
	movb $1, -928(%rbp)
uuid_00000000000beaf1:
	mov -1024(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000beaf4:
	mov -944(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000beaf7:
	mov -936(%RBP),%RSP
	add $-1080, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedd6
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb29
	jmp uuid_00000000000beb2b
uuid_00000000000beb29:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb16
	jmp uuid_00000000000beb18
uuid_00000000000beb16:
	push %RBP
	mov -1248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb04
	jmp uuid_00000000000beb06
uuid_00000000000beb04:
	push %RBP
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	jmp uuid_00000000000beb01
	jmp uuid_00000000000beb03
uuid_00000000000beb01:
	movb $1, -1360(%rbp)
uuid_00000000000beb03:
	mov -1376(%RBP),%RSP
	add $-1400, %RSP
uuid_00000000000beb06:
	mov -1368(%RBP),%RSP
	add $-1400, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beb13
	jmp uuid_00000000000beb15
uuid_00000000000beb13:
	push %RBP
	mov -1240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb0d
	jmp uuid_00000000000beb0f
uuid_00000000000beb0d:
	push %RBP
	jmp uuid_00000000000beb0a
	jmp uuid_00000000000beb0c
uuid_00000000000beb0a:
	push %RBP
	jmp uuid_00000000000beb07
	jmp uuid_00000000000beb09
uuid_00000000000beb07:
	movb $1, -1488(%rbp)
uuid_00000000000beb09:
	mov -1512(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000beb0c:
	mov -1504(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000beb0f:
	mov -1496(%RBP),%RSP
	add $-1512, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beb10
	jmp uuid_00000000000beb12
uuid_00000000000beb10:
	movb $1, -1264(%rbp)
uuid_00000000000beb12:
	mov -1408(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000beb15:
	mov -1280(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000beb18:
	mov -1272(%RBP),%RSP
	add $-1512, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beb26
	jmp uuid_00000000000beb28
uuid_00000000000beb26:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1592(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb20
	jmp uuid_00000000000beb22
uuid_00000000000beb20:
	push %RBP
	jmp uuid_00000000000beb1d
	jmp uuid_00000000000beb1f
uuid_00000000000beb1d:
	push %RBP
	mov -1528(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1632(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000beb1a
	jmp uuid_00000000000beb1c
uuid_00000000000beb1a:
	movb $1, -1600(%rbp)
uuid_00000000000beb1c:
	mov -1624(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000beb1f:
	mov -1616(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000beb22:
	mov -1608(%RBP),%RSP
	add $-1632, %RSP
	mov -1600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beb23
	jmp uuid_00000000000beb25
uuid_00000000000beb23:
	movb $1, -1168(%rbp)
uuid_00000000000beb25:
	mov -1520(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000beb28:
	mov -1184(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000beb2b:
	mov -1176(%RBP),%RSP
	add $-1632, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedd3
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -1712(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb66
	jmp uuid_00000000000beb68
uuid_00000000000beb66:
	push %RBP
	mov -1704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1808(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb54
	jmp uuid_00000000000beb56
uuid_00000000000beb54:
	push %RBP
	mov -1800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1904(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb4b
	jmp uuid_00000000000beb4d
uuid_00000000000beb4b:
	push %RBP
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	jmp uuid_00000000000beb48
	jmp uuid_00000000000beb4a
uuid_00000000000beb48:
	movb $1, -1912(%rbp)
uuid_00000000000beb4a:
	mov -1928(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000beb4d:
	mov -1920(%RBP),%RSP
	add $-1952, %RSP
	mov -1912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beb51
	jmp uuid_00000000000beb53
uuid_00000000000beb51:
	push %RBP
	mov -1792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000beb4e
	jmp uuid_00000000000beb50
uuid_00000000000beb4e:
	movb $1, -1816(%rbp)
uuid_00000000000beb50:
	mov -1960(%RBP),%RSP
	add $-2032, %RSP
uuid_00000000000beb53:
	mov -1832(%RBP),%RSP
	add $-2032, %RSP
uuid_00000000000beb56:
	mov -1824(%RBP),%RSP
	add $-2032, %RSP
	mov -1816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beb63
	jmp uuid_00000000000beb65
uuid_00000000000beb63:
	push %RBP
	mov -1696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2112(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb5d
	jmp uuid_00000000000beb5f
uuid_00000000000beb5d:
	push %RBP
	jmp uuid_00000000000beb5a
	jmp uuid_00000000000beb5c
uuid_00000000000beb5a:
	push %RBP
	mov -2048(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2152(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000beb57
	jmp uuid_00000000000beb59
uuid_00000000000beb57:
	movb $1, -2120(%rbp)
uuid_00000000000beb59:
	mov -2144(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000beb5c:
	mov -2136(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000beb5f:
	mov -2128(%RBP),%RSP
	add $-2152, %RSP
	mov -2120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beb60
	jmp uuid_00000000000beb62
uuid_00000000000beb60:
	movb $1, -1720(%rbp)
uuid_00000000000beb62:
	mov -2040(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000beb65:
	mov -1736(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000beb68:
	mov -1728(%RBP),%RSP
	add $-2152, %RSP
	mov -1720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedd0
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -2232(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb95
	jmp uuid_00000000000beb97
uuid_00000000000beb95:
	push %RBP
	mov -2224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2328(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb82
	jmp uuid_00000000000beb84
uuid_00000000000beb82:
	push %RBP
	jmp uuid_00000000000beb7f
	jmp uuid_00000000000beb81
uuid_00000000000beb7f:
	push %RBP
	mov -2264(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000beb7c
	jmp uuid_00000000000beb7e
uuid_00000000000beb7c:
	movb $1, -2336(%rbp)
uuid_00000000000beb7e:
	mov -2360(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000beb81:
	mov -2352(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000beb84:
	mov -2344(%RBP),%RSP
	add $-2368, %RSP
	mov -2336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beb92
	jmp uuid_00000000000beb94
uuid_00000000000beb92:
	push %RBP
	mov -2216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2448(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb8c
	jmp uuid_00000000000beb8e
uuid_00000000000beb8c:
	push %RBP
	jmp uuid_00000000000beb89
	jmp uuid_00000000000beb8b
uuid_00000000000beb89:
	push %RBP
	mov -2384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2488(%rbp)
	pushq $uuid_00000000000beb85
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000beb86
	jmp uuid_00000000000beb88
uuid_00000000000beb86:
	movb $1, -2456(%rbp)
uuid_00000000000beb88:
	mov -2480(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000beb8b:
	mov -2472(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000beb8e:
	mov -2464(%RBP),%RSP
	add $-2488, %RSP
	mov -2456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beb8f
	jmp uuid_00000000000beb91
uuid_00000000000beb8f:
	movb $1, -2240(%rbp)
uuid_00000000000beb91:
	mov -2376(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000beb94:
	mov -2256(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000beb97:
	mov -2248(%RBP),%RSP
	add $-2488, %RSP
	mov -2240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedcd
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -2568(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bebb2
	jmp uuid_00000000000bebb4
uuid_00000000000bebb2:
	push %RBP
	mov -2560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb9f
	jmp uuid_00000000000beba1
uuid_00000000000beb9f:
	push %RBP
	jmp uuid_00000000000beb9c
	jmp uuid_00000000000beb9e
uuid_00000000000beb9c:
	push %RBP
	mov -2600(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000beb99
	jmp uuid_00000000000beb9b
uuid_00000000000beb99:
	movb $1, -2672(%rbp)
uuid_00000000000beb9b:
	mov -2696(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000beb9e:
	mov -2688(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000beba1:
	mov -2680(%RBP),%RSP
	add $-2704, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bebaf
	jmp uuid_00000000000bebb1
uuid_00000000000bebaf:
	push %RBP
	mov -2552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2784(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beba9
	jmp uuid_00000000000bebab
uuid_00000000000beba9:
	push %RBP
	jmp uuid_00000000000beba6
	jmp uuid_00000000000beba8
uuid_00000000000beba6:
	push %RBP
	mov -2720(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2824(%rbp)
	pushq $uuid_00000000000beba2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000beba3
	jmp uuid_00000000000beba5
uuid_00000000000beba3:
	movb $1, -2792(%rbp)
uuid_00000000000beba5:
	mov -2816(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000beba8:
	mov -2808(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000bebab:
	mov -2800(%RBP),%RSP
	add $-2824, %RSP
	mov -2792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bebac
	jmp uuid_00000000000bebae
uuid_00000000000bebac:
	movb $1, -2576(%rbp)
uuid_00000000000bebae:
	mov -2712(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000bebb1:
	mov -2592(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000bebb4:
	mov -2584(%RBP),%RSP
	add $-2824, %RSP
	mov -2576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedca
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -2904(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bebd7
	jmp uuid_00000000000bebd9
uuid_00000000000bebd7:
	push %RBP
	mov -2896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bebd4
	jmp uuid_00000000000bebd6
uuid_00000000000bebd4:
	push %RBP
	mov -2888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3080(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bebce
	jmp uuid_00000000000bebd0
uuid_00000000000bebce:
	push %RBP
	mov -3072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bebcb
	jmp uuid_00000000000bebcd
uuid_00000000000bebcb:
	push %RBP
	mov -3064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bebc5
	jmp uuid_00000000000bebc7
uuid_00000000000bebc5:
	push %RBP
	mov -3248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bebc2
	jmp uuid_00000000000bebc4
uuid_00000000000bebc2:
	push %RBP
	mov -3240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3432(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bebbc
	jmp uuid_00000000000bebbe
uuid_00000000000bebbc:
	push %RBP
	jmp uuid_00000000000bebb9
	jmp uuid_00000000000bebbb
uuid_00000000000bebb9:
	push %RBP
	mov -3368(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3472(%rbp)
	pushq $uuid_00000000000bebb5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bebb6
	jmp uuid_00000000000bebb8
uuid_00000000000bebb6:
	movb $1, -3440(%rbp)
uuid_00000000000bebb8:
	mov -3464(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000bebbb:
	mov -3456(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000bebbe:
	mov -3448(%RBP),%RSP
	add $-3472, %RSP
	mov -3440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bebbf
	jmp uuid_00000000000bebc1
uuid_00000000000bebbf:
	movb $1, -3264(%rbp)
uuid_00000000000bebc1:
	mov -3360(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000bebc4:
	mov -3280(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000bebc7:
	mov -3272(%RBP),%RSP
	add $-3472, %RSP
	mov -3264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bebc8
	jmp uuid_00000000000bebca
uuid_00000000000bebc8:
	movb $1, -3088(%rbp)
uuid_00000000000bebca:
	mov -3184(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000bebcd:
	mov -3104(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000bebd0:
	mov -3096(%RBP),%RSP
	add $-3472, %RSP
	mov -3088(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bebd1
	jmp uuid_00000000000bebd3
uuid_00000000000bebd1:
	movb $1, -2912(%rbp)
uuid_00000000000bebd3:
	mov -3008(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000bebd6:
	mov -2928(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000bebd9:
	mov -2920(%RBP),%RSP
	add $-3472, %RSP
	mov -2912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedc7
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -3552(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bebfb
	jmp uuid_00000000000bebfd
uuid_00000000000bebfb:
	push %RBP
	mov -3544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3648(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bebe9
	jmp uuid_00000000000bebeb
uuid_00000000000bebe9:
	push %RBP
	mov -3640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3744(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bebe0
	jmp uuid_00000000000bebe2
uuid_00000000000bebe0:
	push %RBP
	pushq -3720(%RBP)
	pushq -3728(%RBP)
	pushq -3736(%RBP)
	jmp uuid_00000000000bebdd
	jmp uuid_00000000000bebdf
uuid_00000000000bebdd:
	movb $1, -3752(%rbp)
uuid_00000000000bebdf:
	mov -3768(%RBP),%RSP
	add $-3792, %RSP
uuid_00000000000bebe2:
	mov -3760(%RBP),%RSP
	add $-3792, %RSP
	mov -3752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bebe6
	jmp uuid_00000000000bebe8
uuid_00000000000bebe6:
	push %RBP
	mov -3632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bebe3
	jmp uuid_00000000000bebe5
uuid_00000000000bebe3:
	movb $1, -3656(%rbp)
uuid_00000000000bebe5:
	mov -3800(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000bebe8:
	mov -3672(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000bebeb:
	mov -3664(%RBP),%RSP
	add $-3872, %RSP
	mov -3656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bebf8
	jmp uuid_00000000000bebfa
uuid_00000000000bebf8:
	push %RBP
	mov -3536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3952(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bebf2
	jmp uuid_00000000000bebf4
uuid_00000000000bebf2:
	push %RBP
	jmp uuid_00000000000bebef
	jmp uuid_00000000000bebf1
uuid_00000000000bebef:
	push %RBP
	mov -3888(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3992(%rbp)
	pushq $uuid_00000000000be915
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bebec
	jmp uuid_00000000000bebee
uuid_00000000000bebec:
	movb $1, -3960(%rbp)
uuid_00000000000bebee:
	mov -3984(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000bebf1:
	mov -3976(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000bebf4:
	mov -3968(%RBP),%RSP
	add $-3992, %RSP
	mov -3960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bebf5
	jmp uuid_00000000000bebf7
uuid_00000000000bebf5:
	movb $1, -3560(%rbp)
uuid_00000000000bebf7:
	mov -3880(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000bebfa:
	mov -3576(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000bebfd:
	mov -3568(%RBP),%RSP
	add $-3992, %RSP
	mov -3560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedc4
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4072(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec41
	jmp uuid_00000000000bec43
uuid_00000000000bec41:
	push %RBP
	mov -4064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4168(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec2e
	jmp uuid_00000000000bec30
uuid_00000000000bec2e:
	push %RBP
	jmp uuid_00000000000bec2b
	jmp uuid_00000000000bec2d
uuid_00000000000bec2b:
	movb $1, -4176(%rbp)
uuid_00000000000bec2d:
	mov -4192(%RBP),%RSP
	add $-4192, %RSP
uuid_00000000000bec30:
	mov -4184(%RBP),%RSP
	add $-4192, %RSP
	mov -4176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bec3e
	jmp uuid_00000000000bec40
uuid_00000000000bec3e:
	push %RBP
	mov -4056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4272(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec38
	jmp uuid_00000000000bec3a
uuid_00000000000bec38:
	push %RBP
	jmp uuid_00000000000bec35
	jmp uuid_00000000000bec37
uuid_00000000000bec35:
	push %RBP
	mov -4208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4312(%rbp)
	pushq $uuid_00000000000bec31
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bec32
	jmp uuid_00000000000bec34
uuid_00000000000bec32:
	movb $1, -4280(%rbp)
uuid_00000000000bec34:
	mov -4304(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000bec37:
	mov -4296(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000bec3a:
	mov -4288(%RBP),%RSP
	add $-4312, %RSP
	mov -4280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bec3b
	jmp uuid_00000000000bec3d
uuid_00000000000bec3b:
	movb $1, -4080(%rbp)
uuid_00000000000bec3d:
	mov -4200(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000bec40:
	mov -4096(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000bec43:
	mov -4088(%RBP),%RSP
	add $-4312, %RSP
	mov -4080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedc1
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec62
	jmp uuid_00000000000bec64
uuid_00000000000bec62:
	push %RBP
	mov -4384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bec5f
	jmp uuid_00000000000bec61
uuid_00000000000bec5f:
	push %RBP
	mov -4376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4568(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec59
	jmp uuid_00000000000bec5b
uuid_00000000000bec59:
	push %RBP
	jmp uuid_00000000000bec56
	jmp uuid_00000000000bec58
uuid_00000000000bec56:
	push %RBP
	mov -4504(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4608(%rbp)
	pushq $uuid_00000000000bec52
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bec53
	jmp uuid_00000000000bec55
uuid_00000000000bec53:
	movb $1, -4576(%rbp)
uuid_00000000000bec55:
	mov -4600(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000bec58:
	mov -4592(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000bec5b:
	mov -4584(%RBP),%RSP
	add $-4608, %RSP
	mov -4576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bec5c
	jmp uuid_00000000000bec5e
uuid_00000000000bec5c:
	movb $1, -4400(%rbp)
uuid_00000000000bec5e:
	mov -4496(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000bec61:
	mov -4416(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000bec64:
	mov -4408(%RBP),%RSP
	add $-4608, %RSP
	mov -4400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedbe
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4688(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec75
	jmp uuid_00000000000bec77
uuid_00000000000bec75:
	push %RBP
	mov -4680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bec72
	jmp uuid_00000000000bec74
uuid_00000000000bec72:
	push %RBP
	mov -4672(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4864(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec6c
	jmp uuid_00000000000bec6e
uuid_00000000000bec6c:
	push %RBP
	jmp uuid_00000000000bec69
	jmp uuid_00000000000bec6b
uuid_00000000000bec69:
	push %RBP
	mov -4800(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4904(%rbp)
	pushq $uuid_00000000000bec65
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bec66
	jmp uuid_00000000000bec68
uuid_00000000000bec66:
	movb $1, -4872(%rbp)
uuid_00000000000bec68:
	mov -4896(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000bec6b:
	mov -4888(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000bec6e:
	mov -4880(%RBP),%RSP
	add $-4904, %RSP
	mov -4872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bec6f
	jmp uuid_00000000000bec71
uuid_00000000000bec6f:
	movb $1, -4696(%rbp)
uuid_00000000000bec71:
	mov -4792(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000bec74:
	mov -4712(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000bec77:
	mov -4704(%RBP),%RSP
	add $-4904, %RSP
	mov -4696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedbb
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4984(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000becd6
	jmp uuid_00000000000becd8
uuid_00000000000becd6:
	push %RBP
	mov -4976(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000becd3
	jmp uuid_00000000000becd5
uuid_00000000000becd3:
	push %RBP
	mov -4968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5160(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beccd
	jmp uuid_00000000000beccf
uuid_00000000000beccd:
	push %RBP
	pushq -5136(%RBP)
	pushq -5144(%RBP)
	pushq -5152(%RBP)
	jmp uuid_00000000000becca
	jmp uuid_00000000000beccc
uuid_00000000000becca:
	push %RBP
	mov -5128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -5288(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000becc7
	jmp uuid_00000000000becc9
uuid_00000000000becc7:
	push %RBP
	mov -5120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000becc1
	jmp uuid_00000000000becc3
uuid_00000000000becc1:
	push %RBP
	jmp uuid_00000000000becbe
	jmp uuid_00000000000becc0
uuid_00000000000becbe:
	push %RBP
	mov -5304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000becbb
	jmp uuid_00000000000becbd
uuid_00000000000becbb:
	movb $1, -5376(%rbp)
uuid_00000000000becbd:
	mov -5400(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000becc0:
	mov -5392(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000becc3:
	mov -5384(%RBP),%RSP
	add $-5408, %RSP
	mov -5376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000becc4
	jmp uuid_00000000000becc6
uuid_00000000000becc4:
	movb $1, -5168(%rbp)
uuid_00000000000becc6:
	mov -5296(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000becc9:
	mov -5216(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000beccc:
	mov -5184(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000beccf:
	mov -5176(%RBP),%RSP
	add $-5408, %RSP
	mov -5168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000becd0
	jmp uuid_00000000000becd2
uuid_00000000000becd0:
	movb $1, -4992(%rbp)
uuid_00000000000becd2:
	mov -5088(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000becd5:
	mov -5008(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000becd8:
	mov -5000(%RBP),%RSP
	add $-5408, %RSP
	mov -4992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedb8
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -5488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bed04
	jmp uuid_00000000000bed06
uuid_00000000000bed04:
	push %RBP
	mov -5480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bed01
	jmp uuid_00000000000bed03
uuid_00000000000bed01:
	push %RBP
	mov -5472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000becfe
	jmp uuid_00000000000bed00
uuid_00000000000becfe:
	movb $1, -5496(%rbp)
uuid_00000000000bed00:
	mov -5592(%RBP),%RSP
	add $-5664, %RSP
uuid_00000000000bed03:
	mov -5512(%RBP),%RSP
	add $-5664, %RSP
uuid_00000000000bed06:
	mov -5504(%RBP),%RSP
	add $-5664, %RSP
	mov -5496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedb5
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -5744(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bed50
	jmp uuid_00000000000bed52
uuid_00000000000bed50:
	push %RBP
	pushq -5720(%RBP)
	pushq -5728(%RBP)
	pushq -5736(%RBP)
	jmp uuid_00000000000bed4d
	jmp uuid_00000000000bed4f
uuid_00000000000bed4d:
	push %RBP
	mov -5712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bed4a
	jmp uuid_00000000000bed4c
uuid_00000000000bed4a:
	push %RBP
	mov -5704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bed47
	jmp uuid_00000000000bed49
uuid_00000000000bed47:
	movb $1, -5752(%rbp)
uuid_00000000000bed49:
	mov -5880(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000bed4c:
	mov -5800(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000bed4f:
	mov -5768(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000bed52:
	mov -5760(%RBP),%RSP
	add $-5952, %RSP
	mov -5752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedb2
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -6032(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bed86
	jmp uuid_00000000000bed88
uuid_00000000000bed86:
	push %RBP
	pushq -5976(%RBP)
	pushq -5984(%RBP)
	pushq -5992(%RBP)
	pushq -6000(%RBP)
	pushq -6008(%RBP)
	pushq -6016(%RBP)
	pushq -6024(%RBP)
	jmp uuid_00000000000bed83
	jmp uuid_00000000000bed85
uuid_00000000000bed83:
	push %RBP
	mov -5968(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bed80
	jmp uuid_00000000000bed82
uuid_00000000000bed80:
	movb $1, -6040(%rbp)
uuid_00000000000bed82:
	mov -6120(%RBP),%RSP
	add $-6128, %RSP
uuid_00000000000bed85:
	mov -6056(%RBP),%RSP
	add $-6128, %RSP
uuid_00000000000bed88:
	mov -6048(%RBP),%RSP
	add $-6128, %RSP
	mov -6040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedaf
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -6208(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bed8f
	jmp uuid_00000000000bed91
uuid_00000000000bed8f:
	push %RBP
	jmp uuid_00000000000bed8c
	jmp uuid_00000000000bed8e
uuid_00000000000bed8c:
	push %RBP
	mov -6144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bed89
	jmp uuid_00000000000bed8b
uuid_00000000000bed89:
	movb $1, -6216(%rbp)
uuid_00000000000bed8b:
	mov -6240(%RBP),%RSP
	add $-6248, %RSP
uuid_00000000000bed8e:
	mov -6232(%RBP),%RSP
	add $-6248, %RSP
uuid_00000000000bed91:
	mov -6224(%RBP),%RSP
	add $-6248, %RSP
	mov -6216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bedac
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -6328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beda1
	jmp uuid_00000000000beda3
uuid_00000000000beda1:
	push %RBP
	jmp uuid_00000000000bed9e
	jmp uuid_00000000000beda0
uuid_00000000000bed9e:
	movb $1, -6336(%rbp)
uuid_00000000000beda0:
	mov -6352(%RBP),%RSP
	add $-6352, %RSP
uuid_00000000000beda3:
	mov -6344(%RBP),%RSP
	add $-6352, %RSP
	mov -6336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beda9
	push %RBP
	jmp uuid_00000000000beda6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000beda5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000beda8
uuid_00000000000beda6:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beda4
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000beda8:
	mov -6360(%RBP),%RSP
	add $-6360, %RSP
	jmp uuid_00000000000bedab
uuid_00000000000beda9:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bedab:
	mov -6256(%RBP),%RSP
	add $-6352, %RSP
	jmp uuid_00000000000bedae
uuid_00000000000bedac:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bed9b
#call function typeof-tag : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6248(%rbp)
	mov %RBX, %RBP
	call typeof_SB_tag_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bed98
	jmp uuid_00000000000bed9a
uuid_00000000000bed98:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bed92
	jmp uuid_00000000000bed94
uuid_00000000000bed92:
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6280(%RBP)
	popq -6272(%RBP)
	popq -6264(%RBP)
uuid_00000000000bed94:
	mov -6296(%RBP),%RSP
	add $-6296, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bed95
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed3c
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000bed3c
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -6312(%rbp)
	pushq -6320(%rbp)
	pushq -6328(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	jmp uuid_00000000000bed97
uuid_00000000000bed95:
uuid_00000000000bed97:
	mov -6304(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000bed9a:
	mov -6288(%RBP),%RSP
	add $-6304, %RSP
	jmp uuid_00000000000bed9d
uuid_00000000000bed9b:
uuid_00000000000bed9d:
	mov -6256(%RBP),%RSP
	add $-6256, %RSP
uuid_00000000000bedae:
	mov -6136(%RBP),%RSP
	add $-6256, %RSP
	jmp uuid_00000000000bedb1
uuid_00000000000bedaf:
#call function typeof-var : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -6128(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function typeof-var : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -6128(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bedb1:
	mov -5960(%RBP),%RSP
	add $-6152, %RSP
	jmp uuid_00000000000bedb4
uuid_00000000000bedb2:
#call function infer-ctx : Arrow<Cons<TContext,AST>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5888(%rbp)
	pushq -5896(%rbp)
	pushq -5904(%rbp)
	pushq -5912(%rbp)
	pushq -5920(%rbp)
	pushq -5928(%rbp)
	pushq -5936(%rbp)
	pushq -5944(%rbp)
	pushq -5952(%rbp)
	mov %RBX, %RBP
	call infer_SB_ctx_CL_ArrowTContextConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bed78
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	jmp uuid_00000000000bed7a
uuid_00000000000bed78:
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	push %RBP
	pushq -5968(%rbp)
	pushq -5976(%rbp)
	pushq -5984(%rbp)
	pushq -5992(%rbp)
	pushq -6000(%rbp)
	pushq -6008(%rbp)
	pushq -6016(%rbp)
	pushq -6024(%rbp)
	pushq -6032(%rbp)
	pushq $0
	push %RBP
	mov -6112(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bed71
	jmp uuid_00000000000bed73
uuid_00000000000bed71:
	push %RBP
	mov -6104(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6208(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bed5f
	jmp uuid_00000000000bed61
uuid_00000000000bed5f:
	push %RBP
	mov -6200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6304(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bed56
	jmp uuid_00000000000bed58
uuid_00000000000bed56:
	push %RBP
	pushq -6280(%RBP)
	pushq -6288(%RBP)
	pushq -6296(%RBP)
	jmp uuid_00000000000bed53
	jmp uuid_00000000000bed55
uuid_00000000000bed53:
	movb $1, -6312(%rbp)
uuid_00000000000bed55:
	mov -6328(%RBP),%RSP
	add $-6352, %RSP
uuid_00000000000bed58:
	mov -6320(%RBP),%RSP
	add $-6352, %RSP
	mov -6312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bed5c
	jmp uuid_00000000000bed5e
uuid_00000000000bed5c:
	push %RBP
	mov -6192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bed59
	jmp uuid_00000000000bed5b
uuid_00000000000bed59:
	movb $1, -6216(%rbp)
uuid_00000000000bed5b:
	mov -6360(%RBP),%RSP
	add $-6432, %RSP
uuid_00000000000bed5e:
	mov -6232(%RBP),%RSP
	add $-6432, %RSP
uuid_00000000000bed61:
	mov -6224(%RBP),%RSP
	add $-6432, %RSP
	mov -6216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bed6e
	jmp uuid_00000000000bed70
uuid_00000000000bed6e:
	push %RBP
	mov -6096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6512(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bed68
	jmp uuid_00000000000bed6a
uuid_00000000000bed68:
	push %RBP
	jmp uuid_00000000000bed65
	jmp uuid_00000000000bed67
uuid_00000000000bed65:
	push %RBP
	mov -6448(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6552(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bed62
	jmp uuid_00000000000bed64
uuid_00000000000bed62:
	movb $1, -6520(%rbp)
uuid_00000000000bed64:
	mov -6544(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000bed67:
	mov -6536(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000bed6a:
	mov -6528(%RBP),%RSP
	add $-6552, %RSP
	mov -6520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bed6b
	jmp uuid_00000000000bed6d
uuid_00000000000bed6b:
	movb $1, -6120(%rbp)
uuid_00000000000bed6d:
	mov -6440(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000bed70:
	mov -6136(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000bed73:
	mov -6128(%RBP),%RSP
	add $-6552, %RSP
	mov -6120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bed75
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bed74
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bed77
uuid_00000000000bed75:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -6368(%rbp)
	pushq -6376(%rbp)
	pushq -6384(%rbp)
	pushq -6392(%rbp)
	pushq -6400(%rbp)
	pushq -6408(%rbp)
	pushq -6416(%rbp)
	pushq -6424(%rbp)
	pushq -6432(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	pushq -6336(%rbp)
	pushq -6344(%rbp)
	pushq -6352(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bed77:
	mov -6040(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000bed7a:
	mov -5960(%RBP),%RSP
	add $-6552, %RSP
#call function typeof-lhs : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5888(%rbp)
	pushq -5896(%rbp)
	pushq -5904(%rbp)
	pushq -5912(%rbp)
	pushq -5920(%rbp)
	pushq -5928(%rbp)
	pushq -5936(%rbp)
	pushq -5944(%rbp)
	pushq -5952(%rbp)
	mov %RBX, %RBP
	call typeof_SB_lhs_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function enrich : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed7b
	pushq -6560(%rbp)
	pushq -6568(%rbp)
	pushq -6576(%rbp)
	pushq -6584(%rbp)
	pushq -6592(%rbp)
	pushq -6600(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	mov %RBX, %RBP
	call enrich_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bed7d
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed7c
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000bed7c
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -6584(%rbp)
	pushq -6592(%rbp)
	pushq -6600(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	jmp uuid_00000000000bed7f
uuid_00000000000bed7d:
uuid_00000000000bed7f:
	mov -6608(%RBP),%RSP
	add $-6608, %RSP
uuid_00000000000bedb4:
	mov -5672(%RBP),%RSP
	add $-6608, %RSP
	mov %RSP, %R14
	add $72, %rsp
	add $8, %rsp
	add $24, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000bedb7
uuid_00000000000bedb5:
	pushq $3
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bed07
	jmp uuid_00000000000bed09
uuid_00000000000bed07:
	pushq $0
	popq -5672(%RBP)
uuid_00000000000bed09:
	mov -5680(%RBP),%RSP
	add $-5680, %RSP
	pushq $4
	pushq $0
	pushq $0
	pushq $3
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	push %RBP
	pushq -5720(%rbp)
	pushq -5728(%rbp)
	pushq -5736(%rbp)
	pushq -5744(%rbp)
	pushq -5752(%rbp)
	pushq -5760(%rbp)
	pushq -5768(%rbp)
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq $0
	push %RBP
	mov -5864(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bed10
	jmp uuid_00000000000bed12
uuid_00000000000bed10:
	push %RBP
	jmp uuid_00000000000bed0d
	jmp uuid_00000000000bed0f
uuid_00000000000bed0d:
	push %RBP
	mov -5800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bed0a
	jmp uuid_00000000000bed0c
uuid_00000000000bed0a:
	movb $1, -5872(%rbp)
uuid_00000000000bed0c:
	mov -5896(%RBP),%RSP
	add $-5904, %RSP
uuid_00000000000bed0f:
	mov -5888(%RBP),%RSP
	add $-5904, %RSP
uuid_00000000000bed12:
	mov -5880(%RBP),%RSP
	add $-5904, %RSP
	mov -5872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bed23
	push %RBP
	jmp uuid_00000000000bed20
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bed1f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bed22
uuid_00000000000bed20:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bed19
	jmp uuid_00000000000bed1b
uuid_00000000000bed19:
	pushq $3
	popq -5688(%RBP)
uuid_00000000000bed1b:
	mov -5920(%RBP),%RSP
	add $-5920, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5672(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bed1c
	jmp uuid_00000000000bed1e
uuid_00000000000bed1c:
	pushq $0
	popq -5688(%RBP)
uuid_00000000000bed1e:
	mov -5928(%RBP),%RSP
	add $-5928, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5688(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function apply-or-cons-and-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call apply_SB_or_SB_cons_SB_and_SB_specialize_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	pushq -5960(%RBP)
	pushq -5968(%RBP)
	pushq -5976(%RBP)
	popq -5712(%RBP)
	popq -5704(%RBP)
	popq -5696(%RBP)
uuid_00000000000bed22:
	mov -5912(%RBP),%RSP
	add $-5984, %RSP
	jmp uuid_00000000000bed25
uuid_00000000000bed23:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bed13
	jmp uuid_00000000000bed15
uuid_00000000000bed13:
	pushq $3
	popq -5688(%RBP)
uuid_00000000000bed15:
	mov -5912(%RBP),%RSP
	add $-5912, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5672(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bed16
	jmp uuid_00000000000bed18
uuid_00000000000bed16:
	pushq $0
	popq -5688(%RBP)
uuid_00000000000bed18:
	mov -5920(%RBP),%RSP
	add $-5920, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5688(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function apply-or-cons-and-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call apply_SB_or_SB_cons_SB_and_SB_specialize_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	pushq -5928(%RBP)
	pushq -5936(%RBP)
	pushq -5944(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq -5984(%rbp)
	pushq -5992(%rbp)
	pushq -6000(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -5952(%RBP)
	pushq -5960(%RBP)
	pushq -5968(%RBP)
	popq -5712(%RBP)
	popq -5704(%RBP)
	popq -5696(%RBP)
uuid_00000000000bed25:
	mov -5792(%RBP),%RSP
	add $-6000, %RSP
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5672(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bed26
	jmp uuid_00000000000bed28
uuid_00000000000bed26:
#call function implicit-tail : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	mov %RBX, %RBP
	call implicit_SB_tail_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -5712(%RBP)
	popq -5704(%RBP)
	popq -5696(%RBP)
uuid_00000000000bed28:
	mov -6008(%RBP),%RSP
	add $-6008, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $uuid_00000000000bed29
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bed2c
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000bed2e
uuid_00000000000bed2c:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed2a
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000bed2a
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed29
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p1 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call p1_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $uuid_00000000000bec78
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $uuid_00000000000bed2b
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000bed2e:
	mov -6016(%RBP),%RSP
	add $-6040, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6048(%rbp)
	pushq -6056(%rbp)
	pushq -6064(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bed44
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000bed46
uuid_00000000000bed44:
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	push %RBP
	pushq -6080(%rbp)
	pushq -6088(%rbp)
	pushq -6096(%rbp)
	pushq -6104(%rbp)
	pushq -6112(%rbp)
	pushq -6120(%rbp)
	pushq -6128(%rbp)
	pushq -6136(%rbp)
	pushq -6144(%rbp)
	pushq $0
	push %RBP
	mov -6224(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bed35
	jmp uuid_00000000000bed37
uuid_00000000000bed35:
	push %RBP
	jmp uuid_00000000000bed32
	jmp uuid_00000000000bed34
uuid_00000000000bed32:
	push %RBP
	mov -6160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bed2f
	jmp uuid_00000000000bed31
uuid_00000000000bed2f:
	movb $1, -6232(%rbp)
uuid_00000000000bed31:
	mov -6256(%RBP),%RSP
	add $-6264, %RSP
uuid_00000000000bed34:
	mov -6248(%RBP),%RSP
	add $-6264, %RSP
uuid_00000000000bed37:
	mov -6240(%RBP),%RSP
	add $-6264, %RSP
	mov -6232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bed41
	push %RBP
	jmp uuid_00000000000bed3e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bed3d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bed40
uuid_00000000000bed3e:
uuid_00000000000bed40:
	mov -6272(%RBP),%RSP
	add $-6272, %RSP
	mov %RSP, %R14
	add $8, %RSP
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000bed43
uuid_00000000000bed41:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed38
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6288(%rbp)
	pushq -6296(%rbp)
	pushq -6304(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed39
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6304(%RBP)
	popq -6296(%RBP)
	popq -6288(%RBP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6288(%rbp)
	pushq -6296(%rbp)
	pushq -6304(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed3a
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6304(%RBP)
	popq -6296(%RBP)
	popq -6288(%RBP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6288(%rbp)
	pushq -6296(%rbp)
	pushq -6304(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed3b
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6272(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6304(%RBP)
	popq -6296(%RBP)
	popq -6288(%RBP)
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed3c
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000bed3c
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -6288(%rbp)
	pushq -6296(%rbp)
	pushq -6304(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000bed43:
	mov -6152(%RBP),%RSP
	add $-6328, %RSP
uuid_00000000000bed46:
	mov -6072(%RBP),%RSP
	add $-6328, %RSP
uuid_00000000000bedb7:
	mov -5416(%RBP),%RSP
	add $-6328, %RSP
	mov %RSP, %R14
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %rsp
	add $24, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $56, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000bedba
uuid_00000000000bedb8:
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5408(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000becdd
	jmp uuid_00000000000becdf
uuid_00000000000becdd:
	push %RBP
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000becda
	jmp uuid_00000000000becdc
uuid_00000000000becda:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000becd9
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000becdc:
	mov -5448(%RBP),%RSP
	add $-5448, %RSP
uuid_00000000000becdf:
	mov -5440(%RBP),%RSP
	add $-5448, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bece1
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bece0
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bece3
uuid_00000000000bece1:
uuid_00000000000bece3:
	mov -5480(%RBP),%RSP
	add $-5480, %RSP
#call function as-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call as_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -5472(%RBP)
	popq -5464(%RBP)
	popq -5456(%RBP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq $0
	push %RBP
	mov -5632(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000becf6
	jmp uuid_00000000000becf8
uuid_00000000000becf6:
	push %RBP
	jmp uuid_00000000000becf3
	jmp uuid_00000000000becf5
uuid_00000000000becf3:
	push %RBP
	mov -5616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5736(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beced
	jmp uuid_00000000000becef
uuid_00000000000beced:
	push %RBP
	jmp uuid_00000000000becea
	jmp uuid_00000000000becec
uuid_00000000000becea:
	push %RBP
	jmp uuid_00000000000bece7
	jmp uuid_00000000000bece9
uuid_00000000000bece7:
	push %RBP
	mov -5696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bece4
	jmp uuid_00000000000bece6
uuid_00000000000bece4:
	movb $1, -5744(%rbp)
uuid_00000000000bece6:
	mov -5776(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000bece9:
	mov -5768(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000becec:
	mov -5760(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000becef:
	mov -5752(%RBP),%RSP
	add $-5848, %RSP
	mov -5744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000becf0
	jmp uuid_00000000000becf2
uuid_00000000000becf0:
	movb $1, -5640(%rbp)
uuid_00000000000becf2:
	mov -5664(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000becf5:
	mov -5656(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000becf8:
	mov -5648(%RBP),%RSP
	add $-5848, %RSP
	mov -5640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000becfa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000becf9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000becfc
uuid_00000000000becfa:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	pushq -5800(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000becfc:
	mov -5560(%RBP),%RSP
	add $-5848, %RSP
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -5408(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000becfd
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000becfd
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000bedba:
	mov -4912(%RBP),%RSP
	add $-5872, %RSP
	jmp uuid_00000000000bedbd
uuid_00000000000bedbb:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq $uuid_00000000000bec78
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq $0
	push %RBP
	mov -4984(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec91
	jmp uuid_00000000000bec93
uuid_00000000000bec91:
	push %RBP
	mov -4976(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec88
	jmp uuid_00000000000bec8a
uuid_00000000000bec88:
	push %RBP
	mov -5040(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec7f
	jmp uuid_00000000000bec81
uuid_00000000000bec7f:
	push %RBP
	mov -5104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -5176(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec7c
	jmp uuid_00000000000bec7e
uuid_00000000000bec7c:
	push %RBP
	pushq -5080(%RBP)
	pushq -5088(%RBP)
	pushq -5096(%RBP)
	mov -5208(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec79
	jmp uuid_00000000000bec7b
uuid_00000000000bec79:
	movb $1, -5120(%rbp)
uuid_00000000000bec7b:
	mov -5184(%RBP),%RSP
	add $-5208, %RSP
uuid_00000000000bec7e:
	mov -5136(%RBP),%RSP
	add $-5208, %RSP
uuid_00000000000bec81:
	mov -5128(%RBP),%RSP
	add $-5208, %RSP
	mov -5120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bec85
	jmp uuid_00000000000bec87
uuid_00000000000bec85:
	push %RBP
	jmp uuid_00000000000bec82
	jmp uuid_00000000000bec84
uuid_00000000000bec82:
	movb $1, -5056(%rbp)
uuid_00000000000bec84:
	mov -5216(%RBP),%RSP
	add $-5216, %RSP
uuid_00000000000bec87:
	mov -5072(%RBP),%RSP
	add $-5216, %RSP
uuid_00000000000bec8a:
	mov -5064(%RBP),%RSP
	add $-5216, %RSP
	mov -5056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bec8e
	jmp uuid_00000000000bec90
uuid_00000000000bec8e:
	push %RBP
	mov -4968(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5232(%rbp)
	pushq $uuid_00000000000bec78
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bec8b
	jmp uuid_00000000000bec8d
uuid_00000000000bec8b:
	movb $1, -4992(%rbp)
uuid_00000000000bec8d:
	mov -5224(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000bec90:
	mov -5008(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000bec93:
	mov -5000(%RBP),%RSP
	add $-5232, %RSP
	mov -4992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000becb8
	push %RBP
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq $0
	push %RBP
	mov -5264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000becac
	jmp uuid_00000000000becae
uuid_00000000000becac:
	push %RBP
	mov -5256(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beca3
	jmp uuid_00000000000beca5
uuid_00000000000beca3:
	push %RBP
	mov -5320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec9a
	jmp uuid_00000000000bec9c
uuid_00000000000bec9a:
	push %RBP
	mov -5384(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -5456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec97
	jmp uuid_00000000000bec99
uuid_00000000000bec97:
	push %RBP
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	jmp uuid_00000000000bec94
	jmp uuid_00000000000bec96
uuid_00000000000bec94:
	movb $1, -5400(%rbp)
uuid_00000000000bec96:
	mov -5464(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000bec99:
	mov -5416(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000bec9c:
	mov -5408(%RBP),%RSP
	add $-5488, %RSP
	mov -5400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beca0
	jmp uuid_00000000000beca2
uuid_00000000000beca0:
	push %RBP
	pushq -5296(%RBP)
	pushq -5304(%RBP)
	pushq -5312(%RBP)
	mov -5520(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec9d
	jmp uuid_00000000000bec9f
uuid_00000000000bec9d:
	movb $1, -5336(%rbp)
uuid_00000000000bec9f:
	mov -5496(%RBP),%RSP
	add $-5520, %RSP
uuid_00000000000beca2:
	mov -5352(%RBP),%RSP
	add $-5520, %RSP
uuid_00000000000beca5:
	mov -5344(%RBP),%RSP
	add $-5520, %RSP
	mov -5336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beca9
	jmp uuid_00000000000becab
uuid_00000000000beca9:
	push %RBP
	mov -5248(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5536(%rbp)
	pushq $uuid_00000000000bec78
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000beca6
	jmp uuid_00000000000beca8
uuid_00000000000beca6:
	movb $1, -5272(%rbp)
uuid_00000000000beca8:
	mov -5528(%RBP),%RSP
	add $-5536, %RSP
uuid_00000000000becab:
	mov -5288(%RBP),%RSP
	add $-5536, %RSP
uuid_00000000000becae:
	mov -5280(%RBP),%RSP
	add $-5536, %RSP
	mov -5272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000becb5
	push %RBP
	jmp uuid_00000000000becb2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000becb1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000becb4
uuid_00000000000becb2:
uuid_00000000000becb4:
	mov -5544(%RBP),%RSP
	add $-5544, %RSP
	jmp uuid_00000000000becb7
uuid_00000000000becb5:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000becaf
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000becaf
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000becb0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -4928(%RBP)
	popq -4920(%RBP)
	popq -4912(%RBP)
uuid_00000000000becb7:
	mov -5240(%RBP),%RSP
	add $-5536, %RSP
	jmp uuid_00000000000becba
uuid_00000000000becb8:
uuid_00000000000becba:
	mov -4960(%RBP),%RSP
	add $-5232, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bedbd:
	mov -4616(%RBP),%RSP
	add $-5232, %RSP
	jmp uuid_00000000000bedc0
uuid_00000000000bedbe:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq $1
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bedc0:
	mov -4320(%RBP),%RSP
	add $-4608, %RSP
	jmp uuid_00000000000bedc3
uuid_00000000000bedc1:
#call function as-constant : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec44
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call as_SB_constant_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq $0
	push %RBP
	mov -4488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec4b
	jmp uuid_00000000000bec4d
uuid_00000000000bec4b:
	push %RBP
	jmp uuid_00000000000bec48
	jmp uuid_00000000000bec4a
uuid_00000000000bec48:
	push %RBP
	mov -4472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bec45
	jmp uuid_00000000000bec47
uuid_00000000000bec45:
	movb $1, -4496(%rbp)
uuid_00000000000bec47:
	mov -4520(%RBP),%RSP
	add $-4592, %RSP
uuid_00000000000bec4a:
	mov -4512(%RBP),%RSP
	add $-4592, %RSP
uuid_00000000000bec4d:
	mov -4504(%RBP),%RSP
	add $-4592, %RSP
	mov -4496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bec4f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bec4e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bec51
uuid_00000000000bec4f:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4528(%rbp)
	pushq -4536(%rbp)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bec51:
	mov -4416(%RBP),%RSP
	add $-4592, %RSP
uuid_00000000000bedc3:
	mov -4000(%RBP),%RSP
	add $-4592, %RSP
	jmp uuid_00000000000bedc6
uuid_00000000000bedc4:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -232(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	push %RBP
	pushq -4024(%rbp)
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq $0
	push %RBP
	mov -4168(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bec04
	jmp uuid_00000000000bec06
uuid_00000000000bec04:
	push %RBP
	jmp uuid_00000000000bec01
	jmp uuid_00000000000bec03
uuid_00000000000bec01:
	push %RBP
	mov -4104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bebfe
	jmp uuid_00000000000bec00
uuid_00000000000bebfe:
	movb $1, -4176(%rbp)
uuid_00000000000bec00:
	mov -4200(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000bec03:
	mov -4192(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000bec06:
	mov -4184(%RBP),%RSP
	add $-4208, %RSP
	mov -4176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bec1b
	push %RBP
	jmp uuid_00000000000bec18
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bec17
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bec1a
uuid_00000000000bec18:
uuid_00000000000bec1a:
	mov -4216(%RBP),%RSP
	add $-4216, %RSP
	jmp uuid_00000000000bec1d
uuid_00000000000bec1b:
	push %RBP
#call function is-reg8 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bec08
	jmp uuid_00000000000bec0a
uuid_00000000000bec08:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec07
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000bec0a:
	mov -4216(%RBP),%RSP
	add $-4216, %RSP
	push %RBP
#call function is-reg16 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bec0c
	jmp uuid_00000000000bec0e
uuid_00000000000bec0c:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec0b
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000bec0e:
	mov -4224(%RBP),%RSP
	add $-4224, %RSP
	push %RBP
#call function is-reg32 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bec10
	jmp uuid_00000000000bec12
uuid_00000000000bec10:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec0f
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000bec12:
	mov -4232(%RBP),%RSP
	add $-4232, %RSP
	push %RBP
#call function is-reg64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bec14
	jmp uuid_00000000000bec16
uuid_00000000000bec14:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec13
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000bec16:
	mov -4240(%RBP),%RSP
	add $-4240, %RSP
uuid_00000000000bec1d:
	mov -4096(%RBP),%RSP
	add $-4240, %RSP
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bec28
	jmp uuid_00000000000bec2a
uuid_00000000000bec28:
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bec1e
	jmp uuid_00000000000bec20
uuid_00000000000bec1e:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -3792(%RBP)
	popq -3784(%RBP)
	popq -3776(%RBP)
uuid_00000000000bec20:
	mov -4280(%RBP),%RSP
	add $-4280, %RSP
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq $uuid_00000000000bec21
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bec25
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -4312(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bec22
	jmp uuid_00000000000bec24
uuid_00000000000bec22:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -4312(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -3792(%RBP)
	popq -3784(%RBP)
	popq -3776(%RBP)
uuid_00000000000bec24:
	mov -4320(%RBP),%RSP
	add $-4320, %RSP
#call function with-fields : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	mov %RBX, %RBP
	call with_SB_fields_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -3792(%RBP)
	popq -3784(%RBP)
	popq -3776(%RBP)
	jmp uuid_00000000000bec27
uuid_00000000000bec25:
uuid_00000000000bec27:
	mov -4288(%RBP),%RSP
	add $-4288, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bec2a:
	mov -4248(%RBP),%RSP
	add $-4288, %RSP
uuid_00000000000bedc6:
	mov -3480(%RBP),%RSP
	add $-4288, %RSP
	jmp uuid_00000000000bedc9
uuid_00000000000bedc7:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq $1
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bebda
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	pushq -3304(%rbp)
	pushq -3312(%rbp)
	pushq -3320(%rbp)
	pushq -3328(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -3136(%rbp)
	pushq -3144(%rbp)
	pushq -3152(%rbp)
	pushq -3160(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	mov %RSP, %R14
	movq 112(%R14), %R15
	movq %R15, 112(%RSP)
	movq 104(%R14), %R15
	movq %R15, 104(%RSP)
	movq 96(%R14), %R15
	movq %R15, 96(%RSP)
	movq 88(%R14), %R15
	movq %R15, 88(%RSP)
	movq 80(%R14), %R15
	movq %R15, 80(%RSP)
	movq 72(%R14), %R15
	movq %R15, 72(%RSP)
	movq 64(%R14), %R15
	movq %R15, 64(%RSP)
	movq 56(%R14), %R15
	movq %R15, 56(%RSP)
	movq 48(%R14), %R15
	movq %R15, 48(%RSP)
	movq 40(%R14), %R15
	movq %R15, 40(%RSP)
	movq 32(%R14), %R15
	movq %R15, 32(%RSP)
	movq 24(%R14), %R15
	movq %R15, 24(%RSP)
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000bebdc
uuid_00000000000bebda:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	pushq -3304(%rbp)
	pushq -3312(%rbp)
	pushq -3320(%rbp)
	pushq -3328(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3488(%rbp)
	pushq -3496(%rbp)
	pushq -3504(%rbp)
	pushq -3512(%rbp)
	pushq -3520(%rbp)
	pushq -3528(%rbp)
	pushq -3536(%rbp)
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3568(%rbp)
	pushq -3576(%rbp)
	pushq -3584(%rbp)
	pushq -3592(%rbp)
	pushq -3600(%rbp)
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -3136(%rbp)
	pushq -3144(%rbp)
	pushq -3152(%rbp)
	pushq -3160(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
uuid_00000000000bebdc:
	mov -3480(%RBP),%RSP
	add $-3720, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2960(%rbp)
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	pushq -2984(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -3136(%rbp)
	pushq -3144(%rbp)
	pushq -3152(%rbp)
	pushq -3160(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bedc9:
	mov -2832(%RBP),%RSP
	add $-3720, %RSP
	jmp uuid_00000000000bedcc
uuid_00000000000bedca:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bedcc:
	mov -2496(%RBP),%RSP
	add $-2824, %RSP
	jmp uuid_00000000000bedcf
uuid_00000000000bedcd:
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2368(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb98
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bedcf:
	mov -2160(%RBP),%RSP
	add $-2488, %RSP
	jmp uuid_00000000000bedd2
uuid_00000000000bedd0:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq $0
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000beb79
	jmp uuid_00000000000beb7b
uuid_00000000000beb79:
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000beb69
	jmp uuid_00000000000beb6b
uuid_00000000000beb69:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	movq -2240(%rbp), %r15
	movq %r15, -1952(%rbp)
	movq -2232(%rbp), %r15
	movq %r15, -1944(%rbp)
	movq -2224(%rbp), %r15
	movq %r15, -1936(%rbp)
uuid_00000000000beb6b:
	mov -2216(%RBP),%RSP
	add $-2240, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq $0
	push %RBP
	mov -2392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb72
	jmp uuid_00000000000beb74
uuid_00000000000beb72:
	push %RBP
	mov -2384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000beb6f
	jmp uuid_00000000000beb71
uuid_00000000000beb6f:
	push %RBP
	mov -2376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000beb6c
	jmp uuid_00000000000beb6e
uuid_00000000000beb6c:
	movb $1, -2400(%rbp)
uuid_00000000000beb6e:
	mov -2496(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000beb71:
	mov -2416(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000beb74:
	mov -2408(%RBP),%RSP
	add $-2568, %RSP
	mov -2400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beb76
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000beb75
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000beb78
uuid_00000000000beb76:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000beb78:
	mov -2320(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000beb7b:
	mov -2184(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000bedd2:
	mov -1640(%RBP),%RSP
	add $-2568, %RSP
	jmp uuid_00000000000bedd5
uuid_00000000000bedd3:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq $0
	push %RBP
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb3b
	jmp uuid_00000000000beb3d
uuid_00000000000beb3b:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1880(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beb32
	jmp uuid_00000000000beb34
uuid_00000000000beb32:
	push %RBP
	jmp uuid_00000000000beb2f
	jmp uuid_00000000000beb31
uuid_00000000000beb2f:
	push %RBP
	mov -1864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000beb2c
	jmp uuid_00000000000beb2e
uuid_00000000000beb2c:
	movb $1, -1888(%rbp)
uuid_00000000000beb2e:
	mov -1912(%RBP),%RSP
	add $-1984, %RSP
uuid_00000000000beb31:
	mov -1904(%RBP),%RSP
	add $-1984, %RSP
uuid_00000000000beb34:
	mov -1896(%RBP),%RSP
	add $-1984, %RSP
	mov -1888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beb38
	jmp uuid_00000000000beb3a
uuid_00000000000beb38:
	push %RBP
	jmp uuid_00000000000beb35
	jmp uuid_00000000000beb37
uuid_00000000000beb35:
	movb $1, -1792(%rbp)
uuid_00000000000beb37:
	mov -1992(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000beb3a:
	mov -1808(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000beb3d:
	mov -1800(%RBP),%RSP
	add $-1992, %RSP
	mov -1792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beb45
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000beb44
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000beb47
uuid_00000000000beb45:
	push %RBP
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000beb3e
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	jmp uuid_00000000000beb40
uuid_00000000000beb3e:
uuid_00000000000beb40:
	mov -2000(%RBP),%RSP
	add $-2000, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000beb41
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000beb43
uuid_00000000000beb41:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -1400(%RBP)
	popq -1392(%RBP)
	popq -1384(%RBP)
uuid_00000000000beb43:
	mov -2032(%RBP),%RSP
	add $-2032, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000beb47:
	mov -1712(%RBP),%RSP
	add $-2032, %RSP
uuid_00000000000bedd5:
	mov -1088(%RBP),%RSP
	add $-2032, %RSP
	jmp uuid_00000000000bedd8
uuid_00000000000bedd6:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000beafe
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000beafb
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beaf8
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beaf9
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000beaf9
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beafa
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	jmp uuid_00000000000beafd
uuid_00000000000beafb:
uuid_00000000000beafd:
	mov -1120(%RBP),%RSP
	add $-1120, %RSP
	jmp uuid_00000000000beb00
uuid_00000000000beafe:
uuid_00000000000beb00:
	mov -1088(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000bedd8:
	mov -848(%RBP),%RSP
	add $-1088, %RSP
	jmp uuid_00000000000beddb
uuid_00000000000bedd9:
uuid_00000000000beddb:
	mov -736(%RBP),%RSP
	add $-840, %RSP
	mov %RSP, %R14
	add $72, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	movq 112(%R14), %R15
	movq %R15, 112(%RSP)
	movq 104(%R14), %R15
	movq %R15, 104(%RSP)
	movq 96(%R14), %R15
	movq %R15, 96(%RSP)
	movq 88(%R14), %R15
	movq %R15, 88(%RSP)
	movq 80(%R14), %R15
	movq %R15, 80(%RSP)
	movq 72(%R14), %R15
	movq %R15, 72(%RSP)
	movq 64(%R14), %R15
	movq %R15, 64(%RSP)
	movq 56(%R14), %R15
	movq %R15, 56(%RSP)
	movq 48(%R14), %R15
	movq %R15, 48(%RSP)
	movq 40(%R14), %R15
	movq %R15, 40(%RSP)
	movq 32(%R14), %R15
	movq %R15, 32(%RSP)
	movq 24(%R14), %R15
	movq %R15, 24(%RSP)
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000bedde
uuid_00000000000beddc:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
uuid_00000000000bedde:
	mov -480(%RBP),%RSP
	add $-848, %RSP
	jmp uuid_00000000000bede1
uuid_00000000000beddf:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bede1:
	mov -400(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000bede4
uuid_00000000000bede2:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bede4:
	mov -320(%RBP),%RSP
	add $-392, %RSP
	push %RBP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bede5
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000bede7
uuid_00000000000bede5:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed3c
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000bed3c
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000bede7:
	mov -400(%RBP),%RSP
	add $-424, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $240, %rsp
	ret
add_SB_alias_CL_ArrowNilConsTypeConsStringString:
#call function cons : Arrow<Cons<Tuple<Tuple<String,String>,Type>,List<Tuple<Tuple<String,String>,Type>>>,List<Tuple<Tuple<String,String>,Type>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq $0
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListTupleTypeTupleStringStringConsListTupleTypeTupleStringStringTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	mov %rbp, %rsp
	sub $48, %rsp
	ret
find_SB_alias_CL_ArrowStringConsTypeString:
	pushq -8(%rbp)
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000bee4a:
#call function non-zero : Arrow<List<Tuple<Tuple<String,String>,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bee4b
	jmp uuid_00000000000bee4c
uuid_00000000000bee4b:
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bee0c
	jmp uuid_00000000000bee0e
uuid_00000000000bee0c:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bee09
	jmp uuid_00000000000bee0b
uuid_00000000000bee09:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	jmp uuid_00000000000bee06
	jmp uuid_00000000000bee08
uuid_00000000000bee06:
	movb $1, -280(%rbp)
uuid_00000000000bee08:
	mov -376(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000bee0b:
	mov -296(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000bee0e:
	mov -288(%RBP),%RSP
	add $-432, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bee47
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bee46
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bee49
uuid_00000000000bee47:
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	push %RBP
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bee39
	jmp uuid_00000000000bee3b
uuid_00000000000bee39:
	push %RBP
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bee27
	jmp uuid_00000000000bee29
uuid_00000000000bee27:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bee1e
	jmp uuid_00000000000bee20
uuid_00000000000bee1e:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bee15
	jmp uuid_00000000000bee17
uuid_00000000000bee15:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bee12
	jmp uuid_00000000000bee14
uuid_00000000000bee12:
	push %RBP
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	jmp uuid_00000000000bee0f
	jmp uuid_00000000000bee11
uuid_00000000000bee0f:
	movb $1, -736(%rbp)
uuid_00000000000bee11:
	mov -800(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000bee14:
	mov -752(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000bee17:
	mov -744(%RBP),%RSP
	add $-824, %RSP
	mov -736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bee1b
	jmp uuid_00000000000bee1d
uuid_00000000000bee1b:
	push %RBP
	jmp uuid_00000000000bee18
	jmp uuid_00000000000bee1a
uuid_00000000000bee18:
	movb $1, -672(%rbp)
uuid_00000000000bee1a:
	mov -832(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000bee1d:
	mov -688(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000bee20:
	mov -680(%RBP),%RSP
	add $-832, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bee24
	jmp uuid_00000000000bee26
uuid_00000000000bee24:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq $uuid_00000000000bed7b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bee21
	jmp uuid_00000000000bee23
uuid_00000000000bee21:
	movb $1, -608(%rbp)
uuid_00000000000bee23:
	mov -840(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000bee26:
	mov -624(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000bee29:
	mov -616(%RBP),%RSP
	add $-848, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bee36
	jmp uuid_00000000000bee38
uuid_00000000000bee36:
	push %RBP
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bee30
	jmp uuid_00000000000bee32
uuid_00000000000bee30:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bee2d
	jmp uuid_00000000000bee2f
uuid_00000000000bee2d:
	push %RBP
	mov -864(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bee2a
	jmp uuid_00000000000bee2c
uuid_00000000000bee2a:
	movb $1, -888(%rbp)
uuid_00000000000bee2c:
	mov -920(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000bee2f:
	mov -904(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000bee32:
	mov -896(%RBP),%RSP
	add $-928, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bee33
	jmp uuid_00000000000bee35
uuid_00000000000bee33:
	movb $1, -560(%rbp)
uuid_00000000000bee35:
	mov -856(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000bee38:
	mov -576(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000bee3b:
	mov -568(%RBP),%RSP
	add $-928, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bee43
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bee42
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bee45
uuid_00000000000bee43:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -928(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bee3f
	jmp uuid_00000000000bee41
uuid_00000000000bee3f:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bee3c
	jmp uuid_00000000000bee3e
uuid_00000000000bee3c:
	movq -912(%rbp), %r15
	movq %r15, -48(%rbp)
	mov -912(%rbp), %r15
	mov %r15, -48(%rbp)
uuid_00000000000bee3e:
	mov -944(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000bee41:
	mov -936(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000bee45:
	mov -496(%RBP),%RSP
	add $-944, %RSP
	movq -368(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000bee49:
	mov -200(%RBP),%RSP
	add $-944, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000bee4a
uuid_00000000000bee4c:
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
find_SB_alias_SB_type_CL_ArrowTypeString:
	pushq $0
	pushq $0
	pushq $3
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000bee82:
#call function non-zero : Arrow<List<Tuple<Tuple<String,String>,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bee83
	jmp uuid_00000000000bee84
uuid_00000000000bee83:
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bee5f
	jmp uuid_00000000000bee61
uuid_00000000000bee5f:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bee5c
	jmp uuid_00000000000bee5e
uuid_00000000000bee5c:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	jmp uuid_00000000000bee59
	jmp uuid_00000000000bee5b
uuid_00000000000bee59:
	movb $1, -272(%rbp)
uuid_00000000000bee5b:
	mov -368(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000bee5e:
	mov -288(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000bee61:
	mov -280(%RBP),%RSP
	add $-424, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bee7f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bee7e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bee81
uuid_00000000000bee7f:
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bee71
	jmp uuid_00000000000bee73
uuid_00000000000bee71:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000bee6e
	jmp uuid_00000000000bee70
uuid_00000000000bee6e:
	push %RBP
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bee68
	jmp uuid_00000000000bee6a
uuid_00000000000bee68:
	push %RBP
	mov -616(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bee65
	jmp uuid_00000000000bee67
uuid_00000000000bee65:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bee62
	jmp uuid_00000000000bee64
uuid_00000000000bee62:
	movb $1, -632(%rbp)
uuid_00000000000bee64:
	mov -664(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000bee67:
	mov -648(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000bee6a:
	mov -640(%RBP),%RSP
	add $-672, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bee6b
	jmp uuid_00000000000bee6d
uuid_00000000000bee6b:
	movb $1, -552(%rbp)
uuid_00000000000bee6d:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000bee70:
	mov -568(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000bee73:
	mov -560(%RBP),%RSP
	add $-672, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bee7b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bee7a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bee7d
uuid_00000000000bee7b:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bee77
	jmp uuid_00000000000bee79
uuid_00000000000bee77:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bee74
	movq -592(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -24(%rbp)
	jmp uuid_00000000000bee76
uuid_00000000000bee74:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000bee76:
	mov -688(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000bee79:
	mov -680(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000bee7d:
	mov -488(%RBP),%RSP
	add $-688, %RSP
	movq -360(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -296(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000bee81:
	mov -192(%RBP),%RSP
	add $-688, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000bee82
uuid_00000000000bee84:
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
mark_SB_class_SB_exists_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,U64>,?>,String>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$class_SB_exists_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
mark_SB_parameter_SB_flat_CL_ArrowNilConsU64ConsU64String:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<Tuple<Tuple<String,U64>,U64>,U64>,?>,Tuple<Tuple<String,U64>,U64>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$parameter_SB_is_SB_flat_SB_index_CL_BTreeEqU64TupleU64TupleU64StringBTreeEqU64TupleU64TupleU64StringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq $0
	pushq -24(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsTupleU64TupleU64StringArray_QM_BTreeEqU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_parameter_SB_flat_CL_ArrowU64ConsU64ConsU64String:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<Tuple<Tuple<String,U64>,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $parameter_SB_is_SB_flat_SB_index_CL_BTreeEqU64TupleU64TupleU64StringBTreeEqU64TupleU64TupleU64StringCaseNumber0, %r15
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq $0
	pushq -24(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringBTreeEqU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mark_SB_as_SB_special_CL_ArrowNilConsTypeString:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<Tuple<String,Type>,U64>,?>,Tuple<String,Type>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$is_SB_special_SB_index_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsTupleTypeStringArray_QM_BTreeEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
is_SB_special_CL_ArrowU64ConsTypeString:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $is_SB_special_SB_index_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0, %r15
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTupleTypeStringBTreeEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
index_SB_lone_SB_tag_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,U64>,?>,String>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$lone_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_lone_SB_tag_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $lone_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_tag_SB_is_SB_fragment_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,U64>,?>,String>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$tag_SB_is_SB_fragment_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_fragment_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_is_SB_fragment_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_fragment_CL_ArrowU64Type:
#call function is-fragment : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call is_SB_fragment_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mark_SB_global_SB_as_SB_seen_CL_ArrowNilConsTypeConsTypeString:
	push %RBP
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $uuid_00000000000beed1
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function global-is-seen : Arrow<Cons<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call global_SB_is_SB_seen_CL_ArrowU64ConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000beed4
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<Tuple<String,Type>,U64>,?>,Tuple<String,Type>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$global_SB_symbol_SB_registry_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsTupleTypeStringArray_QM_BTreeEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000beed6
uuid_00000000000beed4:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beed2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beed3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000beed6:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov %rbp, %rsp
	sub $64, %rsp
	ret
global_SB_is_SB_seen_CL_ArrowU64ConsTypeString:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_symbol_SB_registry_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0, %r15
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTupleTypeStringBTreeEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
has_SB_only_SB_child_CL_ArrowNilConsStringString:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,String>,?>,String>,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$class_SB_to_SB_only_SB_child_CL_BTreeEqStringStringBTreeEqStringStringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsStringConsStringArray_QM_BTreeEqStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
get_SB_only_SB_child_CL_ArrowStringString:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,String>,String>,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_only_SB_child_CL_BTreeEqStringStringBTreeEqStringStringCaseNumber0, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $uuid_00000000000be796
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowStringConsStringConsStringBTreeEqStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_of_SB_tag_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_index_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %r15
	pushq 0(%r15)
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,U64>,?>,String>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$tag_SB_to_SB_index_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
index_SB_size_SB_of_SB_class_CL_ArrowNilConsU64String:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,U64>,?>,String>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
size_SB_of_SB_class_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_class_SB_of_SB_tag_CL_ArrowNilConsTypeString:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,Type>,?>,String>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$tag_SB_to_SB_class_SB_index_CL_BTreeEqTypeStringBTreeEqTypeStringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsTypeConsStringArray_QM_BTreeEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bef11
	jmp uuid_00000000000bef13
uuid_00000000000bef11:
	push %RBP
	jmp uuid_00000000000bef0e
	jmp uuid_00000000000bef10
uuid_00000000000bef0e:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bef0b
	jmp uuid_00000000000bef0d
uuid_00000000000bef0b:
	movb $1, -104(%rbp)
uuid_00000000000bef0d:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000bef10:
	mov -120(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000bef13:
	mov -112(%RBP),%RSP
	add $-136, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bef19
	push %RBP
	jmp uuid_00000000000bef16
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bef15
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bef18
uuid_00000000000bef16:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bef14
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bef18:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000bef1b
uuid_00000000000bef19:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,U64>,?>,String>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$class_SB_to_SB_yes_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r12
	push %R12
	pushq -136(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bef1b:
	mov -72(%RBP),%RSP
	add $-136, %RSP
	mov %rbp, %rsp
	sub $40, %rsp
	ret
class_SB_of_SB_tag_CL_ArrowTypeString:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,Type>,String>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_class_SB_index_CL_BTreeEqTypeStringBTreeEqTypeStringCaseNumber0, %r15
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTypeConsTypeConsStringBTreeEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_class_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_yes_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_fields_SB_of_SB_tag_CL_ArrowNilConsTypeConsTypeString:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,Tuple<Type,Type>>,?>,String>,Tuple<Type,Type>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$tag_SB_to_SB_fields_SB_index_CL_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeStringCaseNumber0, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsTupleTypeTypeConsStringArray_QM_BTreeEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $64, %rsp
	ret
fields_SB_of_SB_tag_CL_ArrowTupleTypeTypeString:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_fields_SB_index_CL_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeStringCaseNumber0, %r15
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringBTreeEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	subq $56, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fields_SB_of_SB_tag_CL_ArrowTypeConsTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bef5b
	jmp uuid_00000000000bef5d
uuid_00000000000bef5b:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bef51
	jmp uuid_00000000000bef53
uuid_00000000000bef51:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bef4e
	jmp uuid_00000000000bef50
uuid_00000000000bef4e:
	push %RBP
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bef48
	jmp uuid_00000000000bef4a
uuid_00000000000bef48:
	push %RBP
	jmp uuid_00000000000bef45
	jmp uuid_00000000000bef47
uuid_00000000000bef45:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bef42
	jmp uuid_00000000000bef44
uuid_00000000000bef42:
	movb $1, -304(%rbp)
uuid_00000000000bef44:
	mov -328(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000bef47:
	mov -320(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000bef4a:
	mov -312(%RBP),%RSP
	add $-336, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bef4b
	jmp uuid_00000000000bef4d
uuid_00000000000bef4b:
	movb $1, -208(%rbp)
uuid_00000000000bef4d:
	mov -272(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000bef50:
	mov -224(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000bef53:
	mov -216(%RBP),%RSP
	add $-336, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bef58
	jmp uuid_00000000000bef5a
uuid_00000000000bef58:
	push %RBP
	mov -120(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq $uuid_00000000000bef54
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bef55
	jmp uuid_00000000000bef57
uuid_00000000000bef55:
	movb $1, -144(%rbp)
uuid_00000000000bef57:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000bef5a:
	mov -160(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000bef5d:
	mov -152(%RBP),%RSP
	add $-352, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bef7c
	push %RBP
	jmp uuid_00000000000bef79
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bef78
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bef7b
uuid_00000000000bef79:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bef77
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bef7b:
	mov -360(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000bef7e
uuid_00000000000bef7c:
#call function fields-of-tag : Arrow<String,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	mov %RBX, %RBP
	call fields_SB_of_SB_tag_CL_ArrowTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bef64
	jmp uuid_00000000000bef66
uuid_00000000000bef64:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bef61
	jmp uuid_00000000000bef63
uuid_00000000000bef61:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bef5e
	jmp uuid_00000000000bef60
uuid_00000000000bef5e:
	movb $1, -480(%rbp)
uuid_00000000000bef60:
	mov -528(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000bef63:
	mov -496(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000bef66:
	mov -488(%RBP),%RSP
	add $-552, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bef74
	push %RBP
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bef6d
	jmp uuid_00000000000bef6f
uuid_00000000000bef6d:
	push %RBP
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	jmp uuid_00000000000bef6a
	jmp uuid_00000000000bef6c
uuid_00000000000bef6a:
	push %RBP
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	jmp uuid_00000000000bef67
	jmp uuid_00000000000bef69
uuid_00000000000bef67:
	movb $1, -624(%rbp)
uuid_00000000000bef69:
	mov -672(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000bef6c:
	mov -640(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000bef6f:
	mov -632(%RBP),%RSP
	add $-696, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bef71
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bef70
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bef73
uuid_00000000000bef71:
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000bef73:
	mov -560(%RBP),%RSP
	add $-696, %RSP
	jmp uuid_00000000000bef76
uuid_00000000000bef74:
uuid_00000000000bef76:
	mov -416(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000bef7e:
	mov -112(%RBP),%RSP
	add $-552, %RSP
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $uuid_00000000000bef7f
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fields-of-type : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beafa
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec44
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed3a
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be75a
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call fields_SB_of_SB_type_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
set_SB_type_SB_fields_CL_ArrowNilConsTypeType:
	pushq $uuid_00000000000be796
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bef94
	jmp uuid_00000000000bef96
uuid_00000000000bef94:
	push %RBP
	jmp uuid_00000000000bef91
	jmp uuid_00000000000bef93
uuid_00000000000bef91:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bef8e
	jmp uuid_00000000000bef90
uuid_00000000000bef8e:
	movb $1, -128(%rbp)
uuid_00000000000bef90:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000bef93:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000bef96:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bef9c
	push %RBP
	jmp uuid_00000000000bef99
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bef98
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bef9b
uuid_00000000000bef99:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bef97
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bef9b:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000bef9e
uuid_00000000000bef9c:
	movq -160(%rbp), %r15
	movq %r15, -64(%rbp)
	mov -160(%rbp), %r15
	mov %r15, -64(%rbp)
uuid_00000000000bef9e:
	mov -96(%RBP),%RSP
	add $-160, %RSP
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,Tuple<Type,Type>>,?>,String>,Tuple<Type,Type>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$type_SB_complex_SB_fields_SB_index_CL_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeStringCaseNumber0, %r12
	push %R12
	pushq -64(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsTupleTypeTypeConsStringArray_QM_BTreeEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
get_SB_vararg_SB_inner_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000befa5
	jmp uuid_00000000000befa7
uuid_00000000000befa5:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000befa2
	jmp uuid_00000000000befa4
uuid_00000000000befa2:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bef9f
	jmp uuid_00000000000befa1
uuid_00000000000bef9f:
	movb $1, -120(%rbp)
uuid_00000000000befa1:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000befa4:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000befa7:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000befc7
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000befbd
	jmp uuid_00000000000befbf
uuid_00000000000befbd:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000befb4
	jmp uuid_00000000000befb6
uuid_00000000000befb4:
	push %RBP
	jmp uuid_00000000000befb1
	jmp uuid_00000000000befb3
uuid_00000000000befb1:
	push %RBP
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	jmp uuid_00000000000befae
	jmp uuid_00000000000befb0
uuid_00000000000befae:
	movb $1, -296(%rbp)
uuid_00000000000befb0:
	mov -320(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000befb3:
	mov -312(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000befb6:
	mov -304(%RBP),%RSP
	add $-344, %RSP
	mov -296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000befba
	jmp uuid_00000000000befbc
uuid_00000000000befba:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq $uuid_00000000000bea38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000befb7
	jmp uuid_00000000000befb9
uuid_00000000000befb7:
	movb $1, -232(%rbp)
uuid_00000000000befb9:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000befbc:
	mov -248(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000befbf:
	mov -240(%RBP),%RSP
	add $-360, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000befc4
	push %RBP
	jmp uuid_00000000000befc1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000befc0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000befc3
uuid_00000000000befc1:
uuid_00000000000befc3:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000befc6
uuid_00000000000befc4:
	movq -344(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000befc6:
	mov -200(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000befc9
uuid_00000000000befc7:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000befa8
	jmp uuid_00000000000befaa
uuid_00000000000befa8:
	movq -192(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000befaa:
	mov -200(%RBP),%RSP
	add $-200, %RSP
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000befab
	jmp uuid_00000000000befad
uuid_00000000000befab:
	movq -160(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000befad:
	mov -208(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000befc9:
	mov -88(%RBP),%RSP
	add $-208, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,U64>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsU64ConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
is_SB_constructor_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000befd0
	jmp uuid_00000000000befd2
uuid_00000000000befd0:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000befcd
	jmp uuid_00000000000befcf
uuid_00000000000befcd:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000befca
	jmp uuid_00000000000befcc
uuid_00000000000befca:
	movb $1, -104(%rbp)
uuid_00000000000befcc:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000befcf:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000befd2:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beffb
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000befd9
	jmp uuid_00000000000befdb
uuid_00000000000befd9:
	push %RBP
	jmp uuid_00000000000befd6
	jmp uuid_00000000000befd8
uuid_00000000000befd6:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000bed38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000befd3
	jmp uuid_00000000000befd5
uuid_00000000000befd3:
	movb $1, -216(%rbp)
uuid_00000000000befd5:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000befd8:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000befdb:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beff8
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000befe2
	jmp uuid_00000000000befe4
uuid_00000000000befe2:
	push %RBP
	jmp uuid_00000000000befdf
	jmp uuid_00000000000befe1
uuid_00000000000befdf:
	push %RBP
	mov -264(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq $uuid_00000000000bed7b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000befdc
	jmp uuid_00000000000befde
uuid_00000000000befdc:
	movb $1, -288(%rbp)
uuid_00000000000befde:
	mov -312(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000befe1:
	mov -304(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000befe4:
	mov -296(%RBP),%RSP
	add $-320, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beff5
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000befeb
	jmp uuid_00000000000befed
uuid_00000000000befeb:
	push %RBP
	jmp uuid_00000000000befe8
	jmp uuid_00000000000befea
uuid_00000000000befe8:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000befe5
	jmp uuid_00000000000befe7
uuid_00000000000befe5:
	movb $1, -360(%rbp)
uuid_00000000000befe7:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000befea:
	mov -376(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000befed:
	mov -368(%RBP),%RSP
	add $-392, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000beff2
	push %RBP
	jmp uuid_00000000000befef
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000befee
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000beff1
uuid_00000000000befef:
uuid_00000000000beff1:
	mov -400(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000beff4
uuid_00000000000beff2:
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000beff4:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000beff7
uuid_00000000000beff5:
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000beff7:
	mov -256(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000beffa
uuid_00000000000beff8:
	movq $1, -40(%rbp)
uuid_00000000000beffa:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000beffd
uuid_00000000000beffb:
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000beffd:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_simple_SB_constructor_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf004
	jmp uuid_00000000000bf006
uuid_00000000000bf004:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf001
	jmp uuid_00000000000bf003
uuid_00000000000bf001:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000beffe
	jmp uuid_00000000000bf000
uuid_00000000000beffe:
	movb $1, -104(%rbp)
uuid_00000000000bf000:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bf003:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bf006:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf017
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf00d
	jmp uuid_00000000000bf00f
uuid_00000000000bf00d:
	push %RBP
	jmp uuid_00000000000bf00a
	jmp uuid_00000000000bf00c
uuid_00000000000bf00a:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000bed38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf007
	jmp uuid_00000000000bf009
uuid_00000000000bf007:
	movb $1, -216(%rbp)
uuid_00000000000bf009:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000bf00c:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000bf00f:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf014
	push %RBP
	jmp uuid_00000000000bf011
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf010
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf013
uuid_00000000000bf011:
uuid_00000000000bf013:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000bf016
uuid_00000000000bf014:
	movq $1, -40(%rbp)
uuid_00000000000bf016:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000bf019
uuid_00000000000bf017:
#call function is-simple-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_simple_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-simple-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_simple_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000bf019:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_tag_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf020
	jmp uuid_00000000000bf022
uuid_00000000000bf020:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf01d
	jmp uuid_00000000000bf01f
uuid_00000000000bf01d:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf01a
	jmp uuid_00000000000bf01c
uuid_00000000000bf01a:
	movb $1, -104(%rbp)
uuid_00000000000bf01c:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bf01f:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bf022:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf033
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf029
	jmp uuid_00000000000bf02b
uuid_00000000000bf029:
	push %RBP
	jmp uuid_00000000000bf026
	jmp uuid_00000000000bf028
uuid_00000000000bf026:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000bef54
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf023
	jmp uuid_00000000000bf025
uuid_00000000000bf023:
	movb $1, -216(%rbp)
uuid_00000000000bf025:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000bf028:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000bf02b:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf030
	push %RBP
	jmp uuid_00000000000bf02d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf02c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf02f
uuid_00000000000bf02d:
uuid_00000000000bf02f:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000bf032
uuid_00000000000bf030:
	movq $1, -40(%rbp)
uuid_00000000000bf032:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000bf035
uuid_00000000000bf033:
#call function is-tag : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_tag_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-tag : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_tag_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000bf035:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_open_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0cc
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf039
	jmp uuid_00000000000bf03b
uuid_00000000000bf039:
	push %RBP
	jmp uuid_00000000000bf036
	jmp uuid_00000000000bf038
uuid_00000000000bf036:
	movb $1, -136(%rbp)
uuid_00000000000bf038:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000bf03b:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0c9
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf042
	jmp uuid_00000000000bf044
uuid_00000000000bf042:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf03f
	jmp uuid_00000000000bf041
uuid_00000000000bf03f:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf03c
	jmp uuid_00000000000bf03e
uuid_00000000000bf03c:
	movb $1, -192(%rbp)
uuid_00000000000bf03e:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000bf041:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000bf044:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0c6
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf063
	jmp uuid_00000000000bf065
uuid_00000000000bf063:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf05a
	jmp uuid_00000000000bf05c
uuid_00000000000bf05a:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf051
	jmp uuid_00000000000bf053
uuid_00000000000bf051:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf04e
	jmp uuid_00000000000bf050
uuid_00000000000bf04e:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf04b
	jmp uuid_00000000000bf04d
uuid_00000000000bf04b:
	movb $1, -432(%rbp)
uuid_00000000000bf04d:
	mov -496(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000bf050:
	mov -448(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000bf053:
	mov -440(%RBP),%RSP
	add $-520, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf057
	jmp uuid_00000000000bf059
uuid_00000000000bf057:
	push %RBP
	jmp uuid_00000000000bf054
	jmp uuid_00000000000bf056
uuid_00000000000bf054:
	movb $1, -368(%rbp)
uuid_00000000000bf056:
	mov -528(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000bf059:
	mov -384(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000bf05c:
	mov -376(%RBP),%RSP
	add $-528, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf060
	jmp uuid_00000000000bf062
uuid_00000000000bf060:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	pushq $uuid_00000000000bec78
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf05d
	jmp uuid_00000000000bf05f
uuid_00000000000bf05d:
	movb $1, -304(%rbp)
uuid_00000000000bf05f:
	mov -536(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000bf062:
	mov -320(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000bf065:
	mov -312(%RBP),%RSP
	add $-544, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0c3
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf07e
	jmp uuid_00000000000bf080
uuid_00000000000bf07e:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf075
	jmp uuid_00000000000bf077
uuid_00000000000bf075:
	push %RBP
	mov -632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf06c
	jmp uuid_00000000000bf06e
uuid_00000000000bf06c:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf069
	jmp uuid_00000000000bf06b
uuid_00000000000bf069:
	push %RBP
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000bf066
	jmp uuid_00000000000bf068
uuid_00000000000bf066:
	movb $1, -712(%rbp)
uuid_00000000000bf068:
	mov -776(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000bf06b:
	mov -728(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000bf06e:
	mov -720(%RBP),%RSP
	add $-800, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf072
	jmp uuid_00000000000bf074
uuid_00000000000bf072:
	push %RBP
	jmp uuid_00000000000bf06f
	jmp uuid_00000000000bf071
uuid_00000000000bf06f:
	movb $1, -648(%rbp)
uuid_00000000000bf071:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000bf074:
	mov -664(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000bf077:
	mov -656(%RBP),%RSP
	add $-808, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf07b
	jmp uuid_00000000000bf07d
uuid_00000000000bf07b:
	push %RBP
	mov -560(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq $uuid_00000000000bec78
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf078
	jmp uuid_00000000000bf07a
uuid_00000000000bf078:
	movb $1, -584(%rbp)
uuid_00000000000bf07a:
	mov -816(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000bf07d:
	mov -600(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000bf080:
	mov -592(%RBP),%RSP
	add $-824, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0c0
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf09a
	jmp uuid_00000000000bf09c
uuid_00000000000bf09a:
	push %RBP
	mov -848(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf090
	jmp uuid_00000000000bf092
uuid_00000000000bf090:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -984(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf087
	jmp uuid_00000000000bf089
uuid_00000000000bf087:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf084
	jmp uuid_00000000000bf086
uuid_00000000000bf084:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000bf081
	jmp uuid_00000000000bf083
uuid_00000000000bf081:
	movb $1, -992(%rbp)
uuid_00000000000bf083:
	mov -1056(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000bf086:
	mov -1008(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000bf089:
	mov -1000(%RBP),%RSP
	add $-1080, %RSP
	mov -992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf08d
	jmp uuid_00000000000bf08f
uuid_00000000000bf08d:
	push %RBP
	jmp uuid_00000000000bf08a
	jmp uuid_00000000000bf08c
uuid_00000000000bf08a:
	movb $1, -928(%rbp)
uuid_00000000000bf08c:
	mov -1088(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000bf08f:
	mov -944(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000bf092:
	mov -936(%RBP),%RSP
	add $-1088, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf097
	jmp uuid_00000000000bf099
uuid_00000000000bf097:
	push %RBP
	mov -840(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1104(%rbp)
	pushq $uuid_00000000000bf093
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf094
	jmp uuid_00000000000bf096
uuid_00000000000bf094:
	movb $1, -864(%rbp)
uuid_00000000000bf096:
	mov -1096(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000bf099:
	mov -880(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000bf09c:
	mov -872(%RBP),%RSP
	add $-1104, %RSP
	mov -864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0bd
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0a3
	jmp uuid_00000000000bf0a5
uuid_00000000000bf0a3:
	push %RBP
	mov -1128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf0a0
	jmp uuid_00000000000bf0a2
uuid_00000000000bf0a0:
	push %RBP
	jmp uuid_00000000000bf09d
	jmp uuid_00000000000bf09f
uuid_00000000000bf09d:
	movb $1, -1144(%rbp)
uuid_00000000000bf09f:
	mov -1208(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000bf0a2:
	mov -1160(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000bf0a5:
	mov -1152(%RBP),%RSP
	add $-1208, %RSP
	mov -1144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0ba
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf0b9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf0bc
uuid_00000000000bf0ba:
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
uuid_00000000000bf0b6:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf0b7
	jmp uuid_00000000000bf0b8
uuid_00000000000bf0b7:
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	push %RBP
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq $0
	push %RBP
	mov -1336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0ac
	jmp uuid_00000000000bf0ae
uuid_00000000000bf0ac:
	push %RBP
	mov -1328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf0a9
	jmp uuid_00000000000bf0ab
uuid_00000000000bf0a9:
	push %RBP
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	jmp uuid_00000000000bf0a6
	jmp uuid_00000000000bf0a8
uuid_00000000000bf0a6:
	movb $1, -1344(%rbp)
uuid_00000000000bf0a8:
	mov -1408(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000bf0ab:
	mov -1360(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000bf0ae:
	mov -1352(%RBP),%RSP
	add $-1432, %RSP
	mov -1344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0b3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf0b2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf0b5
uuid_00000000000bf0b3:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf0af
	jmp uuid_00000000000bf0b1
uuid_00000000000bf0af:
	movq $1, -40(%rbp)
uuid_00000000000bf0b1:
	mov -1440(%RBP),%RSP
	add $-1440, %RSP
	movq -1400(%rbp), %r15
	movq %r15, -1248(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -1240(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -1232(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -1224(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -1216(%rbp)
uuid_00000000000bf0b5:
	mov -1296(%RBP),%RSP
	add $-1440, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000bf0b6
uuid_00000000000bf0b8:
uuid_00000000000bf0bc:
	mov -1112(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000bf0bf
uuid_00000000000bf0bd:
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000bf0bf:
	mov -832(%RBP),%RSP
	add $-1104, %RSP
	jmp uuid_00000000000bf0c2
uuid_00000000000bf0c0:
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000bf0c2:
	mov -552(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000bf0c5
uuid_00000000000bf0c3:
uuid_00000000000bf0c5:
	mov -272(%RBP),%RSP
	add $-544, %RSP
	jmp uuid_00000000000bf0c8
uuid_00000000000bf0c6:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf045
	jmp uuid_00000000000bf047
uuid_00000000000bf045:
	movq $1, -40(%rbp)
uuid_00000000000bf047:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf048
	jmp uuid_00000000000bf04a
uuid_00000000000bf048:
	movq $1, -40(%rbp)
uuid_00000000000bf04a:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000bf0c8:
	mov -160(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000bf0cb
uuid_00000000000bf0c9:
	movq $1, -40(%rbp)
uuid_00000000000bf0cb:
	mov -104(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000bf0ce
uuid_00000000000bf0cc:
	movq $1, -40(%rbp)
uuid_00000000000bf0ce:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_vararg_CL_ArrowU64Type:
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000bea38
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_parameterized_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0de
	jmp uuid_00000000000bf0e0
uuid_00000000000bf0de:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0d5
	jmp uuid_00000000000bf0d7
uuid_00000000000bf0d5:
	push %RBP
	jmp uuid_00000000000bf0d2
	jmp uuid_00000000000bf0d4
uuid_00000000000bf0d2:
	push %RBP
	jmp uuid_00000000000bf0cf
	jmp uuid_00000000000bf0d1
uuid_00000000000bf0cf:
	movb $1, -168(%rbp)
uuid_00000000000bf0d1:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000bf0d4:
	mov -184(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000bf0d7:
	mov -176(%RBP),%RSP
	add $-192, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0db
	jmp uuid_00000000000bf0dd
uuid_00000000000bf0db:
	push %RBP
	jmp uuid_00000000000bf0d8
	jmp uuid_00000000000bf0da
uuid_00000000000bf0d8:
	movb $1, -104(%rbp)
uuid_00000000000bf0da:
	mov -200(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000bf0dd:
	mov -120(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000bf0e0:
	mov -112(%RBP),%RSP
	add $-200, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0f7
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0e7
	jmp uuid_00000000000bf0e9
uuid_00000000000bf0e7:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf0e4
	jmp uuid_00000000000bf0e6
uuid_00000000000bf0e4:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf0e1
	jmp uuid_00000000000bf0e3
uuid_00000000000bf0e1:
	movb $1, -240(%rbp)
uuid_00000000000bf0e3:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000bf0e6:
	mov -256(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000bf0e9:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf0f4
	push %RBP
	jmp uuid_00000000000bf0f1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf0f0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf0f3
uuid_00000000000bf0f1:
uuid_00000000000bf0f3:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000bf0f6
uuid_00000000000bf0f4:
	push %RBP
#call function is-parameterized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_parameterized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf0ea
	jmp uuid_00000000000bf0ec
uuid_00000000000bf0ea:
	movq $1, -40(%rbp)
uuid_00000000000bf0ec:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	push %RBP
#call function is-parameterized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call is_SB_parameterized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf0ed
	jmp uuid_00000000000bf0ef
uuid_00000000000bf0ed:
	movq $1, -40(%rbp)
uuid_00000000000bf0ef:
	mov -328(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000bf0f6:
	mov -208(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000bf0f9
uuid_00000000000bf0f7:
	movq $1, -40(%rbp)
uuid_00000000000bf0f9:
	mov -72(%RBP),%RSP
	add $-200, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_sized_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf12e
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf100
	jmp uuid_00000000000bf102
uuid_00000000000bf100:
	push %RBP
	jmp uuid_00000000000bf0fd
	jmp uuid_00000000000bf0ff
uuid_00000000000bf0fd:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf0fa
	jmp uuid_00000000000bf0fc
uuid_00000000000bf0fa:
	movb $1, -136(%rbp)
uuid_00000000000bf0fc:
	mov -160(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bf0ff:
	mov -152(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bf102:
	mov -144(%RBP),%RSP
	add $-168, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf12b
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf109
	jmp uuid_00000000000bf10b
uuid_00000000000bf109:
	push %RBP
	jmp uuid_00000000000bf106
	jmp uuid_00000000000bf108
uuid_00000000000bf106:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000bed7b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf103
	jmp uuid_00000000000bf105
uuid_00000000000bf103:
	movb $1, -208(%rbp)
uuid_00000000000bf105:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000bf108:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000bf10b:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf128
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf112
	jmp uuid_00000000000bf114
uuid_00000000000bf112:
	push %RBP
	jmp uuid_00000000000bf10f
	jmp uuid_00000000000bf111
uuid_00000000000bf10f:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000bed3a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf10c
	jmp uuid_00000000000bf10e
uuid_00000000000bf10c:
	movb $1, -280(%rbp)
uuid_00000000000bf10e:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000bf111:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000bf114:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf125
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf11b
	jmp uuid_00000000000bf11d
uuid_00000000000bf11b:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf118
	jmp uuid_00000000000bf11a
uuid_00000000000bf118:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf115
	jmp uuid_00000000000bf117
uuid_00000000000bf115:
	movb $1, -352(%rbp)
uuid_00000000000bf117:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000bf11a:
	mov -368(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000bf11d:
	mov -360(%RBP),%RSP
	add $-424, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf122
	push %RBP
	jmp uuid_00000000000bf11f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf11e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf121
uuid_00000000000bf11f:
uuid_00000000000bf121:
	mov -432(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000bf124
uuid_00000000000bf122:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function is-sized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call is_SB_sized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-sized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call is_SB_sized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000bf124:
	mov -320(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000bf127
uuid_00000000000bf125:
	movq $1, -40(%rbp)
uuid_00000000000bf127:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000bf12a
uuid_00000000000bf128:
	movq $1, -40(%rbp)
uuid_00000000000bf12a:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000bf12d
uuid_00000000000bf12b:
	movq $1, -40(%rbp)
uuid_00000000000bf12d:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000bf130
uuid_00000000000bf12e:
	movq $1, -40(%rbp)
uuid_00000000000bf130:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
has_SB_representation_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf137
	jmp uuid_00000000000bf139
uuid_00000000000bf137:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf134
	jmp uuid_00000000000bf136
uuid_00000000000bf134:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf131
	jmp uuid_00000000000bf133
uuid_00000000000bf131:
	movb $1, -104(%rbp)
uuid_00000000000bf133:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bf136:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bf139:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf187
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf141
	jmp uuid_00000000000bf143
uuid_00000000000bf141:
	push %RBP
	jmp uuid_00000000000bf13e
	jmp uuid_00000000000bf140
uuid_00000000000bf13e:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000bf13a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf13b
	jmp uuid_00000000000bf13d
uuid_00000000000bf13b:
	movb $1, -216(%rbp)
uuid_00000000000bf13d:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000bf140:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000bf143:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf184
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf14a
	jmp uuid_00000000000bf14c
uuid_00000000000bf14a:
	push %RBP
	jmp uuid_00000000000bf147
	jmp uuid_00000000000bf149
uuid_00000000000bf147:
	push %RBP
	mov -264(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq $uuid_00000000000bec07
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf144
	jmp uuid_00000000000bf146
uuid_00000000000bf144:
	movb $1, -288(%rbp)
uuid_00000000000bf146:
	mov -312(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000bf149:
	mov -304(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000bf14c:
	mov -296(%RBP),%RSP
	add $-320, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf181
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf153
	jmp uuid_00000000000bf155
uuid_00000000000bf153:
	push %RBP
	jmp uuid_00000000000bf150
	jmp uuid_00000000000bf152
uuid_00000000000bf150:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000bec0b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf14d
	jmp uuid_00000000000bf14f
uuid_00000000000bf14d:
	movb $1, -360(%rbp)
uuid_00000000000bf14f:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000bf152:
	mov -376(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000bf155:
	mov -368(%RBP),%RSP
	add $-392, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf17e
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf15c
	jmp uuid_00000000000bf15e
uuid_00000000000bf15c:
	push %RBP
	jmp uuid_00000000000bf159
	jmp uuid_00000000000bf15b
uuid_00000000000bf159:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -464(%rbp)
	pushq $uuid_00000000000bec0f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf156
	jmp uuid_00000000000bf158
uuid_00000000000bf156:
	movb $1, -432(%rbp)
uuid_00000000000bf158:
	mov -456(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000bf15b:
	mov -448(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000bf15e:
	mov -440(%RBP),%RSP
	add $-464, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf17b
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf165
	jmp uuid_00000000000bf167
uuid_00000000000bf165:
	push %RBP
	jmp uuid_00000000000bf162
	jmp uuid_00000000000bf164
uuid_00000000000bf162:
	push %RBP
	mov -480(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq $uuid_00000000000bec13
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf15f
	jmp uuid_00000000000bf161
uuid_00000000000bf15f:
	movb $1, -504(%rbp)
uuid_00000000000bf161:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000bf164:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000bf167:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf178
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf16e
	jmp uuid_00000000000bf170
uuid_00000000000bf16e:
	push %RBP
	jmp uuid_00000000000bf16b
	jmp uuid_00000000000bf16d
uuid_00000000000bf16b:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq $uuid_00000000000becb0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf168
	jmp uuid_00000000000bf16a
uuid_00000000000bf168:
	movb $1, -576(%rbp)
uuid_00000000000bf16a:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000bf16d:
	mov -592(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000bf170:
	mov -584(%RBP),%RSP
	add $-608, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf175
	push %RBP
	jmp uuid_00000000000bf172
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf171
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf174
uuid_00000000000bf172:
uuid_00000000000bf174:
	mov -616(%RBP),%RSP
	add $-616, %RSP
	jmp uuid_00000000000bf177
uuid_00000000000bf175:
	movq $1, -40(%rbp)
uuid_00000000000bf177:
	mov -544(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000bf17a
uuid_00000000000bf178:
	movq $1, -40(%rbp)
uuid_00000000000bf17a:
	mov -472(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000bf17d
uuid_00000000000bf17b:
	movq $1, -40(%rbp)
uuid_00000000000bf17d:
	mov -400(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000bf180
uuid_00000000000bf17e:
	movq $1, -40(%rbp)
uuid_00000000000bf180:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000bf183
uuid_00000000000bf181:
	movq $1, -40(%rbp)
uuid_00000000000bf183:
	mov -256(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000bf186
uuid_00000000000bf184:
	movq $1, -40(%rbp)
uuid_00000000000bf186:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000bf189
uuid_00000000000bf187:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-representation : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call has_SB_representation_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-representation : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call has_SB_representation_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000bf189:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
guess_SB_representation_CL_ArrowTypeType:
	push %RBP
#call function has-representation : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call has_SB_representation_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf19d
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -48(%rbp)
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf19a
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf197
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf194
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf191
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf18e
	push %RBP
	jmp uuid_00000000000bf18b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf18a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf18d
uuid_00000000000bf18b:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000becb0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bf18d:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000bf190
uuid_00000000000bf18e:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec13
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bf190:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000bf193
uuid_00000000000bf191:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec0f
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bf193:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000bf196
uuid_00000000000bf194:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec0b
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bf196:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000bf199
uuid_00000000000bf197:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec07
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bf199:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000bf19c
uuid_00000000000bf19a:
uuid_00000000000bf19c:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	jmp uuid_00000000000bf19f
uuid_00000000000bf19d:
uuid_00000000000bf19f:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
as_SB_local_SB_variable_CL_ArrowTypeType:
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf1a1
	jmp uuid_00000000000bf1a3
uuid_00000000000bf1a1:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bf1a0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bf1a3:
	mov -40(%RBP),%RSP
	add $-40, %RSP
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
as_SB_constant_CL_ArrowTypeType:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf1a4
	jmp uuid_00000000000bf1a6
uuid_00000000000bf1a4:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bf13a
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bf1a6:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
deep_SB_hash_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf1c9
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf1aa
	jmp uuid_00000000000bf1ac
uuid_00000000000bf1aa:
	push %RBP
	mov -120(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf1a7
	jmp uuid_00000000000bf1a9
uuid_00000000000bf1a7:
	movb $1, -136(%rbp)
uuid_00000000000bf1a9:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000bf1ac:
	mov -144(%RBP),%RSP
	add $-160, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf1c6
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf1b3
	jmp uuid_00000000000bf1b5
uuid_00000000000bf1b3:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf1b0
	jmp uuid_00000000000bf1b2
uuid_00000000000bf1b0:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf1ad
	jmp uuid_00000000000bf1af
uuid_00000000000bf1ad:
	movb $1, -200(%rbp)
uuid_00000000000bf1af:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000bf1b2:
	mov -216(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000bf1b5:
	mov -208(%RBP),%RSP
	add $-272, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf1c3
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf1bc
	jmp uuid_00000000000bf1be
uuid_00000000000bf1bc:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf1b9
	jmp uuid_00000000000bf1bb
uuid_00000000000bf1b9:
	push %RBP
	mov -288(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf1b6
	jmp uuid_00000000000bf1b8
uuid_00000000000bf1b6:
	movb $1, -312(%rbp)
uuid_00000000000bf1b8:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000bf1bb:
	mov -328(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000bf1be:
	mov -320(%RBP),%RSP
	add $-384, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf1c0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf1bf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf1c2
uuid_00000000000bf1c0:
#call function deep-hash : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000bf1c2:
	mov -280(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000bf1c5
uuid_00000000000bf1c3:
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000bf1c5:
	mov -168(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000bf1c8
uuid_00000000000bf1c6:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000bf1c8:
	mov -104(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000bf1cb
uuid_00000000000bf1c9:
uuid_00000000000bf1cb:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
deep_SB_hash_CL_ArrowU64ListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf1db
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf1d4
	jmp uuid_00000000000bf1d6
uuid_00000000000bf1d4:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf1d1
	jmp uuid_00000000000bf1d3
uuid_00000000000bf1d1:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000bf1ce
	jmp uuid_00000000000bf1d0
uuid_00000000000bf1ce:
	movb $1, -200(%rbp)
uuid_00000000000bf1d0:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000bf1d3:
	mov -216(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000bf1d6:
	mov -208(%RBP),%RSP
	add $-288, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf1d8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf1d7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf1da
uuid_00000000000bf1d8:
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000bf1da:
	mov -152(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000bf1dd
uuid_00000000000bf1db:
uuid_00000000000bf1dd:
	mov -104(%RBP),%RSP
	add $-144, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
ascript_SB_normal_CL_ArrowNilConsTypeAST:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf1e9
	jmp uuid_00000000000bf1eb
uuid_00000000000bf1e9:
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf1e6
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov $types_SB_have_SB_changed_CL_U8, %r15
	movb $1, 0(%r15)
	jmp uuid_00000000000bf1e8
uuid_00000000000bf1e6:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf1e3
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf1e0
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bf1de
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bf1df
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf1e2
uuid_00000000000bf1e0:
uuid_00000000000bf1e2:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000bf1e5
uuid_00000000000bf1e3:
uuid_00000000000bf1e5:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000bf1e8:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000bf1eb:
	mov -112(%RBP),%RSP
	add $-152, %RSP
	mov %rbp, %rsp
	sub $104, %rsp
	ret
typeof_CL_ArrowTypeFragmentList:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf1f2
	jmp uuid_00000000000bf1f4
uuid_00000000000bf1f2:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000bf1ef
	jmp uuid_00000000000bf1f1
uuid_00000000000bf1ef:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf1ec
	jmp uuid_00000000000bf1ee
uuid_00000000000bf1ec:
	movb $1, -552(%rbp)
uuid_00000000000bf1ee:
	mov -728(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000bf1f1:
	mov -568(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000bf1f4:
	mov -560(%RBP),%RSP
	add $-896, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf1fc
	push %RBP
	jmp uuid_00000000000bf1f9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf1f8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf1fb
uuid_00000000000bf1f9:
uuid_00000000000bf1fb:
	mov -904(%RBP),%RSP
	add $-904, %RSP
	jmp uuid_00000000000bf1fe
uuid_00000000000bf1fc:
#call function typeof : Arrow<FragmentList,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf1f5
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	jmp uuid_00000000000bf1f7
uuid_00000000000bf1f5:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beafa
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000bf1f7:
	mov -904(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000bf1fe:
	mov -376(%RBP),%RSP
	add $-904, %RSP
	subq $24, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
to_SB_s_CL_ArrowSAST:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf205
	jmp uuid_00000000000bf207
uuid_00000000000bf205:
	push %RBP
	jmp uuid_00000000000bf202
	jmp uuid_00000000000bf204
uuid_00000000000bf202:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf1ff
	jmp uuid_00000000000bf201
uuid_00000000000bf1ff:
	movb $1, -264(%rbp)
uuid_00000000000bf201:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000bf204:
	mov -280(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000bf207:
	mov -272(%RBP),%RSP
	add $-296, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf27f
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf20f
	jmp uuid_00000000000bf211
uuid_00000000000bf20f:
	push %RBP
	jmp uuid_00000000000bf20c
	jmp uuid_00000000000bf20e
uuid_00000000000bf20c:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf209
	jmp uuid_00000000000bf20b
uuid_00000000000bf209:
	movb $1, -384(%rbp)
uuid_00000000000bf20b:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000bf20e:
	mov -400(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000bf211:
	mov -392(%RBP),%RSP
	add $-416, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf27c
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf231
	jmp uuid_00000000000bf233
uuid_00000000000bf231:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf21f
	jmp uuid_00000000000bf221
uuid_00000000000bf21f:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf216
	jmp uuid_00000000000bf218
uuid_00000000000bf216:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000bf213
	jmp uuid_00000000000bf215
uuid_00000000000bf213:
	movb $1, -696(%rbp)
uuid_00000000000bf215:
	mov -712(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000bf218:
	mov -704(%RBP),%RSP
	add $-736, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf21c
	jmp uuid_00000000000bf21e
uuid_00000000000bf21c:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf219
	jmp uuid_00000000000bf21b
uuid_00000000000bf219:
	movb $1, -600(%rbp)
uuid_00000000000bf21b:
	mov -744(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000bf21e:
	mov -616(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000bf221:
	mov -608(%RBP),%RSP
	add $-816, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf22e
	jmp uuid_00000000000bf230
uuid_00000000000bf22e:
	push %RBP
	mov -480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf228
	jmp uuid_00000000000bf22a
uuid_00000000000bf228:
	push %RBP
	jmp uuid_00000000000bf225
	jmp uuid_00000000000bf227
uuid_00000000000bf225:
	push %RBP
	mov -832(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf222
	jmp uuid_00000000000bf224
uuid_00000000000bf222:
	movb $1, -904(%rbp)
uuid_00000000000bf224:
	mov -928(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000bf227:
	mov -920(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000bf22a:
	mov -912(%RBP),%RSP
	add $-936, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf22b
	jmp uuid_00000000000bf22d
uuid_00000000000bf22b:
	movb $1, -504(%rbp)
uuid_00000000000bf22d:
	mov -824(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000bf230:
	mov -520(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000bf233:
	mov -512(%RBP),%RSP
	add $-936, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf279
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf252
	jmp uuid_00000000000bf254
uuid_00000000000bf252:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1112(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf240
	jmp uuid_00000000000bf242
uuid_00000000000bf240:
	push %RBP
	mov -1104(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf237
	jmp uuid_00000000000bf239
uuid_00000000000bf237:
	push %RBP
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	jmp uuid_00000000000bf234
	jmp uuid_00000000000bf236
uuid_00000000000bf234:
	movb $1, -1216(%rbp)
uuid_00000000000bf236:
	mov -1232(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000bf239:
	mov -1224(%RBP),%RSP
	add $-1256, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf23d
	jmp uuid_00000000000bf23f
uuid_00000000000bf23d:
	push %RBP
	mov -1096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf23a
	jmp uuid_00000000000bf23c
uuid_00000000000bf23a:
	movb $1, -1120(%rbp)
uuid_00000000000bf23c:
	mov -1264(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000bf23f:
	mov -1136(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000bf242:
	mov -1128(%RBP),%RSP
	add $-1336, %RSP
	mov -1120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf24f
	jmp uuid_00000000000bf251
uuid_00000000000bf24f:
	push %RBP
	mov -1000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf249
	jmp uuid_00000000000bf24b
uuid_00000000000bf249:
	push %RBP
	jmp uuid_00000000000bf246
	jmp uuid_00000000000bf248
uuid_00000000000bf246:
	push %RBP
	mov -1352(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	pushq $uuid_00000000000be915
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf243
	jmp uuid_00000000000bf245
uuid_00000000000bf243:
	movb $1, -1424(%rbp)
uuid_00000000000bf245:
	mov -1448(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000bf248:
	mov -1440(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000bf24b:
	mov -1432(%RBP),%RSP
	add $-1456, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf24c
	jmp uuid_00000000000bf24e
uuid_00000000000bf24c:
	movb $1, -1024(%rbp)
uuid_00000000000bf24e:
	mov -1344(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000bf251:
	mov -1040(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000bf254:
	mov -1032(%RBP),%RSP
	add $-1456, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf276
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf25b
	jmp uuid_00000000000bf25d
uuid_00000000000bf25b:
	push %RBP
	mov -1528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf258
	jmp uuid_00000000000bf25a
uuid_00000000000bf258:
	push %RBP
	mov -1520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf255
	jmp uuid_00000000000bf257
uuid_00000000000bf255:
	movb $1, -1544(%rbp)
uuid_00000000000bf257:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000bf25a:
	mov -1560(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000bf25d:
	mov -1552(%RBP),%RSP
	add $-1712, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf273
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1792(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf268
	jmp uuid_00000000000bf26a
uuid_00000000000bf268:
	push %RBP
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	jmp uuid_00000000000bf265
	jmp uuid_00000000000bf267
uuid_00000000000bf265:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf262
	jmp uuid_00000000000bf264
uuid_00000000000bf262:
	push %RBP
	mov -1752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf25f
	jmp uuid_00000000000bf261
uuid_00000000000bf25f:
	movb $1, -1800(%rbp)
uuid_00000000000bf261:
	mov -1928(%RBP),%RSP
	add $-2000, %RSP
uuid_00000000000bf264:
	mov -1848(%RBP),%RSP
	add $-2000, %RSP
uuid_00000000000bf267:
	mov -1816(%RBP),%RSP
	add $-2000, %RSP
uuid_00000000000bf26a:
	mov -1808(%RBP),%RSP
	add $-2000, %RSP
	mov -1800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf270
	push %RBP
	jmp uuid_00000000000bf26d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf26c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf26f
uuid_00000000000bf26d:
uuid_00000000000bf26f:
	mov -2008(%RBP),%RSP
	add $-2008, %RSP
	jmp uuid_00000000000bf272
uuid_00000000000bf270:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000bf26b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000bf272:
	mov -1720(%RBP),%RSP
	add $-2000, %RSP
	jmp uuid_00000000000bf275
uuid_00000000000bf273:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000bf25e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000bf275:
	mov -1464(%RBP),%RSP
	add $-1712, %RSP
	jmp uuid_00000000000bf278
uuid_00000000000bf276:
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000bf278:
	mov -944(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000bf27b
uuid_00000000000bf279:
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000bf27b:
	mov -424(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000bf27e
uuid_00000000000bf27c:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000bf212
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -416(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000bf27e:
	mov -304(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000bf281
uuid_00000000000bf27f:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000bf208
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -296(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000bf281:
	mov -184(%RBP),%RSP
	add $-296, %RSP
	subq $24, %rsp
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
domain_CL_ArrowTypeType:
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000bed7b
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
range_CL_ArrowTypeType:
#call function p1 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000bed7b
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p1_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
t1_CL_ArrowTypeString:
	pushq -8(%rbp)
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
t2_CL_ArrowTypeConsTypeString:
	pushq -8(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
t3_CL_ArrowTypeConsTypeConsTypeString:
	pushq -8(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $64, %rsp
	ret
p_CL_ArrowTypeConsU64Type:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf294
	jmp uuid_00000000000bf296
uuid_00000000000bf294:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf291
	jmp uuid_00000000000bf293
uuid_00000000000bf291:
	push %RBP
	jmp uuid_00000000000bf28e
	jmp uuid_00000000000bf290
uuid_00000000000bf28e:
	movb $1, -104(%rbp)
uuid_00000000000bf290:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bf293:
	mov -120(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bf296:
	mov -112(%RBP),%RSP
	add $-168, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf29b
	push %RBP
	jmp uuid_00000000000bf298
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf297
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf29a
uuid_00000000000bf298:
uuid_00000000000bf29a:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000bf29d
uuid_00000000000bf29b:
#call function .nth : Arrow<Cons<Cons<List<Type>,U64>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_nth_CL_ArrowTypeConsTypeConsU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bf29d:
	mov -72(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
p1_CL_ArrowTypeType:
#call function p : Arrow<Cons<Type,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	mov %RBX, %RBP
	call p_CL_ArrowTypeConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
p2_CL_ArrowTypeType:
#call function p : Arrow<Cons<Type,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $1
	mov %RBX, %RBP
	call p_CL_ArrowTypeConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
and_CL_ArrowTContextConsTContextTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq $0
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf2a4
	jmp uuid_00000000000bf2a6
uuid_00000000000bf2a4:
	push %RBP
	jmp uuid_00000000000bf2a1
	jmp uuid_00000000000bf2a3
uuid_00000000000bf2a1:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	mov -904(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf29e
	jmp uuid_00000000000bf2a0
uuid_00000000000bf29e:
	movb $1, -760(%rbp)
uuid_00000000000bf2a0:
	mov -784(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000bf2a3:
	mov -776(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000bf2a6:
	mov -768(%RBP),%RSP
	add $-904, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf2b7
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf2ad
	jmp uuid_00000000000bf2af
uuid_00000000000bf2ad:
	push %RBP
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf2aa
	jmp uuid_00000000000bf2ac
uuid_00000000000bf2aa:
	push %RBP
	jmp uuid_00000000000bf2a7
	jmp uuid_00000000000bf2a9
uuid_00000000000bf2a7:
	movb $1, -1168(%rbp)
uuid_00000000000bf2a9:
	mov -1312(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000bf2ac:
	mov -1184(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000bf2af:
	mov -1176(%RBP),%RSP
	add $-1312, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf2b4
	push %RBP
	jmp uuid_00000000000bf2b1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf2b0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf2b3
uuid_00000000000bf2b1:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bf2b3:
	mov -1320(%RBP),%RSP
	add $-1320, %RSP
	jmp uuid_00000000000bf2b6
uuid_00000000000bf2b4:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bf2b6:
	mov -912(%RBP),%RSP
	add $-1312, %RSP
	jmp uuid_00000000000bf2b9
uuid_00000000000bf2b7:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bf2b9:
	mov -504(%RBP),%RSP
	add $-904, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $248, %rsp
	ret
and_CL_ArrowTypeConsTypeType:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	subq $24, %rsp
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
union_CL_ArrowTContextConsTContextTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf2d0
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf2cd
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf2c6
	jmp uuid_00000000000bf2c8
uuid_00000000000bf2c6:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000bf2c3
	jmp uuid_00000000000bf2c5
uuid_00000000000bf2c3:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000bf2c0
	jmp uuid_00000000000bf2c2
uuid_00000000000bf2c0:
	push %RBP
	mov -648(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf2bd
	jmp uuid_00000000000bf2bf
uuid_00000000000bf2bd:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf2ba
	jmp uuid_00000000000bf2bc
uuid_00000000000bf2ba:
	movb $1, -760(%rbp)
uuid_00000000000bf2bc:
	mov -904(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000bf2bf:
	mov -888(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000bf2c2:
	mov -856(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000bf2c5:
	mov -776(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000bf2c8:
	mov -768(%RBP),%RSP
	add $-1024, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf2ca
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf2c9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf2cc
uuid_00000000000bf2ca:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -896(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bf2cc:
	mov -632(%RBP),%RSP
	add $-1024, %RSP
	jmp uuid_00000000000bf2cf
uuid_00000000000bf2cd:
uuid_00000000000bf2cf:
	mov -504(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000bf2d2
uuid_00000000000bf2d0:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000bf2d2:
	mov -376(%RBP),%RSP
	add $-496, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $248, %rsp
	ret
union_CL_ArrowContextConsContextContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf2d3
	jmp uuid_00000000000bf2d5
uuid_00000000000bf2d3:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
uuid_00000000000bf2d5:
	mov -304(%RBP),%RSP
	add $-304, %RSP
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf2e9
	jmp uuid_00000000000bf2eb
uuid_00000000000bf2e9:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf2df
	jmp uuid_00000000000bf2e1
uuid_00000000000bf2df:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	jmp uuid_00000000000bf2dc
	jmp uuid_00000000000bf2de
uuid_00000000000bf2dc:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf2d9
	jmp uuid_00000000000bf2db
uuid_00000000000bf2d9:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf2d6
	jmp uuid_00000000000bf2d8
uuid_00000000000bf2d6:
	movb $1, -520(%rbp)
uuid_00000000000bf2d8:
	mov -632(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000bf2db:
	mov -616(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000bf2de:
	mov -536(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000bf2e1:
	mov -528(%RBP),%RSP
	add $-728, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf2e6
	push %RBP
	jmp uuid_00000000000bf2e3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf2e2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf2e5
uuid_00000000000bf2e3:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000bf2e5:
	mov -736(%RBP),%RSP
	add $-736, %RSP
	jmp uuid_00000000000bf2e8
uuid_00000000000bf2e6:
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -624(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq $0
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
uuid_00000000000bf2e8:
	mov -416(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000bf2eb:
	mov -312(%RBP),%RSP
	add $-728, %RSP
	subq $96, %rsp
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	addq $96, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
union_CL_ArrowFContextConsTContextFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
uuid_00000000000bf303:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf304
	jmp uuid_00000000000bf305
uuid_00000000000bf304:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	push %RBP
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf300
	push %RBP
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq $0
	push %RBP
	mov -904(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf2f8
	jmp uuid_00000000000bf2fa
uuid_00000000000bf2f8:
	push %RBP
	jmp uuid_00000000000bf2f5
	jmp uuid_00000000000bf2f7
uuid_00000000000bf2f5:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000bf2f2
	jmp uuid_00000000000bf2f4
uuid_00000000000bf2f2:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf2ef
	jmp uuid_00000000000bf2f1
uuid_00000000000bf2ef:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf2ec
	jmp uuid_00000000000bf2ee
uuid_00000000000bf2ec:
	movb $1, -912(%rbp)
uuid_00000000000bf2ee:
	mov -984(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000bf2f1:
	mov -968(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000bf2f4:
	mov -936(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000bf2f7:
	mov -928(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000bf2fa:
	mov -920(%RBP),%RSP
	add $-1104, %RSP
	mov -912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf2fd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf2fc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf2ff
uuid_00000000000bf2fd:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $uuid_00000000000bf2fb
	pushq $0
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1256(%RBP)
	popq -1248(%RBP)
	popq -1240(%RBP)
	popq -1232(%RBP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -976(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $0
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	movq -1104(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -208(%rbp)
uuid_00000000000bf2ff:
	mov -784(%RBP),%RSP
	add $-1256, %RSP
	jmp uuid_00000000000bf302
uuid_00000000000bf300:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
uuid_00000000000bf302:
	mov -656(%RBP),%RSP
	add $-776, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000bf303
uuid_00000000000bf305:
	subq $200, %rsp
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
tag_SB_of_CL_ArrowStringType:
	pushq $uuid_00000000000be796
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf30c
	jmp uuid_00000000000bf30e
uuid_00000000000bf30c:
	push %RBP
	jmp uuid_00000000000bf309
	jmp uuid_00000000000bf30b
uuid_00000000000bf309:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf306
	jmp uuid_00000000000bf308
uuid_00000000000bf306:
	movb $1, -104(%rbp)
uuid_00000000000bf308:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000bf30b:
	mov -120(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000bf30e:
	mov -112(%RBP),%RSP
	add $-136, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf313
	push %RBP
	jmp uuid_00000000000bf310
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf30f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf312
uuid_00000000000bf310:
uuid_00000000000bf312:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000bf315
uuid_00000000000bf313:
	movq -136(%rbp), %r15
	movq %r15, -40(%rbp)
	mov -136(%rbp), %r15
	mov %r15, -40(%rbp)
uuid_00000000000bf315:
	mov -72(%RBP),%RSP
	add $-136, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
can_SB_unify_CL_ArrowU64ConsListTypeListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf321
	jmp uuid_00000000000bf323
uuid_00000000000bf321:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf31e
	jmp uuid_00000000000bf320
uuid_00000000000bf31e:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf31b
	jmp uuid_00000000000bf31d
uuid_00000000000bf31b:
	movb $1, -288(%rbp)
uuid_00000000000bf31d:
	mov -352(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000bf320:
	mov -304(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000bf323:
	mov -296(%RBP),%RSP
	add $-392, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf34c
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf33c
	jmp uuid_00000000000bf33e
uuid_00000000000bf33c:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf32a
	jmp uuid_00000000000bf32c
uuid_00000000000bf32a:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf327
	jmp uuid_00000000000bf329
uuid_00000000000bf327:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000bf324
	jmp uuid_00000000000bf326
uuid_00000000000bf324:
	movb $1, -560(%rbp)
uuid_00000000000bf326:
	mov -624(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000bf329:
	mov -576(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000bf32c:
	mov -568(%RBP),%RSP
	add $-648, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf339
	jmp uuid_00000000000bf33b
uuid_00000000000bf339:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf333
	jmp uuid_00000000000bf335
uuid_00000000000bf333:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf330
	jmp uuid_00000000000bf332
uuid_00000000000bf330:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000bf32d
	jmp uuid_00000000000bf32f
uuid_00000000000bf32d:
	movb $1, -704(%rbp)
uuid_00000000000bf32f:
	mov -768(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000bf332:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000bf335:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf336
	jmp uuid_00000000000bf338
uuid_00000000000bf336:
	movb $1, -496(%rbp)
uuid_00000000000bf338:
	mov -656(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000bf33b:
	mov -512(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000bf33e:
	mov -504(%RBP),%RSP
	add $-792, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf349
	push %RBP
	jmp uuid_00000000000bf346
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf345
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf348
uuid_00000000000bf346:
uuid_00000000000bf348:
	mov -800(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000bf34b
uuid_00000000000bf349:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf342
	jmp uuid_00000000000bf344
uuid_00000000000bf342:
	push %RBP
#call function can-unify : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf33f
	jmp uuid_00000000000bf341
uuid_00000000000bf33f:
	movq $1, -96(%rbp)
uuid_00000000000bf341:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000bf344:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000bf34b:
	mov -400(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000bf34e
uuid_00000000000bf34c:
	movq $1, -96(%rbp)
uuid_00000000000bf34e:
	mov -192(%RBP),%RSP
	add $-392, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
can_SB_unify_CL_ArrowU64ConsTypeType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf355
	jmp uuid_00000000000bf357
uuid_00000000000bf355:
	push %RBP
	jmp uuid_00000000000bf352
	jmp uuid_00000000000bf354
uuid_00000000000bf352:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf34f
	jmp uuid_00000000000bf351
uuid_00000000000bf34f:
	movb $1, -192(%rbp)
uuid_00000000000bf351:
	mov -216(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000bf354:
	mov -208(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000bf357:
	mov -200(%RBP),%RSP
	add $-240, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf52c
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf371
	jmp uuid_00000000000bf373
uuid_00000000000bf371:
	push %RBP
	jmp uuid_00000000000bf36e
	jmp uuid_00000000000bf370
uuid_00000000000bf36e:
	push %RBP
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf368
	jmp uuid_00000000000bf36a
uuid_00000000000bf368:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf35e
	jmp uuid_00000000000bf360
uuid_00000000000bf35e:
	push %RBP
	jmp uuid_00000000000bf35b
	jmp uuid_00000000000bf35d
uuid_00000000000bf35b:
	push %RBP
	jmp uuid_00000000000bf358
	jmp uuid_00000000000bf35a
uuid_00000000000bf358:
	movb $1, -432(%rbp)
uuid_00000000000bf35a:
	mov -456(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000bf35d:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000bf360:
	mov -440(%RBP),%RSP
	add $-456, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf365
	jmp uuid_00000000000bf367
uuid_00000000000bf365:
	push %RBP
	mov -344(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $uuid_00000000000bf361
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf362
	jmp uuid_00000000000bf364
uuid_00000000000bf362:
	movb $1, -368(%rbp)
uuid_00000000000bf364:
	mov -464(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000bf367:
	mov -384(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000bf36a:
	mov -376(%RBP),%RSP
	add $-472, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf36b
	jmp uuid_00000000000bf36d
uuid_00000000000bf36b:
	movb $1, -312(%rbp)
uuid_00000000000bf36d:
	mov -336(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000bf370:
	mov -328(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000bf373:
	mov -320(%RBP),%RSP
	add $-472, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf529
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf380
	jmp uuid_00000000000bf382
uuid_00000000000bf380:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	jmp uuid_00000000000bf37d
	jmp uuid_00000000000bf37f
uuid_00000000000bf37d:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf377
	jmp uuid_00000000000bf379
uuid_00000000000bf377:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf374
	jmp uuid_00000000000bf376
uuid_00000000000bf374:
	movb $1, -624(%rbp)
uuid_00000000000bf376:
	mov -640(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000bf379:
	mov -632(%RBP),%RSP
	add $-648, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf37a
	jmp uuid_00000000000bf37c
uuid_00000000000bf37a:
	movb $1, -544(%rbp)
uuid_00000000000bf37c:
	mov -592(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000bf37f:
	mov -560(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000bf382:
	mov -552(%RBP),%RSP
	add $-648, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf526
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf392
	jmp uuid_00000000000bf394
uuid_00000000000bf392:
	push %RBP
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	jmp uuid_00000000000bf38f
	jmp uuid_00000000000bf391
uuid_00000000000bf38f:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf389
	jmp uuid_00000000000bf38b
uuid_00000000000bf389:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf386
	jmp uuid_00000000000bf388
uuid_00000000000bf386:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf383
	jmp uuid_00000000000bf385
uuid_00000000000bf383:
	movb $1, -800(%rbp)
uuid_00000000000bf385:
	mov -848(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000bf388:
	mov -816(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000bf38b:
	mov -808(%RBP),%RSP
	add $-872, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf38c
	jmp uuid_00000000000bf38e
uuid_00000000000bf38c:
	movb $1, -720(%rbp)
uuid_00000000000bf38e:
	mov -768(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000bf391:
	mov -736(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000bf394:
	mov -728(%RBP),%RSP
	add $-872, %RSP
	mov -720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf523
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -936(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3aa
	jmp uuid_00000000000bf3ac
uuid_00000000000bf3aa:
	push %RBP
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq $0
	push %RBP
	mov -984(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3a1
	jmp uuid_00000000000bf3a3
uuid_00000000000bf3a1:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf39e
	jmp uuid_00000000000bf3a0
uuid_00000000000bf39e:
	push %RBP
	mov -968(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf39b
	jmp uuid_00000000000bf39d
uuid_00000000000bf39b:
	movb $1, -992(%rbp)
uuid_00000000000bf39d:
	mov -1040(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000bf3a0:
	mov -1008(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000bf3a3:
	mov -1000(%RBP),%RSP
	add $-1064, %RSP
	mov -992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3a7
	jmp uuid_00000000000bf3a9
uuid_00000000000bf3a7:
	push %RBP
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	jmp uuid_00000000000bf3a4
	jmp uuid_00000000000bf3a6
uuid_00000000000bf3a4:
	movb $1, -944(%rbp)
uuid_00000000000bf3a6:
	mov -1072(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000bf3a9:
	mov -960(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000bf3ac:
	mov -952(%RBP),%RSP
	add $-1096, %RSP
	mov -944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf520
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf401
	jmp uuid_00000000000bf403
uuid_00000000000bf401:
	push %RBP
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3cb
	jmp uuid_00000000000bf3cd
uuid_00000000000bf3cb:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3c2
	jmp uuid_00000000000bf3c4
uuid_00000000000bf3c2:
	push %RBP
	mov -1264(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3b9
	jmp uuid_00000000000bf3bb
uuid_00000000000bf3b9:
	push %RBP
	mov -1328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3b6
	jmp uuid_00000000000bf3b8
uuid_00000000000bf3b6:
	push %RBP
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	jmp uuid_00000000000bf3b3
	jmp uuid_00000000000bf3b5
uuid_00000000000bf3b3:
	movb $1, -1344(%rbp)
uuid_00000000000bf3b5:
	mov -1408(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000bf3b8:
	mov -1360(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000bf3bb:
	mov -1352(%RBP),%RSP
	add $-1432, %RSP
	mov -1344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3bf
	jmp uuid_00000000000bf3c1
uuid_00000000000bf3bf:
	push %RBP
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	jmp uuid_00000000000bf3bc
	jmp uuid_00000000000bf3be
uuid_00000000000bf3bc:
	movb $1, -1280(%rbp)
uuid_00000000000bf3be:
	mov -1440(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000bf3c1:
	mov -1296(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000bf3c4:
	mov -1288(%RBP),%RSP
	add $-1464, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3c8
	jmp uuid_00000000000bf3ca
uuid_00000000000bf3c8:
	push %RBP
	mov -1192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1480(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf3c5
	jmp uuid_00000000000bf3c7
uuid_00000000000bf3c5:
	movb $1, -1216(%rbp)
uuid_00000000000bf3c7:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000bf3ca:
	mov -1232(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000bf3cd:
	mov -1224(%RBP),%RSP
	add $-1480, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3fe
	jmp uuid_00000000000bf400
uuid_00000000000bf3fe:
	push %RBP
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq $0
	push %RBP
	mov -1512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3f8
	jmp uuid_00000000000bf3fa
uuid_00000000000bf3f8:
	push %RBP
	mov -1504(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1576(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3ef
	jmp uuid_00000000000bf3f1
uuid_00000000000bf3ef:
	push %RBP
	mov -1568(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3d4
	jmp uuid_00000000000bf3d6
uuid_00000000000bf3d4:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1704(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3d1
	jmp uuid_00000000000bf3d3
uuid_00000000000bf3d1:
	push %RBP
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	jmp uuid_00000000000bf3ce
	jmp uuid_00000000000bf3d0
uuid_00000000000bf3ce:
	movb $1, -1648(%rbp)
uuid_00000000000bf3d0:
	mov -1712(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000bf3d3:
	mov -1664(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000bf3d6:
	mov -1656(%RBP),%RSP
	add $-1736, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3ec
	jmp uuid_00000000000bf3ee
uuid_00000000000bf3ec:
	push %RBP
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3e6
	jmp uuid_00000000000bf3e8
uuid_00000000000bf3e6:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1832(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3dd
	jmp uuid_00000000000bf3df
uuid_00000000000bf3dd:
	push %RBP
	mov -1824(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3da
	jmp uuid_00000000000bf3dc
uuid_00000000000bf3da:
	push %RBP
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	jmp uuid_00000000000bf3d7
	jmp uuid_00000000000bf3d9
uuid_00000000000bf3d7:
	movb $1, -1840(%rbp)
uuid_00000000000bf3d9:
	mov -1904(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000bf3dc:
	mov -1856(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000bf3df:
	mov -1848(%RBP),%RSP
	add $-1928, %RSP
	mov -1840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3e3
	jmp uuid_00000000000bf3e5
uuid_00000000000bf3e3:
	push %RBP
	mov -1752(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1944(%rbp)
	pushq $uuid_00000000000bea38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf3e0
	jmp uuid_00000000000bf3e2
uuid_00000000000bf3e0:
	movb $1, -1776(%rbp)
uuid_00000000000bf3e2:
	mov -1936(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000bf3e5:
	mov -1792(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000bf3e8:
	mov -1784(%RBP),%RSP
	add $-1944, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3e9
	jmp uuid_00000000000bf3eb
uuid_00000000000bf3e9:
	movb $1, -1584(%rbp)
uuid_00000000000bf3eb:
	mov -1744(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000bf3ee:
	mov -1600(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000bf3f1:
	mov -1592(%RBP),%RSP
	add $-1944, %RSP
	mov -1584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3f5
	jmp uuid_00000000000bf3f7
uuid_00000000000bf3f5:
	push %RBP
	mov -1496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1960(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf3f2
	jmp uuid_00000000000bf3f4
uuid_00000000000bf3f2:
	movb $1, -1520(%rbp)
uuid_00000000000bf3f4:
	mov -1952(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000bf3f7:
	mov -1536(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000bf3fa:
	mov -1528(%RBP),%RSP
	add $-1960, %RSP
	mov -1520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3fb
	jmp uuid_00000000000bf3fd
uuid_00000000000bf3fb:
	movb $1, -1168(%rbp)
uuid_00000000000bf3fd:
	mov -1488(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000bf400:
	mov -1184(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000bf403:
	mov -1176(%RBP),%RSP
	add $-1960, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf51d
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -2024(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf43a
	jmp uuid_00000000000bf43c
uuid_00000000000bf43a:
	push %RBP
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	jmp uuid_00000000000bf437
	jmp uuid_00000000000bf439
uuid_00000000000bf437:
	push %RBP
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq $0
	push %RBP
	mov -2104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf431
	jmp uuid_00000000000bf433
uuid_00000000000bf431:
	push %RBP
	mov -2096(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf428
	jmp uuid_00000000000bf42a
uuid_00000000000bf428:
	push %RBP
	mov -2160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf40d
	jmp uuid_00000000000bf40f
uuid_00000000000bf40d:
	push %RBP
	mov -2224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf40a
	jmp uuid_00000000000bf40c
uuid_00000000000bf40a:
	push %RBP
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	jmp uuid_00000000000bf407
	jmp uuid_00000000000bf409
uuid_00000000000bf407:
	movb $1, -2240(%rbp)
uuid_00000000000bf409:
	mov -2304(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000bf40c:
	mov -2256(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000bf40f:
	mov -2248(%RBP),%RSP
	add $-2328, %RSP
	mov -2240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf425
	jmp uuid_00000000000bf427
uuid_00000000000bf425:
	push %RBP
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq $0
	push %RBP
	mov -2360(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf41f
	jmp uuid_00000000000bf421
uuid_00000000000bf41f:
	push %RBP
	mov -2352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf416
	jmp uuid_00000000000bf418
uuid_00000000000bf416:
	push %RBP
	mov -2416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf413
	jmp uuid_00000000000bf415
uuid_00000000000bf413:
	push %RBP
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	jmp uuid_00000000000bf410
	jmp uuid_00000000000bf412
uuid_00000000000bf410:
	movb $1, -2432(%rbp)
uuid_00000000000bf412:
	mov -2496(%RBP),%RSP
	add $-2520, %RSP
uuid_00000000000bf415:
	mov -2448(%RBP),%RSP
	add $-2520, %RSP
uuid_00000000000bf418:
	mov -2440(%RBP),%RSP
	add $-2520, %RSP
	mov -2432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf41c
	jmp uuid_00000000000bf41e
uuid_00000000000bf41c:
	push %RBP
	mov -2344(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2536(%rbp)
	pushq $uuid_00000000000bea38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf419
	jmp uuid_00000000000bf41b
uuid_00000000000bf419:
	movb $1, -2368(%rbp)
uuid_00000000000bf41b:
	mov -2528(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000bf41e:
	mov -2384(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000bf421:
	mov -2376(%RBP),%RSP
	add $-2536, %RSP
	mov -2368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf422
	jmp uuid_00000000000bf424
uuid_00000000000bf422:
	movb $1, -2176(%rbp)
uuid_00000000000bf424:
	mov -2336(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000bf427:
	mov -2192(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000bf42a:
	mov -2184(%RBP),%RSP
	add $-2536, %RSP
	mov -2176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf42e
	jmp uuid_00000000000bf430
uuid_00000000000bf42e:
	push %RBP
	mov -2088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2552(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf42b
	jmp uuid_00000000000bf42d
uuid_00000000000bf42b:
	movb $1, -2112(%rbp)
uuid_00000000000bf42d:
	mov -2544(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000bf430:
	mov -2128(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000bf433:
	mov -2120(%RBP),%RSP
	add $-2552, %RSP
	mov -2112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf434
	jmp uuid_00000000000bf436
uuid_00000000000bf434:
	movb $1, -2032(%rbp)
uuid_00000000000bf436:
	mov -2080(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000bf439:
	mov -2048(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000bf43c:
	mov -2040(%RBP),%RSP
	add $-2552, %RSP
	mov -2032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf51a
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -2616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf473
	jmp uuid_00000000000bf475
uuid_00000000000bf473:
	push %RBP
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf458
	jmp uuid_00000000000bf45a
uuid_00000000000bf458:
	push %RBP
	mov -2656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2728(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf44f
	jmp uuid_00000000000bf451
uuid_00000000000bf44f:
	push %RBP
	mov -2720(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf446
	jmp uuid_00000000000bf448
uuid_00000000000bf446:
	push %RBP
	mov -2784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf443
	jmp uuid_00000000000bf445
uuid_00000000000bf443:
	push %RBP
	pushq -2760(%RBP)
	pushq -2768(%RBP)
	pushq -2776(%RBP)
	jmp uuid_00000000000bf440
	jmp uuid_00000000000bf442
uuid_00000000000bf440:
	movb $1, -2800(%rbp)
uuid_00000000000bf442:
	mov -2864(%RBP),%RSP
	add $-2888, %RSP
uuid_00000000000bf445:
	mov -2816(%RBP),%RSP
	add $-2888, %RSP
uuid_00000000000bf448:
	mov -2808(%RBP),%RSP
	add $-2888, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf44c
	jmp uuid_00000000000bf44e
uuid_00000000000bf44c:
	push %RBP
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	jmp uuid_00000000000bf449
	jmp uuid_00000000000bf44b
uuid_00000000000bf449:
	movb $1, -2736(%rbp)
uuid_00000000000bf44b:
	mov -2896(%RBP),%RSP
	add $-2920, %RSP
uuid_00000000000bf44e:
	mov -2752(%RBP),%RSP
	add $-2920, %RSP
uuid_00000000000bf451:
	mov -2744(%RBP),%RSP
	add $-2920, %RSP
	mov -2736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf455
	jmp uuid_00000000000bf457
uuid_00000000000bf455:
	push %RBP
	mov -2648(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2936(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf452
	jmp uuid_00000000000bf454
uuid_00000000000bf452:
	movb $1, -2672(%rbp)
uuid_00000000000bf454:
	mov -2928(%RBP),%RSP
	add $-2936, %RSP
uuid_00000000000bf457:
	mov -2688(%RBP),%RSP
	add $-2936, %RSP
uuid_00000000000bf45a:
	mov -2680(%RBP),%RSP
	add $-2936, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf470
	jmp uuid_00000000000bf472
uuid_00000000000bf470:
	push %RBP
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq $0
	push %RBP
	mov -2968(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf46a
	jmp uuid_00000000000bf46c
uuid_00000000000bf46a:
	push %RBP
	mov -2960(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3032(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf461
	jmp uuid_00000000000bf463
uuid_00000000000bf461:
	push %RBP
	mov -3024(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3096(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf45e
	jmp uuid_00000000000bf460
uuid_00000000000bf45e:
	push %RBP
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	jmp uuid_00000000000bf45b
	jmp uuid_00000000000bf45d
uuid_00000000000bf45b:
	movb $1, -3040(%rbp)
uuid_00000000000bf45d:
	mov -3104(%RBP),%RSP
	add $-3128, %RSP
uuid_00000000000bf460:
	mov -3056(%RBP),%RSP
	add $-3128, %RSP
uuid_00000000000bf463:
	mov -3048(%RBP),%RSP
	add $-3128, %RSP
	mov -3040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf467
	jmp uuid_00000000000bf469
uuid_00000000000bf467:
	push %RBP
	mov -2952(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3144(%rbp)
	pushq $uuid_00000000000bea38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf464
	jmp uuid_00000000000bf466
uuid_00000000000bf464:
	movb $1, -2976(%rbp)
uuid_00000000000bf466:
	mov -3136(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000bf469:
	mov -2992(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000bf46c:
	mov -2984(%RBP),%RSP
	add $-3144, %RSP
	mov -2976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf46d
	jmp uuid_00000000000bf46f
uuid_00000000000bf46d:
	movb $1, -2624(%rbp)
uuid_00000000000bf46f:
	mov -2944(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000bf472:
	mov -2640(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000bf475:
	mov -2632(%RBP),%RSP
	add $-3144, %RSP
	mov -2624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf517
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -3208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf49a
	jmp uuid_00000000000bf49c
uuid_00000000000bf49a:
	push %RBP
	pushq -3184(%RBP)
	pushq -3192(%RBP)
	pushq -3200(%RBP)
	pushq $0
	push %RBP
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf47f
	jmp uuid_00000000000bf481
uuid_00000000000bf47f:
	push %RBP
	mov -3248(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf47c
	jmp uuid_00000000000bf47e
uuid_00000000000bf47c:
	push %RBP
	mov -3240(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3336(%rbp)
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf479
	jmp uuid_00000000000bf47b
uuid_00000000000bf479:
	movb $1, -3264(%rbp)
uuid_00000000000bf47b:
	mov -3328(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000bf47e:
	mov -3280(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000bf481:
	mov -3272(%RBP),%RSP
	add $-3336, %RSP
	mov -3264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf497
	jmp uuid_00000000000bf499
uuid_00000000000bf497:
	push %RBP
	pushq -3160(%RBP)
	pushq -3168(%RBP)
	pushq -3176(%RBP)
	pushq $0
	push %RBP
	mov -3368(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf491
	jmp uuid_00000000000bf493
uuid_00000000000bf491:
	push %RBP
	mov -3360(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3432(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf488
	jmp uuid_00000000000bf48a
uuid_00000000000bf488:
	push %RBP
	mov -3424(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3496(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf485
	jmp uuid_00000000000bf487
uuid_00000000000bf485:
	push %RBP
	pushq -3400(%RBP)
	pushq -3408(%RBP)
	pushq -3416(%RBP)
	jmp uuid_00000000000bf482
	jmp uuid_00000000000bf484
uuid_00000000000bf482:
	movb $1, -3440(%rbp)
uuid_00000000000bf484:
	mov -3504(%RBP),%RSP
	add $-3528, %RSP
uuid_00000000000bf487:
	mov -3456(%RBP),%RSP
	add $-3528, %RSP
uuid_00000000000bf48a:
	mov -3448(%RBP),%RSP
	add $-3528, %RSP
	mov -3440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf48e
	jmp uuid_00000000000bf490
uuid_00000000000bf48e:
	push %RBP
	mov -3352(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3544(%rbp)
	pushq $uuid_00000000000bea38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf48b
	jmp uuid_00000000000bf48d
uuid_00000000000bf48b:
	movb $1, -3376(%rbp)
uuid_00000000000bf48d:
	mov -3536(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000bf490:
	mov -3392(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000bf493:
	mov -3384(%RBP),%RSP
	add $-3544, %RSP
	mov -3376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf494
	jmp uuid_00000000000bf496
uuid_00000000000bf494:
	movb $1, -3216(%rbp)
uuid_00000000000bf496:
	mov -3344(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000bf499:
	mov -3232(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000bf49c:
	mov -3224(%RBP),%RSP
	add $-3544, %RSP
	mov -3216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf514
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -3608(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4b5
	jmp uuid_00000000000bf4b7
uuid_00000000000bf4b5:
	push %RBP
	pushq -3584(%RBP)
	pushq -3592(%RBP)
	pushq -3600(%RBP)
	jmp uuid_00000000000bf4b2
	jmp uuid_00000000000bf4b4
uuid_00000000000bf4b2:
	push %RBP
	pushq -3560(%RBP)
	pushq -3568(%RBP)
	pushq -3576(%RBP)
	pushq $0
	push %RBP
	mov -3688(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4ac
	jmp uuid_00000000000bf4ae
uuid_00000000000bf4ac:
	push %RBP
	mov -3680(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4a3
	jmp uuid_00000000000bf4a5
uuid_00000000000bf4a3:
	push %RBP
	mov -3744(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3816(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4a0
	jmp uuid_00000000000bf4a2
uuid_00000000000bf4a0:
	push %RBP
	pushq -3720(%RBP)
	pushq -3728(%RBP)
	pushq -3736(%RBP)
	jmp uuid_00000000000bf49d
	jmp uuid_00000000000bf49f
uuid_00000000000bf49d:
	movb $1, -3760(%rbp)
uuid_00000000000bf49f:
	mov -3824(%RBP),%RSP
	add $-3848, %RSP
uuid_00000000000bf4a2:
	mov -3776(%RBP),%RSP
	add $-3848, %RSP
uuid_00000000000bf4a5:
	mov -3768(%RBP),%RSP
	add $-3848, %RSP
	mov -3760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4a9
	jmp uuid_00000000000bf4ab
uuid_00000000000bf4a9:
	push %RBP
	mov -3672(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3864(%rbp)
	pushq $uuid_00000000000bea38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf4a6
	jmp uuid_00000000000bf4a8
uuid_00000000000bf4a6:
	movb $1, -3696(%rbp)
uuid_00000000000bf4a8:
	mov -3856(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000bf4ab:
	mov -3712(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000bf4ae:
	mov -3704(%RBP),%RSP
	add $-3864, %RSP
	mov -3696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4af
	jmp uuid_00000000000bf4b1
uuid_00000000000bf4af:
	movb $1, -3616(%rbp)
uuid_00000000000bf4b1:
	mov -3664(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000bf4b4:
	mov -3632(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000bf4b7:
	mov -3624(%RBP),%RSP
	add $-3864, %RSP
	mov -3616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf511
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -3928(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4e3
	jmp uuid_00000000000bf4e5
uuid_00000000000bf4e3:
	push %RBP
	pushq -3904(%RBP)
	pushq -3912(%RBP)
	pushq -3920(%RBP)
	pushq $0
	push %RBP
	mov -3976(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4be
	jmp uuid_00000000000bf4c0
uuid_00000000000bf4be:
	push %RBP
	mov -3968(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4040(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4bb
	jmp uuid_00000000000bf4bd
uuid_00000000000bf4bb:
	push %RBP
	mov -3960(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf4b8
	jmp uuid_00000000000bf4ba
uuid_00000000000bf4b8:
	movb $1, -3984(%rbp)
uuid_00000000000bf4ba:
	mov -4048(%RBP),%RSP
	add $-4056, %RSP
uuid_00000000000bf4bd:
	mov -4000(%RBP),%RSP
	add $-4056, %RSP
uuid_00000000000bf4c0:
	mov -3992(%RBP),%RSP
	add $-4056, %RSP
	mov -3984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4e0
	jmp uuid_00000000000bf4e2
uuid_00000000000bf4e0:
	push %RBP
	pushq -3880(%RBP)
	pushq -3888(%RBP)
	pushq -3896(%RBP)
	pushq $0
	push %RBP
	mov -4088(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4da
	jmp uuid_00000000000bf4dc
uuid_00000000000bf4da:
	push %RBP
	mov -4080(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4d0
	jmp uuid_00000000000bf4d2
uuid_00000000000bf4d0:
	push %RBP
	mov -4144(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4cd
	jmp uuid_00000000000bf4cf
uuid_00000000000bf4cd:
	push %RBP
	pushq -4120(%RBP)
	pushq -4128(%RBP)
	pushq -4136(%RBP)
	pushq $0
	push %RBP
	mov -4248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4c7
	jmp uuid_00000000000bf4c9
uuid_00000000000bf4c7:
	push %RBP
	mov -4240(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4c4
	jmp uuid_00000000000bf4c6
uuid_00000000000bf4c4:
	push %RBP
	mov -4232(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf4c1
	jmp uuid_00000000000bf4c3
uuid_00000000000bf4c1:
	movb $1, -4256(%rbp)
uuid_00000000000bf4c3:
	mov -4320(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000bf4c6:
	mov -4272(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000bf4c9:
	mov -4264(%RBP),%RSP
	add $-4328, %RSP
	mov -4256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4ca
	jmp uuid_00000000000bf4cc
uuid_00000000000bf4ca:
	movb $1, -4160(%rbp)
uuid_00000000000bf4cc:
	mov -4224(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000bf4cf:
	mov -4176(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000bf4d2:
	mov -4168(%RBP),%RSP
	add $-4328, %RSP
	mov -4160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4d7
	jmp uuid_00000000000bf4d9
uuid_00000000000bf4d7:
	push %RBP
	mov -4072(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4344(%rbp)
	pushq $uuid_00000000000bf4d3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf4d4
	jmp uuid_00000000000bf4d6
uuid_00000000000bf4d4:
	movb $1, -4096(%rbp)
uuid_00000000000bf4d6:
	mov -4336(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000bf4d9:
	mov -4112(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000bf4dc:
	mov -4104(%RBP),%RSP
	add $-4344, %RSP
	mov -4096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4dd
	jmp uuid_00000000000bf4df
uuid_00000000000bf4dd:
	movb $1, -3936(%rbp)
uuid_00000000000bf4df:
	mov -4064(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000bf4e2:
	mov -3952(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000bf4e5:
	mov -3944(%RBP),%RSP
	add $-4344, %RSP
	mov -3936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf50e
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -4408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf501
	jmp uuid_00000000000bf503
uuid_00000000000bf501:
	push %RBP
	pushq -4384(%RBP)
	pushq -4392(%RBP)
	pushq -4400(%RBP)
	pushq $0
	push %RBP
	mov -4456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4ef
	jmp uuid_00000000000bf4f1
uuid_00000000000bf4ef:
	push %RBP
	mov -4448(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf4ec
	jmp uuid_00000000000bf4ee
uuid_00000000000bf4ec:
	push %RBP
	mov -4440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf4e9
	jmp uuid_00000000000bf4eb
uuid_00000000000bf4e9:
	movb $1, -4464(%rbp)
uuid_00000000000bf4eb:
	mov -4528(%RBP),%RSP
	add $-4536, %RSP
uuid_00000000000bf4ee:
	mov -4480(%RBP),%RSP
	add $-4536, %RSP
uuid_00000000000bf4f1:
	mov -4472(%RBP),%RSP
	add $-4536, %RSP
	mov -4464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4fe
	jmp uuid_00000000000bf500
uuid_00000000000bf4fe:
	push %RBP
	pushq -4360(%RBP)
	pushq -4368(%RBP)
	pushq -4376(%RBP)
	pushq $0
	push %RBP
	mov -4568(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4f8
	jmp uuid_00000000000bf4fa
uuid_00000000000bf4f8:
	push %RBP
	mov -4560(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf4f5
	jmp uuid_00000000000bf4f7
uuid_00000000000bf4f5:
	push %RBP
	mov -4552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf4f2
	jmp uuid_00000000000bf4f4
uuid_00000000000bf4f2:
	movb $1, -4576(%rbp)
uuid_00000000000bf4f4:
	mov -4640(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000bf4f7:
	mov -4592(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000bf4fa:
	mov -4584(%RBP),%RSP
	add $-4648, %RSP
	mov -4576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4fb
	jmp uuid_00000000000bf4fd
uuid_00000000000bf4fb:
	movb $1, -4416(%rbp)
uuid_00000000000bf4fd:
	mov -4544(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000bf500:
	mov -4432(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000bf503:
	mov -4424(%RBP),%RSP
	add $-4648, %RSP
	mov -4416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf50b
	push %RBP
	jmp uuid_00000000000bf508
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf507
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf50a
uuid_00000000000bf508:
uuid_00000000000bf50a:
	mov -4656(%RBP),%RSP
	add $-4656, %RSP
	jmp uuid_00000000000bf50d
uuid_00000000000bf50b:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4648(%rbp)
	pushq -4536(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf504
	jmp uuid_00000000000bf506
uuid_00000000000bf504:
#call function can-unify : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000bf506:
	mov -4656(%RBP),%RSP
	add $-4656, %RSP
uuid_00000000000bf50d:
	mov -4352(%RBP),%RSP
	add $-4656, %RSP
	jmp uuid_00000000000bf510
uuid_00000000000bf50e:
	push %RBP
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4328(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4056(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf4e6
	jmp uuid_00000000000bf4e8
uuid_00000000000bf4e6:
	movq $1, -64(%rbp)
uuid_00000000000bf4e8:
	mov -4352(%RBP),%RSP
	add $-4352, %RSP
uuid_00000000000bf510:
	mov -3872(%RBP),%RSP
	add $-4352, %RSP
	jmp uuid_00000000000bf513
uuid_00000000000bf511:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3640(%rbp)
	pushq -3648(%rbp)
	pushq -3656(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000bf513:
	mov -3552(%RBP),%RSP
	add $-3864, %RSP
	jmp uuid_00000000000bf516
uuid_00000000000bf514:
	movq $1, -64(%rbp)
uuid_00000000000bf516:
	mov -3152(%RBP),%RSP
	add $-3544, %RSP
	jmp uuid_00000000000bf519
uuid_00000000000bf517:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf476
	jmp uuid_00000000000bf478
uuid_00000000000bf476:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000bf478:
	mov -3152(%RBP),%RSP
	add $-3152, %RSP
uuid_00000000000bf519:
	mov -2560(%RBP),%RSP
	add $-3152, %RSP
	jmp uuid_00000000000bf51c
uuid_00000000000bf51a:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq -2520(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf43d
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000bf43f
uuid_00000000000bf43d:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000bf43f:
	mov -2560(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000bf51c:
	mov -1968(%RBP),%RSP
	add $-2560, %RSP
	jmp uuid_00000000000bf51f
uuid_00000000000bf51d:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf404
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000bf406
uuid_00000000000bf404:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000bf406:
	mov -1968(%RBP),%RSP
	add $-1968, %RSP
uuid_00000000000bf51f:
	mov -1104(%RBP),%RSP
	add $-1968, %RSP
	jmp uuid_00000000000bf522
uuid_00000000000bf520:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf3ad
	jmp uuid_00000000000bf3af
uuid_00000000000bf3ad:
	movq $1, -64(%rbp)
uuid_00000000000bf3af:
	mov -1104(%RBP),%RSP
	add $-1104, %RSP
	push %RBP
	mov -64(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf3b0
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000bf3b2
uuid_00000000000bf3b0:
uuid_00000000000bf3b2:
	mov -1112(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000bf522:
	mov -880(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000bf525
uuid_00000000000bf523:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf398
	jmp uuid_00000000000bf39a
uuid_00000000000bf398:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf395
	jmp uuid_00000000000bf397
uuid_00000000000bf395:
	movq $1, -64(%rbp)
uuid_00000000000bf397:
	mov -888(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000bf39a:
	mov -880(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000bf525:
	mov -656(%RBP),%RSP
	add $-888, %RSP
	jmp uuid_00000000000bf528
uuid_00000000000bf526:
	movq $1, -64(%rbp)
uuid_00000000000bf528:
	mov -480(%RBP),%RSP
	add $-648, %RSP
	jmp uuid_00000000000bf52b
uuid_00000000000bf529:
	movq $1, -64(%rbp)
uuid_00000000000bf52b:
	mov -248(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000bf52e
uuid_00000000000bf52c:
	movq $1, -64(%rbp)
uuid_00000000000bf52e:
	mov -128(%RBP),%RSP
	add $-240, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_CL_ArrowTContextConsTypeType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf52f
	jmp uuid_00000000000bf531
uuid_00000000000bf52f:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000bf531:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	subq $120, %rsp
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_SB_inner_CL_ArrowTContextConsTypeType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf538
	jmp uuid_00000000000bf53a
uuid_00000000000bf538:
	push %RBP
	jmp uuid_00000000000bf535
	jmp uuid_00000000000bf537
uuid_00000000000bf535:
	push %RBP
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf532
	jmp uuid_00000000000bf534
uuid_00000000000bf532:
	movb $1, -304(%rbp)
uuid_00000000000bf534:
	mov -328(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000bf537:
	mov -320(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000bf53a:
	mov -312(%RBP),%RSP
	add $-352, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf772
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf550
	jmp uuid_00000000000bf552
uuid_00000000000bf550:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf541
	jmp uuid_00000000000bf543
uuid_00000000000bf541:
	push %RBP
	mov -456(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf53e
	jmp uuid_00000000000bf540
uuid_00000000000bf53e:
	push %RBP
	mov -448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf53b
	jmp uuid_00000000000bf53d
uuid_00000000000bf53b:
	movb $1, -472(%rbp)
uuid_00000000000bf53d:
	mov -536(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000bf540:
	mov -488(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000bf543:
	mov -480(%RBP),%RSP
	add $-544, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf54d
	jmp uuid_00000000000bf54f
uuid_00000000000bf54d:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf547
	jmp uuid_00000000000bf549
uuid_00000000000bf547:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf544
	jmp uuid_00000000000bf546
uuid_00000000000bf544:
	movb $1, -584(%rbp)
uuid_00000000000bf546:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000bf549:
	mov -592(%RBP),%RSP
	add $-608, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf54a
	jmp uuid_00000000000bf54c
uuid_00000000000bf54a:
	movb $1, -424(%rbp)
uuid_00000000000bf54c:
	mov -552(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000bf54f:
	mov -440(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000bf552:
	mov -432(%RBP),%RSP
	add $-608, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf76f
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf56b
	jmp uuid_00000000000bf56d
uuid_00000000000bf56b:
	push %RBP
	jmp uuid_00000000000bf568
	jmp uuid_00000000000bf56a
uuid_00000000000bf568:
	push %RBP
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq $0
	push %RBP
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf562
	jmp uuid_00000000000bf564
uuid_00000000000bf562:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf559
	jmp uuid_00000000000bf55b
uuid_00000000000bf559:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf556
	jmp uuid_00000000000bf558
uuid_00000000000bf556:
	push %RBP
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	jmp uuid_00000000000bf553
	jmp uuid_00000000000bf555
uuid_00000000000bf553:
	movb $1, -800(%rbp)
uuid_00000000000bf555:
	mov -864(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000bf558:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000bf55b:
	mov -808(%RBP),%RSP
	add $-888, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf55f
	jmp uuid_00000000000bf561
uuid_00000000000bf55f:
	push %RBP
	mov -712(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq $uuid_00000000000bf361
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf55c
	jmp uuid_00000000000bf55e
uuid_00000000000bf55c:
	movb $1, -736(%rbp)
uuid_00000000000bf55e:
	mov -896(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000bf561:
	mov -752(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000bf564:
	mov -744(%RBP),%RSP
	add $-904, %RSP
	mov -736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf565
	jmp uuid_00000000000bf567
uuid_00000000000bf565:
	movb $1, -680(%rbp)
uuid_00000000000bf567:
	mov -704(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000bf56a:
	mov -696(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000bf56d:
	mov -688(%RBP),%RSP
	add $-904, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf76c
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf57a
	jmp uuid_00000000000bf57c
uuid_00000000000bf57a:
	push %RBP
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	jmp uuid_00000000000bf577
	jmp uuid_00000000000bf579
uuid_00000000000bf577:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq $0
	push %RBP
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf571
	jmp uuid_00000000000bf573
uuid_00000000000bf571:
	push %RBP
	mov -1040(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf56e
	jmp uuid_00000000000bf570
uuid_00000000000bf56e:
	movb $1, -1056(%rbp)
uuid_00000000000bf570:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000bf573:
	mov -1064(%RBP),%RSP
	add $-1080, %RSP
	mov -1056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf574
	jmp uuid_00000000000bf576
uuid_00000000000bf574:
	movb $1, -976(%rbp)
uuid_00000000000bf576:
	mov -1024(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000bf579:
	mov -992(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000bf57c:
	mov -984(%RBP),%RSP
	add $-1080, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf769
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -1144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf58c
	jmp uuid_00000000000bf58e
uuid_00000000000bf58c:
	push %RBP
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	jmp uuid_00000000000bf589
	jmp uuid_00000000000bf58b
uuid_00000000000bf589:
	push %RBP
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq $0
	push %RBP
	mov -1224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf583
	jmp uuid_00000000000bf585
uuid_00000000000bf583:
	push %RBP
	mov -1216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf580
	jmp uuid_00000000000bf582
uuid_00000000000bf580:
	push %RBP
	mov -1208(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf57d
	jmp uuid_00000000000bf57f
uuid_00000000000bf57d:
	movb $1, -1232(%rbp)
uuid_00000000000bf57f:
	mov -1280(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000bf582:
	mov -1248(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000bf585:
	mov -1240(%RBP),%RSP
	add $-1304, %RSP
	mov -1232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf586
	jmp uuid_00000000000bf588
uuid_00000000000bf586:
	movb $1, -1152(%rbp)
uuid_00000000000bf588:
	mov -1200(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000bf58b:
	mov -1168(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000bf58e:
	mov -1160(%RBP),%RSP
	add $-1304, %RSP
	mov -1152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf766
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -1368(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5c3
	jmp uuid_00000000000bf5c5
uuid_00000000000bf5c3:
	push %RBP
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5ba
	jmp uuid_00000000000bf5bc
uuid_00000000000bf5ba:
	push %RBP
	mov -1408(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf5b7
	jmp uuid_00000000000bf5b9
uuid_00000000000bf5b7:
	push %RBP
	mov -1400(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf5b4
	jmp uuid_00000000000bf5b6
uuid_00000000000bf5b4:
	movb $1, -1424(%rbp)
uuid_00000000000bf5b6:
	mov -1472(%RBP),%RSP
	add $-1496, %RSP
uuid_00000000000bf5b9:
	mov -1440(%RBP),%RSP
	add $-1496, %RSP
uuid_00000000000bf5bc:
	mov -1432(%RBP),%RSP
	add $-1496, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5c0
	jmp uuid_00000000000bf5c2
uuid_00000000000bf5c0:
	push %RBP
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	jmp uuid_00000000000bf5bd
	jmp uuid_00000000000bf5bf
uuid_00000000000bf5bd:
	movb $1, -1376(%rbp)
uuid_00000000000bf5bf:
	mov -1504(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000bf5c2:
	mov -1392(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000bf5c5:
	mov -1384(%RBP),%RSP
	add $-1528, %RSP
	mov -1376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf763
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -1592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf645
	jmp uuid_00000000000bf647
uuid_00000000000bf645:
	push %RBP
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf60f
	jmp uuid_00000000000bf611
uuid_00000000000bf60f:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1704(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf606
	jmp uuid_00000000000bf608
uuid_00000000000bf606:
	push %RBP
	mov -1696(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5fd
	jmp uuid_00000000000bf5ff
uuid_00000000000bf5fd:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1832(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5fa
	jmp uuid_00000000000bf5fc
uuid_00000000000bf5fa:
	push %RBP
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	jmp uuid_00000000000bf5f7
	jmp uuid_00000000000bf5f9
uuid_00000000000bf5f7:
	movb $1, -1776(%rbp)
uuid_00000000000bf5f9:
	mov -1840(%RBP),%RSP
	add $-1864, %RSP
uuid_00000000000bf5fc:
	mov -1792(%RBP),%RSP
	add $-1864, %RSP
uuid_00000000000bf5ff:
	mov -1784(%RBP),%RSP
	add $-1864, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf603
	jmp uuid_00000000000bf605
uuid_00000000000bf603:
	push %RBP
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	jmp uuid_00000000000bf600
	jmp uuid_00000000000bf602
uuid_00000000000bf600:
	movb $1, -1712(%rbp)
uuid_00000000000bf602:
	mov -1872(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000bf605:
	mov -1728(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000bf608:
	mov -1720(%RBP),%RSP
	add $-1896, %RSP
	mov -1712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf60c
	jmp uuid_00000000000bf60e
uuid_00000000000bf60c:
	push %RBP
	mov -1624(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1912(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf609
	jmp uuid_00000000000bf60b
uuid_00000000000bf609:
	movb $1, -1648(%rbp)
uuid_00000000000bf60b:
	mov -1904(%RBP),%RSP
	add $-1912, %RSP
uuid_00000000000bf60e:
	mov -1664(%RBP),%RSP
	add $-1912, %RSP
uuid_00000000000bf611:
	mov -1656(%RBP),%RSP
	add $-1912, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf642
	jmp uuid_00000000000bf644
uuid_00000000000bf642:
	push %RBP
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq $0
	push %RBP
	mov -1944(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf63c
	jmp uuid_00000000000bf63e
uuid_00000000000bf63c:
	push %RBP
	mov -1936(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2008(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf633
	jmp uuid_00000000000bf635
uuid_00000000000bf633:
	push %RBP
	mov -2000(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2072(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf618
	jmp uuid_00000000000bf61a
uuid_00000000000bf618:
	push %RBP
	mov -2064(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf615
	jmp uuid_00000000000bf617
uuid_00000000000bf615:
	push %RBP
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	jmp uuid_00000000000bf612
	jmp uuid_00000000000bf614
uuid_00000000000bf612:
	movb $1, -2080(%rbp)
uuid_00000000000bf614:
	mov -2144(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000bf617:
	mov -2096(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000bf61a:
	mov -2088(%RBP),%RSP
	add $-2168, %RSP
	mov -2080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf630
	jmp uuid_00000000000bf632
uuid_00000000000bf630:
	push %RBP
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq $0
	push %RBP
	mov -2200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf62a
	jmp uuid_00000000000bf62c
uuid_00000000000bf62a:
	push %RBP
	mov -2192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf621
	jmp uuid_00000000000bf623
uuid_00000000000bf621:
	push %RBP
	mov -2256(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf61e
	jmp uuid_00000000000bf620
uuid_00000000000bf61e:
	push %RBP
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	jmp uuid_00000000000bf61b
	jmp uuid_00000000000bf61d
uuid_00000000000bf61b:
	movb $1, -2272(%rbp)
uuid_00000000000bf61d:
	mov -2336(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000bf620:
	mov -2288(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000bf623:
	mov -2280(%RBP),%RSP
	add $-2360, %RSP
	mov -2272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf627
	jmp uuid_00000000000bf629
uuid_00000000000bf627:
	push %RBP
	mov -2184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2376(%rbp)
	pushq $uuid_00000000000bea38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf624
	jmp uuid_00000000000bf626
uuid_00000000000bf624:
	movb $1, -2208(%rbp)
uuid_00000000000bf626:
	mov -2368(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000bf629:
	mov -2224(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000bf62c:
	mov -2216(%RBP),%RSP
	add $-2376, %RSP
	mov -2208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf62d
	jmp uuid_00000000000bf62f
uuid_00000000000bf62d:
	movb $1, -2016(%rbp)
uuid_00000000000bf62f:
	mov -2176(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000bf632:
	mov -2032(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000bf635:
	mov -2024(%RBP),%RSP
	add $-2376, %RSP
	mov -2016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf639
	jmp uuid_00000000000bf63b
uuid_00000000000bf639:
	push %RBP
	mov -1928(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2392(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf636
	jmp uuid_00000000000bf638
uuid_00000000000bf636:
	movb $1, -1952(%rbp)
uuid_00000000000bf638:
	mov -2384(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000bf63b:
	mov -1968(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000bf63e:
	mov -1960(%RBP),%RSP
	add $-2392, %RSP
	mov -1952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf63f
	jmp uuid_00000000000bf641
uuid_00000000000bf63f:
	movb $1, -1600(%rbp)
uuid_00000000000bf641:
	mov -1920(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000bf644:
	mov -1616(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000bf647:
	mov -1608(%RBP),%RSP
	add $-2392, %RSP
	mov -1600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf760
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -2456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf67e
	jmp uuid_00000000000bf680
uuid_00000000000bf67e:
	push %RBP
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	jmp uuid_00000000000bf67b
	jmp uuid_00000000000bf67d
uuid_00000000000bf67b:
	push %RBP
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq $0
	push %RBP
	mov -2536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf675
	jmp uuid_00000000000bf677
uuid_00000000000bf675:
	push %RBP
	mov -2528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf66c
	jmp uuid_00000000000bf66e
uuid_00000000000bf66c:
	push %RBP
	mov -2592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf651
	jmp uuid_00000000000bf653
uuid_00000000000bf651:
	push %RBP
	mov -2656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2728(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf64e
	jmp uuid_00000000000bf650
uuid_00000000000bf64e:
	push %RBP
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	jmp uuid_00000000000bf64b
	jmp uuid_00000000000bf64d
uuid_00000000000bf64b:
	movb $1, -2672(%rbp)
uuid_00000000000bf64d:
	mov -2736(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000bf650:
	mov -2688(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000bf653:
	mov -2680(%RBP),%RSP
	add $-2760, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf669
	jmp uuid_00000000000bf66b
uuid_00000000000bf669:
	push %RBP
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf663
	jmp uuid_00000000000bf665
uuid_00000000000bf663:
	push %RBP
	mov -2784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf65a
	jmp uuid_00000000000bf65c
uuid_00000000000bf65a:
	push %RBP
	mov -2848(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2920(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf657
	jmp uuid_00000000000bf659
uuid_00000000000bf657:
	push %RBP
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	jmp uuid_00000000000bf654
	jmp uuid_00000000000bf656
uuid_00000000000bf654:
	movb $1, -2864(%rbp)
uuid_00000000000bf656:
	mov -2928(%RBP),%RSP
	add $-2952, %RSP
uuid_00000000000bf659:
	mov -2880(%RBP),%RSP
	add $-2952, %RSP
uuid_00000000000bf65c:
	mov -2872(%RBP),%RSP
	add $-2952, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf660
	jmp uuid_00000000000bf662
uuid_00000000000bf660:
	push %RBP
	mov -2776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2968(%rbp)
	pushq $uuid_00000000000bea38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf65d
	jmp uuid_00000000000bf65f
uuid_00000000000bf65d:
	movb $1, -2800(%rbp)
uuid_00000000000bf65f:
	mov -2960(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000bf662:
	mov -2816(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000bf665:
	mov -2808(%RBP),%RSP
	add $-2968, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf666
	jmp uuid_00000000000bf668
uuid_00000000000bf666:
	movb $1, -2608(%rbp)
uuid_00000000000bf668:
	mov -2768(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000bf66b:
	mov -2624(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000bf66e:
	mov -2616(%RBP),%RSP
	add $-2968, %RSP
	mov -2608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf672
	jmp uuid_00000000000bf674
uuid_00000000000bf672:
	push %RBP
	mov -2520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2984(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf66f
	jmp uuid_00000000000bf671
uuid_00000000000bf66f:
	movb $1, -2544(%rbp)
uuid_00000000000bf671:
	mov -2976(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000bf674:
	mov -2560(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000bf677:
	mov -2552(%RBP),%RSP
	add $-2984, %RSP
	mov -2544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf678
	jmp uuid_00000000000bf67a
uuid_00000000000bf678:
	movb $1, -2464(%rbp)
uuid_00000000000bf67a:
	mov -2512(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000bf67d:
	mov -2480(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000bf680:
	mov -2472(%RBP),%RSP
	add $-2984, %RSP
	mov -2464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf75d
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -3048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6b7
	jmp uuid_00000000000bf6b9
uuid_00000000000bf6b7:
	push %RBP
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq $0
	push %RBP
	mov -3096(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf69c
	jmp uuid_00000000000bf69e
uuid_00000000000bf69c:
	push %RBP
	mov -3088(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf693
	jmp uuid_00000000000bf695
uuid_00000000000bf693:
	push %RBP
	mov -3152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf68a
	jmp uuid_00000000000bf68c
uuid_00000000000bf68a:
	push %RBP
	mov -3216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf687
	jmp uuid_00000000000bf689
uuid_00000000000bf687:
	push %RBP
	pushq -3192(%RBP)
	pushq -3200(%RBP)
	pushq -3208(%RBP)
	jmp uuid_00000000000bf684
	jmp uuid_00000000000bf686
uuid_00000000000bf684:
	movb $1, -3232(%rbp)
uuid_00000000000bf686:
	mov -3296(%RBP),%RSP
	add $-3320, %RSP
uuid_00000000000bf689:
	mov -3248(%RBP),%RSP
	add $-3320, %RSP
uuid_00000000000bf68c:
	mov -3240(%RBP),%RSP
	add $-3320, %RSP
	mov -3232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf690
	jmp uuid_00000000000bf692
uuid_00000000000bf690:
	push %RBP
	pushq -3128(%RBP)
	pushq -3136(%RBP)
	pushq -3144(%RBP)
	jmp uuid_00000000000bf68d
	jmp uuid_00000000000bf68f
uuid_00000000000bf68d:
	movb $1, -3168(%rbp)
uuid_00000000000bf68f:
	mov -3328(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000bf692:
	mov -3184(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000bf695:
	mov -3176(%RBP),%RSP
	add $-3352, %RSP
	mov -3168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf699
	jmp uuid_00000000000bf69b
uuid_00000000000bf699:
	push %RBP
	mov -3080(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3368(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf696
	jmp uuid_00000000000bf698
uuid_00000000000bf696:
	movb $1, -3104(%rbp)
uuid_00000000000bf698:
	mov -3360(%RBP),%RSP
	add $-3368, %RSP
uuid_00000000000bf69b:
	mov -3120(%RBP),%RSP
	add $-3368, %RSP
uuid_00000000000bf69e:
	mov -3112(%RBP),%RSP
	add $-3368, %RSP
	mov -3104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6b4
	jmp uuid_00000000000bf6b6
uuid_00000000000bf6b4:
	push %RBP
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq $0
	push %RBP
	mov -3400(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6ae
	jmp uuid_00000000000bf6b0
uuid_00000000000bf6ae:
	push %RBP
	mov -3392(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6a5
	jmp uuid_00000000000bf6a7
uuid_00000000000bf6a5:
	push %RBP
	mov -3456(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3528(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6a2
	jmp uuid_00000000000bf6a4
uuid_00000000000bf6a2:
	push %RBP
	pushq -3432(%RBP)
	pushq -3440(%RBP)
	pushq -3448(%RBP)
	jmp uuid_00000000000bf69f
	jmp uuid_00000000000bf6a1
uuid_00000000000bf69f:
	movb $1, -3472(%rbp)
uuid_00000000000bf6a1:
	mov -3536(%RBP),%RSP
	add $-3560, %RSP
uuid_00000000000bf6a4:
	mov -3488(%RBP),%RSP
	add $-3560, %RSP
uuid_00000000000bf6a7:
	mov -3480(%RBP),%RSP
	add $-3560, %RSP
	mov -3472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6ab
	jmp uuid_00000000000bf6ad
uuid_00000000000bf6ab:
	push %RBP
	mov -3384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3576(%rbp)
	pushq $uuid_00000000000bea38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf6a8
	jmp uuid_00000000000bf6aa
uuid_00000000000bf6a8:
	movb $1, -3408(%rbp)
uuid_00000000000bf6aa:
	mov -3568(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000bf6ad:
	mov -3424(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000bf6b0:
	mov -3416(%RBP),%RSP
	add $-3576, %RSP
	mov -3408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6b1
	jmp uuid_00000000000bf6b3
uuid_00000000000bf6b1:
	movb $1, -3056(%rbp)
uuid_00000000000bf6b3:
	mov -3376(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000bf6b6:
	mov -3072(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000bf6b9:
	mov -3064(%RBP),%RSP
	add $-3576, %RSP
	mov -3056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf75a
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -3640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6de
	jmp uuid_00000000000bf6e0
uuid_00000000000bf6de:
	push %RBP
	pushq -3616(%RBP)
	pushq -3624(%RBP)
	pushq -3632(%RBP)
	pushq $0
	push %RBP
	mov -3688(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6c3
	jmp uuid_00000000000bf6c5
uuid_00000000000bf6c3:
	push %RBP
	mov -3680(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6c0
	jmp uuid_00000000000bf6c2
uuid_00000000000bf6c0:
	push %RBP
	mov -3672(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3768(%rbp)
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf6bd
	jmp uuid_00000000000bf6bf
uuid_00000000000bf6bd:
	movb $1, -3696(%rbp)
uuid_00000000000bf6bf:
	mov -3760(%RBP),%RSP
	add $-3768, %RSP
uuid_00000000000bf6c2:
	mov -3712(%RBP),%RSP
	add $-3768, %RSP
uuid_00000000000bf6c5:
	mov -3704(%RBP),%RSP
	add $-3768, %RSP
	mov -3696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6db
	jmp uuid_00000000000bf6dd
uuid_00000000000bf6db:
	push %RBP
	pushq -3592(%RBP)
	pushq -3600(%RBP)
	pushq -3608(%RBP)
	pushq $0
	push %RBP
	mov -3800(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6d5
	jmp uuid_00000000000bf6d7
uuid_00000000000bf6d5:
	push %RBP
	mov -3792(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6cc
	jmp uuid_00000000000bf6ce
uuid_00000000000bf6cc:
	push %RBP
	mov -3856(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3928(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6c9
	jmp uuid_00000000000bf6cb
uuid_00000000000bf6c9:
	push %RBP
	pushq -3832(%RBP)
	pushq -3840(%RBP)
	pushq -3848(%RBP)
	jmp uuid_00000000000bf6c6
	jmp uuid_00000000000bf6c8
uuid_00000000000bf6c6:
	movb $1, -3872(%rbp)
uuid_00000000000bf6c8:
	mov -3936(%RBP),%RSP
	add $-3960, %RSP
uuid_00000000000bf6cb:
	mov -3888(%RBP),%RSP
	add $-3960, %RSP
uuid_00000000000bf6ce:
	mov -3880(%RBP),%RSP
	add $-3960, %RSP
	mov -3872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6d2
	jmp uuid_00000000000bf6d4
uuid_00000000000bf6d2:
	push %RBP
	mov -3784(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3976(%rbp)
	pushq $uuid_00000000000bea38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf6cf
	jmp uuid_00000000000bf6d1
uuid_00000000000bf6cf:
	movb $1, -3808(%rbp)
uuid_00000000000bf6d1:
	mov -3968(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000bf6d4:
	mov -3824(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000bf6d7:
	mov -3816(%RBP),%RSP
	add $-3976, %RSP
	mov -3808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6d8
	jmp uuid_00000000000bf6da
uuid_00000000000bf6d8:
	movb $1, -3648(%rbp)
uuid_00000000000bf6da:
	mov -3776(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000bf6dd:
	mov -3664(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000bf6e0:
	mov -3656(%RBP),%RSP
	add $-3976, %RSP
	mov -3648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf757
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -4040(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6f9
	jmp uuid_00000000000bf6fb
uuid_00000000000bf6f9:
	push %RBP
	pushq -4016(%RBP)
	pushq -4024(%RBP)
	pushq -4032(%RBP)
	jmp uuid_00000000000bf6f6
	jmp uuid_00000000000bf6f8
uuid_00000000000bf6f6:
	push %RBP
	pushq -3992(%RBP)
	pushq -4000(%RBP)
	pushq -4008(%RBP)
	pushq $0
	push %RBP
	mov -4120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6f0
	jmp uuid_00000000000bf6f2
uuid_00000000000bf6f0:
	push %RBP
	mov -4112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6e7
	jmp uuid_00000000000bf6e9
uuid_00000000000bf6e7:
	push %RBP
	mov -4176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6e4
	jmp uuid_00000000000bf6e6
uuid_00000000000bf6e4:
	push %RBP
	pushq -4152(%RBP)
	pushq -4160(%RBP)
	pushq -4168(%RBP)
	jmp uuid_00000000000bf6e1
	jmp uuid_00000000000bf6e3
uuid_00000000000bf6e1:
	movb $1, -4192(%rbp)
uuid_00000000000bf6e3:
	mov -4256(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000bf6e6:
	mov -4208(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000bf6e9:
	mov -4200(%RBP),%RSP
	add $-4280, %RSP
	mov -4192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6ed
	jmp uuid_00000000000bf6ef
uuid_00000000000bf6ed:
	push %RBP
	mov -4104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4296(%rbp)
	pushq $uuid_00000000000bea38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf6ea
	jmp uuid_00000000000bf6ec
uuid_00000000000bf6ea:
	movb $1, -4128(%rbp)
uuid_00000000000bf6ec:
	mov -4288(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000bf6ef:
	mov -4144(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000bf6f2:
	mov -4136(%RBP),%RSP
	add $-4296, %RSP
	mov -4128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6f3
	jmp uuid_00000000000bf6f5
uuid_00000000000bf6f3:
	movb $1, -4048(%rbp)
uuid_00000000000bf6f5:
	mov -4096(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000bf6f8:
	mov -4064(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000bf6fb:
	mov -4056(%RBP),%RSP
	add $-4296, %RSP
	mov -4048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf754
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -4360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf726
	jmp uuid_00000000000bf728
uuid_00000000000bf726:
	push %RBP
	pushq -4336(%RBP)
	pushq -4344(%RBP)
	pushq -4352(%RBP)
	pushq $0
	push %RBP
	mov -4408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf702
	jmp uuid_00000000000bf704
uuid_00000000000bf702:
	push %RBP
	mov -4400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf6ff
	jmp uuid_00000000000bf701
uuid_00000000000bf6ff:
	push %RBP
	mov -4392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf6fc
	jmp uuid_00000000000bf6fe
uuid_00000000000bf6fc:
	movb $1, -4416(%rbp)
uuid_00000000000bf6fe:
	mov -4480(%RBP),%RSP
	add $-4488, %RSP
uuid_00000000000bf701:
	mov -4432(%RBP),%RSP
	add $-4488, %RSP
uuid_00000000000bf704:
	mov -4424(%RBP),%RSP
	add $-4488, %RSP
	mov -4416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf723
	jmp uuid_00000000000bf725
uuid_00000000000bf723:
	push %RBP
	pushq -4312(%RBP)
	pushq -4320(%RBP)
	pushq -4328(%RBP)
	pushq $0
	push %RBP
	mov -4520(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf71d
	jmp uuid_00000000000bf71f
uuid_00000000000bf71d:
	push %RBP
	mov -4512(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4584(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf714
	jmp uuid_00000000000bf716
uuid_00000000000bf714:
	push %RBP
	mov -4576(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4648(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf711
	jmp uuid_00000000000bf713
uuid_00000000000bf711:
	push %RBP
	pushq -4552(%RBP)
	pushq -4560(%RBP)
	pushq -4568(%RBP)
	pushq $0
	push %RBP
	mov -4680(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf70b
	jmp uuid_00000000000bf70d
uuid_00000000000bf70b:
	push %RBP
	mov -4672(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4744(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf708
	jmp uuid_00000000000bf70a
uuid_00000000000bf708:
	push %RBP
	mov -4664(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf705
	jmp uuid_00000000000bf707
uuid_00000000000bf705:
	movb $1, -4688(%rbp)
uuid_00000000000bf707:
	mov -4752(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000bf70a:
	mov -4704(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000bf70d:
	mov -4696(%RBP),%RSP
	add $-4760, %RSP
	mov -4688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf70e
	jmp uuid_00000000000bf710
uuid_00000000000bf70e:
	movb $1, -4592(%rbp)
uuid_00000000000bf710:
	mov -4656(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000bf713:
	mov -4608(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000bf716:
	mov -4600(%RBP),%RSP
	add $-4760, %RSP
	mov -4592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf71a
	jmp uuid_00000000000bf71c
uuid_00000000000bf71a:
	push %RBP
	mov -4504(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4776(%rbp)
	pushq $uuid_00000000000bf4d3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf717
	jmp uuid_00000000000bf719
uuid_00000000000bf717:
	movb $1, -4528(%rbp)
uuid_00000000000bf719:
	mov -4768(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000bf71c:
	mov -4544(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000bf71f:
	mov -4536(%RBP),%RSP
	add $-4776, %RSP
	mov -4528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf720
	jmp uuid_00000000000bf722
uuid_00000000000bf720:
	movb $1, -4368(%rbp)
uuid_00000000000bf722:
	mov -4496(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000bf725:
	mov -4384(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000bf728:
	mov -4376(%RBP),%RSP
	add $-4776, %RSP
	mov -4368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf751
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -4840(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf744
	jmp uuid_00000000000bf746
uuid_00000000000bf744:
	push %RBP
	pushq -4816(%RBP)
	pushq -4824(%RBP)
	pushq -4832(%RBP)
	pushq $0
	push %RBP
	mov -4888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf732
	jmp uuid_00000000000bf734
uuid_00000000000bf732:
	push %RBP
	mov -4880(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf72f
	jmp uuid_00000000000bf731
uuid_00000000000bf72f:
	push %RBP
	mov -4872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf72c
	jmp uuid_00000000000bf72e
uuid_00000000000bf72c:
	movb $1, -4896(%rbp)
uuid_00000000000bf72e:
	mov -4960(%RBP),%RSP
	add $-4968, %RSP
uuid_00000000000bf731:
	mov -4912(%RBP),%RSP
	add $-4968, %RSP
uuid_00000000000bf734:
	mov -4904(%RBP),%RSP
	add $-4968, %RSP
	mov -4896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf741
	jmp uuid_00000000000bf743
uuid_00000000000bf741:
	push %RBP
	pushq -4792(%RBP)
	pushq -4800(%RBP)
	pushq -4808(%RBP)
	pushq $0
	push %RBP
	mov -5000(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf73b
	jmp uuid_00000000000bf73d
uuid_00000000000bf73b:
	push %RBP
	mov -4992(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf738
	jmp uuid_00000000000bf73a
uuid_00000000000bf738:
	push %RBP
	mov -4984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf735
	jmp uuid_00000000000bf737
uuid_00000000000bf735:
	movb $1, -5008(%rbp)
uuid_00000000000bf737:
	mov -5072(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000bf73a:
	mov -5024(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000bf73d:
	mov -5016(%RBP),%RSP
	add $-5080, %RSP
	mov -5008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf73e
	jmp uuid_00000000000bf740
uuid_00000000000bf73e:
	movb $1, -4848(%rbp)
uuid_00000000000bf740:
	mov -4976(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000bf743:
	mov -4864(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000bf746:
	mov -4856(%RBP),%RSP
	add $-5080, %RSP
	mov -4848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf74e
	push %RBP
	jmp uuid_00000000000bf74b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf74a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf74d
uuid_00000000000bf74b:
uuid_00000000000bf74d:
	mov -5088(%RBP),%RSP
	add $-5088, %RSP
	jmp uuid_00000000000bf750
uuid_00000000000bf74e:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5080(%rbp)
	pushq -4968(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf747
	jmp uuid_00000000000bf749
uuid_00000000000bf747:
#call function unify : Arrow<Cons<List<Type>,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000bf749:
	mov -5088(%RBP),%RSP
	add $-5088, %RSP
uuid_00000000000bf750:
	mov -4784(%RBP),%RSP
	add $-5088, %RSP
	jmp uuid_00000000000bf753
uuid_00000000000bf751:
	push %RBP
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4760(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4488(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf729
	jmp uuid_00000000000bf72b
uuid_00000000000bf729:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000bf72b:
	mov -4784(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000bf753:
	mov -4304(%RBP),%RSP
	add $-4784, %RSP
	jmp uuid_00000000000bf756
uuid_00000000000bf754:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000bf756:
	mov -3984(%RBP),%RSP
	add $-4296, %RSP
	jmp uuid_00000000000bf759
uuid_00000000000bf757:
uuid_00000000000bf759:
	mov -3584(%RBP),%RSP
	add $-3976, %RSP
	jmp uuid_00000000000bf75c
uuid_00000000000bf75a:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf6ba
	jmp uuid_00000000000bf6bc
uuid_00000000000bf6ba:
#call function and : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -3304(%rbp)
	pushq -3312(%rbp)
	pushq -3320(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000bf6bc:
	mov -3584(%RBP),%RSP
	add $-3584, %RSP
uuid_00000000000bf75c:
	mov -2992(%RBP),%RSP
	add $-3584, %RSP
	jmp uuid_00000000000bf75f
uuid_00000000000bf75d:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf681
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000bf683
uuid_00000000000bf681:
#call function and : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000bf683:
	mov -2992(%RBP),%RSP
	add $-2992, %RSP
uuid_00000000000bf75f:
	mov -2400(%RBP),%RSP
	add $-2992, %RSP
	jmp uuid_00000000000bf762
uuid_00000000000bf760:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf648
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000bf64a
uuid_00000000000bf648:
#call function and : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000bf64a:
	mov -2400(%RBP),%RSP
	add $-2400, %RSP
uuid_00000000000bf762:
	mov -1536(%RBP),%RSP
	add $-2400, %RSP
	jmp uuid_00000000000bf765
uuid_00000000000bf763:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -2032(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5cc
	jmp uuid_00000000000bf5ce
uuid_00000000000bf5cc:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	mov -2176(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5c9
	jmp uuid_00000000000bf5cb
uuid_00000000000bf5c9:
	push %RBP
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	mov -2304(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5c6
	jmp uuid_00000000000bf5c8
uuid_00000000000bf5c6:
	movb $1, -2040(%rbp)
uuid_00000000000bf5c8:
	mov -2184(%RBP),%RSP
	add $-2304, %RSP
uuid_00000000000bf5cb:
	mov -2056(%RBP),%RSP
	add $-2304, %RSP
uuid_00000000000bf5ce:
	mov -2048(%RBP),%RSP
	add $-2304, %RSP
	mov -2040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5f4
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5d5
	jmp uuid_00000000000bf5d7
uuid_00000000000bf5d5:
	push %RBP
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	mov -2704(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5d2
	jmp uuid_00000000000bf5d4
uuid_00000000000bf5d2:
	push %RBP
	pushq -2320(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	jmp uuid_00000000000bf5cf
	jmp uuid_00000000000bf5d1
uuid_00000000000bf5cf:
	movb $1, -2568(%rbp)
uuid_00000000000bf5d1:
	mov -2712(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000bf5d4:
	mov -2584(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000bf5d7:
	mov -2576(%RBP),%RSP
	add $-2832, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5f1
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -3088(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5de
	jmp uuid_00000000000bf5e0
uuid_00000000000bf5de:
	push %RBP
	pushq -2968(%RBP)
	pushq -2976(%RBP)
	pushq -2984(%RBP)
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq -3048(%RBP)
	pushq -3056(%RBP)
	pushq -3064(%RBP)
	pushq -3072(%RBP)
	pushq -3080(%RBP)
	jmp uuid_00000000000bf5db
	jmp uuid_00000000000bf5dd
uuid_00000000000bf5db:
	push %RBP
	pushq -2848(%RBP)
	pushq -2856(%RBP)
	pushq -2864(%RBP)
	pushq -2872(%RBP)
	pushq -2880(%RBP)
	pushq -2888(%RBP)
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq -2952(%RBP)
	pushq -2960(%RBP)
	mov -3360(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5d8
	jmp uuid_00000000000bf5da
uuid_00000000000bf5d8:
	movb $1, -3096(%rbp)
uuid_00000000000bf5da:
	mov -3240(%RBP),%RSP
	add $-3360, %RSP
uuid_00000000000bf5dd:
	mov -3112(%RBP),%RSP
	add $-3360, %RSP
uuid_00000000000bf5e0:
	mov -3104(%RBP),%RSP
	add $-3360, %RSP
	mov -3096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5ee
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -3616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5e7
	jmp uuid_00000000000bf5e9
uuid_00000000000bf5e7:
	push %RBP
	pushq -3496(%RBP)
	pushq -3504(%RBP)
	pushq -3512(%RBP)
	pushq -3520(%RBP)
	pushq -3528(%RBP)
	pushq -3536(%RBP)
	pushq -3544(%RBP)
	pushq -3552(%RBP)
	pushq -3560(%RBP)
	pushq -3568(%RBP)
	pushq -3576(%RBP)
	pushq -3584(%RBP)
	pushq -3592(%RBP)
	pushq -3600(%RBP)
	pushq -3608(%RBP)
	jmp uuid_00000000000bf5e4
	jmp uuid_00000000000bf5e6
uuid_00000000000bf5e4:
	push %RBP
	pushq -3376(%RBP)
	pushq -3384(%RBP)
	pushq -3392(%RBP)
	pushq -3400(%RBP)
	pushq -3408(%RBP)
	pushq -3416(%RBP)
	pushq -3424(%RBP)
	pushq -3432(%RBP)
	pushq -3440(%RBP)
	pushq -3448(%RBP)
	pushq -3456(%RBP)
	pushq -3464(%RBP)
	pushq -3472(%RBP)
	pushq -3480(%RBP)
	pushq -3488(%RBP)
	jmp uuid_00000000000bf5e1
	jmp uuid_00000000000bf5e3
uuid_00000000000bf5e1:
	movb $1, -3624(%rbp)
uuid_00000000000bf5e3:
	mov -3768(%RBP),%RSP
	add $-3888, %RSP
uuid_00000000000bf5e6:
	mov -3640(%RBP),%RSP
	add $-3888, %RSP
uuid_00000000000bf5e9:
	mov -3632(%RBP),%RSP
	add $-3888, %RSP
	mov -3624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5eb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf5ea
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf5ed
uuid_00000000000bf5eb:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -3800(%rbp)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3648(%rbp)
	pushq -3656(%rbp)
	pushq -3664(%rbp)
	pushq -3672(%rbp)
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	pushq -3752(%rbp)
	pushq -3760(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000bf5ed:
	mov -3368(%RBP),%RSP
	add $-3888, %RSP
	jmp uuid_00000000000bf5f0
uuid_00000000000bf5ee:
	movq -3232(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -3224(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -3216(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -3208(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -3200(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -3192(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -3184(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -3176(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -3168(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -3160(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -3152(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -3144(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -3136(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -3128(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -3120(%rbp), %r15
	movq %r15, -64(%rbp)
uuid_00000000000bf5f0:
	mov -2840(%RBP),%RSP
	add $-3360, %RSP
	jmp uuid_00000000000bf5f3
uuid_00000000000bf5f1:
	movq -2832(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -2824(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -2816(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -2808(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -2800(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -2792(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -2784(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -2776(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2768(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2760(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2752(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2744(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -2736(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -2728(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2720(%rbp), %r15
	movq %r15, -64(%rbp)
uuid_00000000000bf5f3:
	mov -2312(%RBP),%RSP
	add $-2832, %RSP
	jmp uuid_00000000000bf5f6
uuid_00000000000bf5f4:
uuid_00000000000bf5f6:
	mov -1784(%RBP),%RSP
	add $-2304, %RSP
uuid_00000000000bf765:
	mov -1312(%RBP),%RSP
	add $-2304, %RSP
	jmp uuid_00000000000bf768
uuid_00000000000bf766:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	push %RBP
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	push %RBP
	mov -1808(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf595
	jmp uuid_00000000000bf597
uuid_00000000000bf595:
	push %RBP
	jmp uuid_00000000000bf592
	jmp uuid_00000000000bf594
uuid_00000000000bf592:
	push %RBP
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	mov -1960(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf58f
	jmp uuid_00000000000bf591
uuid_00000000000bf58f:
	movb $1, -1816(%rbp)
uuid_00000000000bf591:
	mov -1840(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000bf594:
	mov -1832(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000bf597:
	mov -1824(%RBP),%RSP
	add $-1960, %RSP
	mov -1816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5b1
	push %RBP
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	push %RBP
	mov -2216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf59e
	jmp uuid_00000000000bf5a0
uuid_00000000000bf59e:
	push %RBP
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	mov -2360(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf59b
	jmp uuid_00000000000bf59d
uuid_00000000000bf59b:
	push %RBP
	jmp uuid_00000000000bf598
	jmp uuid_00000000000bf59a
uuid_00000000000bf598:
	movb $1, -2224(%rbp)
uuid_00000000000bf59a:
	mov -2368(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000bf59d:
	mov -2240(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000bf5a0:
	mov -2232(%RBP),%RSP
	add $-2368, %RSP
	mov -2224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5ae
	push %RBP
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	push %RBP
	mov -2624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5a7
	jmp uuid_00000000000bf5a9
uuid_00000000000bf5a7:
	push %RBP
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	jmp uuid_00000000000bf5a4
	jmp uuid_00000000000bf5a6
uuid_00000000000bf5a4:
	push %RBP
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	jmp uuid_00000000000bf5a1
	jmp uuid_00000000000bf5a3
uuid_00000000000bf5a1:
	movb $1, -2632(%rbp)
uuid_00000000000bf5a3:
	mov -2776(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000bf5a6:
	mov -2648(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000bf5a9:
	mov -2640(%RBP),%RSP
	add $-2896, %RSP
	mov -2632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf5ab
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf5aa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf5ad
uuid_00000000000bf5ab:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	pushq -2856(%rbp)
	pushq -2864(%rbp)
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	pushq -2696(%rbp)
	pushq -2704(%rbp)
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000bf5ad:
	mov -2376(%RBP),%RSP
	add $-2896, %RSP
	jmp uuid_00000000000bf5b0
uuid_00000000000bf5ae:
uuid_00000000000bf5b0:
	mov -1968(%RBP),%RSP
	add $-2368, %RSP
	jmp uuid_00000000000bf5b3
uuid_00000000000bf5b1:
uuid_00000000000bf5b3:
	mov -1560(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000bf768:
	mov -1088(%RBP),%RSP
	add $-1960, %RSP
	jmp uuid_00000000000bf76b
uuid_00000000000bf769:
#call function close : Arrow<TContext+CaseNumber<2>,Array<TContext+CaseNumber<2>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextCaseNumber2TContextCaseNumber2
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1080(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000bf76b:
	mov -912(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000bf76e
uuid_00000000000bf76c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000bf76e:
	mov -616(%RBP),%RSP
	add $-904, %RSP
	jmp uuid_00000000000bf771
uuid_00000000000bf76f:
#call function close : Arrow<TContext+CaseNumber<2>,Array<TContext+CaseNumber<2>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextCaseNumber2TContextCaseNumber2
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -608(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -544(%rbp)
#call function token::new : Arrow<String,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	mov %RBX, %RBP
	call token_CL__CL_new_CL_ArrowTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $6
	pushq $0
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000bf771:
	mov -360(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000bf774
uuid_00000000000bf772:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000bf774:
	mov -240(%RBP),%RSP
	add $-352, %RSP
	subq $120, %rsp
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_CL_ArrowTContextConsListTypeListType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf780
	jmp uuid_00000000000bf782
uuid_00000000000bf780:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf77d
	jmp uuid_00000000000bf77f
uuid_00000000000bf77d:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf77a
	jmp uuid_00000000000bf77c
uuid_00000000000bf77a:
	movb $1, -400(%rbp)
uuid_00000000000bf77c:
	mov -464(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000bf77f:
	mov -416(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000bf782:
	mov -408(%RBP),%RSP
	add $-504, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7a8
	push %RBP
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf79b
	jmp uuid_00000000000bf79d
uuid_00000000000bf79b:
	push %RBP
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf789
	jmp uuid_00000000000bf78b
uuid_00000000000bf789:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf786
	jmp uuid_00000000000bf788
uuid_00000000000bf786:
	push %RBP
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	jmp uuid_00000000000bf783
	jmp uuid_00000000000bf785
uuid_00000000000bf783:
	movb $1, -672(%rbp)
uuid_00000000000bf785:
	mov -736(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000bf788:
	mov -688(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000bf78b:
	mov -680(%RBP),%RSP
	add $-760, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf798
	jmp uuid_00000000000bf79a
uuid_00000000000bf798:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq $0
	push %RBP
	mov -808(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf792
	jmp uuid_00000000000bf794
uuid_00000000000bf792:
	push %RBP
	mov -800(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf78f
	jmp uuid_00000000000bf791
uuid_00000000000bf78f:
	push %RBP
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	jmp uuid_00000000000bf78c
	jmp uuid_00000000000bf78e
uuid_00000000000bf78c:
	movb $1, -816(%rbp)
uuid_00000000000bf78e:
	mov -880(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000bf791:
	mov -832(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000bf794:
	mov -824(%RBP),%RSP
	add $-904, %RSP
	mov -816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf795
	jmp uuid_00000000000bf797
uuid_00000000000bf795:
	movb $1, -608(%rbp)
uuid_00000000000bf797:
	mov -768(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000bf79a:
	mov -624(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000bf79d:
	mov -616(%RBP),%RSP
	add $-904, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7a5
	push %RBP
	jmp uuid_00000000000bf7a2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf7a1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf7a4
uuid_00000000000bf7a2:
uuid_00000000000bf7a4:
	mov -912(%RBP),%RSP
	add $-912, %RSP
	jmp uuid_00000000000bf7a7
uuid_00000000000bf7a5:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	push %RBP
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf79e
	jmp uuid_00000000000bf7a0
uuid_00000000000bf79e:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
#call function unify : Arrow<Cons<List<Type>,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
uuid_00000000000bf7a0:
	mov -912(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000bf7a7:
	mov -512(%RBP),%RSP
	add $-912, %RSP
	jmp uuid_00000000000bf7aa
uuid_00000000000bf7a8:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
uuid_00000000000bf7aa:
	mov -304(%RBP),%RSP
	add $-504, %RSP
	subq $120, %rsp
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
fields_SB_of_SB_type_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7d5
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7c3
	jmp uuid_00000000000bf7c5
uuid_00000000000bf7c3:
	push %RBP
	mov -112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7ba
	jmp uuid_00000000000bf7bc
uuid_00000000000bf7ba:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7b1
	jmp uuid_00000000000bf7b3
uuid_00000000000bf7b1:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7ae
	jmp uuid_00000000000bf7b0
uuid_00000000000bf7ae:
	push %RBP
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	jmp uuid_00000000000bf7ab
	jmp uuid_00000000000bf7ad
uuid_00000000000bf7ab:
	movb $1, -256(%rbp)
uuid_00000000000bf7ad:
	mov -320(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000bf7b0:
	mov -272(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000bf7b3:
	mov -264(%RBP),%RSP
	add $-344, %RSP
	mov -256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7b7
	jmp uuid_00000000000bf7b9
uuid_00000000000bf7b7:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000bf7b4
	jmp uuid_00000000000bf7b6
uuid_00000000000bf7b4:
	movb $1, -192(%rbp)
uuid_00000000000bf7b6:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000bf7b9:
	mov -208(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000bf7bc:
	mov -200(%RBP),%RSP
	add $-376, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7c0
	jmp uuid_00000000000bf7c2
uuid_00000000000bf7c0:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf7bd
	jmp uuid_00000000000bf7bf
uuid_00000000000bf7bd:
	movb $1, -128(%rbp)
uuid_00000000000bf7bf:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000bf7c2:
	mov -144(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000bf7c5:
	mov -136(%RBP),%RSP
	add $-392, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7d2
	push %RBP
	jmp uuid_00000000000bf7cf
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf7ce
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf7d1
uuid_00000000000bf7cf:
	pushq $uuid_00000000000beafa
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bf7d1:
	mov -400(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000bf7d4
uuid_00000000000bf7d2:
	pushq $uuid_00000000000beafa
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fields-of-type : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call fields_SB_of_SB_type_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bf7d4:
	mov -96(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000bf7d7
uuid_00000000000bf7d5:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bf7d7:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
sizeof_SB_type_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8b3
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7db
	jmp uuid_00000000000bf7dd
uuid_00000000000bf7db:
	push %RBP
	jmp uuid_00000000000bf7d8
	jmp uuid_00000000000bf7da
uuid_00000000000bf7d8:
	movb $1, -136(%rbp)
uuid_00000000000bf7da:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000bf7dd:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8b0
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7e4
	jmp uuid_00000000000bf7e6
uuid_00000000000bf7e4:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7e1
	jmp uuid_00000000000bf7e3
uuid_00000000000bf7e1:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf7de
	jmp uuid_00000000000bf7e0
uuid_00000000000bf7de:
	movb $1, -192(%rbp)
uuid_00000000000bf7e0:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000bf7e3:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000bf7e6:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8ad
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7ff
	jmp uuid_00000000000bf801
uuid_00000000000bf7ff:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7f6
	jmp uuid_00000000000bf7f8
uuid_00000000000bf7f6:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7f3
	jmp uuid_00000000000bf7f5
uuid_00000000000bf7f3:
	push %RBP
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7ed
	jmp uuid_00000000000bf7ef
uuid_00000000000bf7ed:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7ea
	jmp uuid_00000000000bf7ec
uuid_00000000000bf7ea:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf7e7
	jmp uuid_00000000000bf7e9
uuid_00000000000bf7e7:
	movb $1, -464(%rbp)
uuid_00000000000bf7e9:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000bf7ec:
	mov -480(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000bf7ef:
	mov -472(%RBP),%RSP
	add $-536, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7f0
	jmp uuid_00000000000bf7f2
uuid_00000000000bf7f0:
	movb $1, -368(%rbp)
uuid_00000000000bf7f2:
	mov -432(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000bf7f5:
	mov -384(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000bf7f8:
	mov -376(%RBP),%RSP
	add $-536, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf7fc
	jmp uuid_00000000000bf7fe
uuid_00000000000bf7fc:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq $uuid_00000000000bed3a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf7f9
	jmp uuid_00000000000bf7fb
uuid_00000000000bf7f9:
	movb $1, -304(%rbp)
uuid_00000000000bf7fb:
	mov -544(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000bf7fe:
	mov -320(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000bf801:
	mov -312(%RBP),%RSP
	add $-552, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8aa
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf81a
	jmp uuid_00000000000bf81c
uuid_00000000000bf81a:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf811
	jmp uuid_00000000000bf813
uuid_00000000000bf811:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf808
	jmp uuid_00000000000bf80a
uuid_00000000000bf808:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf805
	jmp uuid_00000000000bf807
uuid_00000000000bf805:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	jmp uuid_00000000000bf802
	jmp uuid_00000000000bf804
uuid_00000000000bf802:
	movb $1, -720(%rbp)
uuid_00000000000bf804:
	mov -784(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000bf807:
	mov -736(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000bf80a:
	mov -728(%RBP),%RSP
	add $-808, %RSP
	mov -720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf80e
	jmp uuid_00000000000bf810
uuid_00000000000bf80e:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	mov -840(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf80b
	jmp uuid_00000000000bf80d
uuid_00000000000bf80b:
	movb $1, -656(%rbp)
uuid_00000000000bf80d:
	mov -816(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000bf810:
	mov -672(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000bf813:
	mov -664(%RBP),%RSP
	add $-840, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf817
	jmp uuid_00000000000bf819
uuid_00000000000bf817:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq $uuid_00000000000bec78
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf814
	jmp uuid_00000000000bf816
uuid_00000000000bf814:
	movb $1, -592(%rbp)
uuid_00000000000bf816:
	mov -848(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000bf819:
	mov -608(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000bf81c:
	mov -600(%RBP),%RSP
	add $-856, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8a7
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf835
	jmp uuid_00000000000bf837
uuid_00000000000bf835:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf82c
	jmp uuid_00000000000bf82e
uuid_00000000000bf82c:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf823
	jmp uuid_00000000000bf825
uuid_00000000000bf823:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1080(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf820
	jmp uuid_00000000000bf822
uuid_00000000000bf820:
	push %RBP
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	jmp uuid_00000000000bf81d
	jmp uuid_00000000000bf81f
uuid_00000000000bf81d:
	movb $1, -1024(%rbp)
uuid_00000000000bf81f:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000bf822:
	mov -1040(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000bf825:
	mov -1032(%RBP),%RSP
	add $-1112, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf829
	jmp uuid_00000000000bf82b
uuid_00000000000bf829:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000bf826
	jmp uuid_00000000000bf828
uuid_00000000000bf826:
	movb $1, -960(%rbp)
uuid_00000000000bf828:
	mov -1120(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000bf82b:
	mov -976(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000bf82e:
	mov -968(%RBP),%RSP
	add $-1144, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf832
	jmp uuid_00000000000bf834
uuid_00000000000bf832:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf82f
	jmp uuid_00000000000bf831
uuid_00000000000bf82f:
	movb $1, -896(%rbp)
uuid_00000000000bf831:
	mov -1152(%RBP),%RSP
	add $-1160, %RSP
uuid_00000000000bf834:
	mov -912(%RBP),%RSP
	add $-1160, %RSP
uuid_00000000000bf837:
	mov -904(%RBP),%RSP
	add $-1160, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8a4
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf859
	jmp uuid_00000000000bf85b
uuid_00000000000bf859:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf850
	jmp uuid_00000000000bf852
uuid_00000000000bf850:
	push %RBP
	mov -1248(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf83e
	jmp uuid_00000000000bf840
uuid_00000000000bf83e:
	push %RBP
	mov -1312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf83b
	jmp uuid_00000000000bf83d
uuid_00000000000bf83b:
	push %RBP
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	jmp uuid_00000000000bf838
	jmp uuid_00000000000bf83a
uuid_00000000000bf838:
	movb $1, -1328(%rbp)
uuid_00000000000bf83a:
	mov -1392(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000bf83d:
	mov -1344(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000bf840:
	mov -1336(%RBP),%RSP
	add $-1416, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf84d
	jmp uuid_00000000000bf84f
uuid_00000000000bf84d:
	push %RBP
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq $0
	push %RBP
	mov -1448(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf847
	jmp uuid_00000000000bf849
uuid_00000000000bf847:
	push %RBP
	mov -1440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf844
	jmp uuid_00000000000bf846
uuid_00000000000bf844:
	push %RBP
	mov -1432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf841
	jmp uuid_00000000000bf843
uuid_00000000000bf841:
	movb $1, -1456(%rbp)
uuid_00000000000bf843:
	mov -1520(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000bf846:
	mov -1472(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000bf849:
	mov -1464(%RBP),%RSP
	add $-1528, %RSP
	mov -1456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf84a
	jmp uuid_00000000000bf84c
uuid_00000000000bf84a:
	movb $1, -1264(%rbp)
uuid_00000000000bf84c:
	mov -1424(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000bf84f:
	mov -1280(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000bf852:
	mov -1272(%RBP),%RSP
	add $-1528, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf856
	jmp uuid_00000000000bf858
uuid_00000000000bf856:
	push %RBP
	mov -1176(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1544(%rbp)
	pushq $uuid_00000000000bf093
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf853
	jmp uuid_00000000000bf855
uuid_00000000000bf853:
	movb $1, -1200(%rbp)
uuid_00000000000bf855:
	mov -1536(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000bf858:
	mov -1216(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000bf85b:
	mov -1208(%RBP),%RSP
	add $-1544, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8a1
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1576(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf862
	jmp uuid_00000000000bf864
uuid_00000000000bf862:
	push %RBP
	jmp uuid_00000000000bf85f
	jmp uuid_00000000000bf861
uuid_00000000000bf85f:
	push %RBP
	mov -1560(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf85c
	jmp uuid_00000000000bf85e
uuid_00000000000bf85c:
	movb $1, -1584(%rbp)
uuid_00000000000bf85e:
	mov -1608(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000bf861:
	mov -1600(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000bf864:
	mov -1592(%RBP),%RSP
	add $-1616, %RSP
	mov -1584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf89e
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1648(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf890
	jmp uuid_00000000000bf892
uuid_00000000000bf890:
	push %RBP
	mov -1640(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf88d
	jmp uuid_00000000000bf88f
uuid_00000000000bf88d:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf88a
	jmp uuid_00000000000bf88c
uuid_00000000000bf88a:
	movb $1, -1656(%rbp)
uuid_00000000000bf88c:
	mov -1704(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000bf88f:
	mov -1672(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000bf892:
	mov -1664(%RBP),%RSP
	add $-1728, %RSP
	mov -1656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf89b
	push %RBP
	jmp uuid_00000000000bf898
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf897
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf89a
uuid_00000000000bf898:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bf896
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bf89a:
	mov -1736(%RBP),%RSP
	add $-1736, %RSP
	jmp uuid_00000000000bf89d
uuid_00000000000bf89b:
	push %RBP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf893
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	jmp uuid_00000000000bf895
uuid_00000000000bf893:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000bf895:
	mov -1736(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000bf89d:
	mov -1624(%RBP),%RSP
	add $-1736, %RSP
	jmp uuid_00000000000bf8a0
uuid_00000000000bf89e:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_complex_SB_fields_SB_index_CL_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeStringCaseNumber0, %r15
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -1616(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringBTreeEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push %RBP
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq $0
	push %RBP
	mov -1736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf877
	jmp uuid_00000000000bf879
uuid_00000000000bf877:
	push %RBP
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf874
	jmp uuid_00000000000bf876
uuid_00000000000bf874:
	push %RBP
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	mov -1816(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf871
	jmp uuid_00000000000bf873
uuid_00000000000bf871:
	movb $1, -1744(%rbp)
uuid_00000000000bf873:
	mov -1792(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000bf876:
	mov -1760(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000bf879:
	mov -1752(%RBP),%RSP
	add $-1816, %RSP
	mov -1744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf887
	push %RBP
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq $0
	push %RBP
	mov -1880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf880
	jmp uuid_00000000000bf882
uuid_00000000000bf880:
	push %RBP
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	jmp uuid_00000000000bf87d
	jmp uuid_00000000000bf87f
uuid_00000000000bf87d:
	push %RBP
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	jmp uuid_00000000000bf87a
	jmp uuid_00000000000bf87c
uuid_00000000000bf87a:
	movb $1, -1888(%rbp)
uuid_00000000000bf87c:
	mov -1936(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000bf87f:
	mov -1904(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000bf882:
	mov -1896(%RBP),%RSP
	add $-1960, %RSP
	mov -1888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf884
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf883
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf886
uuid_00000000000bf884:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov $8, %RAX
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000bf886:
	mov -1824(%RBP),%RSP
	add $-2104, %RSP
	jmp uuid_00000000000bf889
uuid_00000000000bf887:
uuid_00000000000bf889:
	mov -1680(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000bf8a0:
	mov -1552(%RBP),%RSP
	add $-1816, %RSP
	jmp uuid_00000000000bf8a3
uuid_00000000000bf8a1:
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1528(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	mul %R14
	movq %RAX, -40(%rbp)
uuid_00000000000bf8a3:
	mov -1168(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000bf8a6
uuid_00000000000bf8a4:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000bf8a6:
	mov -864(%RBP),%RSP
	add $-1160, %RSP
	jmp uuid_00000000000bf8a9
uuid_00000000000bf8a7:
	movq $8, -40(%rbp)
uuid_00000000000bf8a9:
	mov -560(%RBP),%RSP
	add $-856, %RSP
	jmp uuid_00000000000bf8ac
uuid_00000000000bf8aa:
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000bf8ac:
	mov -272(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000bf8af
uuid_00000000000bf8ad:
#call function size-of-class : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call size_SB_of_SB_class_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000bf8af:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000bf8b2
uuid_00000000000bf8b0:
uuid_00000000000bf8b2:
	mov -104(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000bf8b5
uuid_00000000000bf8b3:
uuid_00000000000bf8b5:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
sizeof_SB_aligned_CL_ArrowU64Type:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8b6
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $8
	pushq -40(%rbp)
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	jmp uuid_00000000000bf8b8
uuid_00000000000bf8b6:
uuid_00000000000bf8b8:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
has_SB_infinite_CL_ArrowU64ConsU64ConsListTypeConsU64ConsStringType:
	pushq $0
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8cf
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8c2
	jmp uuid_00000000000bf8c4
uuid_00000000000bf8c2:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf8bf
	jmp uuid_00000000000bf8c1
uuid_00000000000bf8bf:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000bf8bc
	jmp uuid_00000000000bf8be
uuid_00000000000bf8bc:
	movb $1, -248(%rbp)
uuid_00000000000bf8be:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000bf8c1:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000bf8c4:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8cc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf8cb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf8ce
uuid_00000000000bf8cc:
	push %RBP
#call function is-parameter-flat : Arrow<Cons<Cons<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_SB_parameter_SB_flat_CL_ArrowU64ConsU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf8c8
	jmp uuid_00000000000bf8ca
uuid_00000000000bf8c8:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf8c5
	jmp uuid_00000000000bf8c7
uuid_00000000000bf8c5:
	movq $1, -104(%rbp)
uuid_00000000000bf8c7:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000bf8ca:
	mov -344(%RBP),%RSP
	add $-352, %RSP
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-infinite : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -104(%rbp)
uuid_00000000000bf8ce:
	mov -200(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000bf8d1
uuid_00000000000bf8cf:
uuid_00000000000bf8d1:
	mov -152(%RBP),%RSP
	add $-192, %RSP
	mov -104(%rbp), %RAX
	mov %rbp, %rsp
	sub $96, %rsp
	ret
has_SB_infinite_CL_ArrowU64ConsTypeType:
	pushq $0
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8d8
	jmp uuid_00000000000bf8da
uuid_00000000000bf8d8:
	push %RBP
	jmp uuid_00000000000bf8d5
	jmp uuid_00000000000bf8d7
uuid_00000000000bf8d5:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000bec78
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf8d2
	jmp uuid_00000000000bf8d4
uuid_00000000000bf8d2:
	movb $1, -128(%rbp)
uuid_00000000000bf8d4:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000bf8d7:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000bf8da:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf933
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8f3
	jmp uuid_00000000000bf8f5
uuid_00000000000bf8f3:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8ea
	jmp uuid_00000000000bf8ec
uuid_00000000000bf8ea:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8e1
	jmp uuid_00000000000bf8e3
uuid_00000000000bf8e1:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8de
	jmp uuid_00000000000bf8e0
uuid_00000000000bf8de:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	jmp uuid_00000000000bf8db
	jmp uuid_00000000000bf8dd
uuid_00000000000bf8db:
	movb $1, -328(%rbp)
uuid_00000000000bf8dd:
	mov -392(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000bf8e0:
	mov -344(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000bf8e3:
	mov -336(%RBP),%RSP
	add $-416, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8e7
	jmp uuid_00000000000bf8e9
uuid_00000000000bf8e7:
	push %RBP
	jmp uuid_00000000000bf8e4
	jmp uuid_00000000000bf8e6
uuid_00000000000bf8e4:
	movb $1, -264(%rbp)
uuid_00000000000bf8e6:
	mov -424(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000bf8e9:
	mov -280(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000bf8ec:
	mov -272(%RBP),%RSP
	add $-424, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8f0
	jmp uuid_00000000000bf8f2
uuid_00000000000bf8f0:
	push %RBP
	mov -176(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq $uuid_00000000000bf093
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf8ed
	jmp uuid_00000000000bf8ef
uuid_00000000000bf8ed:
	movb $1, -200(%rbp)
uuid_00000000000bf8ef:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000bf8f2:
	mov -216(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000bf8f5:
	mov -208(%RBP),%RSP
	add $-440, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf930
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf90e
	jmp uuid_00000000000bf910
uuid_00000000000bf90e:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf905
	jmp uuid_00000000000bf907
uuid_00000000000bf905:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8fc
	jmp uuid_00000000000bf8fe
uuid_00000000000bf8fc:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf8f9
	jmp uuid_00000000000bf8fb
uuid_00000000000bf8f9:
	push %RBP
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	jmp uuid_00000000000bf8f6
	jmp uuid_00000000000bf8f8
uuid_00000000000bf8f6:
	movb $1, -608(%rbp)
uuid_00000000000bf8f8:
	mov -672(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000bf8fb:
	mov -624(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000bf8fe:
	mov -616(%RBP),%RSP
	add $-696, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf902
	jmp uuid_00000000000bf904
uuid_00000000000bf902:
	push %RBP
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	jmp uuid_00000000000bf8ff
	jmp uuid_00000000000bf901
uuid_00000000000bf8ff:
	movb $1, -544(%rbp)
uuid_00000000000bf901:
	mov -704(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000bf904:
	mov -560(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000bf907:
	mov -552(%RBP),%RSP
	add $-728, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf90b
	jmp uuid_00000000000bf90d
uuid_00000000000bf90b:
	push %RBP
	mov -456(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -744(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf908
	jmp uuid_00000000000bf90a
uuid_00000000000bf908:
	movb $1, -480(%rbp)
uuid_00000000000bf90a:
	mov -736(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000bf90d:
	mov -496(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000bf910:
	mov -488(%RBP),%RSP
	add $-744, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf92d
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf917
	jmp uuid_00000000000bf919
uuid_00000000000bf917:
	push %RBP
	mov -768(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf914
	jmp uuid_00000000000bf916
uuid_00000000000bf914:
	push %RBP
	mov -760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf911
	jmp uuid_00000000000bf913
uuid_00000000000bf911:
	movb $1, -784(%rbp)
uuid_00000000000bf913:
	mov -848(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000bf916:
	mov -800(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000bf919:
	mov -792(%RBP),%RSP
	add $-856, %RSP
	mov -784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf92a
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf920
	jmp uuid_00000000000bf922
uuid_00000000000bf920:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf91d
	jmp uuid_00000000000bf91f
uuid_00000000000bf91d:
	push %RBP
	mov -872(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf91a
	jmp uuid_00000000000bf91c
uuid_00000000000bf91a:
	movb $1, -896(%rbp)
uuid_00000000000bf91c:
	mov -944(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000bf91f:
	mov -912(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000bf922:
	mov -904(%RBP),%RSP
	add $-968, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf927
	push %RBP
	jmp uuid_00000000000bf924
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf923
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf926
uuid_00000000000bf924:
uuid_00000000000bf926:
	mov -976(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000bf929
uuid_00000000000bf927:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000bf929:
	mov -864(%RBP),%RSP
	add $-968, %RSP
	jmp uuid_00000000000bf92c
uuid_00000000000bf92a:
#call function has-infinite : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq $1
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000bf92c:
	mov -752(%RBP),%RSP
	add $-856, %RSP
	jmp uuid_00000000000bf92f
uuid_00000000000bf92d:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000bf92f:
	mov -448(%RBP),%RSP
	add $-744, %RSP
	jmp uuid_00000000000bf932
uuid_00000000000bf930:
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000bf932:
	mov -168(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000bf935
uuid_00000000000bf933:
uuid_00000000000bf935:
	mov -96(%RBP),%RSP
	add $-160, %RSP
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf936
	jmp uuid_00000000000bf938
uuid_00000000000bf936:
	movq $1, -64(%rbp)
uuid_00000000000bf938:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
has_SB_forward_CL_ArrowU64ListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf948
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf941
	jmp uuid_00000000000bf943
uuid_00000000000bf941:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf93e
	jmp uuid_00000000000bf940
uuid_00000000000bf93e:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000bf93b
	jmp uuid_00000000000bf93d
uuid_00000000000bf93b:
	movb $1, -200(%rbp)
uuid_00000000000bf93d:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000bf940:
	mov -216(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000bf943:
	mov -208(%RBP),%RSP
	add $-288, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf945
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf944
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf947
uuid_00000000000bf945:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-forward : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -56(%rbp)
uuid_00000000000bf947:
	mov -152(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000bf94a
uuid_00000000000bf948:
uuid_00000000000bf94a:
	mov -104(%RBP),%RSP
	add $-144, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
has_SB_forward_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf951
	jmp uuid_00000000000bf953
uuid_00000000000bf951:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf94e
	jmp uuid_00000000000bf950
uuid_00000000000bf94e:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000bec78
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf94b
	jmp uuid_00000000000bf94d
uuid_00000000000bf94b:
	movb $1, -104(%rbp)
uuid_00000000000bf94d:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bf950:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bf953:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf9a5
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf95a
	jmp uuid_00000000000bf95c
uuid_00000000000bf95a:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf957
	jmp uuid_00000000000bf959
uuid_00000000000bf957:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf954
	jmp uuid_00000000000bf956
uuid_00000000000bf954:
	movb $1, -216(%rbp)
uuid_00000000000bf956:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000bf959:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000bf95c:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf9a2
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf975
	jmp uuid_00000000000bf977
uuid_00000000000bf975:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf96c
	jmp uuid_00000000000bf96e
uuid_00000000000bf96c:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf963
	jmp uuid_00000000000bf965
uuid_00000000000bf963:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf960
	jmp uuid_00000000000bf962
uuid_00000000000bf960:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000bf95d
	jmp uuid_00000000000bf95f
uuid_00000000000bf95d:
	movb $1, -456(%rbp)
uuid_00000000000bf95f:
	mov -520(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000bf962:
	mov -472(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000bf965:
	mov -464(%RBP),%RSP
	add $-544, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf969
	jmp uuid_00000000000bf96b
uuid_00000000000bf969:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	jmp uuid_00000000000bf966
	jmp uuid_00000000000bf968
uuid_00000000000bf966:
	movb $1, -392(%rbp)
uuid_00000000000bf968:
	mov -552(%RBP),%RSP
	add $-576, %RSP
uuid_00000000000bf96b:
	mov -408(%RBP),%RSP
	add $-576, %RSP
uuid_00000000000bf96e:
	mov -400(%RBP),%RSP
	add $-576, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf972
	jmp uuid_00000000000bf974
uuid_00000000000bf972:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000bf093
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf96f
	jmp uuid_00000000000bf971
uuid_00000000000bf96f:
	movb $1, -328(%rbp)
uuid_00000000000bf971:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000bf974:
	mov -344(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000bf977:
	mov -336(%RBP),%RSP
	add $-592, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf99f
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf97e
	jmp uuid_00000000000bf980
uuid_00000000000bf97e:
	push %RBP
	mov -616(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf97b
	jmp uuid_00000000000bf97d
uuid_00000000000bf97b:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bf978
	jmp uuid_00000000000bf97a
uuid_00000000000bf978:
	movb $1, -632(%rbp)
uuid_00000000000bf97a:
	mov -696(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000bf97d:
	mov -648(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000bf980:
	mov -640(%RBP),%RSP
	add $-704, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf99c
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf992
	jmp uuid_00000000000bf994
uuid_00000000000bf992:
	push %RBP
	mov -728(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf98f
	jmp uuid_00000000000bf991
uuid_00000000000bf98f:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf98c
	jmp uuid_00000000000bf98e
uuid_00000000000bf98c:
	movb $1, -744(%rbp)
uuid_00000000000bf98e:
	mov -792(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000bf991:
	mov -760(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000bf994:
	mov -752(%RBP),%RSP
	add $-816, %RSP
	mov -744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bf999
	push %RBP
	jmp uuid_00000000000bf996
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf995
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf998
uuid_00000000000bf996:
uuid_00000000000bf998:
	mov -824(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000bf99b
uuid_00000000000bf999:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000bf99b:
	mov -712(%RBP),%RSP
	add $-816, %RSP
	jmp uuid_00000000000bf99e
uuid_00000000000bf99c:
#call function has-forward : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	push %RBP
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_exists_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -704(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf989
	jmp uuid_00000000000bf98b
uuid_00000000000bf989:
	movq $1, -40(%rbp)
uuid_00000000000bf98b:
	mov -712(%RBP),%RSP
	add $-712, %RSP
uuid_00000000000bf99e:
	mov -600(%RBP),%RSP
	add $-712, %RSP
	jmp uuid_00000000000bf9a1
uuid_00000000000bf99f:
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000bf9a1:
	mov -296(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000bf9a4
uuid_00000000000bf9a2:
#call function has-forward : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000bf9a4:
	mov -184(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000bf9a7
uuid_00000000000bf9a5:
uuid_00000000000bf9a7:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg8_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000bf9a8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9e9
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000bf9a9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9e6
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000bf9aa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9e3
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000bf9ab
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9e0
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000bf9ac
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9dd
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000bf9ad
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9da
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000bf9ae
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9d7
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000bf9af
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9d4
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000bf9b0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9d1
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000bf9b1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9ce
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000bf9b2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9cb
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000bf9b3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9c8
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000bf9b4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9c5
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000bf9b5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9c2
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000bf9b6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9bf
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000bf9b7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9bc
	push %RBP
	jmp uuid_00000000000bf9b9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf9b8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bf9bb
uuid_00000000000bf9b9:
uuid_00000000000bf9bb:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000bf9be
uuid_00000000000bf9bc:
	movq $1, -24(%rbp)
uuid_00000000000bf9be:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000bf9c1
uuid_00000000000bf9bf:
	movq $1, -24(%rbp)
uuid_00000000000bf9c1:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000bf9c4
uuid_00000000000bf9c2:
	movq $1, -24(%rbp)
uuid_00000000000bf9c4:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000bf9c7
uuid_00000000000bf9c5:
	movq $1, -24(%rbp)
uuid_00000000000bf9c7:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000bf9ca
uuid_00000000000bf9c8:
	movq $1, -24(%rbp)
uuid_00000000000bf9ca:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000bf9cd
uuid_00000000000bf9cb:
	movq $1, -24(%rbp)
uuid_00000000000bf9cd:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000bf9d0
uuid_00000000000bf9ce:
	movq $1, -24(%rbp)
uuid_00000000000bf9d0:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000bf9d3
uuid_00000000000bf9d1:
	movq $1, -24(%rbp)
uuid_00000000000bf9d3:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000bf9d6
uuid_00000000000bf9d4:
	movq $1, -24(%rbp)
uuid_00000000000bf9d6:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000bf9d9
uuid_00000000000bf9d7:
	movq $1, -24(%rbp)
uuid_00000000000bf9d9:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000bf9dc
uuid_00000000000bf9da:
	movq $1, -24(%rbp)
uuid_00000000000bf9dc:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000bf9df
uuid_00000000000bf9dd:
	movq $1, -24(%rbp)
uuid_00000000000bf9df:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000bf9e2
uuid_00000000000bf9e0:
	movq $1, -24(%rbp)
uuid_00000000000bf9e2:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000bf9e5
uuid_00000000000bf9e3:
	movq $1, -24(%rbp)
uuid_00000000000bf9e5:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000bf9e8
uuid_00000000000bf9e6:
	movq $1, -24(%rbp)
uuid_00000000000bf9e8:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000bf9eb
uuid_00000000000bf9e9:
	movq $1, -24(%rbp)
uuid_00000000000bf9eb:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg8_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf9f2
	jmp uuid_00000000000bf9f4
uuid_00000000000bf9f2:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf9ef
	jmp uuid_00000000000bf9f1
uuid_00000000000bf9ef:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bf9ec
	jmp uuid_00000000000bf9ee
uuid_00000000000bf9ec:
	movb $1, -104(%rbp)
uuid_00000000000bf9ee:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bf9f1:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bf9f4:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfa05
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bf9fb
	jmp uuid_00000000000bf9fd
uuid_00000000000bf9fb:
	push %RBP
	jmp uuid_00000000000bf9f8
	jmp uuid_00000000000bf9fa
uuid_00000000000bf9f8:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000bec07
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bf9f5
	jmp uuid_00000000000bf9f7
uuid_00000000000bf9f5:
	movb $1, -216(%rbp)
uuid_00000000000bf9f7:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000bf9fa:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000bf9fd:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfa02
	push %RBP
	jmp uuid_00000000000bf9ff
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bf9fe
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfa01
uuid_00000000000bf9ff:
uuid_00000000000bfa01:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000bfa04
uuid_00000000000bfa02:
	movq $1, -40(%rbp)
uuid_00000000000bfa04:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000bfa07
uuid_00000000000bfa05:
#call function is-reg8 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg8 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000bfa07:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg16_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000bfa08
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa49
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000bfa09
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa46
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000bfa0a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa43
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000bfa0b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa40
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000bfa0c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa3d
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000bfa0d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa3a
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000bfa0e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa37
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000bfa0f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa34
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000bfa10
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa31
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000bfa11
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa2e
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000bfa12
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa2b
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000bfa13
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa28
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000bfa14
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa25
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000bfa15
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa22
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000bfa16
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa1f
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000bfa17
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa1c
	push %RBP
	jmp uuid_00000000000bfa19
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfa18
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfa1b
uuid_00000000000bfa19:
uuid_00000000000bfa1b:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000bfa1e
uuid_00000000000bfa1c:
	movq $1, -24(%rbp)
uuid_00000000000bfa1e:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000bfa21
uuid_00000000000bfa1f:
	movq $1, -24(%rbp)
uuid_00000000000bfa21:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000bfa24
uuid_00000000000bfa22:
	movq $1, -24(%rbp)
uuid_00000000000bfa24:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000bfa27
uuid_00000000000bfa25:
	movq $1, -24(%rbp)
uuid_00000000000bfa27:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000bfa2a
uuid_00000000000bfa28:
	movq $1, -24(%rbp)
uuid_00000000000bfa2a:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000bfa2d
uuid_00000000000bfa2b:
	movq $1, -24(%rbp)
uuid_00000000000bfa2d:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000bfa30
uuid_00000000000bfa2e:
	movq $1, -24(%rbp)
uuid_00000000000bfa30:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000bfa33
uuid_00000000000bfa31:
	movq $1, -24(%rbp)
uuid_00000000000bfa33:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000bfa36
uuid_00000000000bfa34:
	movq $1, -24(%rbp)
uuid_00000000000bfa36:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000bfa39
uuid_00000000000bfa37:
	movq $1, -24(%rbp)
uuid_00000000000bfa39:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000bfa3c
uuid_00000000000bfa3a:
	movq $1, -24(%rbp)
uuid_00000000000bfa3c:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000bfa3f
uuid_00000000000bfa3d:
	movq $1, -24(%rbp)
uuid_00000000000bfa3f:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000bfa42
uuid_00000000000bfa40:
	movq $1, -24(%rbp)
uuid_00000000000bfa42:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000bfa45
uuid_00000000000bfa43:
	movq $1, -24(%rbp)
uuid_00000000000bfa45:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000bfa48
uuid_00000000000bfa46:
	movq $1, -24(%rbp)
uuid_00000000000bfa48:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000bfa4b
uuid_00000000000bfa49:
	movq $1, -24(%rbp)
uuid_00000000000bfa4b:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg16_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfa52
	jmp uuid_00000000000bfa54
uuid_00000000000bfa52:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfa4f
	jmp uuid_00000000000bfa51
uuid_00000000000bfa4f:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfa4c
	jmp uuid_00000000000bfa4e
uuid_00000000000bfa4c:
	movb $1, -104(%rbp)
uuid_00000000000bfa4e:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bfa51:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bfa54:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfa65
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfa5b
	jmp uuid_00000000000bfa5d
uuid_00000000000bfa5b:
	push %RBP
	jmp uuid_00000000000bfa58
	jmp uuid_00000000000bfa5a
uuid_00000000000bfa58:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000bec0b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa55
	jmp uuid_00000000000bfa57
uuid_00000000000bfa55:
	movb $1, -216(%rbp)
uuid_00000000000bfa57:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000bfa5a:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000bfa5d:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfa62
	push %RBP
	jmp uuid_00000000000bfa5f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfa5e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfa61
uuid_00000000000bfa5f:
uuid_00000000000bfa61:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000bfa64
uuid_00000000000bfa62:
	movq $1, -40(%rbp)
uuid_00000000000bfa64:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000bfa67
uuid_00000000000bfa65:
#call function is-reg16 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg16 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000bfa67:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg32_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000bfa68
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfaa9
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000bfa69
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfaa6
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000bfa6a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfaa3
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000bfa6b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfaa0
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000bfa6c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa9d
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000bfa6d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa9a
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000bfa6e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa97
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000bfa6f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa94
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000bfa70
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa91
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000bfa71
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa8e
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000bfa72
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa8b
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000bfa73
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa88
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000bfa74
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa85
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000bfa75
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa82
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000bfa76
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa7f
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000bfa77
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfa7c
	push %RBP
	jmp uuid_00000000000bfa79
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfa78
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfa7b
uuid_00000000000bfa79:
uuid_00000000000bfa7b:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000bfa7e
uuid_00000000000bfa7c:
	movq $1, -24(%rbp)
uuid_00000000000bfa7e:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000bfa81
uuid_00000000000bfa7f:
	movq $1, -24(%rbp)
uuid_00000000000bfa81:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000bfa84
uuid_00000000000bfa82:
	movq $1, -24(%rbp)
uuid_00000000000bfa84:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000bfa87
uuid_00000000000bfa85:
	movq $1, -24(%rbp)
uuid_00000000000bfa87:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000bfa8a
uuid_00000000000bfa88:
	movq $1, -24(%rbp)
uuid_00000000000bfa8a:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000bfa8d
uuid_00000000000bfa8b:
	movq $1, -24(%rbp)
uuid_00000000000bfa8d:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000bfa90
uuid_00000000000bfa8e:
	movq $1, -24(%rbp)
uuid_00000000000bfa90:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000bfa93
uuid_00000000000bfa91:
	movq $1, -24(%rbp)
uuid_00000000000bfa93:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000bfa96
uuid_00000000000bfa94:
	movq $1, -24(%rbp)
uuid_00000000000bfa96:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000bfa99
uuid_00000000000bfa97:
	movq $1, -24(%rbp)
uuid_00000000000bfa99:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000bfa9c
uuid_00000000000bfa9a:
	movq $1, -24(%rbp)
uuid_00000000000bfa9c:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000bfa9f
uuid_00000000000bfa9d:
	movq $1, -24(%rbp)
uuid_00000000000bfa9f:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000bfaa2
uuid_00000000000bfaa0:
	movq $1, -24(%rbp)
uuid_00000000000bfaa2:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000bfaa5
uuid_00000000000bfaa3:
	movq $1, -24(%rbp)
uuid_00000000000bfaa5:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000bfaa8
uuid_00000000000bfaa6:
	movq $1, -24(%rbp)
uuid_00000000000bfaa8:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000bfaab
uuid_00000000000bfaa9:
	movq $1, -24(%rbp)
uuid_00000000000bfaab:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg32_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfab2
	jmp uuid_00000000000bfab4
uuid_00000000000bfab2:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfaaf
	jmp uuid_00000000000bfab1
uuid_00000000000bfaaf:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfaac
	jmp uuid_00000000000bfaae
uuid_00000000000bfaac:
	movb $1, -104(%rbp)
uuid_00000000000bfaae:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bfab1:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bfab4:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfac5
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfabb
	jmp uuid_00000000000bfabd
uuid_00000000000bfabb:
	push %RBP
	jmp uuid_00000000000bfab8
	jmp uuid_00000000000bfaba
uuid_00000000000bfab8:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000bec0f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfab5
	jmp uuid_00000000000bfab7
uuid_00000000000bfab5:
	movb $1, -216(%rbp)
uuid_00000000000bfab7:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000bfaba:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000bfabd:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfac2
	push %RBP
	jmp uuid_00000000000bfabf
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfabe
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfac1
uuid_00000000000bfabf:
uuid_00000000000bfac1:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000bfac4
uuid_00000000000bfac2:
	movq $1, -40(%rbp)
uuid_00000000000bfac4:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000bfac7
uuid_00000000000bfac5:
#call function is-reg32 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg32 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000bfac7:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg64_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000bfac8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfb09
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000bfac9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfb06
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000bfaca
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfb03
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000bfacb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfb00
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000bfacc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfafd
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000bfacd
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfafa
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000bface
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfaf7
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000bfacf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfaf4
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000bfad0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfaf1
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000bfad1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfaee
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000bfad2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfaeb
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000bfad3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfae8
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000bfad4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfae5
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000bfad5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfae2
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000bfad6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfadf
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000bfad7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfadc
	push %RBP
	jmp uuid_00000000000bfad9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfad8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfadb
uuid_00000000000bfad9:
uuid_00000000000bfadb:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000bfade
uuid_00000000000bfadc:
	movq $1, -24(%rbp)
uuid_00000000000bfade:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000bfae1
uuid_00000000000bfadf:
	movq $1, -24(%rbp)
uuid_00000000000bfae1:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000bfae4
uuid_00000000000bfae2:
	movq $1, -24(%rbp)
uuid_00000000000bfae4:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000bfae7
uuid_00000000000bfae5:
	movq $1, -24(%rbp)
uuid_00000000000bfae7:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000bfaea
uuid_00000000000bfae8:
	movq $1, -24(%rbp)
uuid_00000000000bfaea:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000bfaed
uuid_00000000000bfaeb:
	movq $1, -24(%rbp)
uuid_00000000000bfaed:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000bfaf0
uuid_00000000000bfaee:
	movq $1, -24(%rbp)
uuid_00000000000bfaf0:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000bfaf3
uuid_00000000000bfaf1:
	movq $1, -24(%rbp)
uuid_00000000000bfaf3:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000bfaf6
uuid_00000000000bfaf4:
	movq $1, -24(%rbp)
uuid_00000000000bfaf6:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000bfaf9
uuid_00000000000bfaf7:
	movq $1, -24(%rbp)
uuid_00000000000bfaf9:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000bfafc
uuid_00000000000bfafa:
	movq $1, -24(%rbp)
uuid_00000000000bfafc:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000bfaff
uuid_00000000000bfafd:
	movq $1, -24(%rbp)
uuid_00000000000bfaff:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000bfb02
uuid_00000000000bfb00:
	movq $1, -24(%rbp)
uuid_00000000000bfb02:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000bfb05
uuid_00000000000bfb03:
	movq $1, -24(%rbp)
uuid_00000000000bfb05:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000bfb08
uuid_00000000000bfb06:
	movq $1, -24(%rbp)
uuid_00000000000bfb08:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000bfb0b
uuid_00000000000bfb09:
	movq $1, -24(%rbp)
uuid_00000000000bfb0b:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg64_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb12
	jmp uuid_00000000000bfb14
uuid_00000000000bfb12:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfb0f
	jmp uuid_00000000000bfb11
uuid_00000000000bfb0f:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfb0c
	jmp uuid_00000000000bfb0e
uuid_00000000000bfb0c:
	movb $1, -104(%rbp)
uuid_00000000000bfb0e:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bfb11:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bfb14:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb25
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb1b
	jmp uuid_00000000000bfb1d
uuid_00000000000bfb1b:
	push %RBP
	jmp uuid_00000000000bfb18
	jmp uuid_00000000000bfb1a
uuid_00000000000bfb18:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000bec13
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfb15
	jmp uuid_00000000000bfb17
uuid_00000000000bfb15:
	movb $1, -216(%rbp)
uuid_00000000000bfb17:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000bfb1a:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000bfb1d:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb22
	push %RBP
	jmp uuid_00000000000bfb1f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfb1e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfb21
uuid_00000000000bfb1f:
uuid_00000000000bfb21:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000bfb24
uuid_00000000000bfb22:
	movq $1, -40(%rbp)
uuid_00000000000bfb24:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000bfb27
uuid_00000000000bfb25:
#call function is-reg64 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg64 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000bfb27:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_tag_CL_ArrowTypeType:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfb3b
	jmp uuid_00000000000bfb3d
uuid_00000000000bfb3b:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb2e
	jmp uuid_00000000000bfb30
uuid_00000000000bfb2e:
	push %RBP
	jmp uuid_00000000000bfb2b
	jmp uuid_00000000000bfb2d
uuid_00000000000bfb2b:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bfb28
	jmp uuid_00000000000bfb2a
uuid_00000000000bfb28:
	movb $1, -128(%rbp)
uuid_00000000000bfb2a:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000bfb2d:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000bfb30:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb38
	push %RBP
	jmp uuid_00000000000bfb35
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfb34
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfb37
uuid_00000000000bfb35:
uuid_00000000000bfb37:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000bfb3a
uuid_00000000000bfb38:
#call function get-only-child : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call get_SB_only_SB_child_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -168(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000bfb31
	jmp uuid_00000000000bfb33
uuid_00000000000bfb31:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bef54
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfb33:
	mov -176(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bfb3a:
	mov -96(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000bfb3d:
	mov -64(%RBP),%RSP
	add $-176, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_size_CL_ArrowTypeType:
	push %RBP
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function is-sized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call is_SB_sized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfb3e
	jmp uuid_00000000000bfb40
uuid_00000000000bfb3e:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function with-size-recurse : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_size_SB_recurse_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed3a
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfb40:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb59
	jmp uuid_00000000000bfb5b
uuid_00000000000bfb59:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb50
	jmp uuid_00000000000bfb52
uuid_00000000000bfb50:
	push %RBP
	mov -160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb47
	jmp uuid_00000000000bfb49
uuid_00000000000bfb47:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb44
	jmp uuid_00000000000bfb46
uuid_00000000000bfb44:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	jmp uuid_00000000000bfb41
	jmp uuid_00000000000bfb43
uuid_00000000000bfb41:
	movb $1, -240(%rbp)
uuid_00000000000bfb43:
	mov -304(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000bfb46:
	mov -256(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000bfb49:
	mov -248(%RBP),%RSP
	add $-328, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb4d
	jmp uuid_00000000000bfb4f
uuid_00000000000bfb4d:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	jmp uuid_00000000000bfb4a
	jmp uuid_00000000000bfb4c
uuid_00000000000bfb4a:
	movb $1, -176(%rbp)
uuid_00000000000bfb4c:
	mov -336(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000bfb4f:
	mov -192(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000bfb52:
	mov -184(%RBP),%RSP
	add $-360, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb56
	jmp uuid_00000000000bfb58
uuid_00000000000bfb56:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfb53
	jmp uuid_00000000000bfb55
uuid_00000000000bfb53:
	movb $1, -112(%rbp)
uuid_00000000000bfb55:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000bfb58:
	mov -128(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000bfb5b:
	mov -120(%RBP),%RSP
	add $-376, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb60
	push %RBP
	jmp uuid_00000000000bfb5d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfb5c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfb5f
uuid_00000000000bfb5d:
uuid_00000000000bfb5f:
	mov -384(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000bfb62
uuid_00000000000bfb60:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beafa
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfb62:
	mov -80(%RBP),%RSP
	add $-376, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_size_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb72
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb6b
	jmp uuid_00000000000bfb6d
uuid_00000000000bfb6b:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfb68
	jmp uuid_00000000000bfb6a
uuid_00000000000bfb68:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000bfb65
	jmp uuid_00000000000bfb67
uuid_00000000000bfb65:
	movb $1, -192(%rbp)
uuid_00000000000bfb67:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000bfb6a:
	mov -208(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000bfb6d:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb6f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfb6e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfb71
uuid_00000000000bfb6f:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfb71:
	mov -144(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000bfb74
uuid_00000000000bfb72:
uuid_00000000000bfb74:
	mov -96(%RBP),%RSP
	add $-136, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
with_SB_size_SB_recurse_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb7b
	jmp uuid_00000000000bfb7d
uuid_00000000000bfb7b:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfb78
	jmp uuid_00000000000bfb7a
uuid_00000000000bfb78:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfb75
	jmp uuid_00000000000bfb77
uuid_00000000000bfb75:
	movb $1, -96(%rbp)
uuid_00000000000bfb77:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bfb7a:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bfb7d:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbca
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb84
	jmp uuid_00000000000bfb86
uuid_00000000000bfb84:
	push %RBP
	jmp uuid_00000000000bfb81
	jmp uuid_00000000000bfb83
uuid_00000000000bfb81:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000bef54
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfb7e
	jmp uuid_00000000000bfb80
uuid_00000000000bfb7e:
	movb $1, -208(%rbp)
uuid_00000000000bfb80:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000bfb83:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000bfb86:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbc7
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb8d
	jmp uuid_00000000000bfb8f
uuid_00000000000bfb8d:
	push %RBP
	jmp uuid_00000000000bfb8a
	jmp uuid_00000000000bfb8c
uuid_00000000000bfb8a:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000bed3a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfb87
	jmp uuid_00000000000bfb89
uuid_00000000000bfb87:
	movb $1, -280(%rbp)
uuid_00000000000bfb89:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000bfb8c:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000bfb8f:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbc4
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb96
	jmp uuid_00000000000bfb98
uuid_00000000000bfb96:
	push %RBP
	jmp uuid_00000000000bfb93
	jmp uuid_00000000000bfb95
uuid_00000000000bfb93:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000bed39
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfb90
	jmp uuid_00000000000bfb92
uuid_00000000000bfb90:
	movb $1, -352(%rbp)
uuid_00000000000bfb92:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000bfb95:
	mov -368(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000bfb98:
	mov -360(%RBP),%RSP
	add $-384, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbc1
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfb9f
	jmp uuid_00000000000bfba1
uuid_00000000000bfb9f:
	push %RBP
	jmp uuid_00000000000bfb9c
	jmp uuid_00000000000bfb9e
uuid_00000000000bfb9c:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq $uuid_00000000000bef7f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfb99
	jmp uuid_00000000000bfb9b
uuid_00000000000bfb99:
	movb $1, -424(%rbp)
uuid_00000000000bfb9b:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000bfb9e:
	mov -440(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000bfba1:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbbe
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfba8
	jmp uuid_00000000000bfbaa
uuid_00000000000bfba8:
	push %RBP
	jmp uuid_00000000000bfba5
	jmp uuid_00000000000bfba7
uuid_00000000000bfba5:
	push %RBP
	mov -472(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq $uuid_00000000000bed3b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfba2
	jmp uuid_00000000000bfba4
uuid_00000000000bfba2:
	movb $1, -496(%rbp)
uuid_00000000000bfba4:
	mov -520(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000bfba7:
	mov -512(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000bfbaa:
	mov -504(%RBP),%RSP
	add $-528, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbbb
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbb1
	jmp uuid_00000000000bfbb3
uuid_00000000000bfbb1:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfbae
	jmp uuid_00000000000bfbb0
uuid_00000000000bfbae:
	push %RBP
	mov -544(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bfbab
	jmp uuid_00000000000bfbad
uuid_00000000000bfbab:
	movb $1, -568(%rbp)
uuid_00000000000bfbad:
	mov -632(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000bfbb0:
	mov -584(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000bfbb3:
	mov -576(%RBP),%RSP
	add $-640, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbb8
	push %RBP
	jmp uuid_00000000000bfbb5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfbb4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfbb7
uuid_00000000000bfbb5:
uuid_00000000000bfbb7:
	mov -648(%RBP),%RSP
	add $-648, %RSP
	jmp uuid_00000000000bfbba
uuid_00000000000bfbb8:
	pushq -640(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfbba:
	mov -536(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000bfbbd
uuid_00000000000bfbbb:
uuid_00000000000bfbbd:
	mov -464(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000bfbc0
uuid_00000000000bfbbe:
uuid_00000000000bfbc0:
	mov -392(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000bfbc3
uuid_00000000000bfbc1:
uuid_00000000000bfbc3:
	mov -320(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000bfbc6
uuid_00000000000bfbc4:
uuid_00000000000bfbc6:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000bfbc9
uuid_00000000000bfbc7:
uuid_00000000000bfbc9:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000bfbcc
uuid_00000000000bfbca:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-size-recurse : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call with_SB_size_SB_recurse_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-size-recurse : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call with_SB_size_SB_recurse_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfbcc:
	mov -64(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_fields_CL_ArrowTypeType:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000bef7f
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbd3
	jmp uuid_00000000000bfbd5
uuid_00000000000bfbd3:
	push %RBP
	jmp uuid_00000000000bfbd0
	jmp uuid_00000000000bfbd2
uuid_00000000000bfbd0:
	push %RBP
	mov -72(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000bef7f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfbcd
	jmp uuid_00000000000bfbcf
uuid_00000000000bfbcd:
	movb $1, -96(%rbp)
uuid_00000000000bfbcf:
	mov -120(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000bfbd2:
	mov -112(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000bfbd5:
	mov -104(%RBP),%RSP
	add $-128, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbdd
	push %RBP
	jmp uuid_00000000000bfbda
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfbd9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfbdc
uuid_00000000000bfbda:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-only-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbd6
	jmp uuid_00000000000bfbd8
uuid_00000000000bfbd6:
#call function fields-of-tag : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call fields_SB_of_SB_tag_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfbd8:
	mov -192(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000bfbdc:
	mov -136(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000bfbdf
uuid_00000000000bfbdd:
uuid_00000000000bfbdf:
	mov -64(%RBP),%RSP
	add $-128, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_tag_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbe6
	jmp uuid_00000000000bfbe8
uuid_00000000000bfbe6:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfbe3
	jmp uuid_00000000000bfbe5
uuid_00000000000bfbe3:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfbe0
	jmp uuid_00000000000bfbe2
uuid_00000000000bfbe0:
	movb $1, -96(%rbp)
uuid_00000000000bfbe2:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bfbe5:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bfbe8:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc42
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc14
	jmp uuid_00000000000bfc16
uuid_00000000000bfc14:
	push %RBP
	jmp uuid_00000000000bfc11
	jmp uuid_00000000000bfc13
uuid_00000000000bfc11:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000bed38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfc0e
	jmp uuid_00000000000bfc10
uuid_00000000000bfc0e:
	movb $1, -208(%rbp)
uuid_00000000000bfc10:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000bfc13:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000bfc16:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc3f
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc1d
	jmp uuid_00000000000bfc1f
uuid_00000000000bfc1d:
	push %RBP
	jmp uuid_00000000000bfc1a
	jmp uuid_00000000000bfc1c
uuid_00000000000bfc1a:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000bef54
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfc17
	jmp uuid_00000000000bfc19
uuid_00000000000bfc17:
	movb $1, -280(%rbp)
uuid_00000000000bfc19:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000bfc1c:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000bfc1f:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc3c
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc26
	jmp uuid_00000000000bfc28
uuid_00000000000bfc26:
	push %RBP
	jmp uuid_00000000000bfc23
	jmp uuid_00000000000bfc25
uuid_00000000000bfc23:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000bef7f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfc20
	jmp uuid_00000000000bfc22
uuid_00000000000bfc20:
	movb $1, -352(%rbp)
uuid_00000000000bfc22:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000bfc25:
	mov -368(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000bfc28:
	mov -360(%RBP),%RSP
	add $-384, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc39
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc2f
	jmp uuid_00000000000bfc31
uuid_00000000000bfc2f:
	push %RBP
	jmp uuid_00000000000bfc2c
	jmp uuid_00000000000bfc2e
uuid_00000000000bfc2c:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq $uuid_00000000000bed3b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfc29
	jmp uuid_00000000000bfc2b
uuid_00000000000bfc29:
	movb $1, -424(%rbp)
uuid_00000000000bfc2b:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000bfc2e:
	mov -440(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000bfc31:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc36
	push %RBP
	jmp uuid_00000000000bfc33
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfc32
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfc35
uuid_00000000000bfc33:
uuid_00000000000bfc35:
	mov -464(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000bfc38
uuid_00000000000bfc36:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfc38:
	mov -392(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000bfc3b
uuid_00000000000bfc39:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfc3b:
	mov -320(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000bfc3e
uuid_00000000000bfc3c:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfc3e:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000bfc41
uuid_00000000000bfc3f:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfc41:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000bfc44
uuid_00000000000bfc42:
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbef
	jmp uuid_00000000000bfbf1
uuid_00000000000bfbef:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	jmp uuid_00000000000bfbec
	jmp uuid_00000000000bfbee
uuid_00000000000bfbec:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbe9
	jmp uuid_00000000000bfbeb
uuid_00000000000bfbe9:
	movb $1, -344(%rbp)
uuid_00000000000bfbeb:
	mov -392(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000bfbee:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000bfbf1:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc0b
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbf8
	jmp uuid_00000000000bfbfa
uuid_00000000000bfbf8:
	push %RBP
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfbf5
	jmp uuid_00000000000bfbf7
uuid_00000000000bfbf5:
	push %RBP
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	jmp uuid_00000000000bfbf2
	jmp uuid_00000000000bfbf4
uuid_00000000000bfbf2:
	movb $1, -488(%rbp)
uuid_00000000000bfbf4:
	mov -536(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000bfbf7:
	mov -504(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000bfbfa:
	mov -496(%RBP),%RSP
	add $-560, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc08
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc01
	jmp uuid_00000000000bfc03
uuid_00000000000bfc01:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	jmp uuid_00000000000bfbfe
	jmp uuid_00000000000bfc00
uuid_00000000000bfbfe:
	push %RBP
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	jmp uuid_00000000000bfbfb
	jmp uuid_00000000000bfbfd
uuid_00000000000bfbfb:
	movb $1, -632(%rbp)
uuid_00000000000bfbfd:
	mov -680(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000bfc00:
	mov -648(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000bfc03:
	mov -640(%RBP),%RSP
	add $-704, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc05
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfc04
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfc07
uuid_00000000000bfc05:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfc07:
	mov -568(%RBP),%RSP
	add $-704, %RSP
	jmp uuid_00000000000bfc0a
uuid_00000000000bfc08:
	movq -560(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -544(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000bfc0a:
	mov -424(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000bfc0d
uuid_00000000000bfc0b:
	movq -384(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000bfc0d:
	mov -280(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000bfc44:
	mov -64(%RBP),%RSP
	add $-416, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_tag_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc4d
	jmp uuid_00000000000bfc4f
uuid_00000000000bfc4d:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfc4a
	jmp uuid_00000000000bfc4c
uuid_00000000000bfc4a:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000bfc47
	jmp uuid_00000000000bfc49
uuid_00000000000bfc47:
	movb $1, -144(%rbp)
uuid_00000000000bfc49:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfc4c:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfc4f:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc54
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc51
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfc50
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfc53
uuid_00000000000bfc51:
uuid_00000000000bfc53:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000bfc56
uuid_00000000000bfc54:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-tag : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfc56:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_constructor_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc5d
	jmp uuid_00000000000bfc5f
uuid_00000000000bfc5d:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfc5a
	jmp uuid_00000000000bfc5c
uuid_00000000000bfc5a:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfc57
	jmp uuid_00000000000bfc59
uuid_00000000000bfc57:
	movb $1, -96(%rbp)
uuid_00000000000bfc59:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bfc5c:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bfc5f:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc82
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc6c
	jmp uuid_00000000000bfc6e
uuid_00000000000bfc6c:
	push %RBP
	jmp uuid_00000000000bfc69
	jmp uuid_00000000000bfc6b
uuid_00000000000bfc69:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000bed38
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfc66
	jmp uuid_00000000000bfc68
uuid_00000000000bfc66:
	movb $1, -208(%rbp)
uuid_00000000000bfc68:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000bfc6b:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000bfc6e:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc7f
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc75
	jmp uuid_00000000000bfc77
uuid_00000000000bfc75:
	push %RBP
	jmp uuid_00000000000bfc72
	jmp uuid_00000000000bfc74
uuid_00000000000bfc72:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000bed39
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfc6f
	jmp uuid_00000000000bfc71
uuid_00000000000bfc6f:
	movb $1, -280(%rbp)
uuid_00000000000bfc71:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000bfc74:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000bfc77:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc7c
	push %RBP
	jmp uuid_00000000000bfc79
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfc78
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfc7b
uuid_00000000000bfc79:
uuid_00000000000bfc7b:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000bfc7e
uuid_00000000000bfc7c:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfc7e:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000bfc81
uuid_00000000000bfc7f:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfc81:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000bfc84
uuid_00000000000bfc82:
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfc63
	movq -136(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -128(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -120(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000bfc65
uuid_00000000000bfc63:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfc60
	movq -168(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -160(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -152(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000bfc62
uuid_00000000000bfc60:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfc62:
	mov -184(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000bfc65:
	mov -176(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000bfc84:
	mov -64(%RBP),%RSP
	add $-184, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_representation_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc8d
	jmp uuid_00000000000bfc8f
uuid_00000000000bfc8d:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfc8a
	jmp uuid_00000000000bfc8c
uuid_00000000000bfc8a:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000bfc87
	jmp uuid_00000000000bfc89
uuid_00000000000bfc87:
	movb $1, -144(%rbp)
uuid_00000000000bfc89:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfc8c:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfc8f:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc94
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc91
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfc90
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfc93
uuid_00000000000bfc91:
uuid_00000000000bfc93:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000bfc96
uuid_00000000000bfc94:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-representation : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfc96:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_representation_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfc9d
	jmp uuid_00000000000bfc9f
uuid_00000000000bfc9d:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfc9a
	jmp uuid_00000000000bfc9c
uuid_00000000000bfc9a:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfc97
	jmp uuid_00000000000bfc99
uuid_00000000000bfc97:
	movb $1, -96(%rbp)
uuid_00000000000bfc99:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bfc9c:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bfc9f:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd2f
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfcaf
	jmp uuid_00000000000bfcb1
uuid_00000000000bfcaf:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfcac
	jmp uuid_00000000000bfcae
uuid_00000000000bfcac:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq $uuid_00000000000bf13a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfca9
	jmp uuid_00000000000bfcab
uuid_00000000000bfca9:
	movb $1, -208(%rbp)
uuid_00000000000bfcab:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000bfcae:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000bfcb1:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd2c
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfcb9
	jmp uuid_00000000000bfcbb
uuid_00000000000bfcb9:
	push %RBP
	mov -304(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfcb6
	jmp uuid_00000000000bfcb8
uuid_00000000000bfcb6:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000bfcb2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfcb3
	jmp uuid_00000000000bfcb5
uuid_00000000000bfcb3:
	movb $1, -320(%rbp)
uuid_00000000000bfcb5:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000bfcb8:
	mov -336(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000bfcbb:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd29
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfcc2
	jmp uuid_00000000000bfcc4
uuid_00000000000bfcc2:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfcbf
	jmp uuid_00000000000bfcc1
uuid_00000000000bfcbf:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -504(%rbp)
	pushq $uuid_00000000000becb0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfcbc
	jmp uuid_00000000000bfcbe
uuid_00000000000bfcbc:
	movb $1, -432(%rbp)
uuid_00000000000bfcbe:
	mov -496(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000bfcc1:
	mov -448(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000bfcc4:
	mov -440(%RBP),%RSP
	add $-504, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd26
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfccb
	jmp uuid_00000000000bfccd
uuid_00000000000bfccb:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfcc8
	jmp uuid_00000000000bfcca
uuid_00000000000bfcc8:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq $uuid_00000000000bf1a0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfcc5
	jmp uuid_00000000000bfcc7
uuid_00000000000bfcc5:
	movb $1, -544(%rbp)
uuid_00000000000bfcc7:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000bfcca:
	mov -560(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000bfccd:
	mov -552(%RBP),%RSP
	add $-616, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd23
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfcd4
	jmp uuid_00000000000bfcd6
uuid_00000000000bfcd4:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfcd1
	jmp uuid_00000000000bfcd3
uuid_00000000000bfcd1:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq $uuid_00000000000beaf8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfcce
	jmp uuid_00000000000bfcd0
uuid_00000000000bfcce:
	movb $1, -656(%rbp)
uuid_00000000000bfcd0:
	mov -720(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000bfcd3:
	mov -672(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000bfcd6:
	mov -664(%RBP),%RSP
	add $-728, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd20
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfcdd
	jmp uuid_00000000000bfcdf
uuid_00000000000bfcdd:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfcda
	jmp uuid_00000000000bfcdc
uuid_00000000000bfcda:
	push %RBP
	mov -744(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq $uuid_00000000000bec07
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfcd7
	jmp uuid_00000000000bfcd9
uuid_00000000000bfcd7:
	movb $1, -768(%rbp)
uuid_00000000000bfcd9:
	mov -832(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000bfcdc:
	mov -784(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000bfcdf:
	mov -776(%RBP),%RSP
	add $-840, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd1d
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfce6
	jmp uuid_00000000000bfce8
uuid_00000000000bfce6:
	push %RBP
	mov -864(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -936(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfce3
	jmp uuid_00000000000bfce5
uuid_00000000000bfce3:
	push %RBP
	mov -856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq $uuid_00000000000bec0b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfce0
	jmp uuid_00000000000bfce2
uuid_00000000000bfce0:
	movb $1, -880(%rbp)
uuid_00000000000bfce2:
	mov -944(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000bfce5:
	mov -896(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000bfce8:
	mov -888(%RBP),%RSP
	add $-952, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd1a
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -984(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfcef
	jmp uuid_00000000000bfcf1
uuid_00000000000bfcef:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfcec
	jmp uuid_00000000000bfcee
uuid_00000000000bfcec:
	push %RBP
	mov -968(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq $uuid_00000000000bec0f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfce9
	jmp uuid_00000000000bfceb
uuid_00000000000bfce9:
	movb $1, -992(%rbp)
uuid_00000000000bfceb:
	mov -1056(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000bfcee:
	mov -1008(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000bfcf1:
	mov -1000(%RBP),%RSP
	add $-1064, %RSP
	mov -992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd17
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -1096(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfcf8
	jmp uuid_00000000000bfcfa
uuid_00000000000bfcf8:
	push %RBP
	mov -1088(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfcf5
	jmp uuid_00000000000bfcf7
uuid_00000000000bfcf5:
	push %RBP
	mov -1080(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq $uuid_00000000000bec13
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfcf2
	jmp uuid_00000000000bfcf4
uuid_00000000000bfcf2:
	movb $1, -1104(%rbp)
uuid_00000000000bfcf4:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000bfcf7:
	mov -1120(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000bfcfa:
	mov -1112(%RBP),%RSP
	add $-1176, %RSP
	mov -1104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd14
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd01
	jmp uuid_00000000000bfd03
uuid_00000000000bfd01:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfcfe
	jmp uuid_00000000000bfd00
uuid_00000000000bfcfe:
	push %RBP
	mov -1192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bfcfb
	jmp uuid_00000000000bfcfd
uuid_00000000000bfcfb:
	movb $1, -1216(%rbp)
uuid_00000000000bfcfd:
	mov -1280(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000bfd00:
	mov -1232(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000bfd03:
	mov -1224(%RBP),%RSP
	add $-1288, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd11
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd0e
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd07
	jmp uuid_00000000000bfd09
uuid_00000000000bfd07:
	push %RBP
	jmp uuid_00000000000bfd04
	jmp uuid_00000000000bfd06
uuid_00000000000bfd04:
	movb $1, -1360(%rbp)
uuid_00000000000bfd06:
	mov -1376(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000bfd09:
	mov -1368(%RBP),%RSP
	add $-1376, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd0b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfd0a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfd0d
uuid_00000000000bfd0b:
uuid_00000000000bfd0d:
	mov -1328(%RBP),%RSP
	add $-1376, %RSP
	jmp uuid_00000000000bfd10
uuid_00000000000bfd0e:
uuid_00000000000bfd10:
	mov -1296(%RBP),%RSP
	add $-1320, %RSP
	jmp uuid_00000000000bfd13
uuid_00000000000bfd11:
	pushq -1288(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfd13:
	mov -1184(%RBP),%RSP
	add $-1288, %RSP
	jmp uuid_00000000000bfd16
uuid_00000000000bfd14:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfd16:
	mov -1072(%RBP),%RSP
	add $-1176, %RSP
	jmp uuid_00000000000bfd19
uuid_00000000000bfd17:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfd19:
	mov -960(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000bfd1c
uuid_00000000000bfd1a:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfd1c:
	mov -848(%RBP),%RSP
	add $-952, %RSP
	jmp uuid_00000000000bfd1f
uuid_00000000000bfd1d:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfd1f:
	mov -736(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000bfd22
uuid_00000000000bfd20:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfd22:
	mov -624(%RBP),%RSP
	add $-728, %RSP
	jmp uuid_00000000000bfd25
uuid_00000000000bfd23:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfd25:
	mov -512(%RBP),%RSP
	add $-616, %RSP
	jmp uuid_00000000000bfd28
uuid_00000000000bfd26:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfd28:
	mov -400(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000bfd2b
uuid_00000000000bfd29:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfd2b:
	mov -288(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000bfd2e
uuid_00000000000bfd2c:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfd2e:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000bfd31
uuid_00000000000bfd2f:
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfca6
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfca3
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000bfca5
uuid_00000000000bfca3:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000bfca5:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000bfca8
uuid_00000000000bfca6:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfca0
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000bfca2
uuid_00000000000bfca0:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfca2:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfca8:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfd31:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd3a
	jmp uuid_00000000000bfd3c
uuid_00000000000bfd3a:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfd37
	jmp uuid_00000000000bfd39
uuid_00000000000bfd37:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000bfd34
	jmp uuid_00000000000bfd36
uuid_00000000000bfd34:
	movb $1, -144(%rbp)
uuid_00000000000bfd36:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfd39:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfd3c:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd41
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd3e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfd3d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfd40
uuid_00000000000bfd3e:
uuid_00000000000bfd40:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000bfd43
uuid_00000000000bfd41:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size-unless-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size-unless-class : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfd43:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_size_SB_unless_SB_class_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd4a
	jmp uuid_00000000000bfd4c
uuid_00000000000bfd4a:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfd47
	jmp uuid_00000000000bfd49
uuid_00000000000bfd47:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfd44
	jmp uuid_00000000000bfd46
uuid_00000000000bfd44:
	movb $1, -96(%rbp)
uuid_00000000000bfd46:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bfd49:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bfd4c:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd6f
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd5c
	jmp uuid_00000000000bfd5e
uuid_00000000000bfd5c:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfd59
	jmp uuid_00000000000bfd5b
uuid_00000000000bfd59:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bfd56
	jmp uuid_00000000000bfd58
uuid_00000000000bfd56:
	movb $1, -208(%rbp)
uuid_00000000000bfd58:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000bfd5b:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000bfd5e:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd6c
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd69
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd62
	jmp uuid_00000000000bfd64
uuid_00000000000bfd62:
	push %RBP
	jmp uuid_00000000000bfd5f
	jmp uuid_00000000000bfd61
uuid_00000000000bfd5f:
	movb $1, -352(%rbp)
uuid_00000000000bfd61:
	mov -368(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000bfd64:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd66
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfd65
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfd68
uuid_00000000000bfd66:
uuid_00000000000bfd68:
	mov -320(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000bfd6b
uuid_00000000000bfd69:
uuid_00000000000bfd6b:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000bfd6e
uuid_00000000000bfd6c:
	pushq -280(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size-unless-class : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfd6e:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000bfd71
uuid_00000000000bfd6f:
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfd53
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfd50
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000bfd52
uuid_00000000000bfd50:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000bfd52:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000bfd55
uuid_00000000000bfd53:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfd4d
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000bfd4f
uuid_00000000000bfd4d:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfd4f:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfd55:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfd71:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd78
	jmp uuid_00000000000bfd7a
uuid_00000000000bfd78:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfd75
	jmp uuid_00000000000bfd77
uuid_00000000000bfd75:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfd72
	jmp uuid_00000000000bfd74
uuid_00000000000bfd72:
	movb $1, -96(%rbp)
uuid_00000000000bfd74:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bfd77:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bfd7a:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfdb5
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd8a
	jmp uuid_00000000000bfd8c
uuid_00000000000bfd8a:
	push %RBP
	jmp uuid_00000000000bfd87
	jmp uuid_00000000000bfd89
uuid_00000000000bfd87:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000bed3b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfd84
	jmp uuid_00000000000bfd86
uuid_00000000000bfd84:
	movb $1, -208(%rbp)
uuid_00000000000bfd86:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000bfd89:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000bfd8c:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfdb2
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd93
	jmp uuid_00000000000bfd95
uuid_00000000000bfd93:
	push %RBP
	jmp uuid_00000000000bfd90
	jmp uuid_00000000000bfd92
uuid_00000000000bfd90:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000bed3a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfd8d
	jmp uuid_00000000000bfd8f
uuid_00000000000bfd8d:
	movb $1, -280(%rbp)
uuid_00000000000bfd8f:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000bfd92:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000bfd95:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfdaf
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfd9c
	jmp uuid_00000000000bfd9e
uuid_00000000000bfd9c:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfd99
	jmp uuid_00000000000bfd9b
uuid_00000000000bfd99:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bfd96
	jmp uuid_00000000000bfd98
uuid_00000000000bfd96:
	movb $1, -352(%rbp)
uuid_00000000000bfd98:
	mov -416(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000bfd9b:
	mov -368(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000bfd9e:
	mov -360(%RBP),%RSP
	add $-424, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfdac
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfda9
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfda2
	jmp uuid_00000000000bfda4
uuid_00000000000bfda2:
	push %RBP
	jmp uuid_00000000000bfd9f
	jmp uuid_00000000000bfda1
uuid_00000000000bfd9f:
	movb $1, -496(%rbp)
uuid_00000000000bfda1:
	mov -512(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000bfda4:
	mov -504(%RBP),%RSP
	add $-512, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfda6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfda5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfda8
uuid_00000000000bfda6:
uuid_00000000000bfda8:
	mov -464(%RBP),%RSP
	add $-512, %RSP
	jmp uuid_00000000000bfdab
uuid_00000000000bfda9:
uuid_00000000000bfdab:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000bfdae
uuid_00000000000bfdac:
	pushq -424(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size-unless-class : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfdae:
	mov -320(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000bfdb1
uuid_00000000000bfdaf:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfdb1:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000bfdb4
uuid_00000000000bfdb2:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfdb4:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000bfdb7
uuid_00000000000bfdb5:
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfd81
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfd7e
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000bfd80
uuid_00000000000bfd7e:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000bfd80:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000bfd83
uuid_00000000000bfd81:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfd7b
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000bfd7d
uuid_00000000000bfd7b:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfd7d:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfd83:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfdb7:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_size_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfdc0
	jmp uuid_00000000000bfdc2
uuid_00000000000bfdc0:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfdbd
	jmp uuid_00000000000bfdbf
uuid_00000000000bfdbd:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000bfdba
	jmp uuid_00000000000bfdbc
uuid_00000000000bfdba:
	movb $1, -144(%rbp)
uuid_00000000000bfdbc:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfdbf:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfdc2:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfdc7
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfdc4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfdc3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfdc6
uuid_00000000000bfdc4:
uuid_00000000000bfdc6:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000bfdc9
uuid_00000000000bfdc7:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfdc9:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_size_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfdd0
	jmp uuid_00000000000bfdd2
uuid_00000000000bfdd0:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfdcd
	jmp uuid_00000000000bfdcf
uuid_00000000000bfdcd:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfdca
	jmp uuid_00000000000bfdcc
uuid_00000000000bfdca:
	movb $1, -96(%rbp)
uuid_00000000000bfdcc:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bfdcf:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000bfdd2:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe0d
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfde2
	jmp uuid_00000000000bfde4
uuid_00000000000bfde2:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfddf
	jmp uuid_00000000000bfde1
uuid_00000000000bfddf:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq $uuid_00000000000bed3a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfddc
	jmp uuid_00000000000bfdde
uuid_00000000000bfddc:
	movb $1, -208(%rbp)
uuid_00000000000bfdde:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000bfde1:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000bfde4:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe0a
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfdeb
	jmp uuid_00000000000bfded
uuid_00000000000bfdeb:
	push %RBP
	mov -304(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfde8
	jmp uuid_00000000000bfdea
uuid_00000000000bfde8:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000bed3b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfde5
	jmp uuid_00000000000bfde7
uuid_00000000000bfde5:
	movb $1, -320(%rbp)
uuid_00000000000bfde7:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000bfdea:
	mov -336(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000bfded:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe07
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfdf4
	jmp uuid_00000000000bfdf6
uuid_00000000000bfdf4:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfdf1
	jmp uuid_00000000000bfdf3
uuid_00000000000bfdf1:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bfdee
	jmp uuid_00000000000bfdf0
uuid_00000000000bfdee:
	movb $1, -432(%rbp)
uuid_00000000000bfdf0:
	mov -496(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000bfdf3:
	mov -448(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000bfdf6:
	mov -440(%RBP),%RSP
	add $-504, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe04
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe01
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfdfa
	jmp uuid_00000000000bfdfc
uuid_00000000000bfdfa:
	push %RBP
	jmp uuid_00000000000bfdf7
	jmp uuid_00000000000bfdf9
uuid_00000000000bfdf7:
	movb $1, -576(%rbp)
uuid_00000000000bfdf9:
	mov -592(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000bfdfc:
	mov -584(%RBP),%RSP
	add $-592, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfdfe
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfdfd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfe00
uuid_00000000000bfdfe:
uuid_00000000000bfe00:
	mov -544(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000bfe03
uuid_00000000000bfe01:
uuid_00000000000bfe03:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000bfe06
uuid_00000000000bfe04:
	pushq -504(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfe06:
	mov -400(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000bfe09
uuid_00000000000bfe07:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfe09:
	mov -288(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000bfe0c
uuid_00000000000bfe0a:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfe0c:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000bfe0f
uuid_00000000000bfe0d:
#call function without-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfdd9
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfdd6
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000bfdd8
uuid_00000000000bfdd6:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000bfdd8:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000bfddb
uuid_00000000000bfdd9:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfdd3
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000bfdd5
uuid_00000000000bfdd3:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bfdd5:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfddb:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000bfe0f:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_only_SB_tag_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe16
	jmp uuid_00000000000bfe18
uuid_00000000000bfe16:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfe13
	jmp uuid_00000000000bfe15
uuid_00000000000bfe13:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfe10
	jmp uuid_00000000000bfe12
uuid_00000000000bfe10:
	movb $1, -120(%rbp)
uuid_00000000000bfe12:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000bfe15:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000bfe18:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe2f
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe25
	jmp uuid_00000000000bfe27
uuid_00000000000bfe25:
	push %RBP
	jmp uuid_00000000000bfe22
	jmp uuid_00000000000bfe24
uuid_00000000000bfe22:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq $uuid_00000000000bef54
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfe1f
	jmp uuid_00000000000bfe21
uuid_00000000000bfe1f:
	movb $1, -232(%rbp)
uuid_00000000000bfe21:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000bfe24:
	mov -248(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000bfe27:
	mov -240(%RBP),%RSP
	add $-264, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe2c
	push %RBP
	jmp uuid_00000000000bfe29
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfe28
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfe2b
uuid_00000000000bfe29:
uuid_00000000000bfe2b:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000bfe2e
uuid_00000000000bfe2c:
	movq -24(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000bfe2e:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000bfe31
uuid_00000000000bfe2f:
#call function with-only-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfe1c
#call function with-only-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfe19
	jmp uuid_00000000000bfe1b
uuid_00000000000bfe19:
	movq -248(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -240(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000bfe1b:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000bfe1e
uuid_00000000000bfe1c:
	movq -216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000bfe1e:
	mov -224(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000bfe31:
	mov -88(%RBP),%RSP
	add $-224, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_only_SB_class_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe38
	jmp uuid_00000000000bfe3a
uuid_00000000000bfe38:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfe35
	jmp uuid_00000000000bfe37
uuid_00000000000bfe35:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfe32
	jmp uuid_00000000000bfe34
uuid_00000000000bfe32:
	movb $1, -120(%rbp)
uuid_00000000000bfe34:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000bfe37:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000bfe3a:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe57
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe47
	jmp uuid_00000000000bfe49
uuid_00000000000bfe47:
	push %RBP
	jmp uuid_00000000000bfe44
	jmp uuid_00000000000bfe46
uuid_00000000000bfe44:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bfe41
	jmp uuid_00000000000bfe43
uuid_00000000000bfe41:
	movb $1, -232(%rbp)
uuid_00000000000bfe43:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000bfe46:
	mov -248(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000bfe49:
	mov -240(%RBP),%RSP
	add $-264, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe54
	push %RBP
	jmp uuid_00000000000bfe51
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfe50
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfe53
uuid_00000000000bfe51:
uuid_00000000000bfe53:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000bfe56
uuid_00000000000bfe54:
	push %RBP
#call function is-class : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call is_SB_class_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfe4d
	jmp uuid_00000000000bfe4f
uuid_00000000000bfe4d:
	push %RBP
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function is-fragment : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call is_SB_fragment_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfe4a
	jmp uuid_00000000000bfe4c
uuid_00000000000bfe4a:
	movq -24(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000bfe4c:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000bfe4f:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000bfe56:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000bfe59
uuid_00000000000bfe57:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfe3b
	jmp uuid_00000000000bfe3d
uuid_00000000000bfe3b:
	movq -216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000bfe3d:
	mov -224(%RBP),%RSP
	add $-224, %RSP
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfe3e
	jmp uuid_00000000000bfe40
uuid_00000000000bfe3e:
	movq -248(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -240(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000bfe40:
	mov -256(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000bfe59:
	mov -88(%RBP),%RSP
	add $-256, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_only_SB_representation_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe62
	jmp uuid_00000000000bfe64
uuid_00000000000bfe62:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfe5f
	jmp uuid_00000000000bfe61
uuid_00000000000bfe5f:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000bfe5c
	jmp uuid_00000000000bfe5e
uuid_00000000000bfe5c:
	movb $1, -184(%rbp)
uuid_00000000000bfe5e:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000bfe61:
	mov -200(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000bfe64:
	mov -192(%RBP),%RSP
	add $-272, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe69
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe66
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfe65
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfe68
uuid_00000000000bfe66:
uuid_00000000000bfe68:
	mov -280(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000bfe6b
uuid_00000000000bfe69:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-only-representation : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000bfe6b:
	mov -136(%RBP),%RSP
	add $-272, %RSP
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
with_SB_only_SB_representation_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe72
	jmp uuid_00000000000bfe74
uuid_00000000000bfe72:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfe6f
	jmp uuid_00000000000bfe71
uuid_00000000000bfe6f:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfe6c
	jmp uuid_00000000000bfe6e
uuid_00000000000bfe6c:
	movb $1, -120(%rbp)
uuid_00000000000bfe6e:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000bfe71:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000bfe74:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bff03
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe84
	jmp uuid_00000000000bfe86
uuid_00000000000bfe84:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe81
	jmp uuid_00000000000bfe83
uuid_00000000000bfe81:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq $uuid_00000000000bf13a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfe7e
	jmp uuid_00000000000bfe80
uuid_00000000000bfe7e:
	movb $1, -232(%rbp)
uuid_00000000000bfe80:
	mov -296(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000bfe83:
	mov -248(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000bfe86:
	mov -240(%RBP),%RSP
	add $-304, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bff00
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe8d
	jmp uuid_00000000000bfe8f
uuid_00000000000bfe8d:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe8a
	jmp uuid_00000000000bfe8c
uuid_00000000000bfe8a:
	push %RBP
	mov -320(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -416(%rbp)
	pushq $uuid_00000000000bfcb2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfe87
	jmp uuid_00000000000bfe89
uuid_00000000000bfe87:
	movb $1, -344(%rbp)
uuid_00000000000bfe89:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000bfe8c:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000bfe8f:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfefd
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe96
	jmp uuid_00000000000bfe98
uuid_00000000000bfe96:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe93
	jmp uuid_00000000000bfe95
uuid_00000000000bfe93:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq $uuid_00000000000becb0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfe90
	jmp uuid_00000000000bfe92
uuid_00000000000bfe90:
	movb $1, -456(%rbp)
uuid_00000000000bfe92:
	mov -520(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000bfe95:
	mov -472(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000bfe98:
	mov -464(%RBP),%RSP
	add $-528, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfefa
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe9f
	jmp uuid_00000000000bfea1
uuid_00000000000bfe9f:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfe9c
	jmp uuid_00000000000bfe9e
uuid_00000000000bfe9c:
	push %RBP
	mov -544(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -640(%rbp)
	pushq $uuid_00000000000bf1a0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfe99
	jmp uuid_00000000000bfe9b
uuid_00000000000bfe99:
	movb $1, -568(%rbp)
uuid_00000000000bfe9b:
	mov -632(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000bfe9e:
	mov -584(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000bfea1:
	mov -576(%RBP),%RSP
	add $-640, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfef7
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfea8
	jmp uuid_00000000000bfeaa
uuid_00000000000bfea8:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfea5
	jmp uuid_00000000000bfea7
uuid_00000000000bfea5:
	push %RBP
	mov -656(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -752(%rbp)
	pushq $uuid_00000000000beaf8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfea2
	jmp uuid_00000000000bfea4
uuid_00000000000bfea2:
	movb $1, -680(%rbp)
uuid_00000000000bfea4:
	mov -744(%RBP),%RSP
	add $-752, %RSP
uuid_00000000000bfea7:
	mov -696(%RBP),%RSP
	add $-752, %RSP
uuid_00000000000bfeaa:
	mov -688(%RBP),%RSP
	add $-752, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfef4
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -784(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfeb1
	jmp uuid_00000000000bfeb3
uuid_00000000000bfeb1:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfeae
	jmp uuid_00000000000bfeb0
uuid_00000000000bfeae:
	push %RBP
	mov -768(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq $uuid_00000000000bec07
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfeab
	jmp uuid_00000000000bfead
uuid_00000000000bfeab:
	movb $1, -792(%rbp)
uuid_00000000000bfead:
	mov -856(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000bfeb0:
	mov -808(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000bfeb3:
	mov -800(%RBP),%RSP
	add $-864, %RSP
	mov -792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfef1
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfeba
	jmp uuid_00000000000bfebc
uuid_00000000000bfeba:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfeb7
	jmp uuid_00000000000bfeb9
uuid_00000000000bfeb7:
	push %RBP
	mov -880(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq $uuid_00000000000bec0b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfeb4
	jmp uuid_00000000000bfeb6
uuid_00000000000bfeb4:
	movb $1, -904(%rbp)
uuid_00000000000bfeb6:
	mov -968(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000bfeb9:
	mov -920(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000bfebc:
	mov -912(%RBP),%RSP
	add $-976, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfeee
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1008(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfec3
	jmp uuid_00000000000bfec5
uuid_00000000000bfec3:
	push %RBP
	mov -1000(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1072(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfec0
	jmp uuid_00000000000bfec2
uuid_00000000000bfec0:
	push %RBP
	mov -992(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1088(%rbp)
	pushq $uuid_00000000000bec0f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfebd
	jmp uuid_00000000000bfebf
uuid_00000000000bfebd:
	movb $1, -1016(%rbp)
uuid_00000000000bfebf:
	mov -1080(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000bfec2:
	mov -1032(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000bfec5:
	mov -1024(%RBP),%RSP
	add $-1088, %RSP
	mov -1016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfeeb
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfecc
	jmp uuid_00000000000bfece
uuid_00000000000bfecc:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfec9
	jmp uuid_00000000000bfecb
uuid_00000000000bfec9:
	push %RBP
	mov -1104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1200(%rbp)
	pushq $uuid_00000000000bec13
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfec6
	jmp uuid_00000000000bfec8
uuid_00000000000bfec6:
	movb $1, -1128(%rbp)
uuid_00000000000bfec8:
	mov -1192(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000bfecb:
	mov -1144(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000bfece:
	mov -1136(%RBP),%RSP
	add $-1200, %RSP
	mov -1128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfee8
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfed5
	jmp uuid_00000000000bfed7
uuid_00000000000bfed5:
	push %RBP
	mov -1224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bfed2
	jmp uuid_00000000000bfed4
uuid_00000000000bfed2:
	push %RBP
	mov -1216(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bfecf
	jmp uuid_00000000000bfed1
uuid_00000000000bfecf:
	movb $1, -1240(%rbp)
uuid_00000000000bfed1:
	mov -1304(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000bfed4:
	mov -1256(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000bfed7:
	mov -1248(%RBP),%RSP
	add $-1312, %RSP
	mov -1240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfee5
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -1344(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfee2
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfedb
	jmp uuid_00000000000bfedd
uuid_00000000000bfedb:
	push %RBP
	jmp uuid_00000000000bfed8
	jmp uuid_00000000000bfeda
uuid_00000000000bfed8:
	movb $1, -1384(%rbp)
uuid_00000000000bfeda:
	mov -1400(%RBP),%RSP
	add $-1400, %RSP
uuid_00000000000bfedd:
	mov -1392(%RBP),%RSP
	add $-1400, %RSP
	mov -1384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfedf
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bfede
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bfee1
uuid_00000000000bfedf:
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000bfee1:
	mov -1352(%RBP),%RSP
	add $-1400, %RSP
	jmp uuid_00000000000bfee4
uuid_00000000000bfee2:
uuid_00000000000bfee4:
	mov -1320(%RBP),%RSP
	add $-1344, %RSP
	jmp uuid_00000000000bfee7
uuid_00000000000bfee5:
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000bfee7:
	mov -1208(%RBP),%RSP
	add $-1312, %RSP
	jmp uuid_00000000000bfeea
uuid_00000000000bfee8:
uuid_00000000000bfeea:
	mov -1096(%RBP),%RSP
	add $-1200, %RSP
	jmp uuid_00000000000bfeed
uuid_00000000000bfeeb:
uuid_00000000000bfeed:
	mov -984(%RBP),%RSP
	add $-1088, %RSP
	jmp uuid_00000000000bfef0
uuid_00000000000bfeee:
uuid_00000000000bfef0:
	mov -872(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000bfef3
uuid_00000000000bfef1:
uuid_00000000000bfef3:
	mov -760(%RBP),%RSP
	add $-864, %RSP
	jmp uuid_00000000000bfef6
uuid_00000000000bfef4:
uuid_00000000000bfef6:
	mov -648(%RBP),%RSP
	add $-752, %RSP
	jmp uuid_00000000000bfef9
uuid_00000000000bfef7:
uuid_00000000000bfef9:
	mov -536(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000bfefc
uuid_00000000000bfefa:
uuid_00000000000bfefc:
	mov -424(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000bfeff
uuid_00000000000bfefd:
uuid_00000000000bfeff:
	mov -312(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000bff02
uuid_00000000000bff00:
uuid_00000000000bff02:
	mov -200(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000bff05
uuid_00000000000bff03:
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfe7b
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfe78
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	jmp uuid_00000000000bfe7a
uuid_00000000000bfe78:
	movq -240(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000bfe7a:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000bfe7d
uuid_00000000000bfe7b:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfe75
	movq -216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -40(%rbp)
	jmp uuid_00000000000bfe77
uuid_00000000000bfe75:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000bfe77:
	mov -256(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000bfe7d:
	mov -248(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000bff05:
	mov -88(%RBP),%RSP
	add $-256, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
normalize_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function without-size-unless-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
normalize_CL_ArrowTContextTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bff1c
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bff19
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bff12
	jmp uuid_00000000000bff14
uuid_00000000000bff12:
	push %RBP
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000bff0f
	jmp uuid_00000000000bff11
uuid_00000000000bff0f:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000bff0c
	jmp uuid_00000000000bff0e
uuid_00000000000bff0c:
	push %RBP
	mov -528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bff09
	jmp uuid_00000000000bff0b
uuid_00000000000bff09:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bff06
	jmp uuid_00000000000bff08
uuid_00000000000bff06:
	movb $1, -640(%rbp)
uuid_00000000000bff08:
	mov -784(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000bff0b:
	mov -768(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000bff0e:
	mov -736(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000bff11:
	mov -656(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000bff14:
	mov -648(%RBP),%RSP
	add $-904, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bff16
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bff15
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bff18
uuid_00000000000bff16:
#call function normalize : Arrow<TContext,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -776(%rbp)
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bff18:
	mov -512(%RBP),%RSP
	add $-904, %RSP
	jmp uuid_00000000000bff1b
uuid_00000000000bff19:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bff1b:
	mov -384(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000bff1e
uuid_00000000000bff1c:
uuid_00000000000bff1e:
	mov -256(%RBP),%RSP
	add $-376, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $128, %rsp
	ret
denormalize_CL_ArrowTypeType:
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function with-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function with-fields : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_fields_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
enrich_CL_ArrowTypeConsTypeType:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bff1f
	jmp uuid_00000000000bff21
uuid_00000000000bff1f:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000bff21:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
type_SB_of_SB_s_CL_ArrowTypeAST:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bff28
	jmp uuid_00000000000bff2a
uuid_00000000000bff28:
	push %RBP
	jmp uuid_00000000000bff25
	jmp uuid_00000000000bff27
uuid_00000000000bff25:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bff22
	jmp uuid_00000000000bff24
uuid_00000000000bff22:
	movb $1, -264(%rbp)
uuid_00000000000bff24:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000bff27:
	mov -280(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000bff2a:
	mov -272(%RBP),%RSP
	add $-296, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bff5a
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bff31
	jmp uuid_00000000000bff33
uuid_00000000000bff31:
	push %RBP
	jmp uuid_00000000000bff2e
	jmp uuid_00000000000bff30
uuid_00000000000bff2e:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bff2b
	jmp uuid_00000000000bff2d
uuid_00000000000bff2b:
	movb $1, -384(%rbp)
uuid_00000000000bff2d:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000bff30:
	mov -400(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000bff33:
	mov -392(%RBP),%RSP
	add $-416, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bff57
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bff4c
	jmp uuid_00000000000bff4e
uuid_00000000000bff4c:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bff49
	jmp uuid_00000000000bff4b
uuid_00000000000bff49:
	push %RBP
	mov -480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bff43
	jmp uuid_00000000000bff45
uuid_00000000000bff43:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bff3a
	jmp uuid_00000000000bff3c
uuid_00000000000bff3a:
	push %RBP
	jmp uuid_00000000000bff37
	jmp uuid_00000000000bff39
uuid_00000000000bff37:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq $uuid_00000000000bea0b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bff34
	jmp uuid_00000000000bff36
uuid_00000000000bff34:
	movb $1, -776(%rbp)
uuid_00000000000bff36:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000bff39:
	mov -792(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000bff3c:
	mov -784(%RBP),%RSP
	add $-808, %RSP
	mov -776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bff40
	jmp uuid_00000000000bff42
uuid_00000000000bff40:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bff3d
	jmp uuid_00000000000bff3f
uuid_00000000000bff3d:
	movb $1, -680(%rbp)
uuid_00000000000bff3f:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000bff42:
	mov -696(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000bff45:
	mov -688(%RBP),%RSP
	add $-888, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bff46
	jmp uuid_00000000000bff48
uuid_00000000000bff46:
	movb $1, -504(%rbp)
uuid_00000000000bff48:
	mov -600(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000bff4b:
	mov -520(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000bff4e:
	mov -512(%RBP),%RSP
	add $-888, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bff54
	push %RBP
	jmp uuid_00000000000bff51
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bff50
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bff53
uuid_00000000000bff51:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bff4f
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bff53:
	mov -896(%RBP),%RSP
	add $-896, %RSP
	jmp uuid_00000000000bff56
uuid_00000000000bff54:
#call function type-of-s : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function type-of-s : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beafa
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000bff56:
	mov -424(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000bff59
uuid_00000000000bff57:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -416(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -440(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000bff59:
	mov -304(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000bff5c
uuid_00000000000bff5a:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -320(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000bff5c:
	mov -184(%RBP),%RSP
	add $-320, %RSP
	subq $24, %rsp
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType:
	pushq $0
	pushq $0
	pushq $3
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bff63
	jmp uuid_00000000000bff65
uuid_00000000000bff63:
	push %RBP
	jmp uuid_00000000000bff60
	jmp uuid_00000000000bff62
uuid_00000000000bff60:
	push %RBP
	mov -232(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bff5d
	jmp uuid_00000000000bff5f
uuid_00000000000bff5d:
	movb $1, -304(%rbp)
uuid_00000000000bff5f:
	mov -328(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000bff62:
	mov -320(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000bff65:
	mov -312(%RBP),%RSP
	add $-336, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bffc7
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bff86
	jmp uuid_00000000000bff88
uuid_00000000000bff86:
	push %RBP
	jmp uuid_00000000000bff83
	jmp uuid_00000000000bff85
uuid_00000000000bff83:
	push %RBP
	mov -352(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bff80
	jmp uuid_00000000000bff82
uuid_00000000000bff80:
	movb $1, -424(%rbp)
uuid_00000000000bff82:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000bff85:
	mov -440(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000bff88:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bffc4
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bffba
	jmp uuid_00000000000bffbc
uuid_00000000000bffba:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bffb7
	jmp uuid_00000000000bffb9
uuid_00000000000bffb7:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bffb1
	jmp uuid_00000000000bffb3
uuid_00000000000bffb1:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -808(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bffa8
	jmp uuid_00000000000bffaa
uuid_00000000000bffa8:
	push %RBP
	jmp uuid_00000000000bffa5
	jmp uuid_00000000000bffa7
uuid_00000000000bffa5:
	push %RBP
	mov -744(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq $uuid_00000000000bea0b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bffa2
	jmp uuid_00000000000bffa4
uuid_00000000000bffa2:
	movb $1, -816(%rbp)
uuid_00000000000bffa4:
	mov -840(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000bffa7:
	mov -832(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000bffaa:
	mov -824(%RBP),%RSP
	add $-848, %RSP
	mov -816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bffae
	jmp uuid_00000000000bffb0
uuid_00000000000bffae:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000bffab
	jmp uuid_00000000000bffad
uuid_00000000000bffab:
	movb $1, -720(%rbp)
uuid_00000000000bffad:
	mov -856(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000bffb0:
	mov -736(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000bffb3:
	mov -728(%RBP),%RSP
	add $-928, %RSP
	mov -720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bffb4
	jmp uuid_00000000000bffb6
uuid_00000000000bffb4:
	movb $1, -544(%rbp)
uuid_00000000000bffb6:
	mov -640(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000bffb9:
	mov -560(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000bffbc:
	mov -552(%RBP),%RSP
	add $-928, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bffc1
	push %RBP
	jmp uuid_00000000000bffbe
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bffbd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bffc0
uuid_00000000000bffbe:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bff4f
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000bffc0:
	mov -936(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000bffc3
uuid_00000000000bffc1:
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beafa
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000bffc3:
	mov -464(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000bffc6
uuid_00000000000bffc4:
	pushq $0
	pushq $0
	pushq $3
#call function parse-field-of : Arrow<String,Tuple<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	mov %RBX, %RBP
	call parse_SB_field_SB_of_CL_ArrowTupleTypeStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bff8f
	jmp uuid_00000000000bff91
uuid_00000000000bff8f:
	push %RBP
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	jmp uuid_00000000000bff8c
	jmp uuid_00000000000bff8e
uuid_00000000000bff8c:
	push %RBP
	mov -536(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq $uuid_00000000000be796
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bff89
	jmp uuid_00000000000bff8b
uuid_00000000000bff89:
	movb $1, -576(%rbp)
uuid_00000000000bff8b:
	mov -624(%RBP),%RSP
	add $-632, %RSP
uuid_00000000000bff8e:
	mov -592(%RBP),%RSP
	add $-632, %RSP
uuid_00000000000bff91:
	mov -584(%RBP),%RSP
	add $-632, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bff9f
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -680(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bff98
	jmp uuid_00000000000bff9a
uuid_00000000000bff98:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000bff95
	jmp uuid_00000000000bff97
uuid_00000000000bff95:
	push %RBP
	mov -648(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bff92
	jmp uuid_00000000000bff94
uuid_00000000000bff92:
	movb $1, -688(%rbp)
uuid_00000000000bff94:
	mov -736(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000bff97:
	mov -704(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000bff9a:
	mov -696(%RBP),%RSP
	add $-744, %RSP
	mov -688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bff9c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bff9b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bff9e
uuid_00000000000bff9c:
#call function add-alias : Arrow<Cons<Cons<String,String>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be940
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -744(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be940
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed7b
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call add_SB_alias_CL_ArrowNilConsTypeConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -728(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -472(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -464(%rbp)
uuid_00000000000bff9e:
	mov -640(%RBP),%RSP
	add $-744, %RSP
	jmp uuid_00000000000bffa1
uuid_00000000000bff9f:
	movq -616(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -472(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -464(%rbp)
uuid_00000000000bffa1:
	mov -528(%RBP),%RSP
	add $-632, %RSP
	movq -480(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -128(%rbp)
uuid_00000000000bffc6:
	mov -344(%RBP),%RSP
	add $-632, %RSP
	jmp uuid_00000000000bffc9
uuid_00000000000bffc7:
	pushq $0
	pushq $0
	pushq $3
#call function parse-field-of : Arrow<String,Tuple<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	mov %RBX, %RBP
	call parse_SB_field_SB_of_CL_ArrowTupleTypeStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bff6c
	jmp uuid_00000000000bff6e
uuid_00000000000bff6c:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	jmp uuid_00000000000bff69
	jmp uuid_00000000000bff6b
uuid_00000000000bff69:
	push %RBP
	mov -416(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq $uuid_00000000000be796
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bff66
	jmp uuid_00000000000bff68
uuid_00000000000bff66:
	movb $1, -456(%rbp)
uuid_00000000000bff68:
	mov -504(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000bff6b:
	mov -472(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000bff6e:
	mov -464(%RBP),%RSP
	add $-512, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bff7d
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bff75
	jmp uuid_00000000000bff77
uuid_00000000000bff75:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000bff72
	jmp uuid_00000000000bff74
uuid_00000000000bff72:
	push %RBP
	mov -528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000bff6f
	jmp uuid_00000000000bff71
uuid_00000000000bff6f:
	movb $1, -568(%rbp)
uuid_00000000000bff71:
	mov -616(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000bff74:
	mov -584(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000bff77:
	mov -576(%RBP),%RSP
	add $-624, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bff7a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000bff79
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000bff7c
uuid_00000000000bff7a:
#call function add-alias : Arrow<Cons<Cons<String,String>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be940
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -624(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be940
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed7b
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call add_SB_alias_CL_ArrowNilConsTypeConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bff78
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beed3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -608(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -344(%rbp)
uuid_00000000000bff7c:
	mov -520(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000bff7f
uuid_00000000000bff7d:
	movq -496(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -344(%rbp)
uuid_00000000000bff7f:
	mov -408(%RBP),%RSP
	add $-512, %RSP
	movq -360(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -128(%rbp)
uuid_00000000000bffc9:
	mov -224(%RBP),%RSP
	add $-512, %RSP
	subq $24, %rsp
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $120, %rsp
	ret
typeof_SB_lhs_CL_ArrowTypeAST:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bffe8
	jmp uuid_00000000000bffea
uuid_00000000000bffe8:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bffd6
	jmp uuid_00000000000bffd8
uuid_00000000000bffd6:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bffcd
	jmp uuid_00000000000bffcf
uuid_00000000000bffcd:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	jmp uuid_00000000000bffca
	jmp uuid_00000000000bffcc
uuid_00000000000bffca:
	movb $1, -456(%rbp)
uuid_00000000000bffcc:
	mov -472(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000bffcf:
	mov -464(%RBP),%RSP
	add $-496, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bffd3
	jmp uuid_00000000000bffd5
uuid_00000000000bffd3:
	push %RBP
	jmp uuid_00000000000bffd0
	jmp uuid_00000000000bffd2
uuid_00000000000bffd0:
	movb $1, -360(%rbp)
uuid_00000000000bffd2:
	mov -504(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000bffd5:
	mov -376(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000bffd8:
	mov -368(%RBP),%RSP
	add $-504, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bffe5
	jmp uuid_00000000000bffe7
uuid_00000000000bffe5:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bffdf
	jmp uuid_00000000000bffe1
uuid_00000000000bffdf:
	push %RBP
	jmp uuid_00000000000bffdc
	jmp uuid_00000000000bffde
uuid_00000000000bffdc:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bffd9
	jmp uuid_00000000000bffdb
uuid_00000000000bffd9:
	movb $1, -592(%rbp)
uuid_00000000000bffdb:
	mov -616(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000bffde:
	mov -608(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000bffe1:
	mov -600(%RBP),%RSP
	add $-624, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bffe2
	jmp uuid_00000000000bffe4
uuid_00000000000bffe2:
	movb $1, -264(%rbp)
uuid_00000000000bffe4:
	mov -512(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000bffe7:
	mov -280(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000bffea:
	mov -272(%RBP),%RSP
	add $-624, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0020
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0012
	jmp uuid_00000000000c0014
uuid_00000000000c0012:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0009
	jmp uuid_00000000000c000b
uuid_00000000000c0009:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bfff7
	jmp uuid_00000000000bfff9
uuid_00000000000bfff7:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000bffee
	jmp uuid_00000000000bfff0
uuid_00000000000bffee:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000bffeb
	jmp uuid_00000000000bffed
uuid_00000000000bffeb:
	movb $1, -1000(%rbp)
uuid_00000000000bffed:
	mov -1016(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000bfff0:
	mov -1008(%RBP),%RSP
	add $-1040, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000bfff4
	jmp uuid_00000000000bfff6
uuid_00000000000bfff4:
	push %RBP
	jmp uuid_00000000000bfff1
	jmp uuid_00000000000bfff3
uuid_00000000000bfff1:
	movb $1, -904(%rbp)
uuid_00000000000bfff3:
	mov -1048(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000bfff6:
	mov -920(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000bfff9:
	mov -912(%RBP),%RSP
	add $-1048, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0006
	jmp uuid_00000000000c0008
uuid_00000000000c0006:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0000
	jmp uuid_00000000000c0002
uuid_00000000000c0000:
	push %RBP
	jmp uuid_00000000000bfffd
	jmp uuid_00000000000bffff
uuid_00000000000bfffd:
	push %RBP
	mov -1064(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1168(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000bfffa
	jmp uuid_00000000000bfffc
uuid_00000000000bfffa:
	movb $1, -1136(%rbp)
uuid_00000000000bfffc:
	mov -1160(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000bffff:
	mov -1152(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c0002:
	mov -1144(%RBP),%RSP
	add $-1168, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0003
	jmp uuid_00000000000c0005
uuid_00000000000c0003:
	movb $1, -808(%rbp)
uuid_00000000000c0005:
	mov -1056(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c0008:
	mov -824(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c000b:
	mov -816(%RBP),%RSP
	add $-1168, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c000f
	jmp uuid_00000000000c0011
uuid_00000000000c000f:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c000c
	jmp uuid_00000000000c000e
uuid_00000000000c000c:
	movb $1, -712(%rbp)
uuid_00000000000c000e:
	mov -1176(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c0011:
	mov -728(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c0014:
	mov -720(%RBP),%RSP
	add $-1248, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c001d
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov -1328(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c001a
	push %RBP
	jmp uuid_00000000000c0017
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0016
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0019
uuid_00000000000c0017:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0015
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0019:
	mov -1336(%RBP),%RSP
	add $-1336, %RSP
	jmp uuid_00000000000c001c
uuid_00000000000c001a:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c001c:
	mov -1256(%RBP),%RSP
	add $-1328, %RSP
	jmp uuid_00000000000c001f
uuid_00000000000c001d:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beafa
#call function typeof-lhs : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	mov %RBX, %RBP
	call typeof_SB_lhs_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c001f:
	mov -632(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000c0022
uuid_00000000000c0020:
	movq -496(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c0022:
	mov -184(%RBP),%RSP
	add $-624, %RSP
	subq $24, %rsp
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
typeof_SB_tag_CL_ArrowTypeString:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,Type>,String>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_constructors_SB_index_CL_BTreeEqTypeStringBTreeEqTypeStringCaseNumber0, %r15
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTypeConsTypeConsStringBTreeEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
cons_SB_head_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0043
	jmp uuid_00000000000c0045
uuid_00000000000c0043:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c003a
	jmp uuid_00000000000c003c
uuid_00000000000c003a:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0031
	jmp uuid_00000000000c0033
uuid_00000000000c0031:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c002e
	jmp uuid_00000000000c0030
uuid_00000000000c002e:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000c002b
	jmp uuid_00000000000c002d
uuid_00000000000c002b:
	movb $1, -248(%rbp)
uuid_00000000000c002d:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c0030:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c0033:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0037
	jmp uuid_00000000000c0039
uuid_00000000000c0037:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c0034
	jmp uuid_00000000000c0036
uuid_00000000000c0034:
	movb $1, -184(%rbp)
uuid_00000000000c0036:
	mov -344(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c0039:
	mov -200(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c003c:
	mov -192(%RBP),%RSP
	add $-368, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0040
	jmp uuid_00000000000c0042
uuid_00000000000c0040:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c003d
	jmp uuid_00000000000c003f
uuid_00000000000c003d:
	movb $1, -120(%rbp)
uuid_00000000000c003f:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c0042:
	mov -136(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c0045:
	mov -128(%RBP),%RSP
	add $-384, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c004a
	push %RBP
	jmp uuid_00000000000c0047
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0046
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0049
uuid_00000000000c0047:
uuid_00000000000c0049:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c004c
uuid_00000000000c004a:
	movq -336(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c004c:
	mov -88(%RBP),%RSP
	add $-384, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
cons_SB_tail_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0065
	jmp uuid_00000000000c0067
uuid_00000000000c0065:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c005c
	jmp uuid_00000000000c005e
uuid_00000000000c005c:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0053
	jmp uuid_00000000000c0055
uuid_00000000000c0053:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0050
	jmp uuid_00000000000c0052
uuid_00000000000c0050:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000c004d
	jmp uuid_00000000000c004f
uuid_00000000000c004d:
	movb $1, -248(%rbp)
uuid_00000000000c004f:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c0052:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c0055:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0059
	jmp uuid_00000000000c005b
uuid_00000000000c0059:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c0056
	jmp uuid_00000000000c0058
uuid_00000000000c0056:
	movb $1, -184(%rbp)
uuid_00000000000c0058:
	mov -344(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c005b:
	mov -200(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c005e:
	mov -192(%RBP),%RSP
	add $-368, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0062
	jmp uuid_00000000000c0064
uuid_00000000000c0062:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c005f
	jmp uuid_00000000000c0061
uuid_00000000000c005f:
	movb $1, -120(%rbp)
uuid_00000000000c0061:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c0064:
	mov -136(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c0067:
	mov -128(%RBP),%RSP
	add $-384, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c006c
	push %RBP
	jmp uuid_00000000000c0069
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0068
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c006b
uuid_00000000000c0069:
uuid_00000000000c006b:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c006e
uuid_00000000000c006c:
	movq -368(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c006e:
	mov -88(%RBP),%RSP
	add $-384, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
parameter_SB_number_CL_ArrowU64ConsStringType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0075
	jmp uuid_00000000000c0077
uuid_00000000000c0075:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0072
	jmp uuid_00000000000c0074
uuid_00000000000c0072:
	push %RBP
	jmp uuid_00000000000c006f
	jmp uuid_00000000000c0071
uuid_00000000000c006f:
	movb $1, -112(%rbp)
uuid_00000000000c0071:
	mov -176(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0074:
	mov -128(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0077:
	mov -120(%RBP),%RSP
	add $-176, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c007c
	push %RBP
	jmp uuid_00000000000c0079
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0078
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c007b
uuid_00000000000c0079:
uuid_00000000000c007b:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000c007e
uuid_00000000000c007c:
#call function parameter-number : Arrow<Cons<Cons<List<Type>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -32(%rbp)
	pushq $1
	mov %RBX, %RBP
	call parameter_SB_number_CL_ArrowU64ConsU64ConsStringListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -48(%rbp)
uuid_00000000000c007e:
	mov -80(%RBP),%RSP
	add $-176, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
parameter_SB_number_CL_ArrowU64ConsU64ConsStringListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c008f
	jmp uuid_00000000000c0091
uuid_00000000000c008f:
	push %RBP
	mov -152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c008c
	jmp uuid_00000000000c008e
uuid_00000000000c008c:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0086
	jmp uuid_00000000000c0088
uuid_00000000000c0086:
	push %RBP
	mov -248(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0083
	jmp uuid_00000000000c0085
uuid_00000000000c0083:
	movb $1, -264(%rbp)
uuid_00000000000c0085:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c0088:
	mov -272(%RBP),%RSP
	add $-288, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0089
	jmp uuid_00000000000c008b
uuid_00000000000c0089:
	movb $1, -168(%rbp)
uuid_00000000000c008b:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c008e:
	mov -184(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c0091:
	mov -176(%RBP),%RSP
	add $-288, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0099
	push %RBP
	jmp uuid_00000000000c0096
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0095
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0098
uuid_00000000000c0096:
uuid_00000000000c0098:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c009b
uuid_00000000000c0099:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0092
#call function parameter-number : Arrow<Cons<Cons<List<Type>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -48(%rbp)
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call parameter_SB_number_CL_ArrowU64ConsU64ConsStringListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -72(%rbp)
	jmp uuid_00000000000c0094
uuid_00000000000c0092:
	movq -56(%rbp), %r15
	movq %r15, -72(%rbp)
	mov -56(%rbp), %r15
	mov %r15, -72(%rbp)
uuid_00000000000c0094:
	mov -296(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c009b:
	mov -120(%RBP),%RSP
	add $-296, %RSP
	mov -72(%rbp), %RAX
	mov %rbp, %rsp
	sub $64, %rsp
	ret
apply_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,U64>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq $1
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsU64ConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $144, %rsp
	ret
apply_CL_ArrowTupleTypeTypeConsU64ConsASTConsU64ConsTypeConsTypeString:
	pushq $0
	pushq $0
	pushq $3
#call function apply-plural : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push %RBP
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c009c
	jmp uuid_00000000000c009e
uuid_00000000000c009c:
#call function reduce-plural : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call reduce_SB_plural_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c009e:
	mov -224(%RBP),%RSP
	add $-224, %RSP
	push %RBP
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	mov -144(%RBP), %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c00a2
	jmp uuid_00000000000c00a4
uuid_00000000000c00a2:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c009f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c00a0
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c00a1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c00a4:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	push %RBP
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c00b8
	jmp uuid_00000000000c00ba
uuid_00000000000c00b8:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c00a5
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beed3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c00a6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
uuid_00000000000c00b5:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c00b6
	jmp uuid_00000000000c00b7
uuid_00000000000c00b6:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c00a7
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -368(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c00ae
	jmp uuid_00000000000c00b0
uuid_00000000000c00ae:
	push %RBP
	mov -360(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c00ab
	jmp uuid_00000000000c00ad
uuid_00000000000c00ab:
	push %RBP
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	jmp uuid_00000000000c00a8
	jmp uuid_00000000000c00aa
uuid_00000000000c00a8:
	movb $1, -376(%rbp)
uuid_00000000000c00aa:
	mov -440(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c00ad:
	mov -392(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c00b0:
	mov -384(%RBP),%RSP
	add $-464, %RSP
	mov -376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c00b2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c00b1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c00b4
uuid_00000000000c00b2:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -432(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -248(%rbp)
uuid_00000000000c00b4:
	mov -328(%RBP),%RSP
	add $-464, %RSP
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c00b5
uuid_00000000000c00b7:
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c00ba:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
uuid_00000000000c00f4:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c00f5
	jmp uuid_00000000000c00f6
uuid_00000000000c00f5:
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c00c1
	jmp uuid_00000000000c00c3
uuid_00000000000c00c1:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c00be
	jmp uuid_00000000000c00c0
uuid_00000000000c00be:
	push %RBP
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000c00bb
	jmp uuid_00000000000c00bd
uuid_00000000000c00bb:
	movb $1, -416(%rbp)
uuid_00000000000c00bd:
	mov -480(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c00c0:
	mov -432(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c00c3:
	mov -424(%RBP),%RSP
	add $-504, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c00f1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c00f0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c00f3
uuid_00000000000c00f1:
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	push %RBP
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c00dc
	jmp uuid_00000000000c00de
uuid_00000000000c00dc:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c00d3
	jmp uuid_00000000000c00d5
uuid_00000000000c00d3:
	push %RBP
	mov -616(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c00ca
	jmp uuid_00000000000c00cc
uuid_00000000000c00ca:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c00c7
	jmp uuid_00000000000c00c9
uuid_00000000000c00c7:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000c00c4
	jmp uuid_00000000000c00c6
uuid_00000000000c00c4:
	movb $1, -696(%rbp)
uuid_00000000000c00c6:
	mov -760(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c00c9:
	mov -712(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c00cc:
	mov -704(%RBP),%RSP
	add $-784, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c00d0
	jmp uuid_00000000000c00d2
uuid_00000000000c00d0:
	push %RBP
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	jmp uuid_00000000000c00cd
	jmp uuid_00000000000c00cf
uuid_00000000000c00cd:
	movb $1, -632(%rbp)
uuid_00000000000c00cf:
	mov -792(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c00d2:
	mov -648(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c00d5:
	mov -640(%RBP),%RSP
	add $-816, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c00d9
	jmp uuid_00000000000c00db
uuid_00000000000c00d9:
	push %RBP
	mov -544(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -832(%rbp)
	pushq $uuid_00000000000bed7b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c00d6
	jmp uuid_00000000000c00d8
uuid_00000000000c00d6:
	movb $1, -568(%rbp)
uuid_00000000000c00d8:
	mov -824(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c00db:
	mov -584(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c00de:
	mov -576(%RBP),%RSP
	add $-832, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c00ed
	push %RBP
	jmp uuid_00000000000c00ea
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c00e9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c00ec
uuid_00000000000c00ea:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c00e8
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c00ec:
	mov -840(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000c00ef
uuid_00000000000c00ed:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function normalize : Arrow<TContext,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	movq -976(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -16(%rbp)
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -64(%RBP), %RAX
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c00e5
	jmp uuid_00000000000c00e7
uuid_00000000000c00e5:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c00e2
	jmp uuid_00000000000c00e4
uuid_00000000000c00e2:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c00df
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c00e0
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beed3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c00e1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c00e4:
	mov -992(%RBP),%RSP
	add $-992, %RSP
#call function try-specialize : Arrow<Cons<Cons<Cons<String,Type>,TContext>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call try_SB_specialize_CL_ArrowNilConsTypeConsTContextConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c00e7:
	mov -984(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c00ef:
	mov -536(%RBP),%RSP
	add $-992, %RSP
	movq -472(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -288(%rbp)
uuid_00000000000c00f3:
	mov -368(%RBP),%RSP
	add $-992, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $120, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c00f4
uuid_00000000000c00f6:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
apply_CL_ArrowASTConsASTContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0174
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0171
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c00fd
	jmp uuid_00000000000c00ff
uuid_00000000000c00fd:
	push %RBP
	jmp uuid_00000000000c00fa
	jmp uuid_00000000000c00fc
uuid_00000000000c00fa:
	push %RBP
	jmp uuid_00000000000c00f7
	jmp uuid_00000000000c00f9
uuid_00000000000c00f7:
	movb $1, -568(%rbp)
uuid_00000000000c00f9:
	mov -592(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c00fc:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c00ff:
	mov -576(%RBP),%RSP
	add $-592, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c016e
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0103
	jmp uuid_00000000000c0105
uuid_00000000000c0103:
	push %RBP
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000c0100
	jmp uuid_00000000000c0102
uuid_00000000000c0100:
	movb $1, -680(%rbp)
uuid_00000000000c0102:
	mov -696(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000c0105:
	mov -688(%RBP),%RSP
	add $-720, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c016b
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c010c
	jmp uuid_00000000000c010e
uuid_00000000000c010c:
	push %RBP
	jmp uuid_00000000000c0109
	jmp uuid_00000000000c010b
uuid_00000000000c0109:
	push %RBP
	mov -736(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0106
	jmp uuid_00000000000c0108
uuid_00000000000c0106:
	movb $1, -808(%rbp)
uuid_00000000000c0108:
	mov -832(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c010b:
	mov -824(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c010e:
	mov -816(%RBP),%RSP
	add $-840, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0168
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c012e
	jmp uuid_00000000000c0130
uuid_00000000000c012e:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c012b
	jmp uuid_00000000000c012d
uuid_00000000000c012b:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0128
	jmp uuid_00000000000c012a
uuid_00000000000c0128:
	movb $1, -928(%rbp)
uuid_00000000000c012a:
	mov -1024(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c012d:
	mov -944(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c0130:
	mov -936(%RBP),%RSP
	add $-1096, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0165
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1176(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c013a
	jmp uuid_00000000000c013c
uuid_00000000000c013a:
	push %RBP
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	jmp uuid_00000000000c0137
	jmp uuid_00000000000c0139
uuid_00000000000c0137:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0134
	jmp uuid_00000000000c0136
uuid_00000000000c0134:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0131
	jmp uuid_00000000000c0133
uuid_00000000000c0131:
	movb $1, -1184(%rbp)
uuid_00000000000c0133:
	mov -1312(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c0136:
	mov -1232(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c0139:
	mov -1200(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c013c:
	mov -1192(%RBP),%RSP
	add $-1384, %RSP
	mov -1184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0162
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0143
	jmp uuid_00000000000c0145
uuid_00000000000c0143:
	push %RBP
	mov -1456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0140
	jmp uuid_00000000000c0142
uuid_00000000000c0140:
	push %RBP
	mov -1448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c013d
	jmp uuid_00000000000c013f
uuid_00000000000c013d:
	movb $1, -1472(%rbp)
uuid_00000000000c013f:
	mov -1568(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000c0142:
	mov -1488(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000c0145:
	mov -1480(%RBP),%RSP
	add $-1640, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c015f
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1720(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c014c
	jmp uuid_00000000000c014e
uuid_00000000000c014c:
	push %RBP
	mov -1712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0149
	jmp uuid_00000000000c014b
uuid_00000000000c0149:
	push %RBP
	mov -1704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0146
	jmp uuid_00000000000c0148
uuid_00000000000c0146:
	movb $1, -1728(%rbp)
uuid_00000000000c0148:
	mov -1824(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c014b:
	mov -1744(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c014e:
	mov -1736(%RBP),%RSP
	add $-1896, %RSP
	mov -1728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c015c
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1976(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0155
	jmp uuid_00000000000c0157
uuid_00000000000c0155:
	push %RBP
	mov -1968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0152
	jmp uuid_00000000000c0154
uuid_00000000000c0152:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	jmp uuid_00000000000c014f
	jmp uuid_00000000000c0151
uuid_00000000000c014f:
	movb $1, -1984(%rbp)
uuid_00000000000c0151:
	mov -2080(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000c0154:
	mov -2000(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000c0157:
	mov -1992(%RBP),%RSP
	add $-2136, %RSP
	mov -1984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0159
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0158
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c015b
uuid_00000000000c0159:
#call function substitute : Arrow<Cons<Context,Token>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTokenConsTokenContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c015b:
	mov -1904(%RBP),%RSP
	add $-2136, %RSP
	jmp uuid_00000000000c015e
uuid_00000000000c015c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c015e:
	mov -1648(%RBP),%RSP
	add $-1896, %RSP
	jmp uuid_00000000000c0161
uuid_00000000000c015f:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c0161:
	mov -1392(%RBP),%RSP
	add $-1640, %RSP
	jmp uuid_00000000000c0164
uuid_00000000000c0162:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $5
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c0164:
	mov -1104(%RBP),%RSP
	add $-1384, %RSP
	jmp uuid_00000000000c0167
uuid_00000000000c0165:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c0167:
	mov -848(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000c016a
uuid_00000000000c0168:
uuid_00000000000c0125:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0126
	jmp uuid_00000000000c0127
uuid_00000000000c0126:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq $0
	push %RBP
	mov -1040(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0118
	jmp uuid_00000000000c011a
uuid_00000000000c0118:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	jmp uuid_00000000000c0115
	jmp uuid_00000000000c0117
uuid_00000000000c0115:
	push %RBP
	mov -960(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0112
	jmp uuid_00000000000c0114
uuid_00000000000c0112:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c010f
	jmp uuid_00000000000c0111
uuid_00000000000c010f:
	movb $1, -1048(%rbp)
uuid_00000000000c0111:
	mov -1160(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000c0114:
	mov -1144(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000c0117:
	mov -1064(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000c011a:
	mov -1056(%RBP),%RSP
	add $-1256, %RSP
	mov -1048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0122
	push %RBP
	jmp uuid_00000000000c011f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c011e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0121
uuid_00000000000c011f:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0121:
	mov -1264(%RBP),%RSP
	add $-1264, %RSP
	jmp uuid_00000000000c0124
uuid_00000000000c0122:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1152(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c011b
	movq -1256(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c011d
uuid_00000000000c011b:
	movq -1136(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -184(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c011d:
	mov -1264(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c0124:
	mov -944(%RBP),%RSP
	add $-1264, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0125
uuid_00000000000c0127:
uuid_00000000000c016a:
	mov -728(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000c016d
uuid_00000000000c016b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	pushq $4
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c016d:
	mov -600(%RBP),%RSP
	add $-720, %RSP
	jmp uuid_00000000000c0170
uuid_00000000000c016e:
uuid_00000000000c0170:
	mov -488(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000c0173
uuid_00000000000c0171:
uuid_00000000000c0173:
	mov -408(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000c0176
uuid_00000000000c0174:
uuid_00000000000c0176:
	mov -328(%RBP),%RSP
	add $-400, %RSP
	subq $72, %rsp
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
apply_SB_and_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	subq $24, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c017f
	jmp uuid_00000000000c0181
uuid_00000000000c017f:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c017c
	jmp uuid_00000000000c017e
uuid_00000000000c017c:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0179
	jmp uuid_00000000000c017b
uuid_00000000000c0179:
	movb $1, -240(%rbp)
uuid_00000000000c017b:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c017e:
	mov -256(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c0181:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c01a7
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c019a
	jmp uuid_00000000000c019c
uuid_00000000000c019a:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0191
	jmp uuid_00000000000c0193
uuid_00000000000c0191:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0188
	jmp uuid_00000000000c018a
uuid_00000000000c0188:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0185
	jmp uuid_00000000000c0187
uuid_00000000000c0185:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c0182
	jmp uuid_00000000000c0184
uuid_00000000000c0182:
	movb $1, -480(%rbp)
uuid_00000000000c0184:
	mov -544(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000c0187:
	mov -496(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000c018a:
	mov -488(%RBP),%RSP
	add $-568, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c018e
	jmp uuid_00000000000c0190
uuid_00000000000c018e:
	push %RBP
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000c018b
	jmp uuid_00000000000c018d
uuid_00000000000c018b:
	movb $1, -416(%rbp)
uuid_00000000000c018d:
	mov -576(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c0190:
	mov -432(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c0193:
	mov -424(%RBP),%RSP
	add $-600, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0197
	jmp uuid_00000000000c0199
uuid_00000000000c0197:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq $uuid_00000000000bed7b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0194
	jmp uuid_00000000000c0196
uuid_00000000000c0194:
	movb $1, -352(%rbp)
uuid_00000000000c0196:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c0199:
	mov -368(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c019c:
	mov -360(%RBP),%RSP
	add $-616, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c01a4
	push %RBP
	jmp uuid_00000000000c01a1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c01a0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c01a3
uuid_00000000000c01a1:
uuid_00000000000c01a3:
	mov -624(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c01a6
uuid_00000000000c01a4:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c019d
	jmp uuid_00000000000c019f
uuid_00000000000c019d:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000c019f:
	mov -624(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c01a6:
	mov -320(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c01a9
uuid_00000000000c01a7:
#call function + : Arrow<Cons<List<Type>,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply-plural : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
#call function apply-plural : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowListTypeConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000c01a9:
	mov -208(%RBP),%RSP
	add $-312, %RSP
	subq $40, %rsp
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
reduce_SB_plural_CL_ArrowListTypeListType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
uuid_00000000000c01be:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c01bf
	jmp uuid_00000000000c01c0
uuid_00000000000c01bf:
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c01b4
	jmp uuid_00000000000c01b6
uuid_00000000000c01b4:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c01b1
	jmp uuid_00000000000c01b3
uuid_00000000000c01b1:
	push %RBP
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	jmp uuid_00000000000c01ae
	jmp uuid_00000000000c01b0
uuid_00000000000c01ae:
	movb $1, -224(%rbp)
uuid_00000000000c01b0:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c01b3:
	mov -240(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c01b6:
	mov -232(%RBP),%RSP
	add $-312, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c01bb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c01ba
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c01bd
uuid_00000000000c01bb:
	push %RBP
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c01b7
	jmp uuid_00000000000c01b9
uuid_00000000000c01b7:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c01b9:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	movq -280(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -248(%rbp), %r15
	movq %r15, -96(%rbp)
uuid_00000000000c01bd:
	mov -176(%RBP),%RSP
	add $-320, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c01be
uuid_00000000000c01c0:
	push %RBP
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c01c1
	jmp uuid_00000000000c01c3
uuid_00000000000c01c1:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c01c3:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c01ea:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c01eb
	jmp uuid_00000000000c01ec
uuid_00000000000c01eb:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c01ca
	jmp uuid_00000000000c01cc
uuid_00000000000c01ca:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c01c7
	jmp uuid_00000000000c01c9
uuid_00000000000c01c7:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000c01c4
	jmp uuid_00000000000c01c6
uuid_00000000000c01c4:
	movb $1, -232(%rbp)
uuid_00000000000c01c6:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c01c9:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c01cc:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c01e7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c01e6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c01e9
uuid_00000000000c01e7:
	movq -288(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -8(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
uuid_00000000000c01e0:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c01e1
	jmp uuid_00000000000c01e2
uuid_00000000000c01e1:
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c01d3
	jmp uuid_00000000000c01d5
uuid_00000000000c01d3:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c01d0
	jmp uuid_00000000000c01d2
uuid_00000000000c01d0:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000c01cd
	jmp uuid_00000000000c01cf
uuid_00000000000c01cd:
	movb $1, -456(%rbp)
uuid_00000000000c01cf:
	mov -520(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c01d2:
	mov -472(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c01d5:
	mov -464(%RBP),%RSP
	add $-544, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c01dd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c01dc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c01df
uuid_00000000000c01dd:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c01d9
	jmp uuid_00000000000c01db
uuid_00000000000c01d9:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c01d6
	jmp uuid_00000000000c01d8
uuid_00000000000c01d6:
	pushq $0
	pushq $0
	pushq $3
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c01d8:
	mov -560(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c01db:
	mov -552(%RBP),%RSP
	add $-560, %RSP
	movq -512(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -328(%rbp)
uuid_00000000000c01df:
	mov -408(%RBP),%RSP
	add $-560, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c01e0
uuid_00000000000c01e2:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c01e3
	jmp uuid_00000000000c01e5
uuid_00000000000c01e3:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c01e5:
	mov -368(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c01e9:
	mov -184(%RBP),%RSP
	add $-368, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c01ea
uuid_00000000000c01ec:
	movq -88(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -80(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -72(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -64(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -56(%rbp), %r15
	movq %r15, -8(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c0213:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0214
	jmp uuid_00000000000c0215
uuid_00000000000c0214:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c01f3
	jmp uuid_00000000000c01f5
uuid_00000000000c01f3:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c01f0
	jmp uuid_00000000000c01f2
uuid_00000000000c01f0:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000c01ed
	jmp uuid_00000000000c01ef
uuid_00000000000c01ed:
	movb $1, -232(%rbp)
uuid_00000000000c01ef:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c01f2:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c01f5:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0210
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c020f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0212
uuid_00000000000c0210:
	movq -288(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -8(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
uuid_00000000000c0209:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c020a
	jmp uuid_00000000000c020b
uuid_00000000000c020a:
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c01fc
	jmp uuid_00000000000c01fe
uuid_00000000000c01fc:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c01f9
	jmp uuid_00000000000c01fb
uuid_00000000000c01f9:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000c01f6
	jmp uuid_00000000000c01f8
uuid_00000000000c01f6:
	movb $1, -456(%rbp)
uuid_00000000000c01f8:
	mov -520(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c01fb:
	mov -472(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c01fe:
	mov -464(%RBP),%RSP
	add $-544, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0206
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0205
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0208
uuid_00000000000c0206:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0202
	jmp uuid_00000000000c0204
uuid_00000000000c0202:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c01ff
	jmp uuid_00000000000c0201
uuid_00000000000c01ff:
	pushq $0
	pushq $0
	pushq $3
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c0201:
	mov -560(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c0204:
	mov -552(%RBP),%RSP
	add $-560, %RSP
	movq -512(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -328(%rbp)
uuid_00000000000c0208:
	mov -408(%RBP),%RSP
	add $-560, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0209
uuid_00000000000c020b:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c020c
	jmp uuid_00000000000c020e
uuid_00000000000c020c:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c020e:
	mov -368(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c0212:
	mov -184(%RBP),%RSP
	add $-368, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0213
uuid_00000000000c0215:
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
apply_SB_or_SB_cons_SB_and_SB_specialize_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0219
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0216
	jmp uuid_00000000000c0218
uuid_00000000000c0216:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beafa
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $0
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000c0218:
	mov -208(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c021b
uuid_00000000000c0219:
#call function apply : Arrow<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000c021b:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	subq $56, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
try_SB_specialize_CL_ArrowNilConsTypeConsTContextConsTypeString:
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c025f:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0260
	jmp uuid_00000000000c0261
uuid_00000000000c0260:
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c025c
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $0
	push %RBP
	mov -680(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0228
	jmp uuid_00000000000c022a
uuid_00000000000c0228:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000c0225
	jmp uuid_00000000000c0227
uuid_00000000000c0225:
	push %RBP
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	jmp uuid_00000000000c0222
	jmp uuid_00000000000c0224
uuid_00000000000c0222:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c021f
	jmp uuid_00000000000c0221
uuid_00000000000c021f:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c021c
	jmp uuid_00000000000c021e
uuid_00000000000c021c:
	movb $1, -688(%rbp)
uuid_00000000000c021e:
	mov -832(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c0221:
	mov -816(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c0224:
	mov -784(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c0227:
	mov -704(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c022a:
	mov -696(%RBP),%RSP
	add $-952, %RSP
	mov -688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0259
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0258
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c025b
uuid_00000000000c0259:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -824(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0255
	jmp uuid_00000000000c0257
uuid_00000000000c0255:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq $uuid_00000000000c022b
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c022c
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	jmp uuid_00000000000c022e
uuid_00000000000c022c:
uuid_00000000000c022e:
	mov -992(%RBP),%RSP
	add $-992, %RSP
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq $uuid_00000000000bed7b
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	push %RBP
#call function is-special : Arrow<Cons<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	mov %RBX, %RBP
	call is_SB_special_CL_ArrowU64ConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0252
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c024f
	jmp uuid_00000000000c0251
uuid_00000000000c024f:
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	push %RBP
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0241
	jmp uuid_00000000000c0243
uuid_00000000000c0241:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0238
	jmp uuid_00000000000c023a
uuid_00000000000c0238:
	push %RBP
	jmp uuid_00000000000c0235
	jmp uuid_00000000000c0237
uuid_00000000000c0235:
	push %RBP
	jmp uuid_00000000000c0232
	jmp uuid_00000000000c0234
uuid_00000000000c0232:
	push %RBP
	jmp uuid_00000000000c022f
	jmp uuid_00000000000c0231
uuid_00000000000c022f:
	movb $1, -1264(%rbp)
uuid_00000000000c0231:
	mov -1296(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c0234:
	mov -1288(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c0237:
	mov -1280(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c023a:
	mov -1272(%RBP),%RSP
	add $-1296, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c023e
	jmp uuid_00000000000c0240
uuid_00000000000c023e:
	push %RBP
	jmp uuid_00000000000c023b
	jmp uuid_00000000000c023d
uuid_00000000000c023b:
	movb $1, -1168(%rbp)
uuid_00000000000c023d:
	mov -1304(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c0240:
	mov -1184(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c0243:
	mov -1176(%RBP),%RSP
	add $-1304, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c024c
	push %RBP
	jmp uuid_00000000000c0249
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0248
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c024b
uuid_00000000000c0249:
uuid_00000000000c024b:
	mov -1312(%RBP),%RSP
	add $-1312, %RSP
	jmp uuid_00000000000c024e
uuid_00000000000c024c:
#call function cons : Arrow<Cons<StackToSpecialize,List<StackToSpecialize>>,List<StackToSpecialize>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq $0
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListStackToSpecializeConsListStackToSpecializeStackToSpecialize
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000c024e:
	mov -1088(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c0251:
	mov -1008(%RBP),%RSP
	add $-1304, %RSP
	jmp uuid_00000000000c0254
uuid_00000000000c0252:
uuid_00000000000c0254:
	mov -1000(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000c0257:
	mov -960(%RBP),%RSP
	add $-1000, %RSP
	movq -952(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -192(%rbp)
uuid_00000000000c025b:
	mov -560(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000c025e
uuid_00000000000c025c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c025e:
	mov -432(%RBP),%RSP
	add $-552, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c025f
uuid_00000000000c0261:
	mov %rbp, %rsp
	sub $184, %rsp
	ret
unify_SB_hint_CL_ArrowTypeConsTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c027a
	jmp uuid_00000000000c027c
uuid_00000000000c027a:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0268
	jmp uuid_00000000000c026a
uuid_00000000000c0268:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0265
	jmp uuid_00000000000c0267
uuid_00000000000c0265:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0262
	jmp uuid_00000000000c0264
uuid_00000000000c0262:
	movb $1, -232(%rbp)
uuid_00000000000c0264:
	mov -296(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c0267:
	mov -248(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c026a:
	mov -240(%RBP),%RSP
	add $-304, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0277
	jmp uuid_00000000000c0279
uuid_00000000000c0277:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0271
	jmp uuid_00000000000c0273
uuid_00000000000c0271:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c026e
	jmp uuid_00000000000c0270
uuid_00000000000c026e:
	push %RBP
	mov -320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c026b
	jmp uuid_00000000000c026d
uuid_00000000000c026b:
	movb $1, -344(%rbp)
uuid_00000000000c026d:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c0270:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c0273:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0274
	jmp uuid_00000000000c0276
uuid_00000000000c0274:
	movb $1, -184(%rbp)
uuid_00000000000c0276:
	mov -312(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c0279:
	mov -200(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c027c:
	mov -192(%RBP),%RSP
	add $-416, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0299
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c028f
	jmp uuid_00000000000c0291
uuid_00000000000c028f:
	push %RBP
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0286
	jmp uuid_00000000000c0288
uuid_00000000000c0286:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0283
	jmp uuid_00000000000c0285
uuid_00000000000c0283:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0280
	jmp uuid_00000000000c0282
uuid_00000000000c0280:
	movb $1, -536(%rbp)
uuid_00000000000c0282:
	mov -584(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c0285:
	mov -552(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000c0288:
	mov -544(%RBP),%RSP
	add $-608, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c028c
	jmp uuid_00000000000c028e
uuid_00000000000c028c:
	push %RBP
	jmp uuid_00000000000c0289
	jmp uuid_00000000000c028b
uuid_00000000000c0289:
	movb $1, -488(%rbp)
uuid_00000000000c028b:
	mov -616(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c028e:
	mov -504(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c0291:
	mov -496(%RBP),%RSP
	add $-616, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0296
	push %RBP
	jmp uuid_00000000000c0293
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0292
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0295
uuid_00000000000c0293:
uuid_00000000000c0295:
	mov -624(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c0298
uuid_00000000000c0296:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000c0298:
	mov -424(%RBP),%RSP
	add $-616, %RSP
	jmp uuid_00000000000c029b
uuid_00000000000c0299:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -416(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c027d
	pushq -304(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	jmp uuid_00000000000c027f
uuid_00000000000c027d:
	movq -24(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000c027f:
	mov -424(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c029b:
	mov -120(%RBP),%RSP
	add $-424, %RSP
	subq $24, %rsp
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_SB_hint_CL_ArrowListTypeConsListTypeType:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c02ae
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c02a4
	jmp uuid_00000000000c02a6
uuid_00000000000c02a4:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c02a1
	jmp uuid_00000000000c02a3
uuid_00000000000c02a1:
	push %RBP
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	jmp uuid_00000000000c029e
	jmp uuid_00000000000c02a0
uuid_00000000000c029e:
	movb $1, -216(%rbp)
uuid_00000000000c02a0:
	mov -280(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c02a3:
	mov -232(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c02a6:
	mov -224(%RBP),%RSP
	add $-304, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c02ab
	push %RBP
	jmp uuid_00000000000c02a8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c02a7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c02aa
uuid_00000000000c02a8:
uuid_00000000000c02aa:
	mov -312(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c02ad
uuid_00000000000c02ab:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-hint : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000c02ad:
	mov -168(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000c02b0
uuid_00000000000c02ae:
uuid_00000000000c02b0:
	mov -120(%RBP),%RSP
	add $-160, %RSP
	subq $40, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
infer_SB_type_SB_definition_CL_ArrowU64ConsU64ConsASTType:
#call function mark-class-exists : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_class_SB_exists_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c02ca
	jmp uuid_00000000000c02cc
uuid_00000000000c02ca:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c02c7
	jmp uuid_00000000000c02c9
uuid_00000000000c02c7:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c02c1
	jmp uuid_00000000000c02c3
uuid_00000000000c02c1:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c02b8
	jmp uuid_00000000000c02ba
uuid_00000000000c02b8:
	push %RBP
	jmp uuid_00000000000c02b5
	jmp uuid_00000000000c02b7
uuid_00000000000c02b5:
	push %RBP
	mov -480(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -584(%rbp)
	pushq $uuid_00000000000c02b1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c02b2
	jmp uuid_00000000000c02b4
uuid_00000000000c02b2:
	movb $1, -552(%rbp)
uuid_00000000000c02b4:
	mov -576(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c02b7:
	mov -568(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c02ba:
	mov -560(%RBP),%RSP
	add $-584, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c02be
	jmp uuid_00000000000c02c0
uuid_00000000000c02be:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c02bb
	jmp uuid_00000000000c02bd
uuid_00000000000c02bb:
	movb $1, -456(%rbp)
uuid_00000000000c02bd:
	mov -592(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c02c0:
	mov -472(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c02c3:
	mov -464(%RBP),%RSP
	add $-664, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c02c4
	jmp uuid_00000000000c02c6
uuid_00000000000c02c4:
	movb $1, -280(%rbp)
uuid_00000000000c02c6:
	mov -376(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c02c9:
	mov -296(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c02cc:
	mov -288(%RBP),%RSP
	add $-664, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0309
	push %RBP
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	jmp uuid_00000000000c0306
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0305
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0308
uuid_00000000000c0306:
#call function infer-type-constructor : Arrow<Cons<Type,AST>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call infer_SB_type_SB_constructor_CL_ArrowU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -120(%rbp)
	push %RBP
	mov -104(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0302
	jmp uuid_00000000000c0304
uuid_00000000000c0302:
	pushq $uuid_00000000000be796
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	push %RBP
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq $0
	push %RBP
	mov -912(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c02d3
	jmp uuid_00000000000c02d5
uuid_00000000000c02d3:
	push %RBP
	jmp uuid_00000000000c02d0
	jmp uuid_00000000000c02d2
uuid_00000000000c02d0:
	push %RBP
	mov -848(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c02cd
	jmp uuid_00000000000c02cf
uuid_00000000000c02cd:
	movb $1, -920(%rbp)
uuid_00000000000c02cf:
	mov -944(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c02d2:
	mov -936(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c02d5:
	mov -928(%RBP),%RSP
	add $-952, %RSP
	mov -920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c02ef
	push %RBP
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq $0
	push %RBP
	mov -1032(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c02e5
	jmp uuid_00000000000c02e7
uuid_00000000000c02e5:
	push %RBP
	mov -1024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c02e2
	jmp uuid_00000000000c02e4
uuid_00000000000c02e2:
	push %RBP
	mov -1016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c02dc
	jmp uuid_00000000000c02de
uuid_00000000000c02dc:
	push %RBP
	jmp uuid_00000000000c02d9
	jmp uuid_00000000000c02db
uuid_00000000000c02d9:
	push %RBP
	mov -1144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c02d6
	jmp uuid_00000000000c02d8
uuid_00000000000c02d6:
	movb $1, -1216(%rbp)
uuid_00000000000c02d8:
	mov -1240(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c02db:
	mov -1232(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c02de:
	mov -1224(%RBP),%RSP
	add $-1248, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c02df
	jmp uuid_00000000000c02e1
uuid_00000000000c02df:
	movb $1, -1040(%rbp)
uuid_00000000000c02e1:
	mov -1136(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c02e4:
	mov -1056(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c02e7:
	mov -1048(%RBP),%RSP
	add $-1248, %RSP
	mov -1040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c02ec
	push %RBP
	jmp uuid_00000000000c02e9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c02e8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c02eb
uuid_00000000000c02e9:
uuid_00000000000c02eb:
	mov -1256(%RBP),%RSP
	add $-1256, %RSP
	jmp uuid_00000000000c02ee
uuid_00000000000c02ec:
	movq -1248(%rbp), %r15
	movq %r15, -760(%rbp)
	mov -1248(%rbp), %r15
	mov %r15, -760(%rbp)
uuid_00000000000c02ee:
	mov -960(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000c02f1
uuid_00000000000c02ef:
	movq -952(%rbp), %r15
	movq %r15, -760(%rbp)
	mov -952(%rbp), %r15
	mov %r15, -760(%rbp)
uuid_00000000000c02f1:
	mov -840(%RBP),%RSP
	add $-952, %RSP
	push %RBP
	mov -760(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c02ff
	jmp uuid_00000000000c0301
uuid_00000000000c02ff:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c02f8
	jmp uuid_00000000000c02fa
uuid_00000000000c02f8:
	push %RBP
	jmp uuid_00000000000c02f5
	jmp uuid_00000000000c02f7
uuid_00000000000c02f5:
	push %RBP
	mov -1000(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c02f2
	jmp uuid_00000000000c02f4
uuid_00000000000c02f2:
	movb $1, -1024(%rbp)
uuid_00000000000c02f4:
	mov -1048(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c02f7:
	mov -1040(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c02fa:
	mov -1032(%RBP),%RSP
	add $-1056, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c02fc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c02fb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c02fe
uuid_00000000000c02fc:
#call function has-only-child : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1056(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call has_SB_only_SB_child_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c02fe:
	mov -992(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c0301:
	mov -960(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c0304:
	mov -752(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c0308:
	mov -672(%RBP),%RSP
	add $-1056, %RSP
	jmp uuid_00000000000c030b
uuid_00000000000c0309:
#call function infer-type-definition : Arrow<Cons<Cons<Type,AST>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov -104(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call infer_SB_type_SB_definition_CL_ArrowU64ConsU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function infer-type-constructor : Arrow<Cons<Type,AST>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call infer_SB_type_SB_constructor_CL_ArrowU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -120(%rbp)
uuid_00000000000c030b:
	mov -200(%RBP),%RSP
	add $-680, %RSP
	mov -120(%rbp), %RAX
	mov %rbp, %rsp
	sub $112, %rsp
	ret
arity_CL_ArrowU64ListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c031b
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0314
	jmp uuid_00000000000c0316
uuid_00000000000c0314:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0311
	jmp uuid_00000000000c0313
uuid_00000000000c0311:
	push %RBP
	jmp uuid_00000000000c030e
	jmp uuid_00000000000c0310
uuid_00000000000c030e:
	movb $1, -200(%rbp)
uuid_00000000000c0310:
	mov -264(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c0313:
	mov -216(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c0316:
	mov -208(%RBP),%RSP
	add $-264, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0318
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0317
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c031a
uuid_00000000000c0318:
#call function arity : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000c031a:
	mov -152(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c031d
uuid_00000000000c031b:
uuid_00000000000c031d:
	mov -104(%RBP),%RSP
	add $-144, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
arity_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0324
	jmp uuid_00000000000c0326
uuid_00000000000c0324:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0321
	jmp uuid_00000000000c0323
uuid_00000000000c0321:
	push %RBP
	jmp uuid_00000000000c031e
	jmp uuid_00000000000c0320
uuid_00000000000c031e:
	movb $1, -104(%rbp)
uuid_00000000000c0320:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c0323:
	mov -120(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c0326:
	mov -112(%RBP),%RSP
	add $-168, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c032b
	push %RBP
	jmp uuid_00000000000c0328
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0327
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c032a
uuid_00000000000c0328:
uuid_00000000000c032a:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c032d
uuid_00000000000c032b:
#call function arity : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000c032d:
	mov -72(%RBP),%RSP
	add $-168, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
cons_SB_arity_CL_ArrowU64Type:
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0346
	jmp uuid_00000000000c0348
uuid_00000000000c0346:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c033d
	jmp uuid_00000000000c033f
uuid_00000000000c033d:
	push %RBP
	mov -152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0334
	jmp uuid_00000000000c0336
uuid_00000000000c0334:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0331
	jmp uuid_00000000000c0333
uuid_00000000000c0331:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000c032e
	jmp uuid_00000000000c0330
uuid_00000000000c032e:
	movb $1, -232(%rbp)
uuid_00000000000c0330:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c0333:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c0336:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c033a
	jmp uuid_00000000000c033c
uuid_00000000000c033a:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	jmp uuid_00000000000c0337
	jmp uuid_00000000000c0339
uuid_00000000000c0337:
	movb $1, -168(%rbp)
uuid_00000000000c0339:
	mov -328(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c033c:
	mov -184(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c033f:
	mov -176(%RBP),%RSP
	add $-352, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0343
	jmp uuid_00000000000c0345
uuid_00000000000c0343:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0340
	jmp uuid_00000000000c0342
uuid_00000000000c0340:
	movb $1, -104(%rbp)
uuid_00000000000c0342:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c0345:
	mov -120(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c0348:
	mov -112(%RBP),%RSP
	add $-368, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c034d
	push %RBP
	jmp uuid_00000000000c034a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0349
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c034c
uuid_00000000000c034a:
uuid_00000000000c034c:
	mov -376(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000c034f
uuid_00000000000c034d:
#call function cons-arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call cons_SB_arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c034f:
	mov -72(%RBP),%RSP
	add $-368, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
parse_SB_field_SB_of_CL_ArrowTupleTypeStringString:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $uuid_00000000000be796
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c0353:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0354
	jmp uuid_00000000000c0355
uuid_00000000000c0354:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0350
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c0352
uuid_00000000000c0350:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -48(%rbp)
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	inc %RAX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	movq $uuid_00000000000be796, -8(%rbp)
uuid_00000000000c0352:
	mov -80(%RBP),%RSP
	add $-80, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0353
uuid_00000000000c0355:
	pushq -48(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	subq $40, %rsp
	pushq 40(%rsp)
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
implicit_SB_tail_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c036e
	jmp uuid_00000000000c0370
uuid_00000000000c036e:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0365
	jmp uuid_00000000000c0367
uuid_00000000000c0365:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c035c
	jmp uuid_00000000000c035e
uuid_00000000000c035c:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0359
	jmp uuid_00000000000c035b
uuid_00000000000c0359:
	push %RBP
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	jmp uuid_00000000000c0356
	jmp uuid_00000000000c0358
uuid_00000000000c0356:
	movb $1, -224(%rbp)
uuid_00000000000c0358:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c035b:
	mov -240(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c035e:
	mov -232(%RBP),%RSP
	add $-312, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0362
	jmp uuid_00000000000c0364
uuid_00000000000c0362:
	push %RBP
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	jmp uuid_00000000000c035f
	jmp uuid_00000000000c0361
uuid_00000000000c035f:
	movb $1, -160(%rbp)
uuid_00000000000c0361:
	mov -320(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c0364:
	mov -176(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c0367:
	mov -168(%RBP),%RSP
	add $-344, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c036b
	jmp uuid_00000000000c036d
uuid_00000000000c036b:
	push %RBP
	mov -72(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0368
	jmp uuid_00000000000c036a
uuid_00000000000c0368:
	movb $1, -96(%rbp)
uuid_00000000000c036a:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c036d:
	mov -112(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c0370:
	mov -104(%RBP),%RSP
	add $-360, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0375
	push %RBP
	jmp uuid_00000000000c0372
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0371
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0374
uuid_00000000000c0372:
uuid_00000000000c0374:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000c0377
uuid_00000000000c0375:
	movq -344(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c0377:
	mov -64(%RBP),%RSP
	add $-360, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
typeof_SB_var_CL_ArrowTypeConsStringConsTContextAST:
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0379
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0378
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c037b
uuid_00000000000c0379:
uuid_00000000000c037b:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	subq $24, %rsp
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $208, %rsp
	ret
typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST:
#call function find-alias-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	mov %RBX, %RBP
	call find_SB_alias_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
uuid_00000000000c039e:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c039f
	jmp uuid_00000000000c03a0
uuid_00000000000c039f:
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c039b
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -608(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0388
	jmp uuid_00000000000c038a
uuid_00000000000c0388:
	push %RBP
	jmp uuid_00000000000c0385
	jmp uuid_00000000000c0387
uuid_00000000000c0385:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	jmp uuid_00000000000c0382
	jmp uuid_00000000000c0384
uuid_00000000000c0382:
	push %RBP
	mov -504(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c037f
	jmp uuid_00000000000c0381
uuid_00000000000c037f:
	push %RBP
	mov -496(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c037c
	jmp uuid_00000000000c037e
uuid_00000000000c037c:
	movb $1, -616(%rbp)
uuid_00000000000c037e:
	mov -688(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c0381:
	mov -672(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c0384:
	mov -640(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c0387:
	mov -632(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c038a:
	mov -624(%RBP),%RSP
	add $-808, %RSP
	mov -616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0398
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0397
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c039a
uuid_00000000000c0398:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0394
	movq -808(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -80(%rbp)
	jmp uuid_00000000000c0396
uuid_00000000000c0394:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c038e
	movq -664(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -216(%rbp)
	jmp uuid_00000000000c0390
uuid_00000000000c038e:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c038b
	movq -664(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -216(%rbp)
	jmp uuid_00000000000c038d
uuid_00000000000c038b:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
uuid_00000000000c038d:
	mov -832(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c0390:
	mov -824(%RBP),%RSP
	add $-832, %RSP
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0391
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	jmp uuid_00000000000c0393
uuid_00000000000c0391:
	movq -808(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -80(%rbp)
uuid_00000000000c0393:
	mov -840(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c0396:
	mov -816(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c039a:
	mov -488(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000c039d
uuid_00000000000c039b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
uuid_00000000000c039d:
	mov -360(%RBP),%RSP
	add $-480, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c039e
uuid_00000000000c03a0:
	subq $24, %rsp
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $208, %rsp
	ret
typecheck_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
uuid_00000000000c03ae:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c03af
	jmp uuid_00000000000c03b0
uuid_00000000000c03af:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c03a7
	jmp uuid_00000000000c03a9
uuid_00000000000c03a7:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c03a4
	jmp uuid_00000000000c03a6
uuid_00000000000c03a4:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c03a1
	jmp uuid_00000000000c03a3
uuid_00000000000c03a1:
	movb $1, -312(%rbp)
uuid_00000000000c03a3:
	mov -408(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000c03a6:
	mov -328(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000c03a9:
	mov -320(%RBP),%RSP
	add $-480, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c03ab
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c03aa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c03ad
uuid_00000000000c03ab:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -480(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c03ad:
	mov -232(%RBP),%RSP
	add $-480, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c03ae
uuid_00000000000c03b0:
uuid_00000000000c03be:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c03bf
	jmp uuid_00000000000c03c0
uuid_00000000000c03bf:
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c03b7
	jmp uuid_00000000000c03b9
uuid_00000000000c03b7:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c03b4
	jmp uuid_00000000000c03b6
uuid_00000000000c03b4:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c03b1
	jmp uuid_00000000000c03b3
uuid_00000000000c03b1:
	movb $1, -312(%rbp)
uuid_00000000000c03b3:
	mov -408(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000c03b6:
	mov -328(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000c03b9:
	mov -320(%RBP),%RSP
	add $-480, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c03bb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c03ba
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c03bd
uuid_00000000000c03bb:
#call function infer-global-context : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call infer_SB_global_SB_context_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -480(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c03bd:
	mov -232(%RBP),%RSP
	add $-480, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c03be
uuid_00000000000c03c0:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c03e5:
#call function non-zero : Arrow<List<StackToSpecialize>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListStackToSpecialize
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c03e6
	jmp uuid_00000000000c03e7
uuid_00000000000c03e6:
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c03de
	jmp uuid_00000000000c03e0
uuid_00000000000c03de:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c03db
	jmp uuid_00000000000c03dd
uuid_00000000000c03db:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c03d5
	jmp uuid_00000000000c03d7
uuid_00000000000c03d5:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000c03d2
	jmp uuid_00000000000c03d4
uuid_00000000000c03d2:
	push %RBP
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	jmp uuid_00000000000c03cf
	jmp uuid_00000000000c03d1
uuid_00000000000c03cf:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000c03cc
	jmp uuid_00000000000c03ce
uuid_00000000000c03cc:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c03c9
	jmp uuid_00000000000c03cb
uuid_00000000000c03c9:
	movb $1, -984(%rbp)
uuid_00000000000c03cb:
	mov -1192(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c03ce:
	mov -1160(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c03d1:
	mov -1032(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c03d4:
	mov -1000(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c03d7:
	mov -992(%RBP),%RSP
	add $-1200, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c03d8
	jmp uuid_00000000000c03da
uuid_00000000000c03d8:
	movb $1, -568(%rbp)
uuid_00000000000c03da:
	mov -792(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c03dd:
	mov -584(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c03e0:
	mov -576(%RBP),%RSP
	add $-1200, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c03e2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c03e1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c03e4
uuid_00000000000c03e2:
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1, %r14
	movq -784(%rbp), %r15
	movq %r15, 0(%r14)
	movq -776(%rbp), %r15
	movq %r15, 8(%r14)
	movq -768(%rbp), %r15
	movq %r15, 16(%r14)
	movq -760(%rbp), %r15
	movq %r15, 24(%r14)
	movq -752(%rbp), %r15
	movq %r15, 32(%r14)
	movq -744(%rbp), %r15
	movq %r15, 40(%r14)
	movq -736(%rbp), %r15
	movq %r15, 48(%r14)
	movq -728(%rbp), %r15
	movq %r15, 56(%r14)
	movq -720(%rbp), %r15
	movq %r15, 64(%r14)
	movq -712(%rbp), %r15
	movq %r15, 72(%r14)
	movq -704(%rbp), %r15
	movq %r15, 80(%r14)
	movq -696(%rbp), %r15
	movq %r15, 88(%r14)
	movq -688(%rbp), %r15
	movq %r15, 96(%r14)
	movq -680(%rbp), %r15
	movq %r15, 104(%r14)
	movq -672(%rbp), %r15
	movq %r15, 112(%r14)
	movq -664(%rbp), %r15
	movq %r15, 120(%r14)
	movq -656(%rbp), %r15
	movq %r15, 128(%r14)
	movq -648(%rbp), %r15
	movq %r15, 136(%r14)
	movq -640(%rbp), %r15
	movq %r15, 144(%r14)
	movq -632(%rbp), %r15
	movq %r15, 152(%r14)
	movq -624(%rbp), %r15
	movq %r15, 160(%r14)
	movq -616(%rbp), %r15
	movq %r15, 168(%r14)
	movq -608(%rbp), %r15
	movq %r15, 176(%r14)
	movq -600(%rbp), %r15
	movq %r15, 184(%r14)
	movq -592(%rbp), %r15
	movq %r15, 192(%r14)
#call function specialize : Arrow<Cons<Cons<Cons<String,Type>,TContext>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1200(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call specialize_CL_ArrowNilConsTypeConsTContextConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c03e4:
	mov -360(%RBP),%RSP
	add $-1200, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $200, %rsp
	add $184, %rsp
	add $8, %rsp
	add $24, %rsp
	add $120, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c03e5
uuid_00000000000c03e7:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
substitute_CL_ArrowTokenConsTokenContext:
	mov -104(%RBP), %RAX
	push %RAX
uuid_00000000000c0431:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0432
	jmp uuid_00000000000c0433
uuid_00000000000c0432:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov -368(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c042e
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c03fa
	jmp uuid_00000000000c03fc
uuid_00000000000c03fa:
	push %RBP
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c03ee
	jmp uuid_00000000000c03f0
uuid_00000000000c03ee:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	jmp uuid_00000000000c03eb
	jmp uuid_00000000000c03ed
uuid_00000000000c03eb:
	push %RBP
	jmp uuid_00000000000c03e8
	jmp uuid_00000000000c03ea
uuid_00000000000c03e8:
	movb $1, -576(%rbp)
uuid_00000000000c03ea:
	mov -656(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c03ed:
	mov -592(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c03f0:
	mov -584(%RBP),%RSP
	add $-656, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c03f7
	jmp uuid_00000000000c03f9
uuid_00000000000c03f7:
	push %RBP
	mov -392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c03f4
	jmp uuid_00000000000c03f6
uuid_00000000000c03f4:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c03f1
	jmp uuid_00000000000c03f3
uuid_00000000000c03f1:
	movb $1, -480(%rbp)
uuid_00000000000c03f3:
	mov -680(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c03f6:
	mov -664(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c03f9:
	mov -496(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c03fc:
	mov -488(%RBP),%RSP
	add $-776, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c042b
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0412
	jmp uuid_00000000000c0414
uuid_00000000000c0412:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0406
	jmp uuid_00000000000c0408
uuid_00000000000c0406:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000c0403
	jmp uuid_00000000000c0405
uuid_00000000000c0403:
	push %RBP
	jmp uuid_00000000000c0400
	jmp uuid_00000000000c0402
uuid_00000000000c0400:
	movb $1, -984(%rbp)
uuid_00000000000c0402:
	mov -1064(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c0405:
	mov -1000(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c0408:
	mov -992(%RBP),%RSP
	add $-1064, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c040f
	jmp uuid_00000000000c0411
uuid_00000000000c040f:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c040c
	jmp uuid_00000000000c040e
uuid_00000000000c040c:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0409
	jmp uuid_00000000000c040b
uuid_00000000000c0409:
	movb $1, -888(%rbp)
uuid_00000000000c040b:
	mov -1088(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000c040e:
	mov -1072(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000c0411:
	mov -904(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000c0414:
	mov -896(%RBP),%RSP
	add $-1184, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0428
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq $0
	push %RBP
	mov -1288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0421
	jmp uuid_00000000000c0423
uuid_00000000000c0421:
	push %RBP
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	jmp uuid_00000000000c041e
	jmp uuid_00000000000c0420
uuid_00000000000c041e:
	push %RBP
	mov -1208(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c041b
	jmp uuid_00000000000c041d
uuid_00000000000c041b:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0418
	jmp uuid_00000000000c041a
uuid_00000000000c0418:
	movb $1, -1296(%rbp)
uuid_00000000000c041a:
	mov -1408(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000c041d:
	mov -1392(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000c0420:
	mov -1312(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000c0423:
	mov -1304(%RBP),%RSP
	add $-1504, %RSP
	mov -1296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0425
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0424
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0427
uuid_00000000000c0425:
	movq -1504(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c0427:
	mov -1192(%RBP),%RSP
	add $-1504, %RSP
	jmp uuid_00000000000c042a
uuid_00000000000c0428:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0415
	movq -1184(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c0417
uuid_00000000000c0415:
	movq -1056(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -104(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0417:
	mov -1192(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000c042a:
	mov -784(%RBP),%RSP
	add $-1192, %RSP
	jmp uuid_00000000000c042d
uuid_00000000000c042b:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c03fd
	movq -776(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -688(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c03ff
uuid_00000000000c03fd:
	movq -648(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -640(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -616(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -104(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c03ff:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c042d:
	mov -376(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c0430
uuid_00000000000c042e:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0430:
	mov -272(%RBP),%RSP
	add $-368, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %RSP
	jmp uuid_00000000000c0431
uuid_00000000000c0433:
	subq $56, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $160, %rsp
	ret
substitute_CL_ArrowListTypeConsListTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0443
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c043c
	jmp uuid_00000000000c043e
uuid_00000000000c043c:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0439
	jmp uuid_00000000000c043b
uuid_00000000000c0439:
	push %RBP
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	jmp uuid_00000000000c0436
	jmp uuid_00000000000c0438
uuid_00000000000c0436:
	movb $1, -312(%rbp)
uuid_00000000000c0438:
	mov -376(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c043b:
	mov -328(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c043e:
	mov -320(%RBP),%RSP
	add $-400, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0440
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c043f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0442
uuid_00000000000c0440:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
#call function substitute : Arrow<Cons<TContext,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c0442:
	mov -264(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c0445
uuid_00000000000c0443:
uuid_00000000000c0445:
	mov -216(%RBP),%RSP
	add $-256, %RSP
	subq $40, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
substitute_CL_ArrowTypeConsTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0449
	jmp uuid_00000000000c044b
uuid_00000000000c0449:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0446
	jmp uuid_00000000000c0448
uuid_00000000000c0446:
	movb $1, -216(%rbp)
uuid_00000000000c0448:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c044b:
	mov -224(%RBP),%RSP
	add $-240, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0484
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c046e
	jmp uuid_00000000000c0470
uuid_00000000000c046e:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c046b
	jmp uuid_00000000000c046d
uuid_00000000000c046b:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0468
	jmp uuid_00000000000c046a
uuid_00000000000c0468:
	movb $1, -280(%rbp)
uuid_00000000000c046a:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c046d:
	mov -296(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c0470:
	mov -288(%RBP),%RSP
	add $-352, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0481
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0477
	jmp uuid_00000000000c0479
uuid_00000000000c0477:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0474
	jmp uuid_00000000000c0476
uuid_00000000000c0474:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0471
	jmp uuid_00000000000c0473
uuid_00000000000c0471:
	movb $1, -392(%rbp)
uuid_00000000000c0473:
	mov -440(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c0476:
	mov -408(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c0479:
	mov -400(%RBP),%RSP
	add $-464, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c047e
	push %RBP
	jmp uuid_00000000000c047b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c047a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c047d
uuid_00000000000c047b:
uuid_00000000000c047d:
	mov -472(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000c0480
uuid_00000000000c047e:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c0480:
	mov -360(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000c0483
uuid_00000000000c0481:
	pushq -352(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c0483:
	mov -248(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c0486
uuid_00000000000c0484:
uuid_00000000000c0465:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0466
	jmp uuid_00000000000c0467
uuid_00000000000c0466:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0462
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0458
	jmp uuid_00000000000c045a
uuid_00000000000c0458:
	push %RBP
	jmp uuid_00000000000c0455
	jmp uuid_00000000000c0457
uuid_00000000000c0455:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c0452
	jmp uuid_00000000000c0454
uuid_00000000000c0452:
	push %RBP
	mov -512(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c044f
	jmp uuid_00000000000c0451
uuid_00000000000c044f:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c044c
	jmp uuid_00000000000c044e
uuid_00000000000c044c:
	movb $1, -624(%rbp)
uuid_00000000000c044e:
	mov -696(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c0451:
	mov -680(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c0454:
	mov -648(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c0457:
	mov -640(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000c045a:
	mov -632(%RBP),%RSP
	add $-816, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c045f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c045e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0461
uuid_00000000000c045f:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c045b
	movq -816(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c045d
uuid_00000000000c045b:
	movq -672(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -664(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -128(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c045d:
	mov -824(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000c0461:
	mov -496(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000c0464
uuid_00000000000c0462:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0464:
	mov -368(%RBP),%RSP
	add $-488, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c0465
uuid_00000000000c0467:
uuid_00000000000c0486:
	mov -184(%RBP),%RSP
	add $-240, %RSP
	subq $24, %rsp
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
substitute_CL_ArrowListTypeConsListTypeContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0496
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c048f
	jmp uuid_00000000000c0491
uuid_00000000000c048f:
	push %RBP
	mov -272(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c048c
	jmp uuid_00000000000c048e
uuid_00000000000c048c:
	push %RBP
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	jmp uuid_00000000000c0489
	jmp uuid_00000000000c048b
uuid_00000000000c0489:
	movb $1, -288(%rbp)
uuid_00000000000c048b:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c048e:
	mov -304(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c0491:
	mov -296(%RBP),%RSP
	add $-376, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0493
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0492
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0495
uuid_00000000000c0493:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
#call function substitute : Arrow<Cons<Context,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000c0495:
	mov -240(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000c0498
uuid_00000000000c0496:
uuid_00000000000c0498:
	mov -192(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $144, %rsp
	ret
substitute_CL_ArrowTypeConsTypeContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c049c
	jmp uuid_00000000000c049e
uuid_00000000000c049c:
	push %RBP
	mov -176(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0499
	jmp uuid_00000000000c049b
uuid_00000000000c0499:
	movb $1, -192(%rbp)
uuid_00000000000c049b:
	mov -208(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c049e:
	mov -200(%RBP),%RSP
	add $-216, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0507
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c04f1
	jmp uuid_00000000000c04f3
uuid_00000000000c04f1:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c04ee
	jmp uuid_00000000000c04f0
uuid_00000000000c04ee:
	push %RBP
	mov -232(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c04eb
	jmp uuid_00000000000c04ed
uuid_00000000000c04eb:
	movb $1, -256(%rbp)
uuid_00000000000c04ed:
	mov -320(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c04f0:
	mov -272(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c04f3:
	mov -264(%RBP),%RSP
	add $-328, %RSP
	mov -256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0504
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c04fa
	jmp uuid_00000000000c04fc
uuid_00000000000c04fa:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c04f7
	jmp uuid_00000000000c04f9
uuid_00000000000c04f7:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c04f4
	jmp uuid_00000000000c04f6
uuid_00000000000c04f4:
	movb $1, -368(%rbp)
uuid_00000000000c04f6:
	mov -416(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c04f9:
	mov -384(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c04fc:
	mov -376(%RBP),%RSP
	add $-440, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0501
	push %RBP
	jmp uuid_00000000000c04fe
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c04fd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0500
uuid_00000000000c04fe:
uuid_00000000000c0500:
	mov -448(%RBP),%RSP
	add $-448, %RSP
	jmp uuid_00000000000c0503
uuid_00000000000c0501:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000c0503:
	mov -336(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000c0506
uuid_00000000000c0504:
	pushq -328(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000c0506:
	mov -224(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000c0509
uuid_00000000000c0507:
uuid_00000000000c04e8:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c04e9
	jmp uuid_00000000000c04ea
uuid_00000000000c04e9:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c04e5
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c04b1
	jmp uuid_00000000000c04b3
uuid_00000000000c04b1:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c04a5
	jmp uuid_00000000000c04a7
uuid_00000000000c04a5:
	push %RBP
	jmp uuid_00000000000c04a2
	jmp uuid_00000000000c04a4
uuid_00000000000c04a2:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c049f
	jmp uuid_00000000000c04a1
uuid_00000000000c049f:
	movb $1, -624(%rbp)
uuid_00000000000c04a1:
	mov -648(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c04a4:
	mov -640(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c04a7:
	mov -632(%RBP),%RSP
	add $-656, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c04ae
	jmp uuid_00000000000c04b0
uuid_00000000000c04ae:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c04ab
	jmp uuid_00000000000c04ad
uuid_00000000000c04ab:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c04a8
	jmp uuid_00000000000c04aa
uuid_00000000000c04a8:
	movb $1, -528(%rbp)
uuid_00000000000c04aa:
	mov -680(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c04ad:
	mov -664(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c04b0:
	mov -544(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c04b3:
	mov -536(%RBP),%RSP
	add $-776, %RSP
	mov -528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c04e2
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c04c9
	jmp uuid_00000000000c04cb
uuid_00000000000c04c9:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c04bd
	jmp uuid_00000000000c04bf
uuid_00000000000c04bd:
	push %RBP
	jmp uuid_00000000000c04ba
	jmp uuid_00000000000c04bc
uuid_00000000000c04ba:
	push %RBP
	mov -912(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c04b7
	jmp uuid_00000000000c04b9
uuid_00000000000c04b7:
	movb $1, -984(%rbp)
uuid_00000000000c04b9:
	mov -1008(%RBP),%RSP
	add $-1016, %RSP
uuid_00000000000c04bc:
	mov -1000(%RBP),%RSP
	add $-1016, %RSP
uuid_00000000000c04bf:
	mov -992(%RBP),%RSP
	add $-1016, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c04c6
	jmp uuid_00000000000c04c8
uuid_00000000000c04c6:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c04c3
	jmp uuid_00000000000c04c5
uuid_00000000000c04c3:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c04c0
	jmp uuid_00000000000c04c2
uuid_00000000000c04c0:
	movb $1, -888(%rbp)
uuid_00000000000c04c2:
	mov -1040(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c04c5:
	mov -1024(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c04c8:
	mov -904(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c04cb:
	mov -896(%RBP),%RSP
	add $-1136, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c04df
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -1240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c04d8
	jmp uuid_00000000000c04da
uuid_00000000000c04d8:
	push %RBP
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	jmp uuid_00000000000c04d5
	jmp uuid_00000000000c04d7
uuid_00000000000c04d5:
	push %RBP
	mov -1160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c04d2
	jmp uuid_00000000000c04d4
uuid_00000000000c04d2:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c04cf
	jmp uuid_00000000000c04d1
uuid_00000000000c04cf:
	movb $1, -1248(%rbp)
uuid_00000000000c04d1:
	mov -1360(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c04d4:
	mov -1344(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c04d7:
	mov -1264(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c04da:
	mov -1256(%RBP),%RSP
	add $-1456, %RSP
	mov -1248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c04dc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c04db
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c04de
uuid_00000000000c04dc:
	movq -1456(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c04de:
	mov -1144(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000c04e1
uuid_00000000000c04df:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c04cc
	movq -1136(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c04ce
uuid_00000000000c04cc:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c04ce:
	mov -1144(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000c04e1:
	mov -784(%RBP),%RSP
	add $-1144, %RSP
	jmp uuid_00000000000c04e4
uuid_00000000000c04e2:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c04b4
	movq -776(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -688(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c04b6
uuid_00000000000c04b4:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c04b6:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c04e4:
	mov -424(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c04e7
uuid_00000000000c04e5:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c04e7:
	mov -320(%RBP),%RSP
	add $-416, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %RSP
	jmp uuid_00000000000c04e8
uuid_00000000000c04ea:
uuid_00000000000c0509:
	mov -160(%RBP),%RSP
	add $-216, %RSP
	subq $24, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $128, %rsp
	ret
substitute_SB_lhs_CL_ArrowASTConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c053a
	jmp uuid_00000000000c053c
uuid_00000000000c053a:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0531
	jmp uuid_00000000000c0533
uuid_00000000000c0531:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c051f
	jmp uuid_00000000000c0521
uuid_00000000000c051f:
	push %RBP
	mov -536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c050d
	jmp uuid_00000000000c050f
uuid_00000000000c050d:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	jmp uuid_00000000000c050a
	jmp uuid_00000000000c050c
uuid_00000000000c050a:
	movb $1, -648(%rbp)
uuid_00000000000c050c:
	mov -664(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000c050f:
	mov -656(%RBP),%RSP
	add $-688, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c051c
	jmp uuid_00000000000c051e
uuid_00000000000c051c:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0516
	jmp uuid_00000000000c0518
uuid_00000000000c0516:
	push %RBP
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	jmp uuid_00000000000c0513
	jmp uuid_00000000000c0515
uuid_00000000000c0513:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0510
	jmp uuid_00000000000c0512
uuid_00000000000c0510:
	movb $1, -776(%rbp)
uuid_00000000000c0512:
	mov -856(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c0515:
	mov -792(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c0518:
	mov -784(%RBP),%RSP
	add $-864, %RSP
	mov -776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0519
	jmp uuid_00000000000c051b
uuid_00000000000c0519:
	movb $1, -552(%rbp)
uuid_00000000000c051b:
	mov -696(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c051e:
	mov -568(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000c0521:
	mov -560(%RBP),%RSP
	add $-864, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c052e
	jmp uuid_00000000000c0530
uuid_00000000000c052e:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0528
	jmp uuid_00000000000c052a
uuid_00000000000c0528:
	push %RBP
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000c0525
	jmp uuid_00000000000c0527
uuid_00000000000c0525:
	push %RBP
	mov -880(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0522
	jmp uuid_00000000000c0524
uuid_00000000000c0522:
	movb $1, -952(%rbp)
uuid_00000000000c0524:
	mov -1032(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c0527:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c052a:
	mov -960(%RBP),%RSP
	add $-1040, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c052b
	jmp uuid_00000000000c052d
uuid_00000000000c052b:
	movb $1, -456(%rbp)
uuid_00000000000c052d:
	mov -872(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c0530:
	mov -472(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c0533:
	mov -464(%RBP),%RSP
	add $-1040, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0537
	jmp uuid_00000000000c0539
uuid_00000000000c0537:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0534
	jmp uuid_00000000000c0536
uuid_00000000000c0534:
	movb $1, -360(%rbp)
uuid_00000000000c0536:
	mov -1048(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000c0539:
	mov -376(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000c053c:
	mov -368(%RBP),%RSP
	add $-1120, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0593
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0564
	jmp uuid_00000000000c0566
uuid_00000000000c0564:
	push %RBP
	mov -1192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1296(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0552
	jmp uuid_00000000000c0554
uuid_00000000000c0552:
	push %RBP
	mov -1288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0540
	jmp uuid_00000000000c0542
uuid_00000000000c0540:
	push %RBP
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	jmp uuid_00000000000c053d
	jmp uuid_00000000000c053f
uuid_00000000000c053d:
	movb $1, -1400(%rbp)
uuid_00000000000c053f:
	mov -1416(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c0542:
	mov -1408(%RBP),%RSP
	add $-1440, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c054f
	jmp uuid_00000000000c0551
uuid_00000000000c054f:
	push %RBP
	mov -1280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1520(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0549
	jmp uuid_00000000000c054b
uuid_00000000000c0549:
	push %RBP
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	jmp uuid_00000000000c0546
	jmp uuid_00000000000c0548
uuid_00000000000c0546:
	push %RBP
	mov -1456(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0543
	jmp uuid_00000000000c0545
uuid_00000000000c0543:
	movb $1, -1528(%rbp)
uuid_00000000000c0545:
	mov -1608(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c0548:
	mov -1544(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c054b:
	mov -1536(%RBP),%RSP
	add $-1616, %RSP
	mov -1528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c054c
	jmp uuid_00000000000c054e
uuid_00000000000c054c:
	movb $1, -1304(%rbp)
uuid_00000000000c054e:
	mov -1448(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c0551:
	mov -1320(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000c0554:
	mov -1312(%RBP),%RSP
	add $-1616, %RSP
	mov -1304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0561
	jmp uuid_00000000000c0563
uuid_00000000000c0561:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1696(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c055b
	jmp uuid_00000000000c055d
uuid_00000000000c055b:
	push %RBP
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	jmp uuid_00000000000c0558
	jmp uuid_00000000000c055a
uuid_00000000000c0558:
	push %RBP
	mov -1632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1792(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0555
	jmp uuid_00000000000c0557
uuid_00000000000c0555:
	movb $1, -1704(%rbp)
uuid_00000000000c0557:
	mov -1784(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000c055a:
	mov -1720(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000c055d:
	mov -1712(%RBP),%RSP
	add $-1792, %RSP
	mov -1704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c055e
	jmp uuid_00000000000c0560
uuid_00000000000c055e:
	movb $1, -1208(%rbp)
uuid_00000000000c0560:
	mov -1624(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000c0563:
	mov -1224(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000c0566:
	mov -1216(%RBP),%RSP
	add $-1792, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0590
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0576
	jmp uuid_00000000000c0578
uuid_00000000000c0576:
	push %RBP
	mov -1864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1968(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c056d
	jmp uuid_00000000000c056f
uuid_00000000000c056d:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	jmp uuid_00000000000c056a
	jmp uuid_00000000000c056c
uuid_00000000000c056a:
	push %RBP
	mov -1904(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0567
	jmp uuid_00000000000c0569
uuid_00000000000c0567:
	movb $1, -1976(%rbp)
uuid_00000000000c0569:
	mov -2056(%RBP),%RSP
	add $-2064, %RSP
uuid_00000000000c056c:
	mov -1992(%RBP),%RSP
	add $-2064, %RSP
uuid_00000000000c056f:
	mov -1984(%RBP),%RSP
	add $-2064, %RSP
	mov -1976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0573
	jmp uuid_00000000000c0575
uuid_00000000000c0573:
	push %RBP
	mov -1856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0570
	jmp uuid_00000000000c0572
uuid_00000000000c0570:
	movb $1, -1880(%rbp)
uuid_00000000000c0572:
	mov -2072(%RBP),%RSP
	add $-2144, %RSP
uuid_00000000000c0575:
	mov -1896(%RBP),%RSP
	add $-2144, %RSP
uuid_00000000000c0578:
	mov -1888(%RBP),%RSP
	add $-2144, %RSP
	mov -1880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c058d
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2224(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c057f
	jmp uuid_00000000000c0581
uuid_00000000000c057f:
	push %RBP
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	jmp uuid_00000000000c057c
	jmp uuid_00000000000c057e
uuid_00000000000c057c:
	push %RBP
	mov -2160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0579
	jmp uuid_00000000000c057b
uuid_00000000000c0579:
	movb $1, -2232(%rbp)
uuid_00000000000c057b:
	mov -2312(%RBP),%RSP
	add $-2320, %RSP
uuid_00000000000c057e:
	mov -2248(%RBP),%RSP
	add $-2320, %RSP
uuid_00000000000c0581:
	mov -2240(%RBP),%RSP
	add $-2320, %RSP
	mov -2232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c058a
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -2400(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0587
	push %RBP
	jmp uuid_00000000000c0584
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0583
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0586
uuid_00000000000c0584:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0582
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0586:
	mov -2408(%RBP),%RSP
	add $-2408, %RSP
	jmp uuid_00000000000c0589
uuid_00000000000c0587:
uuid_00000000000c0589:
	mov -2328(%RBP),%RSP
	add $-2400, %RSP
	jmp uuid_00000000000c058c
uuid_00000000000c058a:
	pushq -2320(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c058c:
	mov -2152(%RBP),%RSP
	add $-2320, %RSP
	jmp uuid_00000000000c058f
uuid_00000000000c058d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-lhs : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	mov %RBX, %RBP
	call substitute_SB_lhs_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2064(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c058f:
	mov -1800(%RBP),%RSP
	add $-2144, %RSP
	jmp uuid_00000000000c0592
uuid_00000000000c0590:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1616(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c0592:
	mov -1128(%RBP),%RSP
	add $-1792, %RSP
	jmp uuid_00000000000c0595
uuid_00000000000c0593:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-lhs : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	mov %RBX, %RBP
	call substitute_SB_lhs_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c0595:
	mov -280(%RBP),%RSP
	add $-1120, %RSP
	subq $72, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
substitute_CL_ArrowASTConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0690
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c068d
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c05bd
	jmp uuid_00000000000c05bf
uuid_00000000000c05bd:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -608(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c05ab
	jmp uuid_00000000000c05ad
uuid_00000000000c05ab:
	push %RBP
	mov -600(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0599
	jmp uuid_00000000000c059b
uuid_00000000000c0599:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	jmp uuid_00000000000c0596
	jmp uuid_00000000000c0598
uuid_00000000000c0596:
	movb $1, -712(%rbp)
uuid_00000000000c0598:
	mov -728(%RBP),%RSP
	add $-752, %RSP
uuid_00000000000c059b:
	mov -720(%RBP),%RSP
	add $-752, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c05a8
	jmp uuid_00000000000c05aa
uuid_00000000000c05a8:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -832(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c05a2
	jmp uuid_00000000000c05a4
uuid_00000000000c05a2:
	push %RBP
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000c059f
	jmp uuid_00000000000c05a1
uuid_00000000000c059f:
	push %RBP
	mov -768(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c059c
	jmp uuid_00000000000c059e
uuid_00000000000c059c:
	movb $1, -840(%rbp)
uuid_00000000000c059e:
	mov -920(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c05a1:
	mov -856(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c05a4:
	mov -848(%RBP),%RSP
	add $-928, %RSP
	mov -840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c05a5
	jmp uuid_00000000000c05a7
uuid_00000000000c05a5:
	movb $1, -616(%rbp)
uuid_00000000000c05a7:
	mov -760(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c05aa:
	mov -632(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c05ad:
	mov -624(%RBP),%RSP
	add $-928, %RSP
	mov -616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c05ba
	jmp uuid_00000000000c05bc
uuid_00000000000c05ba:
	push %RBP
	mov -496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1008(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c05b4
	jmp uuid_00000000000c05b6
uuid_00000000000c05b4:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	jmp uuid_00000000000c05b1
	jmp uuid_00000000000c05b3
uuid_00000000000c05b1:
	push %RBP
	mov -944(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1104(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c05ae
	jmp uuid_00000000000c05b0
uuid_00000000000c05ae:
	movb $1, -1016(%rbp)
uuid_00000000000c05b0:
	mov -1096(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c05b3:
	mov -1032(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c05b6:
	mov -1024(%RBP),%RSP
	add $-1104, %RSP
	mov -1016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c05b7
	jmp uuid_00000000000c05b9
uuid_00000000000c05b7:
	movb $1, -520(%rbp)
uuid_00000000000c05b9:
	mov -936(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c05bc:
	mov -536(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c05bf:
	mov -528(%RBP),%RSP
	add $-1104, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c068a
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1184(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0603
	jmp uuid_00000000000c0605
uuid_00000000000c0603:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1280(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c05f1
	jmp uuid_00000000000c05f3
uuid_00000000000c05f1:
	push %RBP
	mov -1272(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1376(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c05df
	jmp uuid_00000000000c05e1
uuid_00000000000c05df:
	push %RBP
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	jmp uuid_00000000000c05dc
	jmp uuid_00000000000c05de
uuid_00000000000c05dc:
	movb $1, -1384(%rbp)
uuid_00000000000c05de:
	mov -1400(%RBP),%RSP
	add $-1424, %RSP
uuid_00000000000c05e1:
	mov -1392(%RBP),%RSP
	add $-1424, %RSP
	mov -1384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c05ee
	jmp uuid_00000000000c05f0
uuid_00000000000c05ee:
	push %RBP
	mov -1264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1504(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c05e8
	jmp uuid_00000000000c05ea
uuid_00000000000c05e8:
	push %RBP
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	jmp uuid_00000000000c05e5
	jmp uuid_00000000000c05e7
uuid_00000000000c05e5:
	push %RBP
	mov -1440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c05e2
	jmp uuid_00000000000c05e4
uuid_00000000000c05e2:
	movb $1, -1512(%rbp)
uuid_00000000000c05e4:
	mov -1592(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c05e7:
	mov -1528(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c05ea:
	mov -1520(%RBP),%RSP
	add $-1600, %RSP
	mov -1512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c05eb
	jmp uuid_00000000000c05ed
uuid_00000000000c05eb:
	movb $1, -1288(%rbp)
uuid_00000000000c05ed:
	mov -1432(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c05f0:
	mov -1304(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c05f3:
	mov -1296(%RBP),%RSP
	add $-1600, %RSP
	mov -1288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0600
	jmp uuid_00000000000c0602
uuid_00000000000c0600:
	push %RBP
	mov -1168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1680(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c05fa
	jmp uuid_00000000000c05fc
uuid_00000000000c05fa:
	push %RBP
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	jmp uuid_00000000000c05f7
	jmp uuid_00000000000c05f9
uuid_00000000000c05f7:
	push %RBP
	mov -1616(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1776(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c05f4
	jmp uuid_00000000000c05f6
uuid_00000000000c05f4:
	movb $1, -1688(%rbp)
uuid_00000000000c05f6:
	mov -1768(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c05f9:
	mov -1704(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c05fc:
	mov -1696(%RBP),%RSP
	add $-1776, %RSP
	mov -1688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c05fd
	jmp uuid_00000000000c05ff
uuid_00000000000c05fd:
	movb $1, -1192(%rbp)
uuid_00000000000c05ff:
	mov -1608(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c0602:
	mov -1208(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c0605:
	mov -1200(%RBP),%RSP
	add $-1776, %RSP
	mov -1192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0687
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1856(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0628
	jmp uuid_00000000000c062a
uuid_00000000000c0628:
	push %RBP
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	jmp uuid_00000000000c0625
	jmp uuid_00000000000c0627
uuid_00000000000c0625:
	push %RBP
	mov -1792(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0622
	jmp uuid_00000000000c0624
uuid_00000000000c0622:
	movb $1, -1864(%rbp)
uuid_00000000000c0624:
	mov -1944(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000c0627:
	mov -1880(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000c062a:
	mov -1872(%RBP),%RSP
	add $-1952, %RSP
	mov -1864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0684
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2032(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0631
	jmp uuid_00000000000c0633
uuid_00000000000c0631:
	push %RBP
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	jmp uuid_00000000000c062e
	jmp uuid_00000000000c0630
uuid_00000000000c062e:
	push %RBP
	mov -1968(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c062b
	jmp uuid_00000000000c062d
uuid_00000000000c062b:
	movb $1, -2040(%rbp)
uuid_00000000000c062d:
	mov -2120(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c0630:
	mov -2056(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c0633:
	mov -2048(%RBP),%RSP
	add $-2128, %RSP
	mov -2040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0681
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2208(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c063d
	jmp uuid_00000000000c063f
uuid_00000000000c063d:
	push %RBP
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	jmp uuid_00000000000c063a
	jmp uuid_00000000000c063c
uuid_00000000000c063a:
	push %RBP
	mov -2176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0637
	jmp uuid_00000000000c0639
uuid_00000000000c0637:
	push %RBP
	mov -2168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0634
	jmp uuid_00000000000c0636
uuid_00000000000c0634:
	movb $1, -2216(%rbp)
uuid_00000000000c0636:
	mov -2344(%RBP),%RSP
	add $-2416, %RSP
uuid_00000000000c0639:
	mov -2264(%RBP),%RSP
	add $-2416, %RSP
uuid_00000000000c063c:
	mov -2232(%RBP),%RSP
	add $-2416, %RSP
uuid_00000000000c063f:
	mov -2224(%RBP),%RSP
	add $-2416, %RSP
	mov -2216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c067e
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2496(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0643
	jmp uuid_00000000000c0645
uuid_00000000000c0643:
	push %RBP
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	jmp uuid_00000000000c0640
	jmp uuid_00000000000c0642
uuid_00000000000c0640:
	movb $1, -2504(%rbp)
uuid_00000000000c0642:
	mov -2520(%RBP),%RSP
	add $-2544, %RSP
uuid_00000000000c0645:
	mov -2512(%RBP),%RSP
	add $-2544, %RSP
	mov -2504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c067b
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2624(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c064c
	jmp uuid_00000000000c064e
uuid_00000000000c064c:
	push %RBP
	mov -2616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0649
	jmp uuid_00000000000c064b
uuid_00000000000c0649:
	push %RBP
	mov -2608(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0646
	jmp uuid_00000000000c0648
uuid_00000000000c0646:
	movb $1, -2632(%rbp)
uuid_00000000000c0648:
	mov -2728(%RBP),%RSP
	add $-2800, %RSP
uuid_00000000000c064b:
	mov -2648(%RBP),%RSP
	add $-2800, %RSP
uuid_00000000000c064e:
	mov -2640(%RBP),%RSP
	add $-2800, %RSP
	mov -2632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0678
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2880(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0655
	jmp uuid_00000000000c0657
uuid_00000000000c0655:
	push %RBP
	mov -2872(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0652
	jmp uuid_00000000000c0654
uuid_00000000000c0652:
	push %RBP
	mov -2864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c064f
	jmp uuid_00000000000c0651
uuid_00000000000c064f:
	movb $1, -2888(%rbp)
uuid_00000000000c0651:
	mov -2984(%RBP),%RSP
	add $-3056, %RSP
uuid_00000000000c0654:
	mov -2904(%RBP),%RSP
	add $-3056, %RSP
uuid_00000000000c0657:
	mov -2896(%RBP),%RSP
	add $-3056, %RSP
	mov -2888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0675
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -3136(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c065e
	jmp uuid_00000000000c0660
uuid_00000000000c065e:
	push %RBP
	mov -3128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c065b
	jmp uuid_00000000000c065d
uuid_00000000000c065b:
	push %RBP
	pushq -3072(%RBP)
	pushq -3080(%RBP)
	pushq -3088(%RBP)
	pushq -3096(%RBP)
	pushq -3104(%RBP)
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	jmp uuid_00000000000c0658
	jmp uuid_00000000000c065a
uuid_00000000000c0658:
	movb $1, -3144(%rbp)
uuid_00000000000c065a:
	mov -3240(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c065d:
	mov -3160(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c0660:
	mov -3152(%RBP),%RSP
	add $-3296, %RSP
	mov -3144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0672
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -3376(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0667
	jmp uuid_00000000000c0669
uuid_00000000000c0667:
	push %RBP
	mov -3368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0664
	jmp uuid_00000000000c0666
uuid_00000000000c0664:
	push %RBP
	mov -3360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0661
	jmp uuid_00000000000c0663
uuid_00000000000c0661:
	movb $1, -3384(%rbp)
uuid_00000000000c0663:
	mov -3480(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c0666:
	mov -3400(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c0669:
	mov -3392(%RBP),%RSP
	add $-3552, %RSP
	mov -3384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c066f
	push %RBP
	jmp uuid_00000000000c066c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c066b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c066e
uuid_00000000000c066c:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c066a
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c066e:
	mov -3560(%RBP),%RSP
	add $-3560, %RSP
	jmp uuid_00000000000c0671
uuid_00000000000c066f:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3488(%rbp)
	pushq -3496(%rbp)
	pushq -3504(%rbp)
	pushq -3512(%rbp)
	pushq -3520(%rbp)
	pushq -3528(%rbp)
	pushq -3536(%rbp)
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3408(%rbp)
	pushq -3416(%rbp)
	pushq -3424(%rbp)
	pushq -3432(%rbp)
	pushq -3440(%rbp)
	pushq -3448(%rbp)
	pushq -3456(%rbp)
	pushq -3464(%rbp)
	pushq -3472(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c0671:
	mov -3304(%RBP),%RSP
	add $-3552, %RSP
	jmp uuid_00000000000c0674
uuid_00000000000c0672:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3248(%rbp)
	pushq -3256(%rbp)
	pushq -3264(%rbp)
	pushq -3272(%rbp)
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	pushq -3184(%rbp)
	pushq -3192(%rbp)
	pushq -3200(%rbp)
	pushq -3208(%rbp)
	pushq -3216(%rbp)
	pushq -3224(%rbp)
	pushq -3232(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c0674:
	mov -3064(%RBP),%RSP
	add $-3296, %RSP
	jmp uuid_00000000000c0677
uuid_00000000000c0675:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq -3008(%rbp)
	pushq -3016(%rbp)
	pushq -3024(%rbp)
	pushq -3032(%rbp)
	pushq -3040(%rbp)
	pushq -3048(%rbp)
	pushq -3056(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2960(%rbp)
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c0677:
	mov -2808(%RBP),%RSP
	add $-3056, %RSP
	jmp uuid_00000000000c067a
uuid_00000000000c0678:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	pushq -2776(%rbp)
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	pushq -2696(%rbp)
	pushq -2704(%rbp)
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c067a:
	mov -2552(%RBP),%RSP
	add $-2800, %RSP
	jmp uuid_00000000000c067d
uuid_00000000000c067b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c067d:
	mov -2424(%RBP),%RSP
	add $-2544, %RSP
	jmp uuid_00000000000c0680
uuid_00000000000c067e:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-lhs : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	mov %RBX, %RBP
	call substitute_SB_lhs_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $5
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c0680:
	mov -2136(%RBP),%RSP
	add $-2416, %RSP
	jmp uuid_00000000000c0683
uuid_00000000000c0681:
	pushq -2128(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c0683:
	mov -1960(%RBP),%RSP
	add $-2128, %RSP
	jmp uuid_00000000000c0686
uuid_00000000000c0684:
	pushq -1952(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c0686:
	mov -1784(%RBP),%RSP
	add $-1952, %RSP
	jmp uuid_00000000000c0689
uuid_00000000000c0687:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1600(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c061f:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0620
	jmp uuid_00000000000c0621
uuid_00000000000c0620:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov -2024(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c061c
	push %RBP
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq $0
	push %RBP
	mov -2152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0612
	jmp uuid_00000000000c0614
uuid_00000000000c0612:
	push %RBP
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	jmp uuid_00000000000c060f
	jmp uuid_00000000000c0611
uuid_00000000000c060f:
	push %RBP
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	jmp uuid_00000000000c060c
	jmp uuid_00000000000c060e
uuid_00000000000c060c:
	push %RBP
	mov -2048(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0609
	jmp uuid_00000000000c060b
uuid_00000000000c0609:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0606
	jmp uuid_00000000000c0608
uuid_00000000000c0606:
	movb $1, -2160(%rbp)
uuid_00000000000c0608:
	mov -2304(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000c060b:
	mov -2288(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000c060e:
	mov -2256(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000c0611:
	mov -2176(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000c0614:
	mov -2168(%RBP),%RSP
	add $-2424, %RSP
	mov -2160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0619
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0618
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c061b
uuid_00000000000c0619:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2296(%rbp)
	pushq -1600(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0615
	movq -2424(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2416(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2408(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2400(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2392(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -2384(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -2376(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2368(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2360(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2352(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2344(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2336(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c0617
uuid_00000000000c0615:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0617:
	mov -2432(%RBP),%RSP
	add $-2432, %RSP
uuid_00000000000c061b:
	mov -2032(%RBP),%RSP
	add $-2432, %RSP
	jmp uuid_00000000000c061e
uuid_00000000000c061c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c061e:
	mov -1904(%RBP),%RSP
	add $-2024, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c061f
uuid_00000000000c0621:
uuid_00000000000c0689:
	mov -1112(%RBP),%RSP
	add $-1776, %RSP
	jmp uuid_00000000000c068c
uuid_00000000000c068a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000c05d9:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c05da
	jmp uuid_00000000000c05db
uuid_00000000000c05da:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c05d6
	push %RBP
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c05cc
	jmp uuid_00000000000c05ce
uuid_00000000000c05cc:
	push %RBP
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	jmp uuid_00000000000c05c9
	jmp uuid_00000000000c05cb
uuid_00000000000c05c9:
	push %RBP
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	jmp uuid_00000000000c05c6
	jmp uuid_00000000000c05c8
uuid_00000000000c05c6:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c05c3
	jmp uuid_00000000000c05c5
uuid_00000000000c05c3:
	push %RBP
	mov -1368(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c05c0
	jmp uuid_00000000000c05c2
uuid_00000000000c05c0:
	movb $1, -1488(%rbp)
uuid_00000000000c05c2:
	mov -1632(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000c05c5:
	mov -1616(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000c05c8:
	mov -1584(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000c05cb:
	mov -1504(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000c05ce:
	mov -1496(%RBP),%RSP
	add $-1752, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c05d3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c05d2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c05d5
uuid_00000000000c05d3:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1624(%rbp)
	pushq -928(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c05cf
	movq -1752(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1744(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1736(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1728(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1720(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1712(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c05d1
uuid_00000000000c05cf:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c05d1:
	mov -1760(%RBP),%RSP
	add $-1760, %RSP
uuid_00000000000c05d5:
	mov -1360(%RBP),%RSP
	add $-1760, %RSP
	jmp uuid_00000000000c05d8
uuid_00000000000c05d6:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c05d8:
	mov -1232(%RBP),%RSP
	add $-1352, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c05d9
uuid_00000000000c05db:
uuid_00000000000c068c:
	mov -440(%RBP),%RSP
	add $-1104, %RSP
	jmp uuid_00000000000c068f
uuid_00000000000c068d:
uuid_00000000000c068f:
	mov -360(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000c0692
uuid_00000000000c0690:
uuid_00000000000c0692:
	mov -280(%RBP),%RSP
	add $-352, %RSP
	subq $72, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
substitute_CL_ArrowSConsSStringSList:
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c06bf
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0696
	jmp uuid_00000000000c0698
uuid_00000000000c0696:
	push %RBP
	mov -160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0693
	jmp uuid_00000000000c0695
uuid_00000000000c0693:
	movb $1, -176(%rbp)
uuid_00000000000c0695:
	mov -192(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000c0698:
	mov -184(%RBP),%RSP
	add $-200, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c06bc
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c06b5
	jmp uuid_00000000000c06b7
uuid_00000000000c06b5:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c06b2
	jmp uuid_00000000000c06b4
uuid_00000000000c06b2:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c06af
	jmp uuid_00000000000c06b1
uuid_00000000000c06af:
	movb $1, -240(%rbp)
uuid_00000000000c06b1:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c06b4:
	mov -256(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000c06b7:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c06b9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c06b8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c06bb
uuid_00000000000c06b9:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<StringSList,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowSConsSStringSList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<StringSList,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowSConsSStringSList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c06bb:
	mov -208(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c06be
uuid_00000000000c06bc:
uuid_00000000000c06ac:
#call function non-zero : Arrow<StringSList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64StringSList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c06ad
	jmp uuid_00000000000c06ae
uuid_00000000000c06ad:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c06a2
	jmp uuid_00000000000c06a4
uuid_00000000000c06a2:
	push %RBP
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	jmp uuid_00000000000c069f
	jmp uuid_00000000000c06a1
uuid_00000000000c069f:
	push %RBP
	mov -272(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c069c
	jmp uuid_00000000000c069e
uuid_00000000000c069c:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0699
	jmp uuid_00000000000c069b
uuid_00000000000c0699:
	movb $1, -312(%rbp)
uuid_00000000000c069b:
	mov -376(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c069e:
	mov -360(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c06a1:
	mov -328(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c06a4:
	mov -320(%RBP),%RSP
	add $-424, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c06a9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c06a8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c06ab
uuid_00000000000c06a9:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c06a5
	jmp uuid_00000000000c06a7
uuid_00000000000c06a5:
	movq -352(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000c06a7:
	mov -432(%RBP),%RSP
	add $-432, %RSP
	movq -424(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c06ab:
	mov -256(%RBP),%RSP
	add $-432, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c06ac
uuid_00000000000c06ae:
uuid_00000000000c06be:
	mov -144(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c06c1
uuid_00000000000c06bf:
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000c06c1:
	mov -112(%RBP),%RSP
	add $-136, %RSP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	subq $24, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
specialize_CL_ArrowNilConsTypeConsTContextConsTypeString:
	push %RBP
#call function is-special : Arrow<Cons<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_special_CL_ArrowU64ConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0700
#call function normalize : Arrow<TContext,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c06fa:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c06fb
	jmp uuid_00000000000c06fc
uuid_00000000000c06fb:
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	push %RBP
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c06f7
	push %RBP
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c06ce
	jmp uuid_00000000000c06d0
uuid_00000000000c06ce:
	push %RBP
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	jmp uuid_00000000000c06cb
	jmp uuid_00000000000c06cd
uuid_00000000000c06cb:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000c06c8
	jmp uuid_00000000000c06ca
uuid_00000000000c06c8:
	push %RBP
	mov -656(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c06c5
	jmp uuid_00000000000c06c7
uuid_00000000000c06c5:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c06c2
	jmp uuid_00000000000c06c4
uuid_00000000000c06c2:
	movb $1, -768(%rbp)
uuid_00000000000c06c4:
	mov -912(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c06c7:
	mov -896(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c06ca:
	mov -864(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c06cd:
	mov -784(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000c06d0:
	mov -776(%RBP),%RSP
	add $-1032, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c06f4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c06f3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c06f6
uuid_00000000000c06f4:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $uuid_00000000000bed7b
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c06f0
	jmp uuid_00000000000c06f2
uuid_00000000000c06f0:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c06ed
	jmp uuid_00000000000c06ef
uuid_00000000000c06ed:
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	push %RBP
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c06e3
	jmp uuid_00000000000c06e5
uuid_00000000000c06e3:
	push %RBP
	mov -1192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1296(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c06da
	jmp uuid_00000000000c06dc
uuid_00000000000c06da:
	push %RBP
	jmp uuid_00000000000c06d7
	jmp uuid_00000000000c06d9
uuid_00000000000c06d7:
	push %RBP
	jmp uuid_00000000000c06d4
	jmp uuid_00000000000c06d6
uuid_00000000000c06d4:
	push %RBP
	jmp uuid_00000000000c06d1
	jmp uuid_00000000000c06d3
uuid_00000000000c06d1:
	movb $1, -1304(%rbp)
uuid_00000000000c06d3:
	mov -1336(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000c06d6:
	mov -1328(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000c06d9:
	mov -1320(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000c06dc:
	mov -1312(%RBP),%RSP
	add $-1336, %RSP
	mov -1304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c06e0
	jmp uuid_00000000000c06e2
uuid_00000000000c06e0:
	push %RBP
	jmp uuid_00000000000c06dd
	jmp uuid_00000000000c06df
uuid_00000000000c06dd:
	movb $1, -1208(%rbp)
uuid_00000000000c06df:
	mov -1344(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c06e2:
	mov -1224(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c06e5:
	mov -1216(%RBP),%RSP
	add $-1344, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c06ea
	push %RBP
	jmp uuid_00000000000c06e7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c06e6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c06e9
uuid_00000000000c06e7:
uuid_00000000000c06e9:
	mov -1352(%RBP),%RSP
	add $-1352, %RSP
	jmp uuid_00000000000c06ec
uuid_00000000000c06ea:
	movq -856(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -832(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -824(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -816(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -200(%rbp)
uuid_00000000000c06ec:
	mov -1128(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c06ef:
	mov -1048(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c06f2:
	mov -1040(%RBP),%RSP
	add $-1344, %RSP
	movq -1032(%rbp), %r15
	movq %r15, -384(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -376(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -368(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -272(%rbp)
uuid_00000000000c06f6:
	mov -640(%RBP),%RSP
	add $-1344, %RSP
	jmp uuid_00000000000c06f9
uuid_00000000000c06f7:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
uuid_00000000000c06f9:
	mov -512(%RBP),%RSP
	add $-632, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000c06fa
uuid_00000000000c06fc:
#call function mark-as-special : Arrow<Cons<String,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mark_SB_as_SB_special_CL_ArrowNilConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c06fd
	jmp uuid_00000000000c06ff
uuid_00000000000c06fd:
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
#call function infer-global-context : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call infer_SB_global_SB_context_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
uuid_00000000000c06ff:
	mov -392(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000c0702
uuid_00000000000c0700:
uuid_00000000000c0702:
	mov -192(%RBP),%RSP
	add $-192, %RSP
	mov %rbp, %rsp
	sub $184, %rsp
	ret
mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsU64ConsListTypeConsU64ConsStringType:
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0716
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c070c
	jmp uuid_00000000000c070e
uuid_00000000000c070c:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0709
	jmp uuid_00000000000c070b
uuid_00000000000c0709:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	jmp uuid_00000000000c0706
	jmp uuid_00000000000c0708
uuid_00000000000c0706:
	movb $1, -240(%rbp)
uuid_00000000000c0708:
	mov -304(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c070b:
	mov -256(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000c070e:
	mov -248(%RBP),%RSP
	add $-328, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0713
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0712
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0715
uuid_00000000000c0713:
	push %RBP
#call function is-parameter-flat : Arrow<Cons<Cons<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_SB_parameter_SB_flat_CL_ArrowU64ConsU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c070f
	jmp uuid_00000000000c0711
uuid_00000000000c070f:
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0711:
	mov -336(%RBP),%RSP
	add $-336, %RSP
#call function mark-constructor-flat-parameters : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0715:
	mov -192(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000c0718
uuid_00000000000c0716:
uuid_00000000000c0718:
	mov -144(%RBP),%RSP
	add $-184, %RSP
	mov %rbp, %rsp
	sub $96, %rsp
	ret
mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0731
	jmp uuid_00000000000c0733
uuid_00000000000c0731:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0728
	jmp uuid_00000000000c072a
uuid_00000000000c0728:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c071f
	jmp uuid_00000000000c0721
uuid_00000000000c071f:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c071c
	jmp uuid_00000000000c071e
uuid_00000000000c071c:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000c0719
	jmp uuid_00000000000c071b
uuid_00000000000c0719:
	movb $1, -248(%rbp)
uuid_00000000000c071b:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c071e:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000c0721:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0725
	jmp uuid_00000000000c0727
uuid_00000000000c0725:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c0722
	jmp uuid_00000000000c0724
uuid_00000000000c0722:
	movb $1, -184(%rbp)
uuid_00000000000c0724:
	mov -344(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c0727:
	mov -200(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c072a:
	mov -192(%RBP),%RSP
	add $-368, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c072e
	jmp uuid_00000000000c0730
uuid_00000000000c072e:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c072b
	jmp uuid_00000000000c072d
uuid_00000000000c072b:
	movb $1, -120(%rbp)
uuid_00000000000c072d:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c0730:
	mov -136(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c0733:
	mov -128(%RBP),%RSP
	add $-384, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c074d
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c073a
	jmp uuid_00000000000c073c
uuid_00000000000c073a:
	push %RBP
	mov -408(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0737
	jmp uuid_00000000000c0739
uuid_00000000000c0737:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0734
	jmp uuid_00000000000c0736
uuid_00000000000c0734:
	movb $1, -424(%rbp)
uuid_00000000000c0736:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c0739:
	mov -440(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c073c:
	mov -432(%RBP),%RSP
	add $-496, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c074a
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0740
	jmp uuid_00000000000c0742
uuid_00000000000c0740:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c073d
	jmp uuid_00000000000c073f
uuid_00000000000c073d:
	movb $1, -536(%rbp)
uuid_00000000000c073f:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c0742:
	mov -544(%RBP),%RSP
	add $-560, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0747
	push %RBP
	jmp uuid_00000000000c0744
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0743
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0746
uuid_00000000000c0744:
uuid_00000000000c0746:
	mov -568(%RBP),%RSP
	add $-568, %RSP
	jmp uuid_00000000000c0749
uuid_00000000000c0747:
#call function mark-parameter-flat : Arrow<Cons<Cons<String,U64>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function parameter-number : Arrow<Cons<Type,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call parameter_SB_number_CL_ArrowU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_parameter_SB_flat_CL_ArrowNilConsU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0749:
	mov -504(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c074c
uuid_00000000000c074a:
#call function mark-constructor-flat-parameters : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -496(%rbp)
#call function arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $1
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c074c:
	mov -392(%RBP),%RSP
	add $-496, %RSP
	jmp uuid_00000000000c074f
uuid_00000000000c074d:
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c074f:
	mov -88(%RBP),%RSP
	add $-384, %RSP
	mov %rbp, %rsp
	sub $56, %rsp
	ret
infer_SB_type_SB_constructor_CL_ArrowU64ConsASTType:
	pushq $0
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0756
	jmp uuid_00000000000c0758
uuid_00000000000c0756:
	push %RBP
	jmp uuid_00000000000c0753
	jmp uuid_00000000000c0755
uuid_00000000000c0753:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0750
	jmp uuid_00000000000c0752
uuid_00000000000c0750:
	movb $1, -272(%rbp)
uuid_00000000000c0752:
	mov -296(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c0755:
	mov -288(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c0758:
	mov -280(%RBP),%RSP
	add $-304, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c077a
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0768
	jmp uuid_00000000000c076a
uuid_00000000000c0768:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0765
	jmp uuid_00000000000c0767
uuid_00000000000c0765:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c075f
	jmp uuid_00000000000c0761
uuid_00000000000c075f:
	push %RBP
	jmp uuid_00000000000c075c
	jmp uuid_00000000000c075e
uuid_00000000000c075c:
	push %RBP
	mov -496(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0759
	jmp uuid_00000000000c075b
uuid_00000000000c0759:
	movb $1, -568(%rbp)
uuid_00000000000c075b:
	mov -592(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c075e:
	mov -584(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c0761:
	mov -576(%RBP),%RSP
	add $-600, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0762
	jmp uuid_00000000000c0764
uuid_00000000000c0762:
	movb $1, -392(%rbp)
uuid_00000000000c0764:
	mov -488(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c0767:
	mov -408(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c076a:
	mov -400(%RBP),%RSP
	add $-600, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0777
	push %RBP
	jmp uuid_00000000000c0774
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0773
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0776
uuid_00000000000c0774:
uuid_00000000000c0776:
	mov -608(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000c0779
uuid_00000000000c0777:
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -600(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $1
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c076c
	jmp uuid_00000000000c076e
uuid_00000000000c076c:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c076b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c076e:
	mov -632(%RBP),%RSP
	add $-632, %RSP
	push %RBP
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0770
	jmp uuid_00000000000c0772
uuid_00000000000c0770:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c076f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0772:
	mov -640(%RBP),%RSP
	add $-640, %RSP
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bef54
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function set-type-fields : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call set_SB_type_SB_fields_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-class-of-tag : Arrow<Cons<String,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call index_SB_class_SB_of_SB_tag_CL_ArrowNilConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-fields-of-tag : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call index_SB_fields_SB_of_SB_tag_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,Type>,?>,String>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$type_SB_constructors_SB_index_CL_BTreeEqTypeStringBTreeEqTypeStringCaseNumber0, %r12
	push %R12
	pushq -600(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed7b
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsTypeConsStringArray_QM_BTreeEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -112(%rbp)
	mov -112(%RBP), %RAX
	mov $8, %R14
	addq %R14,%RAX
	movq %RAX, -112(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed38
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
uuid_00000000000c0779:
	mov -312(%RBP),%RSP
	add $-688, %RSP
	jmp uuid_00000000000c077c
uuid_00000000000c077a:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bef54
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bf13a
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed38
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed39
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed3b
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be71a
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function index-class-of-tag : Arrow<Cons<String,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call index_SB_class_SB_of_SB_tag_CL_ArrowNilConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-fields-of-tag : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call index_SB_fields_SB_of_SB_tag_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,Type>,?>,String>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$type_SB_constructors_SB_index_CL_BTreeEqTypeStringBTreeEqTypeStringCaseNumber0, %r12
	push %R12
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsTypeConsStringArray_QM_BTreeEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq $8, -112(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed38
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
uuid_00000000000c077c:
	mov -192(%RBP),%RSP
	add $-352, %RSP
	mov -112(%rbp), %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
infer_SB_global_SB_context_CL_ArrowNilAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c078c
	jmp uuid_00000000000c078e
uuid_00000000000c078c:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0789
	jmp uuid_00000000000c078b
uuid_00000000000c0789:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0783
	jmp uuid_00000000000c0785
uuid_00000000000c0783:
	push %RBP
	jmp uuid_00000000000c0780
	jmp uuid_00000000000c0782
uuid_00000000000c0780:
	push %RBP
	mov -344(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c077d
	jmp uuid_00000000000c077f
uuid_00000000000c077d:
	movb $1, -416(%rbp)
uuid_00000000000c077f:
	mov -440(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c0782:
	mov -432(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c0785:
	mov -424(%RBP),%RSP
	add $-448, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0786
	jmp uuid_00000000000c0788
uuid_00000000000c0786:
	movb $1, -240(%rbp)
uuid_00000000000c0788:
	mov -336(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c078b:
	mov -256(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000c078e:
	mov -248(%RBP),%RSP
	add $-448, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0835
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c07de
	jmp uuid_00000000000c07e0
uuid_00000000000c07de:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c07c9
	jmp uuid_00000000000c07cb
uuid_00000000000c07c9:
	push %RBP
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000c07c6
	jmp uuid_00000000000c07c8
uuid_00000000000c07c6:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c07bd
	jmp uuid_00000000000c07bf
uuid_00000000000c07bd:
	push %RBP
	mov -816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c07ab
	jmp uuid_00000000000c07ad
uuid_00000000000c07ab:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c07a2
	jmp uuid_00000000000c07a4
uuid_00000000000c07a2:
	push %RBP
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	jmp uuid_00000000000c079f
	jmp uuid_00000000000c07a1
uuid_00000000000c079f:
	movb $1, -1024(%rbp)
uuid_00000000000c07a1:
	mov -1040(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c07a4:
	mov -1032(%RBP),%RSP
	add $-1064, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c07a8
	jmp uuid_00000000000c07aa
uuid_00000000000c07a8:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c07a5
	jmp uuid_00000000000c07a7
uuid_00000000000c07a5:
	movb $1, -928(%rbp)
uuid_00000000000c07a7:
	mov -1072(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000c07aa:
	mov -944(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000c07ad:
	mov -936(%RBP),%RSP
	add $-1144, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c07ba
	jmp uuid_00000000000c07bc
uuid_00000000000c07ba:
	push %RBP
	mov -808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1224(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c07b4
	jmp uuid_00000000000c07b6
uuid_00000000000c07b4:
	push %RBP
	jmp uuid_00000000000c07b1
	jmp uuid_00000000000c07b3
uuid_00000000000c07b1:
	push %RBP
	mov -1160(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1264(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c07ae
	jmp uuid_00000000000c07b0
uuid_00000000000c07ae:
	movb $1, -1232(%rbp)
uuid_00000000000c07b0:
	mov -1256(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c07b3:
	mov -1248(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c07b6:
	mov -1240(%RBP),%RSP
	add $-1264, %RSP
	mov -1232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c07b7
	jmp uuid_00000000000c07b9
uuid_00000000000c07b7:
	movb $1, -832(%rbp)
uuid_00000000000c07b9:
	mov -1152(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c07bc:
	mov -848(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c07bf:
	mov -840(%RBP),%RSP
	add $-1264, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c07c3
	jmp uuid_00000000000c07c5
uuid_00000000000c07c3:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c07c0
	jmp uuid_00000000000c07c2
uuid_00000000000c07c0:
	movb $1, -704(%rbp)
uuid_00000000000c07c2:
	mov -1272(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c07c5:
	mov -752(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c07c8:
	mov -720(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c07cb:
	mov -712(%RBP),%RSP
	add $-1344, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c07db
	jmp uuid_00000000000c07dd
uuid_00000000000c07db:
	push %RBP
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq $0
	push %RBP
	mov -1408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c07d5
	jmp uuid_00000000000c07d7
uuid_00000000000c07d5:
	push %RBP
	jmp uuid_00000000000c07d2
	jmp uuid_00000000000c07d4
uuid_00000000000c07d2:
	push %RBP
	jmp uuid_00000000000c07cf
	jmp uuid_00000000000c07d1
uuid_00000000000c07cf:
	push %RBP
	mov -1360(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c07cc
	jmp uuid_00000000000c07ce
uuid_00000000000c07cc:
	movb $1, -1416(%rbp)
uuid_00000000000c07ce:
	mov -1448(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c07d1:
	mov -1440(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c07d4:
	mov -1432(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c07d7:
	mov -1424(%RBP),%RSP
	add $-1456, %RSP
	mov -1416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c07d8
	jmp uuid_00000000000c07da
uuid_00000000000c07d8:
	movb $1, -536(%rbp)
uuid_00000000000c07da:
	mov -1352(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c07dd:
	mov -552(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c07e0:
	mov -544(%RBP),%RSP
	add $-1456, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0832
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c081b
	jmp uuid_00000000000c081d
uuid_00000000000c081b:
	push %RBP
	mov -1528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1632(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0806
	jmp uuid_00000000000c0808
uuid_00000000000c0806:
	push %RBP
	mov -1624(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1728(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c07f4
	jmp uuid_00000000000c07f6
uuid_00000000000c07f4:
	push %RBP
	mov -1720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1824(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c07eb
	jmp uuid_00000000000c07ed
uuid_00000000000c07eb:
	push %RBP
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	jmp uuid_00000000000c07e8
	jmp uuid_00000000000c07ea
uuid_00000000000c07e8:
	movb $1, -1832(%rbp)
uuid_00000000000c07ea:
	mov -1848(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c07ed:
	mov -1840(%RBP),%RSP
	add $-1872, %RSP
	mov -1832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c07f1
	jmp uuid_00000000000c07f3
uuid_00000000000c07f1:
	push %RBP
	mov -1712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c07ee
	jmp uuid_00000000000c07f0
uuid_00000000000c07ee:
	movb $1, -1736(%rbp)
uuid_00000000000c07f0:
	mov -1880(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000c07f3:
	mov -1752(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000c07f6:
	mov -1744(%RBP),%RSP
	add $-1952, %RSP
	mov -1736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0803
	jmp uuid_00000000000c0805
uuid_00000000000c0803:
	push %RBP
	mov -1616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2032(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c07fd
	jmp uuid_00000000000c07ff
uuid_00000000000c07fd:
	push %RBP
	jmp uuid_00000000000c07fa
	jmp uuid_00000000000c07fc
uuid_00000000000c07fa:
	push %RBP
	mov -1968(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2072(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c07f7
	jmp uuid_00000000000c07f9
uuid_00000000000c07f7:
	movb $1, -2040(%rbp)
uuid_00000000000c07f9:
	mov -2064(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c07fc:
	mov -2056(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c07ff:
	mov -2048(%RBP),%RSP
	add $-2072, %RSP
	mov -2040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0800
	jmp uuid_00000000000c0802
uuid_00000000000c0800:
	movb $1, -1640(%rbp)
uuid_00000000000c0802:
	mov -1960(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c0805:
	mov -1656(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c0808:
	mov -1648(%RBP),%RSP
	add $-2072, %RSP
	mov -1640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0818
	jmp uuid_00000000000c081a
uuid_00000000000c0818:
	push %RBP
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq $0
	push %RBP
	mov -2136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0812
	jmp uuid_00000000000c0814
uuid_00000000000c0812:
	push %RBP
	jmp uuid_00000000000c080f
	jmp uuid_00000000000c0811
uuid_00000000000c080f:
	push %RBP
	jmp uuid_00000000000c080c
	jmp uuid_00000000000c080e
uuid_00000000000c080c:
	push %RBP
	mov -2088(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0809
	jmp uuid_00000000000c080b
uuid_00000000000c0809:
	movb $1, -2144(%rbp)
uuid_00000000000c080b:
	mov -2176(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000c080e:
	mov -2168(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000c0811:
	mov -2160(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000c0814:
	mov -2152(%RBP),%RSP
	add $-2184, %RSP
	mov -2144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0815
	jmp uuid_00000000000c0817
uuid_00000000000c0815:
	movb $1, -1544(%rbp)
uuid_00000000000c0817:
	mov -2080(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000c081a:
	mov -1560(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000c081d:
	mov -1552(%RBP),%RSP
	add $-2184, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c082f
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2264(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0824
	jmp uuid_00000000000c0826
uuid_00000000000c0824:
	push %RBP
	jmp uuid_00000000000c0821
	jmp uuid_00000000000c0823
uuid_00000000000c0821:
	push %RBP
	jmp uuid_00000000000c081e
	jmp uuid_00000000000c0820
uuid_00000000000c081e:
	movb $1, -2272(%rbp)
uuid_00000000000c0820:
	mov -2296(%RBP),%RSP
	add $-2296, %RSP
uuid_00000000000c0823:
	mov -2288(%RBP),%RSP
	add $-2296, %RSP
uuid_00000000000c0826:
	mov -2280(%RBP),%RSP
	add $-2296, %RSP
	mov -2272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c082c
	push %RBP
	jmp uuid_00000000000c0829
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0828
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c082b
uuid_00000000000c0829:
uuid_00000000000c082b:
	mov -2304(%RBP),%RSP
	add $-2304, %RSP
	jmp uuid_00000000000c082e
uuid_00000000000c082c:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0827
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c082e:
	mov -2192(%RBP),%RSP
	add $-2296, %RSP
	jmp uuid_00000000000c0831
uuid_00000000000c082f:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beaf8
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
#call function mark-global-as-seen : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call mark_SB_global_SB_as_SB_seen_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0831:
	mov -1464(%RBP),%RSP
	add $-2208, %RSP
	jmp uuid_00000000000c0834
uuid_00000000000c0832:
#call function typeof-lhs : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	mov %RBX, %RBP
	call typeof_SB_lhs_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c07e1
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1504(%RBP)
	popq -1496(%RBP)
	popq -1488(%RBP)
	jmp uuid_00000000000c07e3
uuid_00000000000c07e1:
uuid_00000000000c07e3:
	mov -1512(%RBP),%RSP
	add $-1512, %RSP
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed7b
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function enrich : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call enrich_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -1536(%RBP)
	popq -1528(%RBP)
	popq -1520(%RBP)
	push %RBP
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c07e5
	jmp uuid_00000000000c07e7
uuid_00000000000c07e5:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c07e4
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c07e7:
	mov -1544(%RBP),%RSP
	add $-1544, %RSP
#call function mark-global-as-seen : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call mark_SB_global_SB_as_SB_seen_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1456(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	mov $global_SB_type_SB_context_CL_TContextTContextCaseNumber2, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
uuid_00000000000c0834:
	mov -456(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000c0837
uuid_00000000000c0835:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function infer-type-definition : Arrow<Cons<Cons<Type,AST>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $0
	mov %RBX, %RBP
	call infer_SB_type_SB_definition_CL_ArrowU64ConsU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0795
	jmp uuid_00000000000c0797
uuid_00000000000c0795:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0792
	jmp uuid_00000000000c0794
uuid_00000000000c0792:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c078f
	jmp uuid_00000000000c0791
uuid_00000000000c078f:
	movb $1, -544(%rbp)
uuid_00000000000c0791:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c0794:
	mov -560(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c0797:
	mov -552(%RBP),%RSP
	add $-616, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c079c
	push %RBP
	jmp uuid_00000000000c0799
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0798
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c079b
uuid_00000000000c0799:
uuid_00000000000c079b:
	mov -624(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000c079e
uuid_00000000000c079c:
#call function index-size-of-class : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call index_SB_size_SB_of_SB_class_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c079e:
	mov -512(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c0837:
	mov -160(%RBP),%RSP
	add $-616, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
assert_SB_well_SB_typed_CL_ArrowNilAST:
uuid_00000000000c0845:
#call function is-seq : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call is_SB_seq_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0846
	jmp uuid_00000000000c0847
uuid_00000000000c0846:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c083e
	jmp uuid_00000000000c0840
uuid_00000000000c083e:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c083b
	jmp uuid_00000000000c083d
uuid_00000000000c083b:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0838
	jmp uuid_00000000000c083a
uuid_00000000000c0838:
	movb $1, -240(%rbp)
uuid_00000000000c083a:
	mov -336(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c083d:
	mov -256(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c0840:
	mov -248(%RBP),%RSP
	add $-408, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0842
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0841
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0844
uuid_00000000000c0842:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -408(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c0844:
	mov -160(%RBP),%RSP
	add $-408, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0845
uuid_00000000000c0847:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c09c8
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c09c5
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c084e
	jmp uuid_00000000000c0850
uuid_00000000000c084e:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c084b
	jmp uuid_00000000000c084d
uuid_00000000000c084b:
	push %RBP
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	jmp uuid_00000000000c0848
	jmp uuid_00000000000c084a
uuid_00000000000c0848:
	movb $1, -400(%rbp)
uuid_00000000000c084a:
	mov -496(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c084d:
	mov -416(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c0850:
	mov -408(%RBP),%RSP
	add $-552, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09c2
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c085a
	jmp uuid_00000000000c085c
uuid_00000000000c085a:
	push %RBP
	jmp uuid_00000000000c0857
	jmp uuid_00000000000c0859
uuid_00000000000c0857:
	push %RBP
	jmp uuid_00000000000c0854
	jmp uuid_00000000000c0856
uuid_00000000000c0854:
	movb $1, -640(%rbp)
uuid_00000000000c0856:
	mov -664(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c0859:
	mov -656(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c085c:
	mov -648(%RBP),%RSP
	add $-664, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09bf
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0878
	jmp uuid_00000000000c087a
uuid_00000000000c0878:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0875
	jmp uuid_00000000000c0877
uuid_00000000000c0875:
	push %RBP
	mov -728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c086f
	jmp uuid_00000000000c0871
uuid_00000000000c086f:
	push %RBP
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	jmp uuid_00000000000c086c
	jmp uuid_00000000000c086e
uuid_00000000000c086c:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0869
	jmp uuid_00000000000c086b
uuid_00000000000c0869:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0863
	jmp uuid_00000000000c0865
uuid_00000000000c0863:
	push %RBP
	jmp uuid_00000000000c0860
	jmp uuid_00000000000c0862
uuid_00000000000c0860:
	push %RBP
	mov -1064(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c085d
	jmp uuid_00000000000c085f
uuid_00000000000c085d:
	movb $1, -1136(%rbp)
uuid_00000000000c085f:
	mov -1160(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c0862:
	mov -1152(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c0865:
	mov -1144(%RBP),%RSP
	add $-1168, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0866
	jmp uuid_00000000000c0868
uuid_00000000000c0866:
	movb $1, -928(%rbp)
uuid_00000000000c0868:
	mov -1056(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c086b:
	mov -976(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c086e:
	mov -944(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c0871:
	mov -936(%RBP),%RSP
	add $-1168, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0872
	jmp uuid_00000000000c0874
uuid_00000000000c0872:
	movb $1, -752(%rbp)
uuid_00000000000c0874:
	mov -848(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c0877:
	mov -768(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c087a:
	mov -760(%RBP),%RSP
	add $-1168, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09bc
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1248(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c088a
	jmp uuid_00000000000c088c
uuid_00000000000c088a:
	push %RBP
	jmp uuid_00000000000c0887
	jmp uuid_00000000000c0889
uuid_00000000000c0887:
	push %RBP
	mov -1232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0881
	jmp uuid_00000000000c0883
uuid_00000000000c0881:
	push %RBP
	jmp uuid_00000000000c087e
	jmp uuid_00000000000c0880
uuid_00000000000c087e:
	push %RBP
	mov -1288(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq $uuid_00000000000beb85
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c087b
	jmp uuid_00000000000c087d
uuid_00000000000c087b:
	movb $1, -1360(%rbp)
uuid_00000000000c087d:
	mov -1384(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c0880:
	mov -1376(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c0883:
	mov -1368(%RBP),%RSP
	add $-1392, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0884
	jmp uuid_00000000000c0886
uuid_00000000000c0884:
	movb $1, -1256(%rbp)
uuid_00000000000c0886:
	mov -1280(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c0889:
	mov -1272(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c088c:
	mov -1264(%RBP),%RSP
	add $-1392, %RSP
	mov -1256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09b9
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1472(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c08a5
	jmp uuid_00000000000c08a7
uuid_00000000000c08a5:
	push %RBP
	mov -1464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1568(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0893
	jmp uuid_00000000000c0895
uuid_00000000000c0893:
	push %RBP
	jmp uuid_00000000000c0890
	jmp uuid_00000000000c0892
uuid_00000000000c0890:
	push %RBP
	jmp uuid_00000000000c088d
	jmp uuid_00000000000c088f
uuid_00000000000c088d:
	movb $1, -1576(%rbp)
uuid_00000000000c088f:
	mov -1600(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c0892:
	mov -1592(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c0895:
	mov -1584(%RBP),%RSP
	add $-1600, %RSP
	mov -1576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c08a2
	jmp uuid_00000000000c08a4
uuid_00000000000c08a2:
	push %RBP
	mov -1456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1680(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c089c
	jmp uuid_00000000000c089e
uuid_00000000000c089c:
	push %RBP
	jmp uuid_00000000000c0899
	jmp uuid_00000000000c089b
uuid_00000000000c0899:
	push %RBP
	mov -1616(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1720(%rbp)
	pushq $uuid_00000000000beba2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0896
	jmp uuid_00000000000c0898
uuid_00000000000c0896:
	movb $1, -1688(%rbp)
uuid_00000000000c0898:
	mov -1712(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000c089b:
	mov -1704(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000c089e:
	mov -1696(%RBP),%RSP
	add $-1720, %RSP
	mov -1688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c089f
	jmp uuid_00000000000c08a1
uuid_00000000000c089f:
	movb $1, -1480(%rbp)
uuid_00000000000c08a1:
	mov -1608(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000c08a4:
	mov -1496(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000c08a7:
	mov -1488(%RBP),%RSP
	add $-1720, %RSP
	mov -1480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09b6
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1800(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c08c6
	jmp uuid_00000000000c08c8
uuid_00000000000c08c6:
	push %RBP
	mov -1792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c08b4
	jmp uuid_00000000000c08b6
uuid_00000000000c08b4:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1992(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c08ab
	jmp uuid_00000000000c08ad
uuid_00000000000c08ab:
	push %RBP
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	jmp uuid_00000000000c08a8
	jmp uuid_00000000000c08aa
uuid_00000000000c08a8:
	movb $1, -2000(%rbp)
uuid_00000000000c08aa:
	mov -2016(%RBP),%RSP
	add $-2040, %RSP
uuid_00000000000c08ad:
	mov -2008(%RBP),%RSP
	add $-2040, %RSP
	mov -2000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c08b1
	jmp uuid_00000000000c08b3
uuid_00000000000c08b1:
	push %RBP
	mov -1880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c08ae
	jmp uuid_00000000000c08b0
uuid_00000000000c08ae:
	movb $1, -1904(%rbp)
uuid_00000000000c08b0:
	mov -2048(%RBP),%RSP
	add $-2120, %RSP
uuid_00000000000c08b3:
	mov -1920(%RBP),%RSP
	add $-2120, %RSP
uuid_00000000000c08b6:
	mov -1912(%RBP),%RSP
	add $-2120, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c08c3
	jmp uuid_00000000000c08c5
uuid_00000000000c08c3:
	push %RBP
	mov -1784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2200(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c08bd
	jmp uuid_00000000000c08bf
uuid_00000000000c08bd:
	push %RBP
	jmp uuid_00000000000c08ba
	jmp uuid_00000000000c08bc
uuid_00000000000c08ba:
	push %RBP
	mov -2136(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2240(%rbp)
	pushq $uuid_00000000000be915
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c08b7
	jmp uuid_00000000000c08b9
uuid_00000000000c08b7:
	movb $1, -2208(%rbp)
uuid_00000000000c08b9:
	mov -2232(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000c08bc:
	mov -2224(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000c08bf:
	mov -2216(%RBP),%RSP
	add $-2240, %RSP
	mov -2208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c08c0
	jmp uuid_00000000000c08c2
uuid_00000000000c08c0:
	movb $1, -1808(%rbp)
uuid_00000000000c08c2:
	mov -2128(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000c08c5:
	mov -1824(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000c08c8:
	mov -1816(%RBP),%RSP
	add $-2240, %RSP
	mov -1808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09b3
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2320(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c08e7
	jmp uuid_00000000000c08e9
uuid_00000000000c08e7:
	push %RBP
	mov -2312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2416(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c08d5
	jmp uuid_00000000000c08d7
uuid_00000000000c08d5:
	push %RBP
	mov -2408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2512(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c08cc
	jmp uuid_00000000000c08ce
uuid_00000000000c08cc:
	push %RBP
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	jmp uuid_00000000000c08c9
	jmp uuid_00000000000c08cb
uuid_00000000000c08c9:
	movb $1, -2520(%rbp)
uuid_00000000000c08cb:
	mov -2536(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c08ce:
	mov -2528(%RBP),%RSP
	add $-2560, %RSP
	mov -2520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c08d2
	jmp uuid_00000000000c08d4
uuid_00000000000c08d2:
	push %RBP
	mov -2400(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c08cf
	jmp uuid_00000000000c08d1
uuid_00000000000c08cf:
	movb $1, -2424(%rbp)
uuid_00000000000c08d1:
	mov -2568(%RBP),%RSP
	add $-2640, %RSP
uuid_00000000000c08d4:
	mov -2440(%RBP),%RSP
	add $-2640, %RSP
uuid_00000000000c08d7:
	mov -2432(%RBP),%RSP
	add $-2640, %RSP
	mov -2424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c08e4
	jmp uuid_00000000000c08e6
uuid_00000000000c08e4:
	push %RBP
	mov -2304(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2720(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c08de
	jmp uuid_00000000000c08e0
uuid_00000000000c08de:
	push %RBP
	jmp uuid_00000000000c08db
	jmp uuid_00000000000c08dd
uuid_00000000000c08db:
	push %RBP
	mov -2656(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2760(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c08d8
	jmp uuid_00000000000c08da
uuid_00000000000c08d8:
	movb $1, -2728(%rbp)
uuid_00000000000c08da:
	mov -2752(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c08dd:
	mov -2744(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c08e0:
	mov -2736(%RBP),%RSP
	add $-2760, %RSP
	mov -2728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c08e1
	jmp uuid_00000000000c08e3
uuid_00000000000c08e1:
	movb $1, -2328(%rbp)
uuid_00000000000c08e3:
	mov -2648(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c08e6:
	mov -2344(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000c08e9:
	mov -2336(%RBP),%RSP
	add $-2760, %RSP
	mov -2328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09b0
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2840(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c090b
	jmp uuid_00000000000c090d
uuid_00000000000c090b:
	push %RBP
	mov -2832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0908
	jmp uuid_00000000000c090a
uuid_00000000000c0908:
	push %RBP
	mov -2824(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3016(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0902
	jmp uuid_00000000000c0904
uuid_00000000000c0902:
	push %RBP
	mov -3008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c08ff
	jmp uuid_00000000000c0901
uuid_00000000000c08ff:
	push %RBP
	mov -3000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c08f9
	jmp uuid_00000000000c08fb
uuid_00000000000c08f9:
	push %RBP
	mov -3184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c08f6
	jmp uuid_00000000000c08f8
uuid_00000000000c08f6:
	push %RBP
	mov -3176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c08f0
	jmp uuid_00000000000c08f2
uuid_00000000000c08f0:
	push %RBP
	jmp uuid_00000000000c08ed
	jmp uuid_00000000000c08ef
uuid_00000000000c08ed:
	push %RBP
	mov -3304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3408(%rbp)
	pushq $uuid_00000000000bebb5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c08ea
	jmp uuid_00000000000c08ec
uuid_00000000000c08ea:
	movb $1, -3376(%rbp)
uuid_00000000000c08ec:
	mov -3400(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c08ef:
	mov -3392(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c08f2:
	mov -3384(%RBP),%RSP
	add $-3408, %RSP
	mov -3376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c08f3
	jmp uuid_00000000000c08f5
uuid_00000000000c08f3:
	movb $1, -3200(%rbp)
uuid_00000000000c08f5:
	mov -3296(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c08f8:
	mov -3216(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c08fb:
	mov -3208(%RBP),%RSP
	add $-3408, %RSP
	mov -3200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c08fc
	jmp uuid_00000000000c08fe
uuid_00000000000c08fc:
	movb $1, -3024(%rbp)
uuid_00000000000c08fe:
	mov -3120(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c0901:
	mov -3040(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c0904:
	mov -3032(%RBP),%RSP
	add $-3408, %RSP
	mov -3024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0905
	jmp uuid_00000000000c0907
uuid_00000000000c0905:
	movb $1, -2848(%rbp)
uuid_00000000000c0907:
	mov -2944(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c090a:
	mov -2864(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000c090d:
	mov -2856(%RBP),%RSP
	add $-3408, %RSP
	mov -2848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09ad
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -3488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0927
	jmp uuid_00000000000c0929
uuid_00000000000c0927:
	push %RBP
	mov -3480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0924
	jmp uuid_00000000000c0926
uuid_00000000000c0924:
	push %RBP
	mov -3472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3664(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c091e
	jmp uuid_00000000000c0920
uuid_00000000000c091e:
	push %RBP
	mov -3656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c091b
	jmp uuid_00000000000c091d
uuid_00000000000c091b:
	push %RBP
	mov -3648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3840(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0915
	jmp uuid_00000000000c0917
uuid_00000000000c0915:
	push %RBP
	jmp uuid_00000000000c0912
	jmp uuid_00000000000c0914
uuid_00000000000c0912:
	push %RBP
	mov -3776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3880(%rbp)
	pushq $uuid_00000000000c090e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c090f
	jmp uuid_00000000000c0911
uuid_00000000000c090f:
	movb $1, -3848(%rbp)
uuid_00000000000c0911:
	mov -3872(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c0914:
	mov -3864(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c0917:
	mov -3856(%RBP),%RSP
	add $-3880, %RSP
	mov -3848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0918
	jmp uuid_00000000000c091a
uuid_00000000000c0918:
	movb $1, -3672(%rbp)
uuid_00000000000c091a:
	mov -3768(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c091d:
	mov -3688(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c0920:
	mov -3680(%RBP),%RSP
	add $-3880, %RSP
	mov -3672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0921
	jmp uuid_00000000000c0923
uuid_00000000000c0921:
	movb $1, -3496(%rbp)
uuid_00000000000c0923:
	mov -3592(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c0926:
	mov -3512(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000c0929:
	mov -3504(%RBP),%RSP
	add $-3880, %RSP
	mov -3496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09aa
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -3960(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c092d
	jmp uuid_00000000000c092f
uuid_00000000000c092d:
	push %RBP
	jmp uuid_00000000000c092a
	jmp uuid_00000000000c092c
uuid_00000000000c092a:
	movb $1, -3968(%rbp)
uuid_00000000000c092c:
	mov -3984(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c092f:
	mov -3976(%RBP),%RSP
	add $-3984, %RSP
	mov -3968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09a7
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4064(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c093f
	jmp uuid_00000000000c0941
uuid_00000000000c093f:
	push %RBP
	mov -4056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c093c
	jmp uuid_00000000000c093e
uuid_00000000000c093c:
	push %RBP
	mov -4048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4240(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0936
	jmp uuid_00000000000c0938
uuid_00000000000c0936:
	push %RBP
	jmp uuid_00000000000c0933
	jmp uuid_00000000000c0935
uuid_00000000000c0933:
	push %RBP
	mov -4176(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4280(%rbp)
	pushq $uuid_00000000000bec65
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0930
	jmp uuid_00000000000c0932
uuid_00000000000c0930:
	movb $1, -4248(%rbp)
uuid_00000000000c0932:
	mov -4272(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c0935:
	mov -4264(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c0938:
	mov -4256(%RBP),%RSP
	add $-4280, %RSP
	mov -4248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0939
	jmp uuid_00000000000c093b
uuid_00000000000c0939:
	movb $1, -4072(%rbp)
uuid_00000000000c093b:
	mov -4168(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c093e:
	mov -4088(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000c0941:
	mov -4080(%RBP),%RSP
	add $-4280, %RSP
	mov -4072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09a4
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4360(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0951
	jmp uuid_00000000000c0953
uuid_00000000000c0951:
	push %RBP
	mov -4352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c094e
	jmp uuid_00000000000c0950
uuid_00000000000c094e:
	push %RBP
	mov -4344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4536(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0948
	jmp uuid_00000000000c094a
uuid_00000000000c0948:
	push %RBP
	jmp uuid_00000000000c0945
	jmp uuid_00000000000c0947
uuid_00000000000c0945:
	push %RBP
	mov -4472(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4576(%rbp)
	pushq $uuid_00000000000bec52
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0942
	jmp uuid_00000000000c0944
uuid_00000000000c0942:
	movb $1, -4544(%rbp)
uuid_00000000000c0944:
	mov -4568(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000c0947:
	mov -4560(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000c094a:
	mov -4552(%RBP),%RSP
	add $-4576, %RSP
	mov -4544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c094b
	jmp uuid_00000000000c094d
uuid_00000000000c094b:
	movb $1, -4368(%rbp)
uuid_00000000000c094d:
	mov -4464(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000c0950:
	mov -4384(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000c0953:
	mov -4376(%RBP),%RSP
	add $-4576, %RSP
	mov -4368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09a1
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4656(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c095a
	jmp uuid_00000000000c095c
uuid_00000000000c095a:
	push %RBP
	jmp uuid_00000000000c0957
	jmp uuid_00000000000c0959
uuid_00000000000c0957:
	push %RBP
	mov -4592(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0954
	jmp uuid_00000000000c0956
uuid_00000000000c0954:
	movb $1, -4664(%rbp)
uuid_00000000000c0956:
	mov -4688(%RBP),%RSP
	add $-4696, %RSP
uuid_00000000000c0959:
	mov -4680(%RBP),%RSP
	add $-4696, %RSP
uuid_00000000000c095c:
	mov -4672(%RBP),%RSP
	add $-4696, %RSP
	mov -4664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c099e
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4776(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0963
	jmp uuid_00000000000c0965
uuid_00000000000c0963:
	push %RBP
	jmp uuid_00000000000c0960
	jmp uuid_00000000000c0962
uuid_00000000000c0960:
	push %RBP
	mov -4712(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c095d
	jmp uuid_00000000000c095f
uuid_00000000000c095d:
	movb $1, -4784(%rbp)
uuid_00000000000c095f:
	mov -4808(%RBP),%RSP
	add $-4816, %RSP
uuid_00000000000c0962:
	mov -4800(%RBP),%RSP
	add $-4816, %RSP
uuid_00000000000c0965:
	mov -4792(%RBP),%RSP
	add $-4816, %RSP
	mov -4784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c099b
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4896(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c096f
	jmp uuid_00000000000c0971
uuid_00000000000c096f:
	push %RBP
	pushq -4872(%RBP)
	pushq -4880(%RBP)
	pushq -4888(%RBP)
	jmp uuid_00000000000c096c
	jmp uuid_00000000000c096e
uuid_00000000000c096c:
	push %RBP
	mov -4864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0969
	jmp uuid_00000000000c096b
uuid_00000000000c0969:
	push %RBP
	mov -4856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0966
	jmp uuid_00000000000c0968
uuid_00000000000c0966:
	movb $1, -4904(%rbp)
uuid_00000000000c0968:
	mov -5032(%RBP),%RSP
	add $-5104, %RSP
uuid_00000000000c096b:
	mov -4952(%RBP),%RSP
	add $-5104, %RSP
uuid_00000000000c096e:
	mov -4920(%RBP),%RSP
	add $-5104, %RSP
uuid_00000000000c0971:
	mov -4912(%RBP),%RSP
	add $-5104, %RSP
	mov -4904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0998
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -5184(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0978
	jmp uuid_00000000000c097a
uuid_00000000000c0978:
	push %RBP
	mov -5176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0975
	jmp uuid_00000000000c0977
uuid_00000000000c0975:
	push %RBP
	mov -5168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0972
	jmp uuid_00000000000c0974
uuid_00000000000c0972:
	movb $1, -5192(%rbp)
uuid_00000000000c0974:
	mov -5288(%RBP),%RSP
	add $-5360, %RSP
uuid_00000000000c0977:
	mov -5208(%RBP),%RSP
	add $-5360, %RSP
uuid_00000000000c097a:
	mov -5200(%RBP),%RSP
	add $-5360, %RSP
	mov -5192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0995
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -5440(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0981
	jmp uuid_00000000000c0983
uuid_00000000000c0981:
	push %RBP
	mov -5432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c097e
	jmp uuid_00000000000c0980
uuid_00000000000c097e:
	push %RBP
	mov -5424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c097b
	jmp uuid_00000000000c097d
uuid_00000000000c097b:
	movb $1, -5448(%rbp)
uuid_00000000000c097d:
	mov -5544(%RBP),%RSP
	add $-5616, %RSP
uuid_00000000000c0980:
	mov -5464(%RBP),%RSP
	add $-5616, %RSP
uuid_00000000000c0983:
	mov -5456(%RBP),%RSP
	add $-5616, %RSP
	mov -5448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0992
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -5696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0987
	jmp uuid_00000000000c0989
uuid_00000000000c0987:
	push %RBP
	jmp uuid_00000000000c0984
	jmp uuid_00000000000c0986
uuid_00000000000c0984:
	movb $1, -5704(%rbp)
uuid_00000000000c0986:
	mov -5720(%RBP),%RSP
	add $-5720, %RSP
uuid_00000000000c0989:
	mov -5712(%RBP),%RSP
	add $-5720, %RSP
	mov -5704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c098f
	push %RBP
	jmp uuid_00000000000c098c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c098b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c098e
uuid_00000000000c098c:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c098a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c098e:
	mov -5728(%RBP),%RSP
	add $-5728, %RSP
	jmp uuid_00000000000c0991
uuid_00000000000c098f:
uuid_00000000000c0991:
	mov -5624(%RBP),%RSP
	add $-5720, %RSP
	jmp uuid_00000000000c0994
uuid_00000000000c0992:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0994:
	mov -5368(%RBP),%RSP
	add $-5616, %RSP
	jmp uuid_00000000000c0997
uuid_00000000000c0995:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0997:
	mov -5112(%RBP),%RSP
	add $-5360, %RSP
	jmp uuid_00000000000c099a
uuid_00000000000c0998:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c099a:
	mov -4824(%RBP),%RSP
	add $-5104, %RSP
	jmp uuid_00000000000c099d
uuid_00000000000c099b:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c099d:
	mov -4704(%RBP),%RSP
	add $-4816, %RSP
	jmp uuid_00000000000c09a0
uuid_00000000000c099e:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c09a0:
	mov -4584(%RBP),%RSP
	add $-4696, %RSP
	jmp uuid_00000000000c09a3
uuid_00000000000c09a1:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c09a3:
	mov -4288(%RBP),%RSP
	add $-4576, %RSP
	jmp uuid_00000000000c09a6
uuid_00000000000c09a4:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	pushq -4120(%rbp)
	pushq -4128(%rbp)
	pushq -4136(%rbp)
	pushq -4144(%rbp)
	pushq -4152(%rbp)
	pushq -4160(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c09a6:
	mov -3992(%RBP),%RSP
	add $-4280, %RSP
	jmp uuid_00000000000c09a9
uuid_00000000000c09a7:
uuid_00000000000c09a9:
	mov -3888(%RBP),%RSP
	add $-3984, %RSP
	jmp uuid_00000000000c09ac
uuid_00000000000c09aa:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3520(%rbp)
	pushq -3528(%rbp)
	pushq -3536(%rbp)
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3568(%rbp)
	pushq -3576(%rbp)
	pushq -3584(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c09ac:
	mov -3416(%RBP),%RSP
	add $-3880, %RSP
	jmp uuid_00000000000c09af
uuid_00000000000c09ad:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3224(%rbp)
	pushq -3232(%rbp)
	pushq -3240(%rbp)
	pushq -3248(%rbp)
	pushq -3256(%rbp)
	pushq -3264(%rbp)
	pushq -3272(%rbp)
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3048(%rbp)
	pushq -3056(%rbp)
	pushq -3064(%rbp)
	pushq -3072(%rbp)
	pushq -3080(%rbp)
	pushq -3088(%rbp)
	pushq -3096(%rbp)
	pushq -3104(%rbp)
	pushq -3112(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	pushq -2936(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c09af:
	mov -2768(%RBP),%RSP
	add $-3408, %RSP
	jmp uuid_00000000000c09b2
uuid_00000000000c09b0:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -2592(%rbp)
	pushq -2600(%rbp)
	pushq -2608(%rbp)
	pushq -2616(%rbp)
	pushq -2624(%rbp)
	pushq -2632(%rbp)
	pushq -2640(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c09b2:
	mov -2248(%RBP),%RSP
	add $-2760, %RSP
	jmp uuid_00000000000c09b5
uuid_00000000000c09b3:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c09b5:
	mov -1728(%RBP),%RSP
	add $-2240, %RSP
	jmp uuid_00000000000c09b8
uuid_00000000000c09b6:
uuid_00000000000c09b8:
	mov -1400(%RBP),%RSP
	add $-1720, %RSP
	jmp uuid_00000000000c09bb
uuid_00000000000c09b9:
uuid_00000000000c09bb:
	mov -1176(%RBP),%RSP
	add $-1392, %RSP
	jmp uuid_00000000000c09be
uuid_00000000000c09bc:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c09be:
	mov -672(%RBP),%RSP
	add $-1168, %RSP
	jmp uuid_00000000000c09c1
uuid_00000000000c09bf:
uuid_00000000000c09c1:
	mov -560(%RBP),%RSP
	add $-664, %RSP
	jmp uuid_00000000000c09c4
uuid_00000000000c09c2:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0851
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0853
uuid_00000000000c0851:
uuid_00000000000c0853:
	mov -560(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c09c4:
	mov -320(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c09c7
uuid_00000000000c09c5:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c09c7:
	mov -240(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c09ca
uuid_00000000000c09c8:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c09ca:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
assert_SB_one_SB_typed_CL_ArrowNilAST:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c09cb
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bece0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c09cd
uuid_00000000000c09cb:
uuid_00000000000c09cd:
	mov -88(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
infer_SB_ctx_CL_ArrowTContextConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c09f5
	jmp uuid_00000000000c09f7
uuid_00000000000c09f5:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c09e3
	jmp uuid_00000000000c09e5
uuid_00000000000c09e3:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c09d1
	jmp uuid_00000000000c09d3
uuid_00000000000c09d1:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c09ce
	jmp uuid_00000000000c09d0
uuid_00000000000c09ce:
	movb $1, -552(%rbp)
uuid_00000000000c09d0:
	mov -568(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c09d3:
	mov -560(%RBP),%RSP
	add $-592, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09e0
	jmp uuid_00000000000c09e2
uuid_00000000000c09e0:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c09da
	jmp uuid_00000000000c09dc
uuid_00000000000c09da:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000c09d7
	jmp uuid_00000000000c09d9
uuid_00000000000c09d7:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c09d4
	jmp uuid_00000000000c09d6
uuid_00000000000c09d4:
	movb $1, -680(%rbp)
uuid_00000000000c09d6:
	mov -760(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c09d9:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c09dc:
	mov -688(%RBP),%RSP
	add $-768, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09dd
	jmp uuid_00000000000c09df
uuid_00000000000c09dd:
	movb $1, -456(%rbp)
uuid_00000000000c09df:
	mov -600(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c09e2:
	mov -472(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c09e5:
	mov -464(%RBP),%RSP
	add $-768, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09f2
	jmp uuid_00000000000c09f4
uuid_00000000000c09f2:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c09ec
	jmp uuid_00000000000c09ee
uuid_00000000000c09ec:
	push %RBP
	jmp uuid_00000000000c09e9
	jmp uuid_00000000000c09eb
uuid_00000000000c09e9:
	push %RBP
	mov -784(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c09e6
	jmp uuid_00000000000c09e8
uuid_00000000000c09e6:
	movb $1, -856(%rbp)
uuid_00000000000c09e8:
	mov -880(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c09eb:
	mov -872(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c09ee:
	mov -864(%RBP),%RSP
	add $-888, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c09ef
	jmp uuid_00000000000c09f1
uuid_00000000000c09ef:
	movb $1, -360(%rbp)
uuid_00000000000c09f1:
	mov -776(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c09f4:
	mov -376(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c09f7:
	mov -368(%RBP),%RSP
	add $-888, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a36
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a28
	jmp uuid_00000000000c0a2a
uuid_00000000000c0a28:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1064(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a1f
	jmp uuid_00000000000c0a21
uuid_00000000000c0a1f:
	push %RBP
	mov -1056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a0d
	jmp uuid_00000000000c0a0f
uuid_00000000000c0a0d:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c09fb
	jmp uuid_00000000000c09fd
uuid_00000000000c09fb:
	push %RBP
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	jmp uuid_00000000000c09f8
	jmp uuid_00000000000c09fa
uuid_00000000000c09f8:
	movb $1, -1264(%rbp)
uuid_00000000000c09fa:
	mov -1280(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c09fd:
	mov -1272(%RBP),%RSP
	add $-1304, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a0a
	jmp uuid_00000000000c0a0c
uuid_00000000000c0a0a:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a04
	jmp uuid_00000000000c0a06
uuid_00000000000c0a04:
	push %RBP
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	jmp uuid_00000000000c0a01
	jmp uuid_00000000000c0a03
uuid_00000000000c0a01:
	push %RBP
	mov -1320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c09fe
	jmp uuid_00000000000c0a00
uuid_00000000000c09fe:
	movb $1, -1392(%rbp)
uuid_00000000000c0a00:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c0a03:
	mov -1408(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c0a06:
	mov -1400(%RBP),%RSP
	add $-1480, %RSP
	mov -1392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a07
	jmp uuid_00000000000c0a09
uuid_00000000000c0a07:
	movb $1, -1168(%rbp)
uuid_00000000000c0a09:
	mov -1312(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c0a0c:
	mov -1184(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c0a0f:
	mov -1176(%RBP),%RSP
	add $-1480, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a1c
	jmp uuid_00000000000c0a1e
uuid_00000000000c0a1c:
	push %RBP
	mov -1048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a16
	jmp uuid_00000000000c0a18
uuid_00000000000c0a16:
	push %RBP
	jmp uuid_00000000000c0a13
	jmp uuid_00000000000c0a15
uuid_00000000000c0a13:
	push %RBP
	mov -1496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1600(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0a10
	jmp uuid_00000000000c0a12
uuid_00000000000c0a10:
	movb $1, -1568(%rbp)
uuid_00000000000c0a12:
	mov -1592(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c0a15:
	mov -1584(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c0a18:
	mov -1576(%RBP),%RSP
	add $-1600, %RSP
	mov -1568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a19
	jmp uuid_00000000000c0a1b
uuid_00000000000c0a19:
	movb $1, -1072(%rbp)
uuid_00000000000c0a1b:
	mov -1488(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c0a1e:
	mov -1088(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000c0a21:
	mov -1080(%RBP),%RSP
	add $-1600, %RSP
	mov -1072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a25
	jmp uuid_00000000000c0a27
uuid_00000000000c0a25:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0a22
	jmp uuid_00000000000c0a24
uuid_00000000000c0a22:
	movb $1, -976(%rbp)
uuid_00000000000c0a24:
	mov -1608(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c0a27:
	mov -992(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c0a2a:
	mov -984(%RBP),%RSP
	add $-1680, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a33
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -1760(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a30
	push %RBP
	jmp uuid_00000000000c0a2d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0a2c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0a2f
uuid_00000000000c0a2d:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0a2b
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0a2f:
	mov -1768(%RBP),%RSP
	add $-1768, %RSP
	jmp uuid_00000000000c0a32
uuid_00000000000c0a30:
uuid_00000000000c0a32:
	mov -1688(%RBP),%RSP
	add $-1760, %RSP
	jmp uuid_00000000000c0a35
uuid_00000000000c0a33:
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1480(%rbp)
#call function as-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call as_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -1480(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq $7
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-ctx : Arrow<Cons<TContext,AST>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	mov %RBX, %RBP
	call infer_SB_ctx_CL_ArrowTContextConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0a35:
	mov -896(%RBP),%RSP
	add $-1680, %RSP
	jmp uuid_00000000000c0a38
uuid_00000000000c0a36:
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -768(%rbp)
#call function as-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call as_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -768(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq $7
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0a38:
	mov -280(%RBP),%RSP
	add $-888, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
infer_SB_tctx_CL_ArrowTContextConsListTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a48
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a41
	jmp uuid_00000000000c0a43
uuid_00000000000c0a41:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0a3e
	jmp uuid_00000000000c0a40
uuid_00000000000c0a3e:
	push %RBP
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	jmp uuid_00000000000c0a3b
	jmp uuid_00000000000c0a3d
uuid_00000000000c0a3b:
	movb $1, -312(%rbp)
uuid_00000000000c0a3d:
	mov -376(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c0a40:
	mov -328(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c0a43:
	mov -320(%RBP),%RSP
	add $-400, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a45
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0a44
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0a47
uuid_00000000000c0a45:
#call function infer-tctx : Arrow<Cons<TContext,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0a47:
	mov -264(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c0a4a
uuid_00000000000c0a48:
uuid_00000000000c0a4a:
	mov -216(%RBP),%RSP
	add $-256, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
infer_SB_tctx_CL_ArrowTContextConsTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a51
	jmp uuid_00000000000c0a53
uuid_00000000000c0a51:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0a4e
	jmp uuid_00000000000c0a50
uuid_00000000000c0a4e:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0a4b
	jmp uuid_00000000000c0a4d
uuid_00000000000c0a4b:
	movb $1, -216(%rbp)
uuid_00000000000c0a4d:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c0a50:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c0a53:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a6d
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a57
	jmp uuid_00000000000c0a59
uuid_00000000000c0a57:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0a54
	jmp uuid_00000000000c0a56
uuid_00000000000c0a54:
	movb $1, -328(%rbp)
uuid_00000000000c0a56:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c0a59:
	mov -336(%RBP),%RSP
	add $-352, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a6a
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a60
	jmp uuid_00000000000c0a62
uuid_00000000000c0a60:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0a5d
	jmp uuid_00000000000c0a5f
uuid_00000000000c0a5d:
	push %RBP
	jmp uuid_00000000000c0a5a
	jmp uuid_00000000000c0a5c
uuid_00000000000c0a5a:
	movb $1, -392(%rbp)
uuid_00000000000c0a5c:
	mov -456(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c0a5f:
	mov -408(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000c0a62:
	mov -400(%RBP),%RSP
	add $-456, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a67
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a64
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0a63
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0a66
uuid_00000000000c0a64:
uuid_00000000000c0a66:
	mov -464(%RBP),%RSP
	add $-488, %RSP
	jmp uuid_00000000000c0a69
uuid_00000000000c0a67:
#call function infer-tctx : Arrow<Cons<TContext,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0a69:
	mov -360(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000c0a6c
uuid_00000000000c0a6a:
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -352(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bf13a
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0a6c:
	mov -296(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c0a6f
uuid_00000000000c0a6d:
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0a6f:
	mov -184(%RBP),%RSP
	add $-288, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
compile_SB_exit_SB_cleanup_CL_ArrowSNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a70
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a71
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a72
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_data_SB_header_CL_ArrowSNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a73
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_text_SB_header_CL_ArrowSNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a74
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a75
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a76
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_init_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0a79
	jmp uuid_00000000000c0a7b
uuid_00000000000c0a79:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a77
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_init_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a78
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000c0a7b:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	push %RBP
	mov $main_SB_with_SB_argv_CL_U8, %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0a7e
	jmp uuid_00000000000c0a80
uuid_00000000000c0a7e:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a7c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a7d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000c0a80:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	push %RBP
	mov $main_SB_with_CL_U8, %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0a8b
	jmp uuid_00000000000c0a8d
uuid_00000000000c0a8b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a81
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a82
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	push %RBP
	mov $main_SB_with_SB_argv_CL_U8, %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0a85
	jmp uuid_00000000000c0a87
uuid_00000000000c0a85:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a83
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a84
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000c0a87:
	mov -64(%RBP),%RSP
	add $-64, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a88
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a89
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a8a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000c0a8d:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_CL_ArrowNilNil:
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber1, %r15
	pushq 0(%r15)
	push %RBP
	pushq -16(%rbp)
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a92
	push %RBP
	pushq -16(%rbp)
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a8f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0a8e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0a91
uuid_00000000000c0a8f:
#call function compile-blob : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_blob_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0a91:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	jmp uuid_00000000000c0a94
uuid_00000000000c0a92:
#call function compile-gnu : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_gnu_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0a94:
	mov -24(%RBP),%RSP
	add $-32, %RSP
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_blob_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c0aed:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0aee
	jmp uuid_00000000000c0aef
uuid_00000000000c0aee:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0aa4
	jmp uuid_00000000000c0aa6
uuid_00000000000c0aa4:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0a9b
	jmp uuid_00000000000c0a9d
uuid_00000000000c0a9b:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0a98
	jmp uuid_00000000000c0a9a
uuid_00000000000c0a98:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0a95
	jmp uuid_00000000000c0a97
uuid_00000000000c0a95:
	movb $1, -336(%rbp)
uuid_00000000000c0a97:
	mov -432(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c0a9a:
	mov -352(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c0a9d:
	mov -344(%RBP),%RSP
	add $-504, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0aa1
	jmp uuid_00000000000c0aa3
uuid_00000000000c0aa1:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0a9e
	jmp uuid_00000000000c0aa0
uuid_00000000000c0a9e:
	movb $1, -240(%rbp)
uuid_00000000000c0aa0:
	mov -512(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c0aa3:
	mov -256(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c0aa6:
	mov -248(%RBP),%RSP
	add $-584, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0aea
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ac2
	jmp uuid_00000000000c0ac4
uuid_00000000000c0ac2:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ab9
	jmp uuid_00000000000c0abb
uuid_00000000000c0ab9:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0ab6
	jmp uuid_00000000000c0ab8
uuid_00000000000c0ab6:
	push %RBP
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ab0
	jmp uuid_00000000000c0ab2
uuid_00000000000c0ab0:
	push %RBP
	jmp uuid_00000000000c0aad
	jmp uuid_00000000000c0aaf
uuid_00000000000c0aad:
	push %RBP
	jmp uuid_00000000000c0aaa
	jmp uuid_00000000000c0aac
uuid_00000000000c0aaa:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0aa7
	jmp uuid_00000000000c0aa9
uuid_00000000000c0aa7:
	movb $1, -928(%rbp)
uuid_00000000000c0aa9:
	mov -960(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c0aac:
	mov -952(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c0aaf:
	mov -944(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c0ab2:
	mov -936(%RBP),%RSP
	add $-968, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ab3
	jmp uuid_00000000000c0ab5
uuid_00000000000c0ab3:
	movb $1, -768(%rbp)
uuid_00000000000c0ab5:
	mov -864(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c0ab8:
	mov -784(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c0abb:
	mov -776(%RBP),%RSP
	add $-968, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0abf
	jmp uuid_00000000000c0ac1
uuid_00000000000c0abf:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0abc
	jmp uuid_00000000000c0abe
uuid_00000000000c0abc:
	movb $1, -672(%rbp)
uuid_00000000000c0abe:
	mov -976(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c0ac1:
	mov -688(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c0ac4:
	mov -680(%RBP),%RSP
	add $-1048, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ae7
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ae0
	jmp uuid_00000000000c0ae2
uuid_00000000000c0ae0:
	push %RBP
	mov -1120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0add
	jmp uuid_00000000000c0adf
uuid_00000000000c0add:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0ada
	jmp uuid_00000000000c0adc
uuid_00000000000c0ada:
	movb $1, -1136(%rbp)
uuid_00000000000c0adc:
	mov -1232(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c0adf:
	mov -1152(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c0ae2:
	mov -1144(%RBP),%RSP
	add $-1304, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ae4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0ae3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0ae6
uuid_00000000000c0ae4:
	movq -1304(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c0ae6:
	mov -1056(%RBP),%RSP
	add $-1304, %RSP
	jmp uuid_00000000000c0ae9
uuid_00000000000c0ae7:
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	push %RBP
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ace
	jmp uuid_00000000000c0ad0
uuid_00000000000c0ace:
	push %RBP
	jmp uuid_00000000000c0acb
	jmp uuid_00000000000c0acd
uuid_00000000000c0acb:
	push %RBP
	jmp uuid_00000000000c0ac8
	jmp uuid_00000000000c0aca
uuid_00000000000c0ac8:
	push %RBP
	jmp uuid_00000000000c0ac5
	jmp uuid_00000000000c0ac7
uuid_00000000000c0ac5:
	movb $1, -1208(%rbp)
uuid_00000000000c0ac7:
	mov -1240(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c0aca:
	mov -1232(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c0acd:
	mov -1224(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c0ad0:
	mov -1216(%RBP),%RSP
	add $-1240, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ad7
	push %RBP
	jmp uuid_00000000000c0ad4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0ad3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0ad6
uuid_00000000000c0ad4:
uuid_00000000000c0ad6:
	mov -1248(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000c0ad9
uuid_00000000000c0ad7:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq $uuid_00000000000c0ad1
	pushq $0
	pushq $uuid_00000000000c0ad2
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	popq -1320(%RBP)
	popq -1312(%RBP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
#call function fragment::set-term : Arrow<Cons<Fragment,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	popq -1320(%RBP)
	popq -1312(%RBP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	popq -1320(%RBP)
	popq -1312(%RBP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -968(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000c0ad9:
	mov -1128(%RBP),%RSP
	add $-1392, %RSP
	movq -1048(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c0ae9:
	mov -592(%RBP),%RSP
	add $-1392, %RSP
	jmp uuid_00000000000c0aec
uuid_00000000000c0aea:
	movq -584(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -544(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -536(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -528(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -520(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c0aec:
	mov -160(%RBP),%RSP
	add $-584, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0aed
uuid_00000000000c0aef:
	pushq $0
	pushq $0
	pushq $3
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r14
	movq 0(%r14), %r15
	movq %r15, -80(%rbp)
	movq 8(%r14), %r15
	movq %r15, -72(%rbp)
	movq 16(%r14), %r15
	movq %r15, -64(%rbp)
	movq 24(%r14), %r15
	movq %r15, -56(%rbp)
	movq 32(%r14), %r15
	movq %r15, -48(%rbp)
	movq 40(%r14), %r15
	movq %r15, -40(%rbp)
	movq 48(%r14), %r15
	movq %r15, -32(%rbp)
	movq 56(%r14), %r15
	movq %r15, -24(%rbp)
	movq 64(%r14), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c0b46:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0b47
	jmp uuid_00000000000c0b48
uuid_00000000000c0b47:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b0b
	jmp uuid_00000000000c0b0d
uuid_00000000000c0b0b:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b02
	jmp uuid_00000000000c0b04
uuid_00000000000c0b02:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0aff
	jmp uuid_00000000000c0b01
uuid_00000000000c0aff:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0af9
	jmp uuid_00000000000c0afb
uuid_00000000000c0af9:
	push %RBP
	jmp uuid_00000000000c0af6
	jmp uuid_00000000000c0af8
uuid_00000000000c0af6:
	push %RBP
	jmp uuid_00000000000c0af3
	jmp uuid_00000000000c0af5
uuid_00000000000c0af3:
	push %RBP
	mov -464(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0af0
	jmp uuid_00000000000c0af2
uuid_00000000000c0af0:
	movb $1, -520(%rbp)
uuid_00000000000c0af2:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c0af5:
	mov -544(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c0af8:
	mov -536(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c0afb:
	mov -528(%RBP),%RSP
	add $-560, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0afc
	jmp uuid_00000000000c0afe
uuid_00000000000c0afc:
	movb $1, -360(%rbp)
uuid_00000000000c0afe:
	mov -456(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c0b01:
	mov -376(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c0b04:
	mov -368(%RBP),%RSP
	add $-560, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b08
	jmp uuid_00000000000c0b0a
uuid_00000000000c0b08:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0b05
	jmp uuid_00000000000c0b07
uuid_00000000000c0b05:
	movb $1, -264(%rbp)
uuid_00000000000c0b07:
	mov -568(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c0b0a:
	mov -280(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000c0b0d:
	mov -272(%RBP),%RSP
	add $-640, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b43
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -720(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b1d
	jmp uuid_00000000000c0b1f
uuid_00000000000c0b1d:
	push %RBP
	mov -712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b14
	jmp uuid_00000000000c0b16
uuid_00000000000c0b14:
	push %RBP
	mov -808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0b11
	jmp uuid_00000000000c0b13
uuid_00000000000c0b11:
	push %RBP
	mov -800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0b0e
	jmp uuid_00000000000c0b10
uuid_00000000000c0b0e:
	movb $1, -824(%rbp)
uuid_00000000000c0b10:
	mov -920(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c0b13:
	mov -840(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c0b16:
	mov -832(%RBP),%RSP
	add $-992, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b1a
	jmp uuid_00000000000c0b1c
uuid_00000000000c0b1a:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0b17
	jmp uuid_00000000000c0b19
uuid_00000000000c0b17:
	movb $1, -728(%rbp)
uuid_00000000000c0b19:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c0b1c:
	mov -744(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c0b1f:
	mov -736(%RBP),%RSP
	add $-1072, %RSP
	mov -728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b40
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b2c
	jmp uuid_00000000000c0b2e
uuid_00000000000c0b2c:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1248(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b23
	jmp uuid_00000000000c0b25
uuid_00000000000c0b23:
	push %RBP
	jmp uuid_00000000000c0b20
	jmp uuid_00000000000c0b22
uuid_00000000000c0b20:
	movb $1, -1256(%rbp)
uuid_00000000000c0b22:
	mov -1272(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c0b25:
	mov -1264(%RBP),%RSP
	add $-1272, %RSP
	mov -1256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b29
	jmp uuid_00000000000c0b2b
uuid_00000000000c0b29:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0b26
	jmp uuid_00000000000c0b28
uuid_00000000000c0b26:
	movb $1, -1160(%rbp)
uuid_00000000000c0b28:
	mov -1280(%RBP),%RSP
	add $-1352, %RSP
uuid_00000000000c0b2b:
	mov -1176(%RBP),%RSP
	add $-1352, %RSP
uuid_00000000000c0b2e:
	mov -1168(%RBP),%RSP
	add $-1352, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b3d
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1432(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b35
	jmp uuid_00000000000c0b37
uuid_00000000000c0b35:
	push %RBP
	mov -1424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0b32
	jmp uuid_00000000000c0b34
uuid_00000000000c0b32:
	push %RBP
	mov -1416(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0b2f
	jmp uuid_00000000000c0b31
uuid_00000000000c0b2f:
	movb $1, -1440(%rbp)
uuid_00000000000c0b31:
	mov -1536(%RBP),%RSP
	add $-1608, %RSP
uuid_00000000000c0b34:
	mov -1456(%RBP),%RSP
	add $-1608, %RSP
uuid_00000000000c0b37:
	mov -1448(%RBP),%RSP
	add $-1608, %RSP
	mov -1440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b3a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0b39
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0b3c
uuid_00000000000c0b3a:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $uuid_00000000000c0b38
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq $0
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -1608(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c0b3c:
	mov -1360(%RBP),%RSP
	add $-1864, %RSP
	jmp uuid_00000000000c0b3f
uuid_00000000000c0b3d:
	movq -1352(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c0b3f:
	mov -1080(%RBP),%RSP
	add $-1352, %RSP
	jmp uuid_00000000000c0b42
uuid_00000000000c0b40:
	movq -1072(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c0b42:
	mov -648(%RBP),%RSP
	add $-1072, %RSP
	jmp uuid_00000000000c0b45
uuid_00000000000c0b43:
	movq -640(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -616(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c0b45:
	mov -184(%RBP),%RSP
	add $-640, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0b46
uuid_00000000000c0b48:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, %r15
	movq $assemble_SB_final_CL_String, %r14
	movq %r15, 0(%r14)
#call function compile-write : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_write_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_gnu_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c0b9a:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0b9b
	jmp uuid_00000000000c0b9c
uuid_00000000000c0b9b:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b64
	jmp uuid_00000000000c0b66
uuid_00000000000c0b64:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b5b
	jmp uuid_00000000000c0b5d
uuid_00000000000c0b5b:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0b58
	jmp uuid_00000000000c0b5a
uuid_00000000000c0b58:
	push %RBP
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b52
	jmp uuid_00000000000c0b54
uuid_00000000000c0b52:
	push %RBP
	jmp uuid_00000000000c0b4f
	jmp uuid_00000000000c0b51
uuid_00000000000c0b4f:
	push %RBP
	jmp uuid_00000000000c0b4c
	jmp uuid_00000000000c0b4e
uuid_00000000000c0b4c:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0b49
	jmp uuid_00000000000c0b4b
uuid_00000000000c0b49:
	movb $1, -496(%rbp)
uuid_00000000000c0b4b:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c0b4e:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c0b51:
	mov -512(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c0b54:
	mov -504(%RBP),%RSP
	add $-536, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b55
	jmp uuid_00000000000c0b57
uuid_00000000000c0b55:
	movb $1, -336(%rbp)
uuid_00000000000c0b57:
	mov -432(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c0b5a:
	mov -352(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c0b5d:
	mov -344(%RBP),%RSP
	add $-536, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b61
	jmp uuid_00000000000c0b63
uuid_00000000000c0b61:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0b5e
	jmp uuid_00000000000c0b60
uuid_00000000000c0b5e:
	movb $1, -240(%rbp)
uuid_00000000000c0b60:
	mov -544(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c0b63:
	mov -256(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c0b66:
	mov -248(%RBP),%RSP
	add $-616, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b97
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b84
	jmp uuid_00000000000c0b86
uuid_00000000000c0b84:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b7b
	jmp uuid_00000000000c0b7d
uuid_00000000000c0b7b:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0b78
	jmp uuid_00000000000c0b7a
uuid_00000000000c0b78:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0b75
	jmp uuid_00000000000c0b77
uuid_00000000000c0b75:
	movb $1, -800(%rbp)
uuid_00000000000c0b77:
	mov -896(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c0b7a:
	mov -816(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c0b7d:
	mov -808(%RBP),%RSP
	add $-968, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b81
	jmp uuid_00000000000c0b83
uuid_00000000000c0b81:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0b7e
	jmp uuid_00000000000c0b80
uuid_00000000000c0b7e:
	movb $1, -704(%rbp)
uuid_00000000000c0b80:
	mov -976(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c0b83:
	mov -720(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c0b86:
	mov -712(%RBP),%RSP
	add $-1048, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b94
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b8d
	jmp uuid_00000000000c0b8f
uuid_00000000000c0b8d:
	push %RBP
	jmp uuid_00000000000c0b8a
	jmp uuid_00000000000c0b8c
uuid_00000000000c0b8a:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0b87
	jmp uuid_00000000000c0b89
uuid_00000000000c0b87:
	movb $1, -1136(%rbp)
uuid_00000000000c0b89:
	mov -1160(%RBP),%RSP
	add $-1232, %RSP
uuid_00000000000c0b8c:
	mov -1152(%RBP),%RSP
	add $-1232, %RSP
uuid_00000000000c0b8f:
	mov -1144(%RBP),%RSP
	add $-1232, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0b91
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0b90
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0b93
uuid_00000000000c0b91:
	movq -1232(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c0b93:
	mov -1056(%RBP),%RSP
	add $-1232, %RSP
	jmp uuid_00000000000c0b96
uuid_00000000000c0b94:
	movq -1048(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c0b96:
	mov -624(%RBP),%RSP
	add $-1048, %RSP
	jmp uuid_00000000000c0b99
uuid_00000000000c0b97:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq $uuid_00000000000c0b67
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0b68
	jmp uuid_00000000000c0b6a
uuid_00000000000c0b68:
	mov $assemble_SB_argv_SB_referenced_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c0b6a:
	mov -624(%RBP),%RSP
	add $-624, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0b72
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0b6f
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq $uuid_00000000000c0ad1
	pushq $0
	pushq $uuid_00000000000c0b6b
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0b6c
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beaf8
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq $uuid_00000000000c0b38
	pushq $0
	pushq -880(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
	jmp uuid_00000000000c0b6e
uuid_00000000000c0b6c:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000c0b6e:
	mov -824(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000c0b71
uuid_00000000000c0b6f:
#call function fragment::set-term : Arrow<Cons<Fragment,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000c0b71:
	mov -816(%RBP),%RSP
	add $-816, %RSP
	jmp uuid_00000000000c0b74
uuid_00000000000c0b72:
uuid_00000000000c0b74:
	mov -808(%RBP),%RSP
	add $-808, %RSP
	movq -616(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000c0b99:
	mov -160(%RBP),%RSP
	add $-808, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0b9a
uuid_00000000000c0b9c:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-finish : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-write : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_write_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_finish_CL_ArrowNilNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-text-header : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_text_SB_header_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_profile_SB_onexit_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-exit-cleanup : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_exit_SB_cleanup_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0b9d
	jmp uuid_00000000000c0b9f
uuid_00000000000c0b9d:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-data-header : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_data_SB_header_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000c0b9f:
	mov -40(%RBP),%RSP
	add $-40, %RSP
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, %r15
	movq $assemble_SB_final_CL_String, %r14
	movq %r15, 0(%r14)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext:
	pushq $0
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ba6
	jmp uuid_00000000000c0ba8
uuid_00000000000c0ba6:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0ba3
	jmp uuid_00000000000c0ba5
uuid_00000000000c0ba3:
	push %RBP
	jmp uuid_00000000000c0ba0
	jmp uuid_00000000000c0ba2
uuid_00000000000c0ba0:
	movb $1, -448(%rbp)
uuid_00000000000c0ba2:
	mov -544(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c0ba5:
	mov -464(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000c0ba8:
	mov -456(%RBP),%RSP
	add $-544, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0bb0
	push %RBP
	jmp uuid_00000000000c0bad
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0bac
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0baf
uuid_00000000000c0bad:
uuid_00000000000c0baf:
	mov -552(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000c0bb2
uuid_00000000000c0bb0:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0ba9
	jmp uuid_00000000000c0bab
uuid_00000000000c0ba9:
	movq $1, -288(%rbp)
uuid_00000000000c0bab:
	mov -552(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c0bb2:
	mov -368(%RBP),%RSP
	add $-552, %RSP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0bce
	jmp uuid_00000000000c0bd0
uuid_00000000000c0bce:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0bc5
	jmp uuid_00000000000c0bc7
uuid_00000000000c0bc5:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0bc2
	jmp uuid_00000000000c0bc4
uuid_00000000000c0bc2:
	push %RBP
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0bbc
	jmp uuid_00000000000c0bbe
uuid_00000000000c0bbc:
	push %RBP
	jmp uuid_00000000000c0bb9
	jmp uuid_00000000000c0bbb
uuid_00000000000c0bb9:
	push %RBP
	jmp uuid_00000000000c0bb6
	jmp uuid_00000000000c0bb8
uuid_00000000000c0bb6:
	push %RBP
	mov -912(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0bb3
	jmp uuid_00000000000c0bb5
uuid_00000000000c0bb3:
	movb $1, -968(%rbp)
uuid_00000000000c0bb5:
	mov -1000(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c0bb8:
	mov -992(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c0bbb:
	mov -984(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c0bbe:
	mov -976(%RBP),%RSP
	add $-1008, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0bbf
	jmp uuid_00000000000c0bc1
uuid_00000000000c0bbf:
	movb $1, -808(%rbp)
uuid_00000000000c0bc1:
	mov -904(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c0bc4:
	mov -824(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c0bc7:
	mov -816(%RBP),%RSP
	add $-1008, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0bcb
	jmp uuid_00000000000c0bcd
uuid_00000000000c0bcb:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0bc8
	jmp uuid_00000000000c0bca
uuid_00000000000c0bc8:
	movb $1, -712(%rbp)
uuid_00000000000c0bca:
	mov -1016(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c0bcd:
	mov -728(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c0bd0:
	mov -720(%RBP),%RSP
	add $-1088, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0be4
	push %RBP
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq $0
	push %RBP
	mov -1168(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0bda
	jmp uuid_00000000000c0bdc
uuid_00000000000c0bda:
	push %RBP
	jmp uuid_00000000000c0bd7
	jmp uuid_00000000000c0bd9
uuid_00000000000c0bd7:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0bd4
	jmp uuid_00000000000c0bd6
uuid_00000000000c0bd4:
	movb $1, -1176(%rbp)
uuid_00000000000c0bd6:
	mov -1200(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c0bd9:
	mov -1192(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c0bdc:
	mov -1184(%RBP),%RSP
	add $-1272, %RSP
	mov -1176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0be1
	push %RBP
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0bde
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0bdd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0be0
uuid_00000000000c0bde:
uuid_00000000000c0be0:
	mov -1280(%RBP),%RSP
	add $-1352, %RSP
	jmp uuid_00000000000c0be3
uuid_00000000000c0be1:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0be3:
	mov -1096(%RBP),%RSP
	add $-1272, %RSP
	jmp uuid_00000000000c0be6
uuid_00000000000c0be4:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
	mov -288(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0bd1
#call function compile-global : Arrow<Cons<Cons<FContext,String>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1008(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call compile_SB_global_CL_ArrowNilConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0bd3
uuid_00000000000c0bd1:
uuid_00000000000c0bd3:
	mov -1096(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c0be6:
	mov -632(%RBP),%RSP
	add $-1096, %RSP
	mov %rbp, %rsp
	sub $280, %rsp
	ret
compile_SB_write_CL_ArrowNilNil:
#call function write-file : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_target_CL_String, %r15
	pushq 0(%r15)
	mov $assemble_SB_final_CL_String, %r15
	pushq 0(%r15)
	mov %RBX, %RBP
	call write_SB_file_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
fragment_SB_context_CL__CL_new_CL_ArrowFContextNil:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	subq $200, %rsp
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,AST>,U8>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $1
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsU8ConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsU8ConsASTConsTypeConsStringFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function find-alias : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call find_SB_alias_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -208(%rbp)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c0c09:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0c0a
	jmp uuid_00000000000c0c0b
uuid_00000000000c0c0a:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq $0
	push %RBP
	mov -1104(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0bf3
	jmp uuid_00000000000c0bf5
uuid_00000000000c0bf3:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	jmp uuid_00000000000c0bf0
	jmp uuid_00000000000c0bf2
uuid_00000000000c0bf0:
	push %RBP
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	jmp uuid_00000000000c0bed
	jmp uuid_00000000000c0bef
uuid_00000000000c0bed:
	push %RBP
	mov -920(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0bea
	jmp uuid_00000000000c0bec
uuid_00000000000c0bea:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0be7
	jmp uuid_00000000000c0be9
uuid_00000000000c0be7:
	movb $1, -1112(%rbp)
uuid_00000000000c0be9:
	mov -1336(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c0bec:
	mov -1320(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c0bef:
	mov -1288(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c0bf2:
	mov -1128(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c0bf5:
	mov -1120(%RBP),%RSP
	add $-1536, %RSP
	mov -1112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0c06
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0c05
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0c08
uuid_00000000000c0c06:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1328(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0c02
	movq -1536(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c0c04
uuid_00000000000c0c02:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0bff
	movq -1280(%rbp), %r15
	movq %r15, -672(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -664(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -656(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -648(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -640(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -632(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -624(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -616(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -608(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -600(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -592(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -584(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -576(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -568(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -560(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -552(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -544(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -528(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bf1a0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c0c01
uuid_00000000000c0bff:
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0bfc
	jmp uuid_00000000000c0bfe
uuid_00000000000c0bfc:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0bf9
	movq -1280(%rbp), %r15
	movq %r15, -672(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -664(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -656(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -648(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -640(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -632(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -624(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -616(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -608(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -600(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -592(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -584(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -576(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -568(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -560(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -552(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -544(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -680(%rbp)
	jmp uuid_00000000000c0bfb
uuid_00000000000c0bf9:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0bf6
	jmp uuid_00000000000c0bf8
uuid_00000000000c0bf6:
	movq -1280(%rbp), %r15
	movq %r15, -672(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -664(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -656(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -648(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -640(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -632(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -624(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -616(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -608(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -600(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -592(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -584(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -576(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -568(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -560(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -552(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -544(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -680(%rbp)
uuid_00000000000c0bf8:
	mov -1624(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000c0bfb:
	mov -1616(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000c0bfe:
	mov -1608(%RBP),%RSP
	add $-1624, %RSP
	movq -1536(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c0c01:
	mov -1552(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000c0c04:
	mov -1544(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000c0c08:
	mov -904(%RBP),%RSP
	add $-1624, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0c09
uuid_00000000000c0c0b:
	push %RBP
	mov -312(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	push %RAX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0c28
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0c0c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beed3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0c0d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -520(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -512(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c0c24:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0c25
	jmp uuid_00000000000c0c26
uuid_00000000000c0c25:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq $0
	push %RBP
	mov -1112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0c1a
	jmp uuid_00000000000c0c1c
uuid_00000000000c0c1a:
	push %RBP
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000c0c17
	jmp uuid_00000000000c0c19
uuid_00000000000c0c17:
	push %RBP
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	jmp uuid_00000000000c0c14
	jmp uuid_00000000000c0c16
uuid_00000000000c0c14:
	push %RBP
	mov -928(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0c11
	jmp uuid_00000000000c0c13
uuid_00000000000c0c11:
	push %RBP
	mov -920(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0c0e
	jmp uuid_00000000000c0c10
uuid_00000000000c0c0e:
	movb $1, -1120(%rbp)
uuid_00000000000c0c10:
	mov -1344(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c0c13:
	mov -1328(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c0c16:
	mov -1296(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c0c19:
	mov -1136(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c0c1c:
	mov -1128(%RBP),%RSP
	add $-1544, %RSP
	mov -1120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0c21
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0c20
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0c23
uuid_00000000000c0c21:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1336(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0c1d
	jmp uuid_00000000000c0c1f
uuid_00000000000c0c1d:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beed3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0c1f:
	mov -1552(%RBP),%RSP
	add $-1552, %RSP
	movq -1544(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c0c23:
	mov -912(%RBP),%RSP
	add $-1552, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0c24
uuid_00000000000c0c26:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0c27
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0c2a
uuid_00000000000c0c28:
uuid_00000000000c0c2a:
	mov -704(%RBP),%RSP
	add $-704, %RSP
	subq $152, %rsp
	pushq -672(%rbp)
	pushq -664(%rbp)
	pushq -656(%rbp)
	pushq -648(%rbp)
	pushq -640(%rbp)
	pushq -632(%rbp)
	pushq -624(%rbp)
	pushq -616(%rbp)
	pushq -608(%rbp)
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $320, %rsp
	ret
fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,AST>,U8>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsU8ConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsASTConsTypeConsTypeConsStringFContext:
#call function fragment-context::lookups : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,U8>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $1
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsU8ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	subq $168, %rsp
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	pushq 456(%rsp)
	pushq 472(%rsp)
	pushq 488(%rsp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $336, %rsp
	ret
fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsU8ConsASTConsTypeConsTypeConsStringFContext:
#call function find-alias : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call find_SB_alias_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -208(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c0c6b:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0c6c
	jmp uuid_00000000000c0c6d
uuid_00000000000c0c6c:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0c39
	jmp uuid_00000000000c0c3b
uuid_00000000000c0c39:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000c0c36
	jmp uuid_00000000000c0c38
uuid_00000000000c0c36:
	push %RBP
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	jmp uuid_00000000000c0c33
	jmp uuid_00000000000c0c35
uuid_00000000000c0c33:
	push %RBP
	mov -760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0c30
	jmp uuid_00000000000c0c32
uuid_00000000000c0c30:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0c2d
	jmp uuid_00000000000c0c2f
uuid_00000000000c0c2d:
	movb $1, -952(%rbp)
uuid_00000000000c0c2f:
	mov -1176(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c0c32:
	mov -1160(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c0c35:
	mov -1128(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c0c38:
	mov -968(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c0c3b:
	mov -960(%RBP),%RSP
	add $-1376, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0c68
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0c67
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0c6a
uuid_00000000000c0c68:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0c64
	movq -1376(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c0c66
uuid_00000000000c0c64:
	push %RBP
#call function is : Arrow<Cons<Sized<24>,Sized<24>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized24Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0c61
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0c5e
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0c5b
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bf1a0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	jmp uuid_00000000000c0c5d
uuid_00000000000c0c5b:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
uuid_00000000000c0c5d:
	mov -1408(%RBP),%RSP
	add $-1408, %RSP
	jmp uuid_00000000000c0c60
uuid_00000000000c0c5e:
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0c54
	jmp uuid_00000000000c0c56
uuid_00000000000c0c54:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0c51
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0c4e
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	movq -1424(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -520(%rbp)
	jmp uuid_00000000000c0c50
uuid_00000000000c0c4e:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
uuid_00000000000c0c50:
	mov -1472(%RBP),%RSP
	add $-1472, %RSP
	jmp uuid_00000000000c0c53
uuid_00000000000c0c51:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0c47
	jmp uuid_00000000000c0c49
uuid_00000000000c0c47:
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0c44
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	movq -1424(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -520(%rbp)
	jmp uuid_00000000000c0c46
uuid_00000000000c0c44:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
uuid_00000000000c0c46:
	mov -1480(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c0c49:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c0c53:
	mov -1464(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c0c56:
	mov -1456(%RBP),%RSP
	add $-1480, %RSP
	movq -1376(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c0c60:
	mov -1400(%RBP),%RSP
	add $-1480, %RSP
	jmp uuid_00000000000c0c63
uuid_00000000000c0c61:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0c63:
	mov -1392(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c0c66:
	mov -1384(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000c0c6a:
	mov -744(%RBP),%RSP
	add $-1392, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0c6b
uuid_00000000000c0c6d:
	push %RBP
	mov -336(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	push %RAX
#call function .length : Arrow<List<Fragment>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0c6f
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0c6e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beed3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0c27
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0c71
uuid_00000000000c0c6f:
uuid_00000000000c0c71:
	mov -544(%RBP),%RSP
	add $-544, %RSP
	subq $168, %rsp
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $344, %rsp
	ret
fragment_SB_context_CL__CL_lookup_SB_vararg_CL_ArrowFragmentListConsASTConsTypeConsStringFContext:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c0c88:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0c89
	jmp uuid_00000000000c0c8a
uuid_00000000000c0c89:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0c7e
	jmp uuid_00000000000c0c80
uuid_00000000000c0c7e:
	push %RBP
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	jmp uuid_00000000000c0c7b
	jmp uuid_00000000000c0c7d
uuid_00000000000c0c7b:
	push %RBP
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	jmp uuid_00000000000c0c78
	jmp uuid_00000000000c0c7a
uuid_00000000000c0c78:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0c75
	jmp uuid_00000000000c0c77
uuid_00000000000c0c75:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0c72
	jmp uuid_00000000000c0c74
uuid_00000000000c0c72:
	movb $1, -896(%rbp)
uuid_00000000000c0c74:
	mov -1120(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c0c77:
	mov -1104(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c0c7a:
	mov -1072(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c0c7d:
	mov -912(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c0c80:
	mov -904(%RBP),%RSP
	add $-1320, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0c85
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0c84
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0c87
uuid_00000000000c0c85:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0c81
	jmp uuid_00000000000c0c83
uuid_00000000000c0c81:
#call function close : Arrow<FragmentList,Array<FragmentList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentListFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq $0
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
uuid_00000000000c0c83:
	mov -1328(%RBP),%RSP
	add $-1328, %RSP
	movq -1320(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c0c87:
	mov -688(%RBP),%RSP
	add $-1328, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0c88
uuid_00000000000c0c8a:
	subq $168, %rsp
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext:
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	subq $200, %rsp
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $392, %rsp
	ret
bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext:
#call function fragment-context::lookup-soft : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::set-vararg : Arrow<Cons<Fragment,List<Array<Fragment,?>>>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
#call function cons : Arrow<Cons<Array<Fragment,?>,List<Array<Fragment,?>>>,List<Array<Fragment,?>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Fragment,Array<Fragment,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	mov %RBX, %RBP
	call cons_CL_ArrowListArray_QM_FragmentConsListArray_QM_FragmentArray_QM_Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_vararg_CL_ArrowFragmentConsListArray_QM_FragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $200, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $392, %rsp
	ret
with_SB_location_CL_ArrowASTConsSourceLocationAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cf8
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cf5
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0c91
	jmp uuid_00000000000c0c93
uuid_00000000000c0c91:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	jmp uuid_00000000000c0c8e
	jmp uuid_00000000000c0c90
uuid_00000000000c0c8e:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0c8b
	jmp uuid_00000000000c0c8d
uuid_00000000000c0c8b:
	movb $1, -504(%rbp)
uuid_00000000000c0c8d:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c0c90:
	mov -520(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c0c93:
	mov -512(%RBP),%RSP
	add $-592, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cf2
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0c9d
	jmp uuid_00000000000c0c9f
uuid_00000000000c0c9d:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000c0c9a
	jmp uuid_00000000000c0c9c
uuid_00000000000c0c9a:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0c97
	jmp uuid_00000000000c0c99
uuid_00000000000c0c97:
	movb $1, -680(%rbp)
uuid_00000000000c0c99:
	mov -760(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c0c9c:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c0c9f:
	mov -688(%RBP),%RSP
	add $-768, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cef
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ca6
	jmp uuid_00000000000c0ca8
uuid_00000000000c0ca6:
	push %RBP
	jmp uuid_00000000000c0ca3
	jmp uuid_00000000000c0ca5
uuid_00000000000c0ca3:
	movb $1, -856(%rbp)
uuid_00000000000c0ca5:
	mov -872(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c0ca8:
	mov -864(%RBP),%RSP
	add $-872, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cec
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0caf
	jmp uuid_00000000000c0cb1
uuid_00000000000c0caf:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0cac
	jmp uuid_00000000000c0cae
uuid_00000000000c0cac:
	push %RBP
	mov -936(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0ca9
	jmp uuid_00000000000c0cab
uuid_00000000000c0ca9:
	movb $1, -960(%rbp)
uuid_00000000000c0cab:
	mov -1056(%RBP),%RSP
	add $-1128, %RSP
uuid_00000000000c0cae:
	mov -976(%RBP),%RSP
	add $-1128, %RSP
uuid_00000000000c0cb1:
	mov -968(%RBP),%RSP
	add $-1128, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ce9
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cbb
	jmp uuid_00000000000c0cbd
uuid_00000000000c0cbb:
	push %RBP
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	jmp uuid_00000000000c0cb8
	jmp uuid_00000000000c0cba
uuid_00000000000c0cb8:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0cb5
	jmp uuid_00000000000c0cb7
uuid_00000000000c0cb5:
	push %RBP
	mov -1168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0cb2
	jmp uuid_00000000000c0cb4
uuid_00000000000c0cb2:
	movb $1, -1216(%rbp)
uuid_00000000000c0cb4:
	mov -1344(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000c0cb7:
	mov -1264(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000c0cba:
	mov -1232(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000c0cbd:
	mov -1224(%RBP),%RSP
	add $-1416, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ce6
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -1496(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cc4
	jmp uuid_00000000000c0cc6
uuid_00000000000c0cc4:
	push %RBP
	mov -1488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0cc1
	jmp uuid_00000000000c0cc3
uuid_00000000000c0cc1:
	push %RBP
	mov -1480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0cbe
	jmp uuid_00000000000c0cc0
uuid_00000000000c0cbe:
	movb $1, -1504(%rbp)
uuid_00000000000c0cc0:
	mov -1600(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000c0cc3:
	mov -1520(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000c0cc6:
	mov -1512(%RBP),%RSP
	add $-1672, %RSP
	mov -1504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ce3
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -1752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ccd
	jmp uuid_00000000000c0ccf
uuid_00000000000c0ccd:
	push %RBP
	mov -1744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0cca
	jmp uuid_00000000000c0ccc
uuid_00000000000c0cca:
	push %RBP
	mov -1736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0cc7
	jmp uuid_00000000000c0cc9
uuid_00000000000c0cc7:
	movb $1, -1760(%rbp)
uuid_00000000000c0cc9:
	mov -1856(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c0ccc:
	mov -1776(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c0ccf:
	mov -1768(%RBP),%RSP
	add $-1928, %RSP
	mov -1760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ce0
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -2008(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cd6
	jmp uuid_00000000000c0cd8
uuid_00000000000c0cd6:
	push %RBP
	mov -2000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0cd3
	jmp uuid_00000000000c0cd5
uuid_00000000000c0cd3:
	push %RBP
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	jmp uuid_00000000000c0cd0
	jmp uuid_00000000000c0cd2
uuid_00000000000c0cd0:
	movb $1, -2016(%rbp)
uuid_00000000000c0cd2:
	mov -2112(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000c0cd5:
	mov -2032(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000c0cd8:
	mov -2024(%RBP),%RSP
	add $-2168, %RSP
	mov -2016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0cdd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0cdc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0cdf
uuid_00000000000c0cdd:
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0cd9
#call function with-location : Arrow<Cons<Token,SourceLocation>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowTokenConsSourceLocationToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	popq -2168(%RBP)
	popq -2160(%RBP)
	popq -2152(%RBP)
	popq -2144(%RBP)
	popq -2136(%RBP)
	popq -2128(%RBP)
	popq -2120(%RBP)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	popq -2104(%RBP)
	popq -2096(%RBP)
	popq -2088(%RBP)
	popq -2080(%RBP)
	popq -2072(%RBP)
	popq -2064(%RBP)
	popq -2056(%RBP)
	popq -2048(%RBP)
	popq -2040(%RBP)
	jmp uuid_00000000000c0cdb
uuid_00000000000c0cd9:
uuid_00000000000c0cdb:
	mov -2176(%RBP),%RSP
	add $-2176, %RSP
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000c0cdf:
	mov -1936(%RBP),%RSP
	add $-2176, %RSP
	jmp uuid_00000000000c0ce2
uuid_00000000000c0ce0:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000c0ce2:
	mov -1680(%RBP),%RSP
	add $-1928, %RSP
	jmp uuid_00000000000c0ce5
uuid_00000000000c0ce3:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000c0ce5:
	mov -1424(%RBP),%RSP
	add $-1672, %RSP
	jmp uuid_00000000000c0ce8
uuid_00000000000c0ce6:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $5
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000c0ce8:
	mov -1136(%RBP),%RSP
	add $-1416, %RSP
	jmp uuid_00000000000c0ceb
uuid_00000000000c0ce9:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000c0ceb:
	mov -880(%RBP),%RSP
	add $-1128, %RSP
	jmp uuid_00000000000c0cee
uuid_00000000000c0cec:
uuid_00000000000c0cee:
	mov -776(%RBP),%RSP
	add $-872, %RSP
	jmp uuid_00000000000c0cf1
uuid_00000000000c0cef:
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0ca0
	pushq -768(%rbp)
#call function with-location : Arrow<Cons<Token,SourceLocation>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowTokenConsSourceLocationToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	pushq $6
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	jmp uuid_00000000000c0ca2
uuid_00000000000c0ca0:
uuid_00000000000c0ca2:
	mov -776(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c0cf1:
	mov -600(%RBP),%RSP
	add $-776, %RSP
	jmp uuid_00000000000c0cf4
uuid_00000000000c0cf2:
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0c94
	pushq -592(%rbp)
#call function with-location : Arrow<Cons<Token,SourceLocation>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowTokenConsSourceLocationToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	pushq $7
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	jmp uuid_00000000000c0c96
uuid_00000000000c0c94:
uuid_00000000000c0c96:
	mov -600(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c0cf4:
	mov -424(%RBP),%RSP
	add $-600, %RSP
	jmp uuid_00000000000c0cf7
uuid_00000000000c0cf5:
uuid_00000000000c0cf7:
	mov -344(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000c0cfa
uuid_00000000000c0cf8:
uuid_00000000000c0cfa:
	mov -264(%RBP),%RSP
	add $-336, %RSP
	subq $72, %rsp
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $112, %rsp
	ret
with_SB_location_CL_ArrowTokenConsSourceLocationToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d04
	jmp uuid_00000000000c0d06
uuid_00000000000c0d04:
	push %RBP
	jmp uuid_00000000000c0d01
	jmp uuid_00000000000c0d03
uuid_00000000000c0d01:
	push %RBP
	jmp uuid_00000000000c0cfe
	jmp uuid_00000000000c0d00
uuid_00000000000c0cfe:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0cfb
	jmp uuid_00000000000c0cfd
uuid_00000000000c0cfb:
	movb $1, -224(%rbp)
uuid_00000000000c0cfd:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c0d00:
	mov -248(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c0d03:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c0d06:
	mov -232(%RBP),%RSP
	add $-264, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d08
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0d07
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0d0a
uuid_00000000000c0d08:
	pushq -264(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0d0a:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $96, %rsp
	ret
without_SB_location_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d6f
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d6c
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d11
	jmp uuid_00000000000c0d13
uuid_00000000000c0d11:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c0d0e
	jmp uuid_00000000000c0d10
uuid_00000000000c0d0e:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0d0b
	jmp uuid_00000000000c0d0d
uuid_00000000000c0d0b:
	movb $1, -472(%rbp)
uuid_00000000000c0d0d:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c0d10:
	mov -488(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c0d13:
	mov -480(%RBP),%RSP
	add $-560, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d69
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d1a
	jmp uuid_00000000000c0d1c
uuid_00000000000c0d1a:
	push %RBP
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	jmp uuid_00000000000c0d17
	jmp uuid_00000000000c0d19
uuid_00000000000c0d17:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0d14
	jmp uuid_00000000000c0d16
uuid_00000000000c0d14:
	movb $1, -648(%rbp)
uuid_00000000000c0d16:
	mov -728(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000c0d19:
	mov -664(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000c0d1c:
	mov -656(%RBP),%RSP
	add $-736, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d66
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d20
	jmp uuid_00000000000c0d22
uuid_00000000000c0d20:
	push %RBP
	jmp uuid_00000000000c0d1d
	jmp uuid_00000000000c0d1f
uuid_00000000000c0d1d:
	movb $1, -824(%rbp)
uuid_00000000000c0d1f:
	mov -840(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000c0d22:
	mov -832(%RBP),%RSP
	add $-840, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d63
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d29
	jmp uuid_00000000000c0d2b
uuid_00000000000c0d29:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0d26
	jmp uuid_00000000000c0d28
uuid_00000000000c0d26:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0d23
	jmp uuid_00000000000c0d25
uuid_00000000000c0d23:
	movb $1, -928(%rbp)
uuid_00000000000c0d25:
	mov -1024(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c0d28:
	mov -944(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000c0d2b:
	mov -936(%RBP),%RSP
	add $-1096, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d60
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1176(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d35
	jmp uuid_00000000000c0d37
uuid_00000000000c0d35:
	push %RBP
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	jmp uuid_00000000000c0d32
	jmp uuid_00000000000c0d34
uuid_00000000000c0d32:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0d2f
	jmp uuid_00000000000c0d31
uuid_00000000000c0d2f:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0d2c
	jmp uuid_00000000000c0d2e
uuid_00000000000c0d2c:
	movb $1, -1184(%rbp)
uuid_00000000000c0d2e:
	mov -1312(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c0d31:
	mov -1232(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c0d34:
	mov -1200(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000c0d37:
	mov -1192(%RBP),%RSP
	add $-1384, %RSP
	mov -1184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d5d
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d3e
	jmp uuid_00000000000c0d40
uuid_00000000000c0d3e:
	push %RBP
	mov -1456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0d3b
	jmp uuid_00000000000c0d3d
uuid_00000000000c0d3b:
	push %RBP
	mov -1448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0d38
	jmp uuid_00000000000c0d3a
uuid_00000000000c0d38:
	movb $1, -1472(%rbp)
uuid_00000000000c0d3a:
	mov -1568(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000c0d3d:
	mov -1488(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000c0d40:
	mov -1480(%RBP),%RSP
	add $-1640, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d5a
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1720(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d47
	jmp uuid_00000000000c0d49
uuid_00000000000c0d47:
	push %RBP
	mov -1712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0d44
	jmp uuid_00000000000c0d46
uuid_00000000000c0d44:
	push %RBP
	mov -1704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0d41
	jmp uuid_00000000000c0d43
uuid_00000000000c0d41:
	movb $1, -1728(%rbp)
uuid_00000000000c0d43:
	mov -1824(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c0d46:
	mov -1744(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000c0d49:
	mov -1736(%RBP),%RSP
	add $-1896, %RSP
	mov -1728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d57
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1976(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d50
	jmp uuid_00000000000c0d52
uuid_00000000000c0d50:
	push %RBP
	mov -1968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0d4d
	jmp uuid_00000000000c0d4f
uuid_00000000000c0d4d:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	jmp uuid_00000000000c0d4a
	jmp uuid_00000000000c0d4c
uuid_00000000000c0d4a:
	movb $1, -1984(%rbp)
uuid_00000000000c0d4c:
	mov -2080(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000c0d4f:
	mov -2000(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000c0d52:
	mov -1992(%RBP),%RSP
	add $-2136, %RSP
	mov -1984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d54
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0d53
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0d56
uuid_00000000000c0d54:
#call function without-location : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c0d56:
	mov -1904(%RBP),%RSP
	add $-2136, %RSP
	jmp uuid_00000000000c0d59
uuid_00000000000c0d57:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c0d59:
	mov -1648(%RBP),%RSP
	add $-1896, %RSP
	jmp uuid_00000000000c0d5c
uuid_00000000000c0d5a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c0d5c:
	mov -1392(%RBP),%RSP
	add $-1640, %RSP
	jmp uuid_00000000000c0d5f
uuid_00000000000c0d5d:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c0d5f:
	mov -1104(%RBP),%RSP
	add $-1384, %RSP
	jmp uuid_00000000000c0d62
uuid_00000000000c0d60:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c0d62:
	mov -848(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000c0d65
uuid_00000000000c0d63:
uuid_00000000000c0d65:
	mov -744(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000c0d68
uuid_00000000000c0d66:
	pushq -736(%rbp)
#call function without-location : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c0d68:
	mov -568(%RBP),%RSP
	add $-736, %RSP
	jmp uuid_00000000000c0d6b
uuid_00000000000c0d69:
	pushq -560(%rbp)
#call function without-location : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c0d6b:
	mov -392(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c0d6e
uuid_00000000000c0d6c:
uuid_00000000000c0d6e:
	mov -312(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c0d71
uuid_00000000000c0d6f:
uuid_00000000000c0d71:
	mov -232(%RBP),%RSP
	add $-304, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
without_SB_location_CL_ArrowTokenToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d7b
	jmp uuid_00000000000c0d7d
uuid_00000000000c0d7b:
	push %RBP
	jmp uuid_00000000000c0d78
	jmp uuid_00000000000c0d7a
uuid_00000000000c0d78:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0d75
	jmp uuid_00000000000c0d77
uuid_00000000000c0d75:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0d72
	jmp uuid_00000000000c0d74
uuid_00000000000c0d72:
	movb $1, -192(%rbp)
uuid_00000000000c0d74:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c0d77:
	mov -216(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c0d7a:
	mov -208(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c0d7d:
	mov -200(%RBP),%RSP
	add $-240, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d7f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0d7e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0d81
uuid_00000000000c0d7f:
	pushq -240(%rbp)
	pushq -224(%rbp)
	pushq $uuid_00000000000be796
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0d81:
	mov -128(%RBP),%RSP
	add $-240, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $64, %rsp
	ret
with_SB_key_CL_ArrowTokenConsStringToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d8b
	jmp uuid_00000000000c0d8d
uuid_00000000000c0d8b:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	jmp uuid_00000000000c0d88
	jmp uuid_00000000000c0d8a
uuid_00000000000c0d88:
	push %RBP
	jmp uuid_00000000000c0d85
	jmp uuid_00000000000c0d87
uuid_00000000000c0d85:
	push %RBP
	jmp uuid_00000000000c0d82
	jmp uuid_00000000000c0d84
uuid_00000000000c0d82:
	movb $1, -200(%rbp)
uuid_00000000000c0d84:
	mov -264(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c0d87:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c0d8a:
	mov -216(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c0d8d:
	mov -208(%RBP),%RSP
	add $-264, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d8f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0d8e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0d91
uuid_00000000000c0d8f:
	pushq -64(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0d91:
	mov -136(%RBP),%RSP
	add $-264, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
location_SB_of_CL_ArrowSourceLocationAST:
	pushq $uuid_00000000000c0d92
	pushq $0
	pushq $0
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0d99
	jmp uuid_00000000000c0d9b
uuid_00000000000c0d99:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	jmp uuid_00000000000c0d96
	jmp uuid_00000000000c0d98
uuid_00000000000c0d96:
	push %RBP
	jmp uuid_00000000000c0d93
	jmp uuid_00000000000c0d95
uuid_00000000000c0d93:
	movb $1, -272(%rbp)
uuid_00000000000c0d95:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c0d98:
	mov -288(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c0d9b:
	mov -280(%RBP),%RSP
	add $-352, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dfa
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0da2
	jmp uuid_00000000000c0da4
uuid_00000000000c0da2:
	push %RBP
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000c0d9f
	jmp uuid_00000000000c0da1
uuid_00000000000c0d9f:
	push %RBP
	jmp uuid_00000000000c0d9c
	jmp uuid_00000000000c0d9e
uuid_00000000000c0d9c:
	movb $1, -440(%rbp)
uuid_00000000000c0d9e:
	mov -520(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c0da1:
	mov -456(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c0da4:
	mov -448(%RBP),%RSP
	add $-520, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0df7
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dab
	jmp uuid_00000000000c0dad
uuid_00000000000c0dab:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0da8
	jmp uuid_00000000000c0daa
uuid_00000000000c0da8:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0da5
	jmp uuid_00000000000c0da7
uuid_00000000000c0da5:
	movb $1, -608(%rbp)
uuid_00000000000c0da7:
	mov -704(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c0daa:
	mov -624(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c0dad:
	mov -616(%RBP),%RSP
	add $-776, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0df4
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dba
	jmp uuid_00000000000c0dbc
uuid_00000000000c0dba:
	push %RBP
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	jmp uuid_00000000000c0db7
	jmp uuid_00000000000c0db9
uuid_00000000000c0db7:
	push %RBP
	mov -824(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0db4
	jmp uuid_00000000000c0db6
uuid_00000000000c0db4:
	push %RBP
	mov -816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0db1
	jmp uuid_00000000000c0db3
uuid_00000000000c0db1:
	movb $1, -864(%rbp)
uuid_00000000000c0db3:
	mov -992(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c0db6:
	mov -912(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c0db9:
	mov -880(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000c0dbc:
	mov -872(%RBP),%RSP
	add $-1064, %RSP
	mov -864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0df1
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -1144(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dc6
	jmp uuid_00000000000c0dc8
uuid_00000000000c0dc6:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0dc3
	jmp uuid_00000000000c0dc5
uuid_00000000000c0dc3:
	push %RBP
	mov -1128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0dc0
	jmp uuid_00000000000c0dc2
uuid_00000000000c0dc0:
	movb $1, -1152(%rbp)
uuid_00000000000c0dc2:
	mov -1248(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c0dc5:
	mov -1168(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c0dc8:
	mov -1160(%RBP),%RSP
	add $-1320, %RSP
	mov -1152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dee
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dd2
	jmp uuid_00000000000c0dd4
uuid_00000000000c0dd2:
	push %RBP
	mov -1392(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0dcf
	jmp uuid_00000000000c0dd1
uuid_00000000000c0dcf:
	push %RBP
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	jmp uuid_00000000000c0dcc
	jmp uuid_00000000000c0dce
uuid_00000000000c0dcc:
	movb $1, -1408(%rbp)
uuid_00000000000c0dce:
	mov -1504(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c0dd1:
	mov -1424(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c0dd4:
	mov -1416(%RBP),%RSP
	add $-1560, %RSP
	mov -1408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0deb
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0dde
	jmp uuid_00000000000c0de0
uuid_00000000000c0dde:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0ddb
	jmp uuid_00000000000c0ddd
uuid_00000000000c0ddb:
	push %RBP
	mov -1624(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0dd8
	jmp uuid_00000000000c0dda
uuid_00000000000c0dd8:
	movb $1, -1648(%rbp)
uuid_00000000000c0dda:
	mov -1744(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c0ddd:
	mov -1664(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c0de0:
	mov -1656(%RBP),%RSP
	add $-1816, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0de8
	push %RBP
	jmp uuid_00000000000c0de5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0de4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0de7
uuid_00000000000c0de5:
uuid_00000000000c0de7:
	mov -1824(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000c0dea
uuid_00000000000c0de8:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0de1
	jmp uuid_00000000000c0de3
uuid_00000000000c0de1:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c0de3:
	mov -1824(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c0dea:
	mov -1568(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000c0ded
uuid_00000000000c0deb:
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0dd5
	jmp uuid_00000000000c0dd7
uuid_00000000000c0dd5:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c0dd7:
	mov -1568(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000c0ded:
	mov -1328(%RBP),%RSP
	add $-1568, %RSP
	jmp uuid_00000000000c0df0
uuid_00000000000c0dee:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0dc9
	jmp uuid_00000000000c0dcb
uuid_00000000000c0dc9:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c0dcb:
	mov -1328(%RBP),%RSP
	add $-1328, %RSP
uuid_00000000000c0df0:
	mov -1072(%RBP),%RSP
	add $-1328, %RSP
	jmp uuid_00000000000c0df3
uuid_00000000000c0df1:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0dbd
	jmp uuid_00000000000c0dbf
uuid_00000000000c0dbd:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c0dbf:
	mov -1072(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c0df3:
	mov -784(%RBP),%RSP
	add $-1072, %RSP
	jmp uuid_00000000000c0df6
uuid_00000000000c0df4:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0dae
	jmp uuid_00000000000c0db0
uuid_00000000000c0dae:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c0db0:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c0df6:
	mov -528(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c0df9
uuid_00000000000c0df7:
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c0df9:
	mov -360(%RBP),%RSP
	add $-520, %RSP
	jmp uuid_00000000000c0dfc
uuid_00000000000c0dfa:
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c0dfc:
	mov -192(%RBP),%RSP
	add $-352, %RSP
	subq $32, %rsp
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
unique_CL_ArrowTokenToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e06
	jmp uuid_00000000000c0e08
uuid_00000000000c0e06:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000c0e03
	jmp uuid_00000000000c0e05
uuid_00000000000c0e03:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0e00
	jmp uuid_00000000000c0e02
uuid_00000000000c0e00:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0dfd
	jmp uuid_00000000000c0dff
uuid_00000000000c0dfd:
	movb $1, -192(%rbp)
uuid_00000000000c0dff:
	mov -264(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c0e02:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c0e05:
	mov -208(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c0e08:
	mov -200(%RBP),%RSP
	add $-272, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e0a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0e09
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0e0c
uuid_00000000000c0e0a:
	pushq -272(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c0e0c:
	mov -128(%RBP),%RSP
	add $-272, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $64, %rsp
	ret
print_SB_verbose_CL_ArrowNilToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e16
	jmp uuid_00000000000c0e18
uuid_00000000000c0e16:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000c0e13
	jmp uuid_00000000000c0e15
uuid_00000000000c0e13:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0e10
	jmp uuid_00000000000c0e12
uuid_00000000000c0e10:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0e0d
	jmp uuid_00000000000c0e0f
uuid_00000000000c0e0d:
	movb $1, -192(%rbp)
uuid_00000000000c0e0f:
	mov -264(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c0e12:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c0e15:
	mov -208(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c0e18:
	mov -200(%RBP),%RSP
	add $-272, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e1a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0e19
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0e1c
uuid_00000000000c0e1a:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be8b4
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c0e1c:
	mov -128(%RBP),%RSP
	add $-272, %RSP
	mov %rbp, %rsp
	sub $64, %rsp
	ret
token_CL__CL_new_CL_ArrowTokenString:
	pushq -8(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function location::new : Arrow<Nil,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call location_CL__CL_new_CL_ArrowSourceLocationNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq $0
	subq $56, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
location_CL__CL_new_CL_ArrowSourceLocationNil:
	pushq $uuid_00000000000c0d92
	pushq $0
	pushq $0
	pushq $0
	subq $32, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
non_SB_zero_CL_ArrowU64SourceLocation:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e26
	jmp uuid_00000000000c0e28
uuid_00000000000c0e26:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0e23
	jmp uuid_00000000000c0e25
uuid_00000000000c0e23:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0e20
	jmp uuid_00000000000c0e22
uuid_00000000000c0e20:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0e1d
	jmp uuid_00000000000c0e1f
uuid_00000000000c0e1d:
	movb $1, -128(%rbp)
uuid_00000000000c0e1f:
	mov -176(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c0e22:
	mov -160(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c0e25:
	mov -144(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c0e28:
	mov -136(%RBP),%RSP
	add $-184, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e2d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0e2c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0e2f
uuid_00000000000c0e2d:
	push %RBP
	mov -168(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e29
	jmp uuid_00000000000c0e2b
uuid_00000000000c0e29:
	movq $1, -48(%rbp)
uuid_00000000000c0e2b:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000c0e2f:
	mov -88(%RBP),%RSP
	add $-192, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
is_SB_already_SB_tokenized_CL_ArrowU64String:
	pushq $0
	mov $already_SB_tokenized_CL_ListStringListStringCaseNumber1, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c0e46:
#call function non-zero : Arrow<List<String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0e47
	jmp uuid_00000000000c0e48
uuid_00000000000c0e47:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e3c
	jmp uuid_00000000000c0e3e
uuid_00000000000c0e3c:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0e39
	jmp uuid_00000000000c0e3b
uuid_00000000000c0e39:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c0e36
	jmp uuid_00000000000c0e38
uuid_00000000000c0e36:
	movb $1, -112(%rbp)
uuid_00000000000c0e38:
	mov -160(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c0e3b:
	mov -128(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c0e3e:
	mov -120(%RBP),%RSP
	add $-168, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e43
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0e42
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0e45
uuid_00000000000c0e43:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0e3f
	jmp uuid_00000000000c0e41
uuid_00000000000c0e3f:
	movq $1, -24(%rbp)
uuid_00000000000c0e41:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -136(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000c0e45:
	mov -80(%RBP),%RSP
	add $-176, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0e46
uuid_00000000000c0e48:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
tokenize_CL_ArrowNilString:
	pushq $uuid_00000000000be796
	push %RBP
#call function is-already-tokenized : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call is_SB_already_SB_tokenized_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0e4d
#call function read-file : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call read_SB_file_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -24(%rbp)
#call function cons : Arrow<Cons<String,List<String>>,List<String>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov $already_SB_tokenized_CL_ListStringListStringCaseNumber1, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListStringConsListStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov $already_SB_tokenized_CL_ListStringListStringCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	jmp uuid_00000000000c0e4f
uuid_00000000000c0e4d:
uuid_00000000000c0e4f:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $1
	pushq $1
	pushq $1
	pushq $1
	pushq $0
uuid_00000000000c0ed1:
	mov -24(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c0ed2
	jmp uuid_00000000000c0ed3
uuid_00000000000c0ed2:
	mov -24(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -112(%rbp)
	mov -128(%RBP), %AL
	mov $10, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0e54
	push %RBP
	jmp uuid_00000000000c0e51
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0e50
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0e53
uuid_00000000000c0e51:
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -80(%rbp)
uuid_00000000000c0e53:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c0e56
uuid_00000000000c0e54:
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -72(%rbp)
	movq $1, -80(%rbp)
uuid_00000000000c0e56:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	mov -24(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -136(%rbp)
	mov -152(%RBP), %AL
	mov $35, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ece
	push %RBP
	pushq -136(%rbp)
	mov -168(%RBP), %AL
	mov $10, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ecb
	push %RBP
	pushq -136(%rbp)
	mov -184(%RBP), %AL
	mov $9, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ec8
	push %RBP
	pushq -136(%rbp)
	mov -200(%RBP), %AL
	mov $32, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ec5
	push %RBP
	pushq -136(%rbp)
	mov -216(%RBP), %AL
	mov $40, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ec2
	push %RBP
	pushq -136(%rbp)
	mov -232(%RBP), %AL
	mov $41, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ebf
	push %RBP
	pushq -136(%rbp)
	mov -248(%RBP), %AL
	mov $39, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ebc
	push %RBP
	pushq -136(%rbp)
	mov -264(%RBP), %AL
	mov $59, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0eb9
	push %RBP
	pushq -136(%rbp)
	jmp uuid_00000000000c0eb6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0eb5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0eb8
uuid_00000000000c0eb6:
	push %RBP
	mov -40(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000c0eb2
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be8b2
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0eaf
	jmp uuid_00000000000c0eb1
uuid_00000000000c0eaf:
	pushq $uuid_00000000000be8b2
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c0eb1:
	mov -296(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c0eb4
uuid_00000000000c0eb2:
uuid_00000000000c0eb4:
	mov -288(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c0eb8:
	mov -272(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c0ebb
uuid_00000000000c0eb9:
	push %RBP
	mov -40(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000c0ea8
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0ea1
	jmp uuid_00000000000c0ea3
uuid_00000000000c0ea1:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c0ea3:
	mov -280(%RBP),%RSP
	add $-336, %RSP
	pushq $uuid_00000000000be8af
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	jmp uuid_00000000000c0eaa
uuid_00000000000c0ea8:
uuid_00000000000c0eaa:
	mov -272(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c0ebb:
	mov -256(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c0ebe
uuid_00000000000c0ebc:
	push %RBP
	mov -40(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000c0e9a
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0e93
	jmp uuid_00000000000c0e95
uuid_00000000000c0e93:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c0e95:
	mov -264(%RBP),%RSP
	add $-320, %RSP
	pushq $uuid_00000000000be8b1
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	jmp uuid_00000000000c0e9c
uuid_00000000000c0e9a:
uuid_00000000000c0e9c:
	mov -256(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c0ebe:
	mov -240(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c0ec1
uuid_00000000000c0ebf:
	push %RBP
	mov -40(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000c0e8c
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0e85
	jmp uuid_00000000000c0e87
uuid_00000000000c0e85:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c0e87:
	mov -248(%RBP),%RSP
	add $-304, %RSP
	mov -104(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -104(%rbp)
	pushq $uuid_00000000000be6c9
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	jmp uuid_00000000000c0e8e
uuid_00000000000c0e8c:
uuid_00000000000c0e8e:
	mov -240(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c0ec1:
	mov -224(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c0ec4
uuid_00000000000c0ec2:
	push %RBP
	mov -40(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000c0e7e
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0e77
	jmp uuid_00000000000c0e79
uuid_00000000000c0e77:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c0e79:
	mov -232(%RBP),%RSP
	add $-288, %RSP
	mov -104(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -104(%rbp)
	pushq $uuid_00000000000be6c7
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	movq -72(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -72(%rbp), %r15
	mov %r15, -88(%rbp)
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	jmp uuid_00000000000c0e80
uuid_00000000000c0e7e:
uuid_00000000000c0e80:
	mov -224(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000c0ec4:
	mov -208(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c0ec7
uuid_00000000000c0ec5:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0e70
	jmp uuid_00000000000c0e72
uuid_00000000000c0e70:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c0e72:
	mov -208(%RBP),%RSP
	add $-264, %RSP
	movq -72(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -72(%rbp), %r15
	mov %r15, -88(%rbp)
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
uuid_00000000000c0ec7:
	mov -192(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c0eca
uuid_00000000000c0ec8:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0e69
	jmp uuid_00000000000c0e6b
uuid_00000000000c0e69:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c0e6b:
	mov -192(%RBP),%RSP
	add $-248, %RSP
	movq -72(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -72(%rbp), %r15
	mov %r15, -88(%rbp)
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
uuid_00000000000c0eca:
	mov -176(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c0ecd
uuid_00000000000c0ecb:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0e62
	jmp uuid_00000000000c0e64
uuid_00000000000c0e62:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c0e64:
	mov -176(%RBP),%RSP
	add $-232, %RSP
	movq -72(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -72(%rbp), %r15
	mov %r15, -88(%rbp)
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movb $0, -40(%rbp)
uuid_00000000000c0ecd:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c0ed0
uuid_00000000000c0ece:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0e5b
	jmp uuid_00000000000c0e5d
uuid_00000000000c0e5b:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c0e5d:
	mov -160(%RBP),%RSP
	add $-216, %RSP
	movq -72(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -72(%rbp), %r15
	mov %r15, -88(%rbp)
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movb $1, -40(%rbp)
uuid_00000000000c0ed0:
	mov -144(%RBP),%RSP
	add $-216, %RSP
	mov -24(%RBP), %RAX
	inc %RAX
	movq %RAX, -24(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %rsp
	add $8, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c0ed1
uuid_00000000000c0ed3:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0ed8
	jmp uuid_00000000000c0eda
uuid_00000000000c0ed8:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	pushq $0
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
uuid_00000000000c0eda:
	mov -112(%RBP),%RSP
	add $-168, %RSP
#call function reverse : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	push %RBP
	mov -104(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ee1
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0edf
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c0ee0
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0ee3
uuid_00000000000c0ee1:
uuid_00000000000c0ee3:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	mov %rbp, %rsp
	sub $16, %rsp
	ret
align_CL_ArrowI64I64:
#call function max : Arrow<Cons<I64,I64>,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $8
	mov %RBX, %RBP
	call max_CL_ArrowI64ConsI64I64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_nil_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0eea
	jmp uuid_00000000000c0eec
uuid_00000000000c0eea:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0ee7
	jmp uuid_00000000000c0ee9
uuid_00000000000c0ee7:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0ee4
	jmp uuid_00000000000c0ee6
uuid_00000000000c0ee4:
	movb $1, -104(%rbp)
uuid_00000000000c0ee6:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0ee9:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0eec:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0efd
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ef3
	jmp uuid_00000000000c0ef5
uuid_00000000000c0ef3:
	push %RBP
	jmp uuid_00000000000c0ef0
	jmp uuid_00000000000c0ef2
uuid_00000000000c0ef0:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0eed
	jmp uuid_00000000000c0eef
uuid_00000000000c0eed:
	movb $1, -216(%rbp)
uuid_00000000000c0eef:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c0ef2:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c0ef5:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0efa
	push %RBP
	jmp uuid_00000000000c0ef7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0ef6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0ef9
uuid_00000000000c0ef7:
uuid_00000000000c0ef9:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c0efc
uuid_00000000000c0efa:
	movq $1, -40(%rbp)
uuid_00000000000c0efc:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c0eff
uuid_00000000000c0efd:
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c0eff:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_seq_CL_ArrowU64AST:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f06
	jmp uuid_00000000000c0f08
uuid_00000000000c0f06:
	push %RBP
	jmp uuid_00000000000c0f03
	jmp uuid_00000000000c0f05
uuid_00000000000c0f03:
	push %RBP
	jmp uuid_00000000000c0f00
	jmp uuid_00000000000c0f02
uuid_00000000000c0f00:
	movb $1, -248(%rbp)
uuid_00000000000c0f02:
	mov -272(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c0f05:
	mov -264(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c0f08:
	mov -256(%RBP),%RSP
	add $-272, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f0d
	push %RBP
	jmp uuid_00000000000c0f0a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0f09
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0f0c
uuid_00000000000c0f0a:
uuid_00000000000c0f0c:
	mov -280(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c0f0f
uuid_00000000000c0f0d:
	movq $1, -88(%rbp)
uuid_00000000000c0f0f:
	mov -168(%RBP),%RSP
	add $-272, %RSP
	mov -88(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
is_SB_arrow_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f16
	jmp uuid_00000000000c0f18
uuid_00000000000c0f16:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f13
	jmp uuid_00000000000c0f15
uuid_00000000000c0f13:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f10
	jmp uuid_00000000000c0f12
uuid_00000000000c0f10:
	movb $1, -104(%rbp)
uuid_00000000000c0f12:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0f15:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0f18:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f29
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f1f
	jmp uuid_00000000000c0f21
uuid_00000000000c0f1f:
	push %RBP
	jmp uuid_00000000000c0f1c
	jmp uuid_00000000000c0f1e
uuid_00000000000c0f1c:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000bed7b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0f19
	jmp uuid_00000000000c0f1b
uuid_00000000000c0f19:
	movb $1, -216(%rbp)
uuid_00000000000c0f1b:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c0f1e:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c0f21:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f26
	push %RBP
	jmp uuid_00000000000c0f23
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0f22
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0f25
uuid_00000000000c0f23:
uuid_00000000000c0f25:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c0f28
uuid_00000000000c0f26:
	movq $1, -40(%rbp)
uuid_00000000000c0f28:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c0f2b
uuid_00000000000c0f29:
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c0f2b:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_hook_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f32
	jmp uuid_00000000000c0f34
uuid_00000000000c0f32:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f2f
	jmp uuid_00000000000c0f31
uuid_00000000000c0f2f:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f2c
	jmp uuid_00000000000c0f2e
uuid_00000000000c0f2c:
	movb $1, -104(%rbp)
uuid_00000000000c0f2e:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0f31:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0f34:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f45
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f3b
	jmp uuid_00000000000c0f3d
uuid_00000000000c0f3b:
	push %RBP
	jmp uuid_00000000000c0f38
	jmp uuid_00000000000c0f3a
uuid_00000000000c0f38:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000beed1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0f35
	jmp uuid_00000000000c0f37
uuid_00000000000c0f35:
	movb $1, -216(%rbp)
uuid_00000000000c0f37:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c0f3a:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c0f3d:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f42
	push %RBP
	jmp uuid_00000000000c0f3f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0f3e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0f41
uuid_00000000000c0f3f:
uuid_00000000000c0f41:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c0f44
uuid_00000000000c0f42:
	movq $1, -40(%rbp)
uuid_00000000000c0f44:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c0f47
uuid_00000000000c0f45:
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c0f47:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_blob_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f4e
	jmp uuid_00000000000c0f50
uuid_00000000000c0f4e:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f4b
	jmp uuid_00000000000c0f4d
uuid_00000000000c0f4b:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f48
	jmp uuid_00000000000c0f4a
uuid_00000000000c0f48:
	movb $1, -104(%rbp)
uuid_00000000000c0f4a:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0f4d:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0f50:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f61
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f57
	jmp uuid_00000000000c0f59
uuid_00000000000c0f57:
	push %RBP
	jmp uuid_00000000000c0f54
	jmp uuid_00000000000c0f56
uuid_00000000000c0f54:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c022b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0f51
	jmp uuid_00000000000c0f53
uuid_00000000000c0f51:
	movb $1, -216(%rbp)
uuid_00000000000c0f53:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c0f56:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c0f59:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f5e
	push %RBP
	jmp uuid_00000000000c0f5b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0f5a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0f5d
uuid_00000000000c0f5b:
uuid_00000000000c0f5d:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c0f60
uuid_00000000000c0f5e:
	movq $1, -40(%rbp)
uuid_00000000000c0f60:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c0f63
uuid_00000000000c0f61:
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c0f63:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_cons_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f6a
	jmp uuid_00000000000c0f6c
uuid_00000000000c0f6a:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f67
	jmp uuid_00000000000c0f69
uuid_00000000000c0f67:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f64
	jmp uuid_00000000000c0f66
uuid_00000000000c0f64:
	movb $1, -104(%rbp)
uuid_00000000000c0f66:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0f69:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0f6c:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f7d
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f73
	jmp uuid_00000000000c0f75
uuid_00000000000c0f73:
	push %RBP
	jmp uuid_00000000000c0f70
	jmp uuid_00000000000c0f72
uuid_00000000000c0f70:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0f6d
	jmp uuid_00000000000c0f6f
uuid_00000000000c0f6d:
	movb $1, -216(%rbp)
uuid_00000000000c0f6f:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c0f72:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c0f75:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f7a
	push %RBP
	jmp uuid_00000000000c0f77
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0f76
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0f79
uuid_00000000000c0f77:
uuid_00000000000c0f79:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c0f7c
uuid_00000000000c0f7a:
	movq $1, -40(%rbp)
uuid_00000000000c0f7c:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c0f7f
uuid_00000000000c0f7d:
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c0f7f:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_impure_SB_ctx_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f86
	jmp uuid_00000000000c0f88
uuid_00000000000c0f86:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f83
	jmp uuid_00000000000c0f85
uuid_00000000000c0f83:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f80
	jmp uuid_00000000000c0f82
uuid_00000000000c0f80:
	movb $1, -104(%rbp)
uuid_00000000000c0f82:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0f85:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0f88:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f9a
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f90
	jmp uuid_00000000000c0f92
uuid_00000000000c0f90:
	push %RBP
	jmp uuid_00000000000c0f8d
	jmp uuid_00000000000c0f8f
uuid_00000000000c0f8d:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c0f89
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0f8a
	jmp uuid_00000000000c0f8c
uuid_00000000000c0f8a:
	movb $1, -216(%rbp)
uuid_00000000000c0f8c:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c0f8f:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c0f92:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0f97
	push %RBP
	jmp uuid_00000000000c0f94
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0f93
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0f96
uuid_00000000000c0f94:
uuid_00000000000c0f96:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c0f99
uuid_00000000000c0f97:
	movq $1, -40(%rbp)
uuid_00000000000c0f99:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c0f9c
uuid_00000000000c0f9a:
#call function is-impure-ctx : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_ctx_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-impure-ctx : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_ctx_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c0f9c:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_string_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fa3
	jmp uuid_00000000000c0fa5
uuid_00000000000c0fa3:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0fa0
	jmp uuid_00000000000c0fa2
uuid_00000000000c0fa0:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0f9d
	jmp uuid_00000000000c0f9f
uuid_00000000000c0f9d:
	movb $1, -104(%rbp)
uuid_00000000000c0f9f:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0fa2:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0fa5:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fb7
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fad
	jmp uuid_00000000000c0faf
uuid_00000000000c0fad:
	push %RBP
	jmp uuid_00000000000c0faa
	jmp uuid_00000000000c0fac
uuid_00000000000c0faa:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c0fa6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0fa7
	jmp uuid_00000000000c0fa9
uuid_00000000000c0fa7:
	movb $1, -216(%rbp)
uuid_00000000000c0fa9:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c0fac:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c0faf:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fb4
	push %RBP
	jmp uuid_00000000000c0fb1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0fb0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0fb3
uuid_00000000000c0fb1:
uuid_00000000000c0fb3:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c0fb6
uuid_00000000000c0fb4:
	movq $1, -40(%rbp)
uuid_00000000000c0fb6:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c0fb9
uuid_00000000000c0fb7:
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c0fb9:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_onto_SB_stack_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fc0
	jmp uuid_00000000000c0fc2
uuid_00000000000c0fc0:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0fbd
	jmp uuid_00000000000c0fbf
uuid_00000000000c0fbd:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0fba
	jmp uuid_00000000000c0fbc
uuid_00000000000c0fba:
	movb $1, -104(%rbp)
uuid_00000000000c0fbc:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0fbf:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0fc2:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fe6
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fdc
	jmp uuid_00000000000c0fde
uuid_00000000000c0fdc:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fd3
	jmp uuid_00000000000c0fd5
uuid_00000000000c0fd3:
	push %RBP
	jmp uuid_00000000000c0fd0
	jmp uuid_00000000000c0fd2
uuid_00000000000c0fd0:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fca
	jmp uuid_00000000000c0fcc
uuid_00000000000c0fca:
	push %RBP
	jmp uuid_00000000000c0fc7
	jmp uuid_00000000000c0fc9
uuid_00000000000c0fc7:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000c0fc3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0fc4
	jmp uuid_00000000000c0fc6
uuid_00000000000c0fc4:
	movb $1, -336(%rbp)
uuid_00000000000c0fc6:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c0fc9:
	mov -352(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c0fcc:
	mov -344(%RBP),%RSP
	add $-368, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fcd
	jmp uuid_00000000000c0fcf
uuid_00000000000c0fcd:
	movb $1, -280(%rbp)
uuid_00000000000c0fcf:
	mov -304(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c0fd2:
	mov -296(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c0fd5:
	mov -288(%RBP),%RSP
	add $-368, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fd9
	jmp uuid_00000000000c0fdb
uuid_00000000000c0fd9:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000bf361
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0fd6
	jmp uuid_00000000000c0fd8
uuid_00000000000c0fd6:
	movb $1, -216(%rbp)
uuid_00000000000c0fd8:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c0fdb:
	mov -232(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c0fde:
	mov -224(%RBP),%RSP
	add $-384, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fe3
	push %RBP
	jmp uuid_00000000000c0fe0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c0fdf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c0fe2
uuid_00000000000c0fe0:
uuid_00000000000c0fe2:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c0fe5
uuid_00000000000c0fe3:
	movq $1, -40(%rbp)
uuid_00000000000c0fe5:
	mov -184(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c0fe8
uuid_00000000000c0fe6:
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c0fe8:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_impure_SB_offset_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0fef
	jmp uuid_00000000000c0ff1
uuid_00000000000c0fef:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0fec
	jmp uuid_00000000000c0fee
uuid_00000000000c0fec:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c0fe9
	jmp uuid_00000000000c0feb
uuid_00000000000c0fe9:
	movb $1, -104(%rbp)
uuid_00000000000c0feb:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0fee:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c0ff1:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1015
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c100b
	jmp uuid_00000000000c100d
uuid_00000000000c100b:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1002
	jmp uuid_00000000000c1004
uuid_00000000000c1002:
	push %RBP
	jmp uuid_00000000000c0fff
	jmp uuid_00000000000c1001
uuid_00000000000c0fff:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ff9
	jmp uuid_00000000000c0ffb
uuid_00000000000c0ff9:
	push %RBP
	jmp uuid_00000000000c0ff6
	jmp uuid_00000000000c0ff8
uuid_00000000000c0ff6:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000c0ff2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c0ff3
	jmp uuid_00000000000c0ff5
uuid_00000000000c0ff3:
	movb $1, -336(%rbp)
uuid_00000000000c0ff5:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c0ff8:
	mov -352(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c0ffb:
	mov -344(%RBP),%RSP
	add $-368, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c0ffc
	jmp uuid_00000000000c0ffe
uuid_00000000000c0ffc:
	movb $1, -280(%rbp)
uuid_00000000000c0ffe:
	mov -304(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c1001:
	mov -296(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000c1004:
	mov -288(%RBP),%RSP
	add $-368, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1008
	jmp uuid_00000000000c100a
uuid_00000000000c1008:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000bf361
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1005
	jmp uuid_00000000000c1007
uuid_00000000000c1005:
	movb $1, -216(%rbp)
uuid_00000000000c1007:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c100a:
	mov -232(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c100d:
	mov -224(%RBP),%RSP
	add $-384, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1012
	push %RBP
	jmp uuid_00000000000c100f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c100e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1011
uuid_00000000000c100f:
uuid_00000000000c1011:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000c1014
uuid_00000000000c1012:
	movq $1, -40(%rbp)
uuid_00000000000c1014:
	mov -184(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c1017
uuid_00000000000c1015:
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c1017:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_branchconditional_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c101e
	jmp uuid_00000000000c1020
uuid_00000000000c101e:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c101b
	jmp uuid_00000000000c101d
uuid_00000000000c101b:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1018
	jmp uuid_00000000000c101a
uuid_00000000000c1018:
	movb $1, -104(%rbp)
uuid_00000000000c101a:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c101d:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c1020:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1032
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1028
	jmp uuid_00000000000c102a
uuid_00000000000c1028:
	push %RBP
	jmp uuid_00000000000c1025
	jmp uuid_00000000000c1027
uuid_00000000000c1025:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000c1021
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1022
	jmp uuid_00000000000c1024
uuid_00000000000c1022:
	movb $1, -216(%rbp)
uuid_00000000000c1024:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c1027:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000c102a:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c102f
	push %RBP
	jmp uuid_00000000000c102c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c102b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c102e
uuid_00000000000c102c:
uuid_00000000000c102e:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c1031
uuid_00000000000c102f:
	movq $1, -40(%rbp)
uuid_00000000000c1031:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c1034
uuid_00000000000c1032:
#call function is-branchconditional : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_branchconditional_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-branchconditional : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_branchconditional_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c1034:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_AD__CL_ArrowASTConsASTAST:
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1045
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c103b
	jmp uuid_00000000000c103d
uuid_00000000000c103b:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1038
	jmp uuid_00000000000c103a
uuid_00000000000c1038:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1035
	jmp uuid_00000000000c1037
uuid_00000000000c1035:
	movb $1, -392(%rbp)
uuid_00000000000c1037:
	mov -488(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c103a:
	mov -408(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c103d:
	mov -400(%RBP),%RSP
	add $-560, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1042
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000c103f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c103e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1041
uuid_00000000000c103f:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1041:
	mov -568(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000c1044
uuid_00000000000c1042:
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1044:
	mov -312(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000c1047
uuid_00000000000c1045:
uuid_00000000000c1047:
	mov -232(%RBP),%RSP
	add $-304, %RSP
	subq $72, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
print_CL_ArrowNilToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1051
	jmp uuid_00000000000c1053
uuid_00000000000c1051:
	push %RBP
	jmp uuid_00000000000c104e
	jmp uuid_00000000000c1050
uuid_00000000000c104e:
	push %RBP
	jmp uuid_00000000000c104b
	jmp uuid_00000000000c104d
uuid_00000000000c104b:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1048
	jmp uuid_00000000000c104a
uuid_00000000000c1048:
	movb $1, -192(%rbp)
uuid_00000000000c104a:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c104d:
	mov -216(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c1050:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c1053:
	mov -200(%RBP),%RSP
	add $-232, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1055
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1054
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1057
uuid_00000000000c1055:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1057:
	mov -128(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $64, %rsp
	ret
print_CL_ArrowNilContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c106d
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c106a
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1061
	jmp uuid_00000000000c1063
uuid_00000000000c1061:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	jmp uuid_00000000000c105e
	jmp uuid_00000000000c1060
uuid_00000000000c105e:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c105b
	jmp uuid_00000000000c105d
uuid_00000000000c105b:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1058
	jmp uuid_00000000000c105a
uuid_00000000000c1058:
	movb $1, -520(%rbp)
uuid_00000000000c105a:
	mov -632(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c105d:
	mov -616(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c1060:
	mov -536(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c1063:
	mov -528(%RBP),%RSP
	add $-728, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1067
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1066
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1069
uuid_00000000000c1067:
#call function print : Arrow<Context,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1064
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1065
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1069:
	mov -416(%RBP),%RSP
	add $-728, %RSP
	jmp uuid_00000000000c106c
uuid_00000000000c106a:
uuid_00000000000c106c:
	mov -312(%RBP),%RSP
	add $-408, %RSP
	jmp uuid_00000000000c106f
uuid_00000000000c106d:
uuid_00000000000c106f:
	mov -208(%RBP),%RSP
	add $-304, %RSP
	mov %rbp, %rsp
	sub $104, %rsp
	ret
print_CL_ArrowNilTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1086
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1083
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c107c
	jmp uuid_00000000000c107e
uuid_00000000000c107c:
	push %RBP
	jmp uuid_00000000000c1079
	jmp uuid_00000000000c107b
uuid_00000000000c1079:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000c1076
	jmp uuid_00000000000c1078
uuid_00000000000c1076:
	push %RBP
	mov -528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1073
	jmp uuid_00000000000c1075
uuid_00000000000c1073:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1070
	jmp uuid_00000000000c1072
uuid_00000000000c1070:
	movb $1, -640(%rbp)
uuid_00000000000c1072:
	mov -712(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c1075:
	mov -696(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c1078:
	mov -664(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c107b:
	mov -656(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c107e:
	mov -648(%RBP),%RSP
	add $-832, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1080
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c107f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1082
uuid_00000000000c1080:
#call function print : Arrow<TContext,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beed3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1065
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1082:
	mov -512(%RBP),%RSP
	add $-832, %RSP
	jmp uuid_00000000000c1085
uuid_00000000000c1083:
uuid_00000000000c1085:
	mov -384(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000c1088
uuid_00000000000c1086:
uuid_00000000000c1088:
	mov -256(%RBP),%RSP
	add $-376, %RSP
	mov %rbp, %rsp
	sub $128, %rsp
	ret
print_CL_ArrowNilAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10f9
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10f6
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1090
	jmp uuid_00000000000c1092
uuid_00000000000c1090:
	push %RBP
	jmp uuid_00000000000c108d
	jmp uuid_00000000000c108f
uuid_00000000000c108d:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c108a
	jmp uuid_00000000000c108c
uuid_00000000000c108a:
	movb $1, -400(%rbp)
uuid_00000000000c108c:
	mov -424(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000c108f:
	mov -416(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000c1092:
	mov -408(%RBP),%RSP
	add $-432, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10f3
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1099
	jmp uuid_00000000000c109b
uuid_00000000000c1099:
	push %RBP
	jmp uuid_00000000000c1096
	jmp uuid_00000000000c1098
uuid_00000000000c1096:
	push %RBP
	mov -448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1093
	jmp uuid_00000000000c1095
uuid_00000000000c1093:
	movb $1, -520(%rbp)
uuid_00000000000c1095:
	mov -544(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c1098:
	mov -536(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000c109b:
	mov -528(%RBP),%RSP
	add $-552, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10f0
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c109f
	jmp uuid_00000000000c10a1
uuid_00000000000c109f:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000c109c
	jmp uuid_00000000000c109e
uuid_00000000000c109c:
	movb $1, -640(%rbp)
uuid_00000000000c109e:
	mov -656(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000c10a1:
	mov -648(%RBP),%RSP
	add $-680, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10ed
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10a5
	jmp uuid_00000000000c10a7
uuid_00000000000c10a5:
	push %RBP
	jmp uuid_00000000000c10a2
	jmp uuid_00000000000c10a4
uuid_00000000000c10a2:
	movb $1, -768(%rbp)
uuid_00000000000c10a4:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c10a7:
	mov -776(%RBP),%RSP
	add $-784, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10ea
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10ae
	jmp uuid_00000000000c10b0
uuid_00000000000c10ae:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c10ab
	jmp uuid_00000000000c10ad
uuid_00000000000c10ab:
	push %RBP
	mov -848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c10a8
	jmp uuid_00000000000c10aa
uuid_00000000000c10a8:
	movb $1, -872(%rbp)
uuid_00000000000c10aa:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c10ad:
	mov -888(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c10b0:
	mov -880(%RBP),%RSP
	add $-1040, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10e7
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10b8
	jmp uuid_00000000000c10ba
uuid_00000000000c10b8:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c10b5
	jmp uuid_00000000000c10b7
uuid_00000000000c10b5:
	push %RBP
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000c10b2
	jmp uuid_00000000000c10b4
uuid_00000000000c10b2:
	movb $1, -1128(%rbp)
uuid_00000000000c10b4:
	mov -1224(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000c10b7:
	mov -1144(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000c10ba:
	mov -1136(%RBP),%RSP
	add $-1280, %RSP
	mov -1128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10e4
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10c2
	jmp uuid_00000000000c10c4
uuid_00000000000c10c2:
	push %RBP
	mov -1352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c10bf
	jmp uuid_00000000000c10c1
uuid_00000000000c10bf:
	push %RBP
	mov -1344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c10bc
	jmp uuid_00000000000c10be
uuid_00000000000c10bc:
	movb $1, -1368(%rbp)
uuid_00000000000c10be:
	mov -1464(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c10c1:
	mov -1384(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c10c4:
	mov -1376(%RBP),%RSP
	add $-1536, %RSP
	mov -1368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10e1
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10ce
	jmp uuid_00000000000c10d0
uuid_00000000000c10ce:
	push %RBP
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	jmp uuid_00000000000c10cb
	jmp uuid_00000000000c10cd
uuid_00000000000c10cb:
	push %RBP
	mov -1584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c10c8
	jmp uuid_00000000000c10ca
uuid_00000000000c10c8:
	push %RBP
	mov -1576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c10c5
	jmp uuid_00000000000c10c7
uuid_00000000000c10c5:
	movb $1, -1624(%rbp)
uuid_00000000000c10c7:
	mov -1752(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c10ca:
	mov -1672(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c10cd:
	mov -1640(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c10d0:
	mov -1632(%RBP),%RSP
	add $-1824, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10de
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1904(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c10d7
	jmp uuid_00000000000c10d9
uuid_00000000000c10d7:
	push %RBP
	mov -1896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c10d4
	jmp uuid_00000000000c10d6
uuid_00000000000c10d4:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c10d1
	jmp uuid_00000000000c10d3
uuid_00000000000c10d1:
	movb $1, -1912(%rbp)
uuid_00000000000c10d3:
	mov -2008(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000c10d6:
	mov -1928(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000c10d9:
	mov -1920(%RBP),%RSP
	add $-2080, %RSP
	mov -1912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c10db
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c10da
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c10dd
uuid_00000000000c10db:
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1065
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c10dd:
	mov -1832(%RBP),%RSP
	add $-2080, %RSP
	jmp uuid_00000000000c10e0
uuid_00000000000c10de:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c7
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be8b2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be940
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c10e0:
	mov -1544(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000c10e3
uuid_00000000000c10e1:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c7
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c8
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c10e3:
	mov -1288(%RBP),%RSP
	add $-1536, %RSP
	jmp uuid_00000000000c10e6
uuid_00000000000c10e4:
#call function print : Arrow<Token,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c10bb
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c10e6:
	mov -1048(%RBP),%RSP
	add $-1280, %RSP
	jmp uuid_00000000000c10e9
uuid_00000000000c10e7:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c10b1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1064
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c10e9:
	mov -792(%RBP),%RSP
	add $-1040, %RSP
	jmp uuid_00000000000c10ec
uuid_00000000000c10ea:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bf361
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c10ec:
	mov -688(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c10ef
uuid_00000000000c10ed:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c10ef:
	mov -560(%RBP),%RSP
	add $-680, %RSP
	jmp uuid_00000000000c10f2
uuid_00000000000c10f0:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be8b1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c10f2:
	mov -440(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000c10f5
uuid_00000000000c10f3:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c10f5:
	mov -320(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000c10f8
uuid_00000000000c10f6:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6b7
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c10f8:
	mov -240(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c10fb
uuid_00000000000c10f9:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1089
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c10fb:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
print_CL_ArrowNilFContext:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c10fc
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1110:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1111
	jmp uuid_00000000000c1112
uuid_00000000000c1111:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1109
	jmp uuid_00000000000c110b
uuid_00000000000c1109:
	push %RBP
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	jmp uuid_00000000000c1106
	jmp uuid_00000000000c1108
uuid_00000000000c1106:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c1103
	jmp uuid_00000000000c1105
uuid_00000000000c1103:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1100
	jmp uuid_00000000000c1102
uuid_00000000000c1100:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c10fd
	jmp uuid_00000000000c10ff
uuid_00000000000c10fd:
	movb $1, -624(%rbp)
uuid_00000000000c10ff:
	mov -848(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c1102:
	mov -832(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c1105:
	mov -800(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c1108:
	mov -640(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000c110b:
	mov -632(%RBP),%RSP
	add $-1048, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c110d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c110c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c110f
uuid_00000000000c110d:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beed3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -1048(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c110f:
	mov -416(%RBP),%RSP
	add $-1048, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c1110
uuid_00000000000c1112:
	mov %rbp, %rsp
	sub $208, %rsp
	ret
print_CL_ArrowNilFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1125
	jmp uuid_00000000000c1127
uuid_00000000000c1125:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000c1122
	jmp uuid_00000000000c1124
uuid_00000000000c1122:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c111f
	jmp uuid_00000000000c1121
uuid_00000000000c111f:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000c111c
	jmp uuid_00000000000c111e
uuid_00000000000c111c:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1119
	jmp uuid_00000000000c111b
uuid_00000000000c1119:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1116
	jmp uuid_00000000000c1118
uuid_00000000000c1116:
	push %RBP
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000c1113
	jmp uuid_00000000000c1115
uuid_00000000000c1113:
	movb $1, -480(%rbp)
uuid_00000000000c1115:
	mov -840(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c1118:
	mov -784(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c111b:
	mov -768(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c111e:
	mov -736(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c1121:
	mov -528(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c1124:
	mov -496(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c1127:
	mov -488(%RBP),%RSP
	add $-912, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c113e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c113d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1140
uuid_00000000000c113e:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1128
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1129
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c113a:
#call function non-zero : Arrow<FragmentKV,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c113b
	jmp uuid_00000000000c113c
uuid_00000000000c113b:
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	push %RBP
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1133
	jmp uuid_00000000000c1135
uuid_00000000000c1133:
	push %RBP
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	jmp uuid_00000000000c1130
	jmp uuid_00000000000c1132
uuid_00000000000c1130:
	push %RBP
	mov -984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c112d
	jmp uuid_00000000000c112f
uuid_00000000000c112d:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c112a
	jmp uuid_00000000000c112c
uuid_00000000000c112a:
	movb $1, -1024(%rbp)
uuid_00000000000c112c:
	mov -1088(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c112f:
	mov -1072(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c1132:
	mov -1040(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c1135:
	mov -1032(%RBP),%RSP
	add $-1136, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1137
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1136
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1139
uuid_00000000000c1137:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be8b5
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1064
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -1136(%rbp), %r15
	movq %r15, -832(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -824(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -792(%rbp)
uuid_00000000000c1139:
	mov -968(%RBP),%RSP
	add $-1136, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c113a
uuid_00000000000c113c:
uuid_00000000000c1140:
	mov -320(%RBP),%RSP
	add $-912, %RSP
	mov %rbp, %rsp
	sub $160, %rsp
	ret
print_CL_ArrowNilFragmentList:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1147
	jmp uuid_00000000000c1149
uuid_00000000000c1147:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	jmp uuid_00000000000c1144
	jmp uuid_00000000000c1146
uuid_00000000000c1144:
	push %RBP
	mov -360(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1141
	jmp uuid_00000000000c1143
uuid_00000000000c1141:
	movb $1, -528(%rbp)
uuid_00000000000c1143:
	mov -704(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c1146:
	mov -544(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c1149:
	mov -536(%RBP),%RSP
	add $-872, %RSP
	mov -528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c114e
	push %RBP
	jmp uuid_00000000000c114b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c114a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c114d
uuid_00000000000c114b:
uuid_00000000000c114d:
	mov -880(%RBP),%RSP
	add $-880, %RSP
	jmp uuid_00000000000c1150
uuid_00000000000c114e:
#call function print : Arrow<FragmentList,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1150:
	mov -352(%RBP),%RSP
	add $-872, %RSP
	mov %rbp, %rsp
	sub $176, %rsp
	ret
print_CL_ArrowNilSourceLocation:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c115a
	jmp uuid_00000000000c115c
uuid_00000000000c115a:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1157
	jmp uuid_00000000000c1159
uuid_00000000000c1157:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1154
	jmp uuid_00000000000c1156
uuid_00000000000c1154:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1151
	jmp uuid_00000000000c1153
uuid_00000000000c1151:
	movb $1, -120(%rbp)
uuid_00000000000c1153:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c1156:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c1159:
	mov -136(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c115c:
	mov -128(%RBP),%RSP
	add $-176, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1161
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1160
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1163
uuid_00000000000c1161:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c115d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c115e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c115f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1163:
	mov -80(%RBP),%RSP
	add $-176, %RSP
	mov %rbp, %rsp
	sub $40, %rsp
	ret
print_CL_ArrowNilType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1197
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1167
	jmp uuid_00000000000c1169
uuid_00000000000c1167:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1164
	jmp uuid_00000000000c1166
uuid_00000000000c1164:
	movb $1, -128(%rbp)
uuid_00000000000c1166:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c1169:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1194
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1170
	jmp uuid_00000000000c1172
uuid_00000000000c1170:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c116d
	jmp uuid_00000000000c116f
uuid_00000000000c116d:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c116a
	jmp uuid_00000000000c116c
uuid_00000000000c116a:
	movb $1, -192(%rbp)
uuid_00000000000c116c:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c116f:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c1172:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1191
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1179
	jmp uuid_00000000000c117b
uuid_00000000000c1179:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1176
	jmp uuid_00000000000c1178
uuid_00000000000c1176:
	push %RBP
	mov -280(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1173
	jmp uuid_00000000000c1175
uuid_00000000000c1173:
	movb $1, -304(%rbp)
uuid_00000000000c1175:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c1178:
	mov -320(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c117b:
	mov -312(%RBP),%RSP
	add $-376, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c118e
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1187
	jmp uuid_00000000000c1189
uuid_00000000000c1187:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1184
	jmp uuid_00000000000c1186
uuid_00000000000c1184:
	push %RBP
	mov -392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1181
	jmp uuid_00000000000c1183
uuid_00000000000c1181:
	movb $1, -416(%rbp)
uuid_00000000000c1183:
	mov -480(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000c1186:
	mov -432(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000c1189:
	mov -424(%RBP),%RSP
	add $-488, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c118b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c118a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c118d
uuid_00000000000c118b:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bea4b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bea4c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c118d:
	mov -384(%RBP),%RSP
	add $-488, %RSP
	jmp uuid_00000000000c1190
uuid_00000000000c118e:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c117e
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c117d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1180
uuid_00000000000c117e:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c117c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1180:
	mov -384(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c1190:
	mov -272(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000c1193
uuid_00000000000c1191:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1193:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c1196
uuid_00000000000c1194:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1196:
	mov -96(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c1199
uuid_00000000000c1197:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be850
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1199:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
print_CL_ArrowNilListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11b5
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11a2
	jmp uuid_00000000000c11a4
uuid_00000000000c11a2:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c119f
	jmp uuid_00000000000c11a1
uuid_00000000000c119f:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000c119c
	jmp uuid_00000000000c119e
uuid_00000000000c119c:
	movb $1, -192(%rbp)
uuid_00000000000c119e:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c11a1:
	mov -208(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c11a4:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c11b2
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11ab
	jmp uuid_00000000000c11ad
uuid_00000000000c11ab:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c11a8
	jmp uuid_00000000000c11aa
uuid_00000000000c11a8:
	push %RBP
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	jmp uuid_00000000000c11a5
	jmp uuid_00000000000c11a7
uuid_00000000000c11a5:
	movb $1, -336(%rbp)
uuid_00000000000c11a7:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c11aa:
	mov -352(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c11ad:
	mov -344(%RBP),%RSP
	add $-424, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c11af
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c11ae
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c11b1
uuid_00000000000c11af:
#call function print : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bea0b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c11b1:
	mov -288(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000c11b4
uuid_00000000000c11b2:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c11b4:
	mov -144(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c11b7
uuid_00000000000c11b5:
uuid_00000000000c11b7:
	mov -96(%RBP),%RSP
	add $-136, %RSP
	mov %rbp, %rsp
	sub $48, %rsp
	ret
reverse_CL_ArrowFragmentListFragmentList:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c11c5:
#call function non-zero : Arrow<FragmentList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c11c6
	jmp uuid_00000000000c11c7
uuid_00000000000c11c6:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11be
	jmp uuid_00000000000c11c0
uuid_00000000000c11be:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000c11bb
	jmp uuid_00000000000c11bd
uuid_00000000000c11bb:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c11b8
	jmp uuid_00000000000c11ba
uuid_00000000000c11b8:
	movb $1, -696(%rbp)
uuid_00000000000c11ba:
	mov -872(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c11bd:
	mov -712(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c11c0:
	mov -704(%RBP),%RSP
	add $-1040, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c11c2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c11c1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c11c4
uuid_00000000000c11c2:
#call function close : Arrow<FragmentList,Array<FragmentList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentListFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq $0
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	movq -1040(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c11c4:
	mov -520(%RBP),%RSP
	add $-1040, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c11c5
uuid_00000000000c11c7:
	subq $168, %rsp
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
serialize_SB_ast_CL_ArrowNilAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1248
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1245
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11cb
	jmp uuid_00000000000c11cd
uuid_00000000000c11cb:
	push %RBP
	jmp uuid_00000000000c11c8
	jmp uuid_00000000000c11ca
uuid_00000000000c11c8:
	movb $1, -400(%rbp)
uuid_00000000000c11ca:
	mov -416(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000c11cd:
	mov -408(%RBP),%RSP
	add $-416, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1242
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11d4
	jmp uuid_00000000000c11d6
uuid_00000000000c11d4:
	push %RBP
	jmp uuid_00000000000c11d1
	jmp uuid_00000000000c11d3
uuid_00000000000c11d1:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c11ce
	jmp uuid_00000000000c11d0
uuid_00000000000c11ce:
	movb $1, -504(%rbp)
uuid_00000000000c11d0:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c11d3:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c11d6:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c123f
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11de
	jmp uuid_00000000000c11e0
uuid_00000000000c11de:
	push %RBP
	jmp uuid_00000000000c11db
	jmp uuid_00000000000c11dd
uuid_00000000000c11db:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c11d8
	jmp uuid_00000000000c11da
uuid_00000000000c11d8:
	movb $1, -624(%rbp)
uuid_00000000000c11da:
	mov -648(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c11dd:
	mov -640(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c11e0:
	mov -632(%RBP),%RSP
	add $-656, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c123c
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11e5
	jmp uuid_00000000000c11e7
uuid_00000000000c11e5:
	push %RBP
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	jmp uuid_00000000000c11e2
	jmp uuid_00000000000c11e4
uuid_00000000000c11e2:
	movb $1, -744(%rbp)
uuid_00000000000c11e4:
	mov -760(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000c11e7:
	mov -752(%RBP),%RSP
	add $-784, %RSP
	mov -744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1239
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11ee
	jmp uuid_00000000000c11f0
uuid_00000000000c11ee:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c11eb
	jmp uuid_00000000000c11ed
uuid_00000000000c11eb:
	push %RBP
	mov -848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c11e8
	jmp uuid_00000000000c11ea
uuid_00000000000c11e8:
	movb $1, -872(%rbp)
uuid_00000000000c11ea:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c11ed:
	mov -888(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c11f0:
	mov -880(%RBP),%RSP
	add $-1040, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1236
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c11f9
	jmp uuid_00000000000c11fb
uuid_00000000000c11f9:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c11f6
	jmp uuid_00000000000c11f8
uuid_00000000000c11f6:
	push %RBP
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000c11f3
	jmp uuid_00000000000c11f5
uuid_00000000000c11f3:
	movb $1, -1128(%rbp)
uuid_00000000000c11f5:
	mov -1224(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000c11f8:
	mov -1144(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000c11fb:
	mov -1136(%RBP),%RSP
	add $-1280, %RSP
	mov -1128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1233
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1203
	jmp uuid_00000000000c1205
uuid_00000000000c1203:
	push %RBP
	mov -1352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1200
	jmp uuid_00000000000c1202
uuid_00000000000c1200:
	push %RBP
	mov -1344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c11fd
	jmp uuid_00000000000c11ff
uuid_00000000000c11fd:
	movb $1, -1368(%rbp)
uuid_00000000000c11ff:
	mov -1464(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c1202:
	mov -1384(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c1205:
	mov -1376(%RBP),%RSP
	add $-1536, %RSP
	mov -1368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1230
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1210
	jmp uuid_00000000000c1212
uuid_00000000000c1210:
	push %RBP
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	jmp uuid_00000000000c120d
	jmp uuid_00000000000c120f
uuid_00000000000c120d:
	push %RBP
	mov -1584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c120a
	jmp uuid_00000000000c120c
uuid_00000000000c120a:
	push %RBP
	mov -1576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1207
	jmp uuid_00000000000c1209
uuid_00000000000c1207:
	movb $1, -1624(%rbp)
uuid_00000000000c1209:
	mov -1752(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c120c:
	mov -1672(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c120f:
	mov -1640(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000c1212:
	mov -1632(%RBP),%RSP
	add $-1824, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c122d
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1904(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c121a
	jmp uuid_00000000000c121c
uuid_00000000000c121a:
	push %RBP
	mov -1896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1217
	jmp uuid_00000000000c1219
uuid_00000000000c1217:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2080(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1214
	jmp uuid_00000000000c1216
uuid_00000000000c1214:
	movb $1, -1912(%rbp)
uuid_00000000000c1216:
	mov -2008(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000c1219:
	mov -1928(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000c121c:
	mov -1920(%RBP),%RSP
	add $-2080, %RSP
	mov -1912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c122a
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2160(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1223
	jmp uuid_00000000000c1225
uuid_00000000000c1223:
	push %RBP
	mov -2152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1220
	jmp uuid_00000000000c1222
uuid_00000000000c1220:
	push %RBP
	mov -2144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c121d
	jmp uuid_00000000000c121f
uuid_00000000000c121d:
	movb $1, -2168(%rbp)
uuid_00000000000c121f:
	mov -2264(%RBP),%RSP
	add $-2336, %RSP
uuid_00000000000c1222:
	mov -2184(%RBP),%RSP
	add $-2336, %RSP
uuid_00000000000c1225:
	mov -2176(%RBP),%RSP
	add $-2336, %RSP
	mov -2168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1227
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1226
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1229
uuid_00000000000c1227:
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1229:
	mov -2088(%RBP),%RSP
	add $-2336, %RSP
	jmp uuid_00000000000c122c
uuid_00000000000c122a:
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c122c:
	mov -1832(%RBP),%RSP
	add $-2080, %RSP
	jmp uuid_00000000000c122f
uuid_00000000000c122d:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1213
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c8
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11f2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c122f:
	mov -1544(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000c1232
uuid_00000000000c1230:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1206
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c8
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11f2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1232:
	mov -1288(%RBP),%RSP
	add $-1536, %RSP
	jmp uuid_00000000000c1235
uuid_00000000000c1233:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11fc
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Token,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c8
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11f2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1235:
	mov -1048(%RBP),%RSP
	add $-1280, %RSP
	jmp uuid_00000000000c1238
uuid_00000000000c1236:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11f1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c8
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11f2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1238:
	mov -792(%RBP),%RSP
	add $-1040, %RSP
	jmp uuid_00000000000c123b
uuid_00000000000c1239:
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c123b:
	mov -664(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000c123e
uuid_00000000000c123c:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11e1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c123e:
	mov -544(%RBP),%RSP
	add $-656, %RSP
	jmp uuid_00000000000c1241
uuid_00000000000c123f:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11d7
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1241:
	mov -424(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000c1244
uuid_00000000000c1242:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bf361
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1244:
	mov -320(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000c1247
uuid_00000000000c1245:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1247:
	mov -240(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000c124a
uuid_00000000000c1248:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6b7
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c124a:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
serialize_SB_ast_CL_ArrowNilListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1266
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1253
	jmp uuid_00000000000c1255
uuid_00000000000c1253:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1250
	jmp uuid_00000000000c1252
uuid_00000000000c1250:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000c124d
	jmp uuid_00000000000c124f
uuid_00000000000c124d:
	movb $1, -192(%rbp)
uuid_00000000000c124f:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c1252:
	mov -208(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c1255:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1263
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c125c
	jmp uuid_00000000000c125e
uuid_00000000000c125c:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1259
	jmp uuid_00000000000c125b
uuid_00000000000c1259:
	push %RBP
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	jmp uuid_00000000000c1256
	jmp uuid_00000000000c1258
uuid_00000000000c1256:
	movb $1, -336(%rbp)
uuid_00000000000c1258:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c125b:
	mov -352(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000c125e:
	mov -344(%RBP),%RSP
	add $-424, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1260
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c125f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1262
uuid_00000000000c1260:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1206
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c8
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11f2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1262:
	mov -288(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000c1265
uuid_00000000000c1263:
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1265:
	mov -144(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c1268
uuid_00000000000c1266:
uuid_00000000000c1268:
	mov -96(%RBP),%RSP
	add $-136, %RSP
	mov %rbp, %rsp
	sub $48, %rsp
	ret
serialize_SB_ast_CL_ArrowNilType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c129a
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c126d
	jmp uuid_00000000000c126f
uuid_00000000000c126d:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c126a
	jmp uuid_00000000000c126c
uuid_00000000000c126a:
	movb $1, -128(%rbp)
uuid_00000000000c126c:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c126f:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1297
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1276
	jmp uuid_00000000000c1278
uuid_00000000000c1276:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1273
	jmp uuid_00000000000c1275
uuid_00000000000c1273:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1270
	jmp uuid_00000000000c1272
uuid_00000000000c1270:
	movb $1, -192(%rbp)
uuid_00000000000c1272:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c1275:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c1278:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1294
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1280
	jmp uuid_00000000000c1282
uuid_00000000000c1280:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c127d
	jmp uuid_00000000000c127f
uuid_00000000000c127d:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c127a
	jmp uuid_00000000000c127c
uuid_00000000000c127a:
	movb $1, -304(%rbp)
uuid_00000000000c127c:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c127f:
	mov -320(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c1282:
	mov -312(%RBP),%RSP
	add $-376, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1291
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1289
	jmp uuid_00000000000c128b
uuid_00000000000c1289:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1286
	jmp uuid_00000000000c1288
uuid_00000000000c1286:
	push %RBP
	mov -392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1283
	jmp uuid_00000000000c1285
uuid_00000000000c1283:
	movb $1, -416(%rbp)
uuid_00000000000c1285:
	mov -480(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000c1288:
	mov -432(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000c128b:
	mov -424(%RBP),%RSP
	add $-488, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c128e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c128d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1290
uuid_00000000000c128e:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1206
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11e1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c128c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11f2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1290:
	mov -384(%RBP),%RSP
	add $-488, %RSP
	jmp uuid_00000000000c1293
uuid_00000000000c1291:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11e1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1293:
	mov -272(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000c1296
uuid_00000000000c1294:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1206
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1279
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1206
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c8
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11f2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11f2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1296:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000c1299
uuid_00000000000c1297:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c11d7
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6c9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1299:
	mov -96(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c129c
uuid_00000000000c129a:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1269
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c129c:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
slot_CL_ArrowTypeConsStringType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12a3
	jmp uuid_00000000000c12a5
uuid_00000000000c12a3:
	push %RBP
	jmp uuid_00000000000c12a0
	jmp uuid_00000000000c12a2
uuid_00000000000c12a0:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c129d
	jmp uuid_00000000000c129f
uuid_00000000000c129d:
	movb $1, -128(%rbp)
uuid_00000000000c129f:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c12a2:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000c12a5:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c12bc
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12af
	jmp uuid_00000000000c12b1
uuid_00000000000c12af:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c12ac
	jmp uuid_00000000000c12ae
uuid_00000000000c12ac:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c12a9
	jmp uuid_00000000000c12ab
uuid_00000000000c12a9:
	movb $1, -200(%rbp)
uuid_00000000000c12ab:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c12ae:
	mov -216(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c12b1:
	mov -208(%RBP),%RSP
	add $-272, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c12b9
	push %RBP
	jmp uuid_00000000000c12b6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c12b5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c12b8
uuid_00000000000c12b6:
uuid_00000000000c12b8:
	mov -280(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c12bb
uuid_00000000000c12b9:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c12b2
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	movq -328(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -48(%rbp)
	jmp uuid_00000000000c12b4
uuid_00000000000c12b2:
	movq -296(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000c12b4:
	mov -304(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000c12bb:
	mov -168(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000c12be
uuid_00000000000c12bc:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c12a6
	jmp uuid_00000000000c12a8
uuid_00000000000c12a6:
	movq -24(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000c12a8:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c12be:
	mov -96(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
slot_CL_ArrowTypeConsStringConsStringType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12c5
	jmp uuid_00000000000c12c7
uuid_00000000000c12c5:
	push %RBP
	mov -120(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c12c2
	jmp uuid_00000000000c12c4
uuid_00000000000c12c2:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c12bf
	jmp uuid_00000000000c12c1
uuid_00000000000c12bf:
	movb $1, -136(%rbp)
uuid_00000000000c12c1:
	mov -200(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c12c4:
	mov -152(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c12c7:
	mov -144(%RBP),%RSP
	add $-208, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c12f1
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12e4
	jmp uuid_00000000000c12e6
uuid_00000000000c12e4:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c12e1
	jmp uuid_00000000000c12e3
uuid_00000000000c12e1:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c12de
	jmp uuid_00000000000c12e0
uuid_00000000000c12de:
	movb $1, -248(%rbp)
uuid_00000000000c12e0:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c12e3:
	mov -264(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000c12e6:
	mov -256(%RBP),%RSP
	add $-320, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c12ee
	push %RBP
	jmp uuid_00000000000c12eb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c12ea
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c12ed
uuid_00000000000c12eb:
uuid_00000000000c12ed:
	mov -328(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000c12f0
uuid_00000000000c12ee:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c12e7
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	movq -376(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -56(%rbp)
	jmp uuid_00000000000c12e9
uuid_00000000000c12e7:
	movq -344(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000c12e9:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c12f0:
	mov -216(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c12f3
uuid_00000000000c12f1:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c12db
	jmp uuid_00000000000c12dd
uuid_00000000000c12db:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12ce
	jmp uuid_00000000000c12d0
uuid_00000000000c12ce:
	push %RBP
	jmp uuid_00000000000c12cb
	jmp uuid_00000000000c12cd
uuid_00000000000c12cb:
	push %RBP
	mov -288(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c12c8
	jmp uuid_00000000000c12ca
uuid_00000000000c12c8:
	movb $1, -312(%rbp)
uuid_00000000000c12ca:
	mov -336(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c12cd:
	mov -328(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c12d0:
	mov -320(%RBP),%RSP
	add $-344, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c12d8
	push %RBP
	jmp uuid_00000000000c12d5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c12d4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c12d7
uuid_00000000000c12d5:
uuid_00000000000c12d7:
	mov -352(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000c12da
uuid_00000000000c12d8:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c12d1
	jmp uuid_00000000000c12d3
uuid_00000000000c12d1:
	movq -24(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000c12d3:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c12da:
	mov -264(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c12dd:
	mov -216(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000c12f3:
	mov -104(%RBP),%RSP
	add $-352, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
uuid_CL_ArrowStringNil:
	mov $uuid_SB_counter_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $uuid_SB_counter_CL_U64, %r14
	movq %r15, 0(%r14)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c12f4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-hex : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $uuid_SB_counter_CL_U64, %r15
	pushq 0(%r15)
	mov %RBX, %RBP
	call to_SB_hex_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
iuid_CL_ArrowU64Nil:
	mov $uuid_SB_counter_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $uuid_SB_counter_CL_U64, %r14
	movq %r15, 0(%r14)
	mov $uuid_SB_counter_CL_U64, %r15
	pushq 0(%r15)
	mov -16(%rbp), %RAX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
var_SB_name_SB_if_SB_var_CL_ArrowStringAST:
	pushq $uuid_00000000000be796
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c12fb
	jmp uuid_00000000000c12fd
uuid_00000000000c12fb:
	push %RBP
	jmp uuid_00000000000c12f8
	jmp uuid_00000000000c12fa
uuid_00000000000c12f8:
	push %RBP
	mov -176(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c12f5
	jmp uuid_00000000000c12f7
uuid_00000000000c12f5:
	movb $1, -248(%rbp)
uuid_00000000000c12f7:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c12fa:
	mov -264(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c12fd:
	mov -256(%RBP),%RSP
	add $-280, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c130e
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1304
	jmp uuid_00000000000c1306
uuid_00000000000c1304:
	push %RBP
	jmp uuid_00000000000c1301
	jmp uuid_00000000000c1303
uuid_00000000000c1301:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c12fe
	jmp uuid_00000000000c1300
uuid_00000000000c12fe:
	movb $1, -368(%rbp)
uuid_00000000000c1300:
	mov -392(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c1303:
	mov -384(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c1306:
	mov -376(%RBP),%RSP
	add $-400, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c130b
	push %RBP
	jmp uuid_00000000000c1308
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1307
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c130a
uuid_00000000000c1308:
uuid_00000000000c130a:
	mov -408(%RBP),%RSP
	add $-408, %RSP
	jmp uuid_00000000000c130d
uuid_00000000000c130b:
	movq -400(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -400(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000c130d:
	mov -288(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000c1310
uuid_00000000000c130e:
	movq -280(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -280(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000c1310:
	mov -168(%RBP),%RSP
	add $-280, %RSP
	mov -88(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_expect_CL_ArrowNilConsListTokenString:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<List<Token>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
parse_SB_lambda_CL_ArrowParsePartialListToken:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c133c
	jmp uuid_00000000000c133e
uuid_00000000000c133c:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1327
	jmp uuid_00000000000c1329
uuid_00000000000c1327:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1324
	jmp uuid_00000000000c1326
uuid_00000000000c1324:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c131e
	jmp uuid_00000000000c1320
uuid_00000000000c131e:
	push %RBP
	jmp uuid_00000000000c131b
	jmp uuid_00000000000c131d
uuid_00000000000c131b:
	push %RBP
	jmp uuid_00000000000c1318
	jmp uuid_00000000000c131a
uuid_00000000000c1318:
	push %RBP
	mov -464(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1315
	jmp uuid_00000000000c1317
uuid_00000000000c1315:
	movb $1, -520(%rbp)
uuid_00000000000c1317:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c131a:
	mov -544(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c131d:
	mov -536(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c1320:
	mov -528(%RBP),%RSP
	add $-560, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1321
	jmp uuid_00000000000c1323
uuid_00000000000c1321:
	movb $1, -360(%rbp)
uuid_00000000000c1323:
	mov -456(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c1326:
	mov -376(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c1329:
	mov -368(%RBP),%RSP
	add $-560, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1339
	jmp uuid_00000000000c133b
uuid_00000000000c1339:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1333
	jmp uuid_00000000000c1335
uuid_00000000000c1333:
	push %RBP
	jmp uuid_00000000000c1330
	jmp uuid_00000000000c1332
uuid_00000000000c1330:
	push %RBP
	jmp uuid_00000000000c132d
	jmp uuid_00000000000c132f
uuid_00000000000c132d:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c132a
	jmp uuid_00000000000c132c
uuid_00000000000c132a:
	movb $1, -632(%rbp)
uuid_00000000000c132c:
	mov -664(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c132f:
	mov -656(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c1332:
	mov -648(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c1335:
	mov -640(%RBP),%RSP
	add $-672, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1336
	jmp uuid_00000000000c1338
uuid_00000000000c1336:
	movb $1, -264(%rbp)
uuid_00000000000c1338:
	mov -568(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c133b:
	mov -280(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c133e:
	mov -272(%RBP),%RSP
	add $-672, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1343
	push %RBP
	jmp uuid_00000000000c1340
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c133f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1342
uuid_00000000000c1340:
uuid_00000000000c1342:
	mov -680(%RBP),%RSP
	add $-680, %RSP
	jmp uuid_00000000000c1345
uuid_00000000000c1343:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -448(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c1345:
	mov -184(%RBP),%RSP
	add $-672, %RSP
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1357
	jmp uuid_00000000000c1359
uuid_00000000000c1357:
	push %RBP
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	jmp uuid_00000000000c1354
	jmp uuid_00000000000c1356
uuid_00000000000c1354:
	push %RBP
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq $0
	push %RBP
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c134e
	jmp uuid_00000000000c1350
uuid_00000000000c134e:
	push %RBP
	jmp uuid_00000000000c134b
	jmp uuid_00000000000c134d
uuid_00000000000c134b:
	push %RBP
	mov -1240(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1344(%rbp)
	pushq $uuid_00000000000be940
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1348
	jmp uuid_00000000000c134a
uuid_00000000000c1348:
	movb $1, -1312(%rbp)
uuid_00000000000c134a:
	mov -1336(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c134d:
	mov -1328(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c1350:
	mov -1320(%RBP),%RSP
	add $-1344, %RSP
	mov -1312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1351
	jmp uuid_00000000000c1353
uuid_00000000000c1351:
	movb $1, -1136(%rbp)
uuid_00000000000c1353:
	mov -1232(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c1356:
	mov -1152(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000c1359:
	mov -1144(%RBP),%RSP
	add $-1344, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1374
	push %RBP
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq $0
	push %RBP
	mov -1504(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c136d
	jmp uuid_00000000000c136f
uuid_00000000000c136d:
	push %RBP
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	jmp uuid_00000000000c136a
	jmp uuid_00000000000c136c
uuid_00000000000c136a:
	push %RBP
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	jmp uuid_00000000000c1367
	jmp uuid_00000000000c1369
uuid_00000000000c1367:
	movb $1, -1512(%rbp)
uuid_00000000000c1369:
	mov -1608(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c136c:
	mov -1528(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c136f:
	mov -1520(%RBP),%RSP
	add $-1680, %RSP
	mov -1512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1371
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1370
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1373
uuid_00000000000c1371:
	movq -1680(%rbp), %r15
	movq %r15, -744(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -736(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -728(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -720(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -712(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -704(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1624(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -680(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c1373:
	mov -1352(%RBP),%RSP
	add $-1680, %RSP
	jmp uuid_00000000000c1376
uuid_00000000000c1374:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1360
	jmp uuid_00000000000c1362
uuid_00000000000c1360:
	push %RBP
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	jmp uuid_00000000000c135d
	jmp uuid_00000000000c135f
uuid_00000000000c135d:
	push %RBP
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	jmp uuid_00000000000c135a
	jmp uuid_00000000000c135c
uuid_00000000000c135a:
	movb $1, -1664(%rbp)
uuid_00000000000c135c:
	mov -1760(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c135f:
	mov -1680(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c1362:
	mov -1672(%RBP),%RSP
	add $-1832, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1364
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1363
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1366
uuid_00000000000c1364:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST+CaseNumber<9>,Array<AST+CaseNumber<9>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $9
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTCaseNumber9ASTCaseNumber9
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $5
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	movq -1752(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -1744(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -1736(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -1728(%rbp), %r15
	movq %r15, -792(%rbp)
	movq -1720(%rbp), %r15
	movq %r15, -784(%rbp)
	movq -1712(%rbp), %r15
	movq %r15, -776(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -768(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -760(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -752(%rbp)
uuid_00000000000c1366:
	mov -1504(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c1376:
	mov -976(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c13b3:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c13b4
	jmp uuid_00000000000c13b5
uuid_00000000000c13b4:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	push %RBP
	mov -2144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1386
	jmp uuid_00000000000c1388
uuid_00000000000c1386:
	push %RBP
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	jmp uuid_00000000000c1383
	jmp uuid_00000000000c1385
uuid_00000000000c1383:
	push %RBP
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq $0
	push %RBP
	mov -2320(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c137d
	jmp uuid_00000000000c137f
uuid_00000000000c137d:
	push %RBP
	jmp uuid_00000000000c137a
	jmp uuid_00000000000c137c
uuid_00000000000c137a:
	push %RBP
	mov -2256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2360(%rbp)
	pushq $uuid_00000000000be940
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1377
	jmp uuid_00000000000c1379
uuid_00000000000c1377:
	movb $1, -2328(%rbp)
uuid_00000000000c1379:
	mov -2352(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c137c:
	mov -2344(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c137f:
	mov -2336(%RBP),%RSP
	add $-2360, %RSP
	mov -2328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1380
	jmp uuid_00000000000c1382
uuid_00000000000c1380:
	movb $1, -2152(%rbp)
uuid_00000000000c1382:
	mov -2248(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c1385:
	mov -2168(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c1388:
	mov -2160(%RBP),%RSP
	add $-2360, %RSP
	mov -2152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c13b0
	push %RBP
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	push %RBP
	mov -2520(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c139c
	jmp uuid_00000000000c139e
uuid_00000000000c139c:
	push %RBP
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	mov -2616(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1399
	jmp uuid_00000000000c139b
uuid_00000000000c1399:
	push %RBP
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	jmp uuid_00000000000c1396
	jmp uuid_00000000000c1398
uuid_00000000000c1396:
	movb $1, -2528(%rbp)
uuid_00000000000c1398:
	mov -2624(%RBP),%RSP
	add $-2696, %RSP
uuid_00000000000c139b:
	mov -2544(%RBP),%RSP
	add $-2696, %RSP
uuid_00000000000c139e:
	mov -2536(%RBP),%RSP
	add $-2696, %RSP
	mov -2528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c13ad
	push %RBP
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c13a6
	jmp uuid_00000000000c13a8
uuid_00000000000c13a6:
	push %RBP
	pushq -2784(%RBP)
	pushq -2792(%RBP)
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	pushq -2848(%RBP)
	jmp uuid_00000000000c13a3
	jmp uuid_00000000000c13a5
uuid_00000000000c13a3:
	push %RBP
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	pushq -2736(%RBP)
	pushq -2744(%RBP)
	pushq -2752(%RBP)
	pushq -2760(%RBP)
	pushq -2768(%RBP)
	pushq -2776(%RBP)
	jmp uuid_00000000000c13a0
	jmp uuid_00000000000c13a2
uuid_00000000000c13a0:
	movb $1, -2864(%rbp)
uuid_00000000000c13a2:
	mov -2960(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000c13a5:
	mov -2880(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000c13a8:
	mov -2872(%RBP),%RSP
	add $-3032, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c13aa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c13a9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c13ac
uuid_00000000000c13aa:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	pushq -2984(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq -3008(%rbp)
	pushq -3016(%rbp)
	pushq -3024(%rbp)
	pushq -3032(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	movq -2952(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2944(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2936(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2928(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2920(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2912(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2904(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2896(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2888(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c13ac:
	mov -2704(%RBP),%RSP
	add $-3032, %RSP
	jmp uuid_00000000000c13af
uuid_00000000000c13ad:
#call function parse-expect : Arrow<Cons<String,List<Token>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c139f
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_expect_CL_ArrowNilConsListTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c13af:
	mov -2368(%RBP),%RSP
	add $-2696, %RSP
	jmp uuid_00000000000c13b2
uuid_00000000000c13b0:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq $0
	push %RBP
	mov -2672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c138f
	jmp uuid_00000000000c1391
uuid_00000000000c138f:
	push %RBP
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	jmp uuid_00000000000c138c
	jmp uuid_00000000000c138e
uuid_00000000000c138c:
	push %RBP
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	jmp uuid_00000000000c1389
	jmp uuid_00000000000c138b
uuid_00000000000c1389:
	movb $1, -2680(%rbp)
uuid_00000000000c138b:
	mov -2776(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c138e:
	mov -2696(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c1391:
	mov -2688(%RBP),%RSP
	add $-2848, %RSP
	mov -2680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1393
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1392
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1395
uuid_00000000000c1393:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $5
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	movq -2768(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -2760(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -2752(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -2744(%rbp), %r15
	movq %r15, -792(%rbp)
	movq -2736(%rbp), %r15
	movq %r15, -784(%rbp)
	movq -2728(%rbp), %r15
	movq %r15, -776(%rbp)
	movq -2720(%rbp), %r15
	movq %r15, -768(%rbp)
	movq -2712(%rbp), %r15
	movq %r15, -760(%rbp)
	movq -2704(%rbp), %r15
	movq %r15, -752(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1395:
	mov -2520(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c13b2:
	mov -1992(%RBP),%RSP
	add $-2848, %RSP
	add $152, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $152, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c13b3
uuid_00000000000c13b5:
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq $0
	subq $152, %rsp
	pushq -1984(%rbp)
	pushq -1976(%rbp)
	pushq -1968(%rbp)
	pushq -1960(%rbp)
	pushq -1952(%rbp)
	pushq -1944(%rbp)
	pushq -1936(%rbp)
	pushq -1928(%rbp)
	pushq -1920(%rbp)
	pushq -1912(%rbp)
	pushq -1904(%rbp)
	pushq -1896(%rbp)
	pushq -1888(%rbp)
	pushq -1880(%rbp)
	pushq -1872(%rbp)
	pushq -1864(%rbp)
	pushq -1856(%rbp)
	pushq -1848(%rbp)
	pushq -1840(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c1401:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1402
	jmp uuid_00000000000c1403
uuid_00000000000c1402:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c13cc
	jmp uuid_00000000000c13ce
uuid_00000000000c13cc:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c13c9
	jmp uuid_00000000000c13cb
uuid_00000000000c13c9:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c13c3
	jmp uuid_00000000000c13c5
uuid_00000000000c13c3:
	push %RBP
	jmp uuid_00000000000c13c0
	jmp uuid_00000000000c13c2
uuid_00000000000c13c0:
	push %RBP
	jmp uuid_00000000000c13bd
	jmp uuid_00000000000c13bf
uuid_00000000000c13bd:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -584(%rbp)
	pushq $uuid_00000000000be8af
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c13ba
	jmp uuid_00000000000c13bc
uuid_00000000000c13ba:
	movb $1, -544(%rbp)
uuid_00000000000c13bc:
	mov -576(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c13bf:
	mov -568(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c13c2:
	mov -560(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c13c5:
	mov -552(%RBP),%RSP
	add $-584, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c13c6
	jmp uuid_00000000000c13c8
uuid_00000000000c13c6:
	movb $1, -384(%rbp)
uuid_00000000000c13c8:
	mov -480(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c13cb:
	mov -400(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c13ce:
	mov -392(%RBP),%RSP
	add $-584, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c13fe
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c13e1
	jmp uuid_00000000000c13e3
uuid_00000000000c13e1:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c13de
	jmp uuid_00000000000c13e0
uuid_00000000000c13de:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c13d8
	jmp uuid_00000000000c13da
uuid_00000000000c13d8:
	push %RBP
	jmp uuid_00000000000c13d5
	jmp uuid_00000000000c13d7
uuid_00000000000c13d5:
	push %RBP
	jmp uuid_00000000000c13d2
	jmp uuid_00000000000c13d4
uuid_00000000000c13d2:
	push %RBP
	mov -776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq $uuid_00000000000be6c9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c13cf
	jmp uuid_00000000000c13d1
uuid_00000000000c13cf:
	movb $1, -832(%rbp)
uuid_00000000000c13d1:
	mov -864(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c13d4:
	mov -856(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c13d7:
	mov -848(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c13da:
	mov -840(%RBP),%RSP
	add $-872, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c13db
	jmp uuid_00000000000c13dd
uuid_00000000000c13db:
	movb $1, -672(%rbp)
uuid_00000000000c13dd:
	mov -768(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c13e0:
	mov -688(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c13e3:
	mov -680(%RBP),%RSP
	add $-872, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c13fb
	push %RBP
	jmp uuid_00000000000c13f8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c13f7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c13fa
uuid_00000000000c13f8:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c13ed
	jmp uuid_00000000000c13ef
uuid_00000000000c13ed:
	push %RBP
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	jmp uuid_00000000000c13ea
	jmp uuid_00000000000c13ec
uuid_00000000000c13ea:
	push %RBP
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	jmp uuid_00000000000c13e7
	jmp uuid_00000000000c13e9
uuid_00000000000c13e7:
	movb $1, -1200(%rbp)
uuid_00000000000c13e9:
	mov -1296(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000c13ec:
	mov -1216(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000c13ef:
	mov -1208(%RBP),%RSP
	add $-1368, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c13f4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c13f3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c13f6
uuid_00000000000c13f4:
	push %RBP
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c13f0
	movq -1368(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -88(%rbp)
	jmp uuid_00000000000c13f2
uuid_00000000000c13f0:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c13f2:
	mov -1376(%RBP),%RSP
	add $-1376, %RSP
	movq -1288(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c13f6:
	mov -1040(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c13fa:
	mov -880(%RBP),%RSP
	add $-1376, %RSP
	jmp uuid_00000000000c13fd
uuid_00000000000c13fb:
	push %RBP
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c13e4
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $9
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000c13e6
uuid_00000000000c13e4:
uuid_00000000000c13e6:
	mov -880(%RBP),%RSP
	add $-880, %RSP
	movq -760(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -160(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c13fd:
	mov -592(%RBP),%RSP
	add $-880, %RSP
	jmp uuid_00000000000c1400
uuid_00000000000c13fe:
	movq -72(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -64(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -56(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -48(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -40(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -32(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -24(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -160(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1400:
	mov -304(%RBP),%RSP
	add $-584, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c1401
uuid_00000000000c1403:
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	subq $152, %rsp
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_one_SB_expression_CL_ArrowParsePartialListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c149c
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c141a
	jmp uuid_00000000000c141c
uuid_00000000000c141a:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1417
	jmp uuid_00000000000c1419
uuid_00000000000c1417:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1411
	jmp uuid_00000000000c1413
uuid_00000000000c1411:
	push %RBP
	jmp uuid_00000000000c140e
	jmp uuid_00000000000c1410
uuid_00000000000c140e:
	push %RBP
	jmp uuid_00000000000c140b
	jmp uuid_00000000000c140d
uuid_00000000000c140b:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%rbp)
	pushq $uuid_00000000000be8b2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1408
	jmp uuid_00000000000c140a
uuid_00000000000c1408:
	movb $1, -624(%rbp)
uuid_00000000000c140a:
	mov -656(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c140d:
	mov -648(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c1410:
	mov -640(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c1413:
	mov -632(%RBP),%RSP
	add $-664, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1414
	jmp uuid_00000000000c1416
uuid_00000000000c1414:
	movb $1, -464(%rbp)
uuid_00000000000c1416:
	mov -560(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c1419:
	mov -480(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000c141c:
	mov -472(%RBP),%RSP
	add $-664, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1499
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c143c
	jmp uuid_00000000000c143e
uuid_00000000000c143c:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1439
	jmp uuid_00000000000c143b
uuid_00000000000c1439:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq $0
	push %RBP
	mov -904(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1433
	jmp uuid_00000000000c1435
uuid_00000000000c1433:
	push %RBP
	jmp uuid_00000000000c1430
	jmp uuid_00000000000c1432
uuid_00000000000c1430:
	push %RBP
	jmp uuid_00000000000c142d
	jmp uuid_00000000000c142f
uuid_00000000000c142d:
	push %RBP
	mov -856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq $uuid_00000000000be6c9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c142a
	jmp uuid_00000000000c142c
uuid_00000000000c142a:
	movb $1, -912(%rbp)
uuid_00000000000c142c:
	mov -944(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c142f:
	mov -936(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c1432:
	mov -928(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c1435:
	mov -920(%RBP),%RSP
	add $-952, %RSP
	mov -912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1436
	jmp uuid_00000000000c1438
uuid_00000000000c1436:
	movb $1, -752(%rbp)
uuid_00000000000c1438:
	mov -848(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c143b:
	mov -768(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000c143e:
	mov -760(%RBP),%RSP
	add $-952, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1496
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -1032(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1452
	jmp uuid_00000000000c1454
uuid_00000000000c1452:
	push %RBP
	mov -1024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c144f
	jmp uuid_00000000000c1451
uuid_00000000000c144f:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1449
	jmp uuid_00000000000c144b
uuid_00000000000c1449:
	push %RBP
	jmp uuid_00000000000c1446
	jmp uuid_00000000000c1448
uuid_00000000000c1446:
	push %RBP
	jmp uuid_00000000000c1443
	jmp uuid_00000000000c1445
uuid_00000000000c1443:
	push %RBP
	mov -1144(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq $uuid_00000000000be6c7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1440
	jmp uuid_00000000000c1442
uuid_00000000000c1440:
	movb $1, -1200(%rbp)
uuid_00000000000c1442:
	mov -1232(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c1445:
	mov -1224(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c1448:
	mov -1216(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c144b:
	mov -1208(%RBP),%RSP
	add $-1240, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c144c
	jmp uuid_00000000000c144e
uuid_00000000000c144c:
	movb $1, -1040(%rbp)
uuid_00000000000c144e:
	mov -1136(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c1451:
	mov -1056(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c1454:
	mov -1048(%RBP),%RSP
	add $-1240, %RSP
	mov -1040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1493
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c147d
	jmp uuid_00000000000c147f
uuid_00000000000c147d:
	push %RBP
	mov -1312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1468
	jmp uuid_00000000000c146a
uuid_00000000000c1468:
	push %RBP
	mov -1408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1465
	jmp uuid_00000000000c1467
uuid_00000000000c1465:
	push %RBP
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	jmp uuid_00000000000c1462
	jmp uuid_00000000000c1464
uuid_00000000000c1462:
	movb $1, -1424(%rbp)
uuid_00000000000c1464:
	mov -1520(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c1467:
	mov -1440(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c146a:
	mov -1432(%RBP),%RSP
	add $-1576, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c147a
	jmp uuid_00000000000c147c
uuid_00000000000c147a:
	push %RBP
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1474
	jmp uuid_00000000000c1476
uuid_00000000000c1474:
	push %RBP
	jmp uuid_00000000000c1471
	jmp uuid_00000000000c1473
uuid_00000000000c1471:
	push %RBP
	jmp uuid_00000000000c146e
	jmp uuid_00000000000c1470
uuid_00000000000c146e:
	push %RBP
	mov -1592(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1688(%rbp)
	pushq $uuid_00000000000be8b1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c146b
	jmp uuid_00000000000c146d
uuid_00000000000c146b:
	movb $1, -1648(%rbp)
uuid_00000000000c146d:
	mov -1680(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c1470:
	mov -1672(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c1473:
	mov -1664(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c1476:
	mov -1656(%RBP),%RSP
	add $-1688, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1477
	jmp uuid_00000000000c1479
uuid_00000000000c1477:
	movb $1, -1328(%rbp)
uuid_00000000000c1479:
	mov -1584(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c147c:
	mov -1344(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c147f:
	mov -1336(%RBP),%RSP
	add $-1688, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1490
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1486
	jmp uuid_00000000000c1488
uuid_00000000000c1486:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1483
	jmp uuid_00000000000c1485
uuid_00000000000c1483:
	push %RBP
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	jmp uuid_00000000000c1480
	jmp uuid_00000000000c1482
uuid_00000000000c1480:
	movb $1, -1776(%rbp)
uuid_00000000000c1482:
	mov -1872(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c1485:
	mov -1792(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000c1488:
	mov -1784(%RBP),%RSP
	add $-1928, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c148d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c148c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c148f
uuid_00000000000c148d:
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -1880(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1489
	mov -1880(%RBP), %RAX
	push %RAX
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000c148b
uuid_00000000000c1489:
	mov -1880(%RBP), %RAX
	push %RAX
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq $7
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c148b:
	mov -1936(%RBP),%RSP
	add $-1936, %RSP
	movq -1864(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1856(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1848(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1840(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1832(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1824(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1816(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1808(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1800(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000c148f:
	mov -1696(%RBP),%RSP
	add $-1936, %RSP
	jmp uuid_00000000000c1492
uuid_00000000000c1490:
	mov -1528(%RBP), %RAX
	push %RAX
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -1512(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000c1492:
	mov -1248(%RBP),%RSP
	add $-1688, %RSP
	jmp uuid_00000000000c1495
uuid_00000000000c1493:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq $0
	push %RBP
	mov -1552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c145b
	jmp uuid_00000000000c145d
uuid_00000000000c145b:
	push %RBP
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	jmp uuid_00000000000c1458
	jmp uuid_00000000000c145a
uuid_00000000000c1458:
	push %RBP
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	jmp uuid_00000000000c1455
	jmp uuid_00000000000c1457
uuid_00000000000c1455:
	movb $1, -1560(%rbp)
uuid_00000000000c1457:
	mov -1656(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c145a:
	mov -1576(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c145d:
	mov -1568(%RBP),%RSP
	add $-1728, %RSP
	mov -1560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c145f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c145e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1461
uuid_00000000000c145f:
	movq -1728(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1720(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1712(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1624(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1608(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000c1461:
	mov -1400(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c1495:
	mov -960(%RBP),%RSP
	add $-1728, %RSP
	jmp uuid_00000000000c1498
uuid_00000000000c1496:
#call function parse-unexpect : Arrow<Cons<String,List<Token>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c143f
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_unexpect_CL_ArrowNilConsListTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1498:
	mov -672(%RBP),%RSP
	add $-952, %RSP
	jmp uuid_00000000000c149b
uuid_00000000000c1499:
#call function parse-lambda : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call parse_SB_lambda_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1423
	jmp uuid_00000000000c1425
uuid_00000000000c1423:
	push %RBP
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000c1420
	jmp uuid_00000000000c1422
uuid_00000000000c1420:
	push %RBP
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	jmp uuid_00000000000c141d
	jmp uuid_00000000000c141f
uuid_00000000000c141d:
	movb $1, -984(%rbp)
uuid_00000000000c141f:
	mov -1080(%RBP),%RSP
	add $-1152, %RSP
uuid_00000000000c1422:
	mov -1000(%RBP),%RSP
	add $-1152, %RSP
uuid_00000000000c1425:
	mov -992(%RBP),%RSP
	add $-1152, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1427
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1426
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1429
uuid_00000000000c1427:
	movq -1152(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000c1429:
	mov -824(%RBP),%RSP
	add $-1152, %RSP
uuid_00000000000c149b:
	mov -384(%RBP),%RSP
	add $-1152, %RSP
	jmp uuid_00000000000c149e
uuid_00000000000c149c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $9
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
uuid_00000000000c149e:
	mov -304(%RBP),%RSP
	add $-376, %RSP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	subq $152, %rsp
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_toplevel_CL_ArrowASTListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
uuid_00000000000c16ea:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c16eb
	jmp uuid_00000000000c16ec
uuid_00000000000c16eb:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c14b3
	jmp uuid_00000000000c14b5
uuid_00000000000c14b3:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c14b0
	jmp uuid_00000000000c14b2
uuid_00000000000c14b0:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c14aa
	jmp uuid_00000000000c14ac
uuid_00000000000c14aa:
	push %RBP
	jmp uuid_00000000000c14a7
	jmp uuid_00000000000c14a9
uuid_00000000000c14a7:
	push %RBP
	jmp uuid_00000000000c14a4
	jmp uuid_00000000000c14a6
uuid_00000000000c14a4:
	push %RBP
	mov -416(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq $uuid_00000000000be8af
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c14a1
	jmp uuid_00000000000c14a3
uuid_00000000000c14a1:
	movb $1, -472(%rbp)
uuid_00000000000c14a3:
	mov -504(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c14a6:
	mov -496(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c14a9:
	mov -488(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c14ac:
	mov -480(%RBP),%RSP
	add $-512, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c14ad
	jmp uuid_00000000000c14af
uuid_00000000000c14ad:
	movb $1, -312(%rbp)
uuid_00000000000c14af:
	mov -408(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c14b2:
	mov -328(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000c14b5:
	mov -320(%RBP),%RSP
	add $-512, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16e7
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c14c9
	jmp uuid_00000000000c14cb
uuid_00000000000c14c9:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c14c6
	jmp uuid_00000000000c14c8
uuid_00000000000c14c6:
	push %RBP
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c14c0
	jmp uuid_00000000000c14c2
uuid_00000000000c14c0:
	push %RBP
	jmp uuid_00000000000c14bd
	jmp uuid_00000000000c14bf
uuid_00000000000c14bd:
	push %RBP
	jmp uuid_00000000000c14ba
	jmp uuid_00000000000c14bc
uuid_00000000000c14ba:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq $uuid_00000000000c14b6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c14b7
	jmp uuid_00000000000c14b9
uuid_00000000000c14b7:
	movb $1, -760(%rbp)
uuid_00000000000c14b9:
	mov -792(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c14bc:
	mov -784(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c14bf:
	mov -776(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c14c2:
	mov -768(%RBP),%RSP
	add $-800, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c14c3
	jmp uuid_00000000000c14c5
uuid_00000000000c14c3:
	movb $1, -600(%rbp)
uuid_00000000000c14c5:
	mov -696(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c14c8:
	mov -616(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c14cb:
	mov -608(%RBP),%RSP
	add $-800, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16e4
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1509
	jmp uuid_00000000000c150b
uuid_00000000000c1509:
	push %RBP
	mov -872(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1506
	jmp uuid_00000000000c1508
uuid_00000000000c1506:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq $0
	push %RBP
	mov -1040(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1500
	jmp uuid_00000000000c1502
uuid_00000000000c1500:
	push %RBP
	jmp uuid_00000000000c14fd
	jmp uuid_00000000000c14ff
uuid_00000000000c14fd:
	push %RBP
	jmp uuid_00000000000c14fa
	jmp uuid_00000000000c14fc
uuid_00000000000c14fa:
	push %RBP
	mov -992(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1088(%rbp)
	pushq $uuid_00000000000c14f6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c14f7
	jmp uuid_00000000000c14f9
uuid_00000000000c14f7:
	movb $1, -1048(%rbp)
uuid_00000000000c14f9:
	mov -1080(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c14fc:
	mov -1072(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c14ff:
	mov -1064(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c1502:
	mov -1056(%RBP),%RSP
	add $-1088, %RSP
	mov -1048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1503
	jmp uuid_00000000000c1505
uuid_00000000000c1503:
	movb $1, -888(%rbp)
uuid_00000000000c1505:
	mov -984(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c1508:
	mov -904(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000c150b:
	mov -896(%RBP),%RSP
	add $-1088, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16e1
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1542
	jmp uuid_00000000000c1544
uuid_00000000000c1542:
	push %RBP
	mov -1160(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c152c
	jmp uuid_00000000000c152e
uuid_00000000000c152c:
	push %RBP
	mov -1256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1529
	jmp uuid_00000000000c152b
uuid_00000000000c1529:
	push %RBP
	pushq -1200(%RBP)
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq $0
	push %RBP
	mov -1424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1523
	jmp uuid_00000000000c1525
uuid_00000000000c1523:
	push %RBP
	jmp uuid_00000000000c1520
	jmp uuid_00000000000c1522
uuid_00000000000c1520:
	push %RBP
	jmp uuid_00000000000c151d
	jmp uuid_00000000000c151f
uuid_00000000000c151d:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq $uuid_00000000000c1519
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c151a
	jmp uuid_00000000000c151c
uuid_00000000000c151a:
	movb $1, -1432(%rbp)
uuid_00000000000c151c:
	mov -1464(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000c151f:
	mov -1456(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000c1522:
	mov -1448(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000c1525:
	mov -1440(%RBP),%RSP
	add $-1472, %RSP
	mov -1432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1526
	jmp uuid_00000000000c1528
uuid_00000000000c1526:
	movb $1, -1272(%rbp)
uuid_00000000000c1528:
	mov -1368(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000c152b:
	mov -1288(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000c152e:
	mov -1280(%RBP),%RSP
	add $-1472, %RSP
	mov -1272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c153f
	jmp uuid_00000000000c1541
uuid_00000000000c153f:
	push %RBP
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1539
	jmp uuid_00000000000c153b
uuid_00000000000c1539:
	push %RBP
	jmp uuid_00000000000c1536
	jmp uuid_00000000000c1538
uuid_00000000000c1536:
	push %RBP
	jmp uuid_00000000000c1533
	jmp uuid_00000000000c1535
uuid_00000000000c1533:
	push %RBP
	mov -1488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1584(%rbp)
	pushq $uuid_00000000000c152f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1530
	jmp uuid_00000000000c1532
uuid_00000000000c1530:
	movb $1, -1544(%rbp)
uuid_00000000000c1532:
	mov -1576(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c1535:
	mov -1568(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c1538:
	mov -1560(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c153b:
	mov -1552(%RBP),%RSP
	add $-1584, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c153c
	jmp uuid_00000000000c153e
uuid_00000000000c153c:
	movb $1, -1176(%rbp)
uuid_00000000000c153e:
	mov -1480(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c1541:
	mov -1192(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c1544:
	mov -1184(%RBP),%RSP
	add $-1584, %RSP
	mov -1176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16de
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1571
	jmp uuid_00000000000c1573
uuid_00000000000c1571:
	push %RBP
	mov -1656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c156e
	jmp uuid_00000000000c1570
uuid_00000000000c156e:
	push %RBP
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq $0
	push %RBP
	mov -1824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1568
	jmp uuid_00000000000c156a
uuid_00000000000c1568:
	push %RBP
	jmp uuid_00000000000c1565
	jmp uuid_00000000000c1567
uuid_00000000000c1565:
	push %RBP
	jmp uuid_00000000000c1562
	jmp uuid_00000000000c1564
uuid_00000000000c1562:
	push %RBP
	mov -1776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1872(%rbp)
	pushq $uuid_00000000000c1519
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c155f
	jmp uuid_00000000000c1561
uuid_00000000000c155f:
	movb $1, -1832(%rbp)
uuid_00000000000c1561:
	mov -1864(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c1564:
	mov -1856(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c1567:
	mov -1848(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c156a:
	mov -1840(%RBP),%RSP
	add $-1872, %RSP
	mov -1832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c156b
	jmp uuid_00000000000c156d
uuid_00000000000c156b:
	movb $1, -1672(%rbp)
uuid_00000000000c156d:
	mov -1768(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c1570:
	mov -1688(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000c1573:
	mov -1680(%RBP),%RSP
	add $-1872, %RSP
	mov -1672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16db
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c15e1
	jmp uuid_00000000000c15e3
uuid_00000000000c15e1:
	push %RBP
	mov -1944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c15cb
	jmp uuid_00000000000c15cd
uuid_00000000000c15cb:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c15b5
	jmp uuid_00000000000c15b7
uuid_00000000000c15b5:
	push %RBP
	mov -2136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c15a0
	jmp uuid_00000000000c15a2
uuid_00000000000c15a0:
	push %RBP
	mov -2232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c159d
	jmp uuid_00000000000c159f
uuid_00000000000c159d:
	push %RBP
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq $0
	push %RBP
	mov -2400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1597
	jmp uuid_00000000000c1599
uuid_00000000000c1597:
	push %RBP
	jmp uuid_00000000000c1594
	jmp uuid_00000000000c1596
uuid_00000000000c1594:
	push %RBP
	jmp uuid_00000000000c1591
	jmp uuid_00000000000c1593
uuid_00000000000c1591:
	push %RBP
	mov -2352(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c158e
	jmp uuid_00000000000c1590
uuid_00000000000c158e:
	movb $1, -2408(%rbp)
uuid_00000000000c1590:
	mov -2440(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000c1593:
	mov -2432(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000c1596:
	mov -2424(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000c1599:
	mov -2416(%RBP),%RSP
	add $-2448, %RSP
	mov -2408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c159a
	jmp uuid_00000000000c159c
uuid_00000000000c159a:
	movb $1, -2248(%rbp)
uuid_00000000000c159c:
	mov -2344(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000c159f:
	mov -2264(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000c15a2:
	mov -2256(%RBP),%RSP
	add $-2448, %RSP
	mov -2248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c15b2
	jmp uuid_00000000000c15b4
uuid_00000000000c15b2:
	push %RBP
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq $0
	push %RBP
	mov -2512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c15ac
	jmp uuid_00000000000c15ae
uuid_00000000000c15ac:
	push %RBP
	jmp uuid_00000000000c15a9
	jmp uuid_00000000000c15ab
uuid_00000000000c15a9:
	push %RBP
	jmp uuid_00000000000c15a6
	jmp uuid_00000000000c15a8
uuid_00000000000c15a6:
	push %RBP
	mov -2464(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c15a3
	jmp uuid_00000000000c15a5
uuid_00000000000c15a3:
	movb $1, -2520(%rbp)
uuid_00000000000c15a5:
	mov -2552(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c15a8:
	mov -2544(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c15ab:
	mov -2536(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c15ae:
	mov -2528(%RBP),%RSP
	add $-2560, %RSP
	mov -2520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c15af
	jmp uuid_00000000000c15b1
uuid_00000000000c15af:
	movb $1, -2152(%rbp)
uuid_00000000000c15b1:
	mov -2456(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c15b4:
	mov -2168(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c15b7:
	mov -2160(%RBP),%RSP
	add $-2560, %RSP
	mov -2152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c15c8
	jmp uuid_00000000000c15ca
uuid_00000000000c15c8:
	push %RBP
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq $0
	push %RBP
	mov -2624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c15c2
	jmp uuid_00000000000c15c4
uuid_00000000000c15c2:
	push %RBP
	jmp uuid_00000000000c15bf
	jmp uuid_00000000000c15c1
uuid_00000000000c15bf:
	push %RBP
	jmp uuid_00000000000c15bc
	jmp uuid_00000000000c15be
uuid_00000000000c15bc:
	push %RBP
	mov -2576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2672(%rbp)
	pushq $uuid_00000000000c15b8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c15b9
	jmp uuid_00000000000c15bb
uuid_00000000000c15b9:
	movb $1, -2632(%rbp)
uuid_00000000000c15bb:
	mov -2664(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000c15be:
	mov -2656(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000c15c1:
	mov -2648(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000c15c4:
	mov -2640(%RBP),%RSP
	add $-2672, %RSP
	mov -2632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c15c5
	jmp uuid_00000000000c15c7
uuid_00000000000c15c5:
	movb $1, -2056(%rbp)
uuid_00000000000c15c7:
	mov -2568(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000c15ca:
	mov -2072(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000c15cd:
	mov -2064(%RBP),%RSP
	add $-2672, %RSP
	mov -2056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c15de
	jmp uuid_00000000000c15e0
uuid_00000000000c15de:
	push %RBP
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq $0
	push %RBP
	mov -2736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c15d8
	jmp uuid_00000000000c15da
uuid_00000000000c15d8:
	push %RBP
	jmp uuid_00000000000c15d5
	jmp uuid_00000000000c15d7
uuid_00000000000c15d5:
	push %RBP
	jmp uuid_00000000000c15d2
	jmp uuid_00000000000c15d4
uuid_00000000000c15d2:
	push %RBP
	mov -2688(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq $uuid_00000000000c15ce
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c15cf
	jmp uuid_00000000000c15d1
uuid_00000000000c15cf:
	movb $1, -2744(%rbp)
uuid_00000000000c15d1:
	mov -2776(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000c15d4:
	mov -2768(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000c15d7:
	mov -2760(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000c15da:
	mov -2752(%RBP),%RSP
	add $-2784, %RSP
	mov -2744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c15db
	jmp uuid_00000000000c15dd
uuid_00000000000c15db:
	movb $1, -1960(%rbp)
uuid_00000000000c15dd:
	mov -2680(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000c15e0:
	mov -1976(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000c15e3:
	mov -1968(%RBP),%RSP
	add $-2784, %RSP
	mov -1960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16d8
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1629
	jmp uuid_00000000000c162b
uuid_00000000000c1629:
	push %RBP
	mov -2856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2960(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1613
	jmp uuid_00000000000c1615
uuid_00000000000c1613:
	push %RBP
	mov -2952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3056(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c15fe
	jmp uuid_00000000000c1600
uuid_00000000000c15fe:
	push %RBP
	mov -3048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c15fb
	jmp uuid_00000000000c15fd
uuid_00000000000c15fb:
	push %RBP
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq $0
	push %RBP
	mov -3216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c15f5
	jmp uuid_00000000000c15f7
uuid_00000000000c15f5:
	push %RBP
	jmp uuid_00000000000c15f2
	jmp uuid_00000000000c15f4
uuid_00000000000c15f2:
	push %RBP
	jmp uuid_00000000000c15ef
	jmp uuid_00000000000c15f1
uuid_00000000000c15ef:
	push %RBP
	mov -3168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c15ec
	jmp uuid_00000000000c15ee
uuid_00000000000c15ec:
	movb $1, -3224(%rbp)
uuid_00000000000c15ee:
	mov -3256(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000c15f1:
	mov -3248(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000c15f4:
	mov -3240(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000c15f7:
	mov -3232(%RBP),%RSP
	add $-3264, %RSP
	mov -3224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c15f8
	jmp uuid_00000000000c15fa
uuid_00000000000c15f8:
	movb $1, -3064(%rbp)
uuid_00000000000c15fa:
	mov -3160(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000c15fd:
	mov -3080(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000c1600:
	mov -3072(%RBP),%RSP
	add $-3264, %RSP
	mov -3064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1610
	jmp uuid_00000000000c1612
uuid_00000000000c1610:
	push %RBP
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq $0
	push %RBP
	mov -3328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c160a
	jmp uuid_00000000000c160c
uuid_00000000000c160a:
	push %RBP
	jmp uuid_00000000000c1607
	jmp uuid_00000000000c1609
uuid_00000000000c1607:
	push %RBP
	jmp uuid_00000000000c1604
	jmp uuid_00000000000c1606
uuid_00000000000c1604:
	push %RBP
	mov -3280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1601
	jmp uuid_00000000000c1603
uuid_00000000000c1601:
	movb $1, -3336(%rbp)
uuid_00000000000c1603:
	mov -3368(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000c1606:
	mov -3360(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000c1609:
	mov -3352(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000c160c:
	mov -3344(%RBP),%RSP
	add $-3376, %RSP
	mov -3336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c160d
	jmp uuid_00000000000c160f
uuid_00000000000c160d:
	movb $1, -2968(%rbp)
uuid_00000000000c160f:
	mov -3272(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000c1612:
	mov -2984(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000c1615:
	mov -2976(%RBP),%RSP
	add $-3376, %RSP
	mov -2968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1626
	jmp uuid_00000000000c1628
uuid_00000000000c1626:
	push %RBP
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	pushq -2848(%RBP)
	pushq $0
	push %RBP
	mov -3440(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1620
	jmp uuid_00000000000c1622
uuid_00000000000c1620:
	push %RBP
	jmp uuid_00000000000c161d
	jmp uuid_00000000000c161f
uuid_00000000000c161d:
	push %RBP
	jmp uuid_00000000000c161a
	jmp uuid_00000000000c161c
uuid_00000000000c161a:
	push %RBP
	mov -3392(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3488(%rbp)
	pushq $uuid_00000000000c1616
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1617
	jmp uuid_00000000000c1619
uuid_00000000000c1617:
	movb $1, -3448(%rbp)
uuid_00000000000c1619:
	mov -3480(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000c161c:
	mov -3472(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000c161f:
	mov -3464(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000c1622:
	mov -3456(%RBP),%RSP
	add $-3488, %RSP
	mov -3448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1623
	jmp uuid_00000000000c1625
uuid_00000000000c1623:
	movb $1, -2872(%rbp)
uuid_00000000000c1625:
	mov -3384(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000c1628:
	mov -2888(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000c162b:
	mov -2880(%RBP),%RSP
	add $-3488, %RSP
	mov -2872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16d5
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -3568(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1654
	jmp uuid_00000000000c1656
uuid_00000000000c1654:
	push %RBP
	mov -3560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c163e
	jmp uuid_00000000000c1640
uuid_00000000000c163e:
	push %RBP
	mov -3656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c163b
	jmp uuid_00000000000c163d
uuid_00000000000c163b:
	push %RBP
	pushq -3600(%RBP)
	pushq -3608(%RBP)
	pushq -3616(%RBP)
	pushq -3624(%RBP)
	pushq -3632(%RBP)
	pushq -3640(%RBP)
	pushq -3648(%RBP)
	pushq $0
	push %RBP
	mov -3824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1635
	jmp uuid_00000000000c1637
uuid_00000000000c1635:
	push %RBP
	jmp uuid_00000000000c1632
	jmp uuid_00000000000c1634
uuid_00000000000c1632:
	push %RBP
	jmp uuid_00000000000c162f
	jmp uuid_00000000000c1631
uuid_00000000000c162f:
	push %RBP
	mov -3776(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c162c
	jmp uuid_00000000000c162e
uuid_00000000000c162c:
	movb $1, -3832(%rbp)
uuid_00000000000c162e:
	mov -3864(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c1631:
	mov -3856(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c1634:
	mov -3848(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c1637:
	mov -3840(%RBP),%RSP
	add $-3872, %RSP
	mov -3832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1638
	jmp uuid_00000000000c163a
uuid_00000000000c1638:
	movb $1, -3672(%rbp)
uuid_00000000000c163a:
	mov -3768(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c163d:
	mov -3688(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000c1640:
	mov -3680(%RBP),%RSP
	add $-3872, %RSP
	mov -3672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1651
	jmp uuid_00000000000c1653
uuid_00000000000c1651:
	push %RBP
	pushq -3504(%RBP)
	pushq -3512(%RBP)
	pushq -3520(%RBP)
	pushq -3528(%RBP)
	pushq -3536(%RBP)
	pushq -3544(%RBP)
	pushq -3552(%RBP)
	pushq $0
	push %RBP
	mov -3936(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c164b
	jmp uuid_00000000000c164d
uuid_00000000000c164b:
	push %RBP
	jmp uuid_00000000000c1648
	jmp uuid_00000000000c164a
uuid_00000000000c1648:
	push %RBP
	jmp uuid_00000000000c1645
	jmp uuid_00000000000c1647
uuid_00000000000c1645:
	push %RBP
	mov -3888(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3984(%rbp)
	pushq $uuid_00000000000c1641
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1642
	jmp uuid_00000000000c1644
uuid_00000000000c1642:
	movb $1, -3944(%rbp)
uuid_00000000000c1644:
	mov -3976(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c1647:
	mov -3968(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c164a:
	mov -3960(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c164d:
	mov -3952(%RBP),%RSP
	add $-3984, %RSP
	mov -3944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c164e
	jmp uuid_00000000000c1650
uuid_00000000000c164e:
	movb $1, -3576(%rbp)
uuid_00000000000c1650:
	mov -3880(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c1653:
	mov -3592(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000c1656:
	mov -3584(%RBP),%RSP
	add $-3984, %RSP
	mov -3576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16d2
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4064(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1688
	jmp uuid_00000000000c168a
uuid_00000000000c1688:
	push %RBP
	mov -4056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1672
	jmp uuid_00000000000c1674
uuid_00000000000c1672:
	push %RBP
	mov -4152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1669
	jmp uuid_00000000000c166b
uuid_00000000000c1669:
	push %RBP
	mov -4248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1666
	jmp uuid_00000000000c1668
uuid_00000000000c1666:
	push %RBP
	pushq -4192(%RBP)
	pushq -4200(%RBP)
	pushq -4208(%RBP)
	pushq -4216(%RBP)
	pushq -4224(%RBP)
	pushq -4232(%RBP)
	pushq -4240(%RBP)
	pushq $0
	push %RBP
	mov -4416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1660
	jmp uuid_00000000000c1662
uuid_00000000000c1660:
	push %RBP
	jmp uuid_00000000000c165d
	jmp uuid_00000000000c165f
uuid_00000000000c165d:
	push %RBP
	jmp uuid_00000000000c165a
	jmp uuid_00000000000c165c
uuid_00000000000c165a:
	push %RBP
	mov -4368(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1657
	jmp uuid_00000000000c1659
uuid_00000000000c1657:
	movb $1, -4424(%rbp)
uuid_00000000000c1659:
	mov -4456(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c165c:
	mov -4448(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c165f:
	mov -4440(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c1662:
	mov -4432(%RBP),%RSP
	add $-4464, %RSP
	mov -4424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1663
	jmp uuid_00000000000c1665
uuid_00000000000c1663:
	movb $1, -4264(%rbp)
uuid_00000000000c1665:
	mov -4360(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c1668:
	mov -4280(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c166b:
	mov -4272(%RBP),%RSP
	add $-4464, %RSP
	mov -4264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c166f
	jmp uuid_00000000000c1671
uuid_00000000000c166f:
	push %RBP
	pushq -4096(%RBP)
	pushq -4104(%RBP)
	pushq -4112(%RBP)
	pushq -4120(%RBP)
	pushq -4128(%RBP)
	pushq -4136(%RBP)
	pushq -4144(%RBP)
	jmp uuid_00000000000c166c
	jmp uuid_00000000000c166e
uuid_00000000000c166c:
	movb $1, -4168(%rbp)
uuid_00000000000c166e:
	mov -4472(%RBP),%RSP
	add $-4528, %RSP
uuid_00000000000c1671:
	mov -4184(%RBP),%RSP
	add $-4528, %RSP
uuid_00000000000c1674:
	mov -4176(%RBP),%RSP
	add $-4528, %RSP
	mov -4168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1685
	jmp uuid_00000000000c1687
uuid_00000000000c1685:
	push %RBP
	pushq -4000(%RBP)
	pushq -4008(%RBP)
	pushq -4016(%RBP)
	pushq -4024(%RBP)
	pushq -4032(%RBP)
	pushq -4040(%RBP)
	pushq -4048(%RBP)
	pushq $0
	push %RBP
	mov -4592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c167f
	jmp uuid_00000000000c1681
uuid_00000000000c167f:
	push %RBP
	jmp uuid_00000000000c167c
	jmp uuid_00000000000c167e
uuid_00000000000c167c:
	push %RBP
	jmp uuid_00000000000c1679
	jmp uuid_00000000000c167b
uuid_00000000000c1679:
	push %RBP
	mov -4544(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4640(%rbp)
	pushq $uuid_00000000000c1675
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1676
	jmp uuid_00000000000c1678
uuid_00000000000c1676:
	movb $1, -4600(%rbp)
uuid_00000000000c1678:
	mov -4632(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000c167b:
	mov -4624(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000c167e:
	mov -4616(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000c1681:
	mov -4608(%RBP),%RSP
	add $-4640, %RSP
	mov -4600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1682
	jmp uuid_00000000000c1684
uuid_00000000000c1682:
	movb $1, -4072(%rbp)
uuid_00000000000c1684:
	mov -4536(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000c1687:
	mov -4088(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000c168a:
	mov -4080(%RBP),%RSP
	add $-4640, %RSP
	mov -4072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16cf
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4720(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c16ab
	jmp uuid_00000000000c16ad
uuid_00000000000c16ab:
	push %RBP
	mov -4712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4816(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c16a2
	jmp uuid_00000000000c16a4
uuid_00000000000c16a2:
	push %RBP
	mov -4808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c169f
	jmp uuid_00000000000c16a1
uuid_00000000000c169f:
	push %RBP
	pushq -4752(%RBP)
	pushq -4760(%RBP)
	pushq -4768(%RBP)
	pushq -4776(%RBP)
	pushq -4784(%RBP)
	pushq -4792(%RBP)
	pushq -4800(%RBP)
	pushq $0
	push %RBP
	mov -4976(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1699
	jmp uuid_00000000000c169b
uuid_00000000000c1699:
	push %RBP
	jmp uuid_00000000000c1696
	jmp uuid_00000000000c1698
uuid_00000000000c1696:
	push %RBP
	jmp uuid_00000000000c1693
	jmp uuid_00000000000c1695
uuid_00000000000c1693:
	push %RBP
	mov -4928(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5024(%rbp)
	pushq $uuid_00000000000c168f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1690
	jmp uuid_00000000000c1692
uuid_00000000000c1690:
	movb $1, -4984(%rbp)
uuid_00000000000c1692:
	mov -5016(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000c1695:
	mov -5008(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000c1698:
	mov -5000(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000c169b:
	mov -4992(%RBP),%RSP
	add $-5024, %RSP
	mov -4984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c169c
	jmp uuid_00000000000c169e
uuid_00000000000c169c:
	movb $1, -4824(%rbp)
uuid_00000000000c169e:
	mov -4920(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000c16a1:
	mov -4840(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000c16a4:
	mov -4832(%RBP),%RSP
	add $-5024, %RSP
	mov -4824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16a8
	jmp uuid_00000000000c16aa
uuid_00000000000c16a8:
	push %RBP
	pushq -4656(%RBP)
	pushq -4664(%RBP)
	pushq -4672(%RBP)
	pushq -4680(%RBP)
	pushq -4688(%RBP)
	pushq -4696(%RBP)
	pushq -4704(%RBP)
	jmp uuid_00000000000c16a5
	jmp uuid_00000000000c16a7
uuid_00000000000c16a5:
	movb $1, -4728(%rbp)
uuid_00000000000c16a7:
	mov -5032(%RBP),%RSP
	add $-5088, %RSP
uuid_00000000000c16aa:
	mov -4744(%RBP),%RSP
	add $-5088, %RSP
uuid_00000000000c16ad:
	mov -4736(%RBP),%RSP
	add $-5088, %RSP
	mov -4728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16cc
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000c16c9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c16c8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c16cb
uuid_00000000000c16c9:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq $0
	push %RBP
	mov -5480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c16c1
	jmp uuid_00000000000c16c3
uuid_00000000000c16c1:
	push %RBP
	pushq -5408(%RBP)
	pushq -5416(%RBP)
	pushq -5424(%RBP)
	pushq -5432(%RBP)
	pushq -5440(%RBP)
	pushq -5448(%RBP)
	pushq -5456(%RBP)
	pushq -5464(%RBP)
	pushq -5472(%RBP)
	jmp uuid_00000000000c16be
	jmp uuid_00000000000c16c0
uuid_00000000000c16be:
	push %RBP
	pushq -5336(%RBP)
	pushq -5344(%RBP)
	pushq -5352(%RBP)
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	pushq -5384(%RBP)
	pushq -5392(%RBP)
	pushq -5400(%RBP)
	jmp uuid_00000000000c16bb
	jmp uuid_00000000000c16bd
uuid_00000000000c16bb:
	movb $1, -5488(%rbp)
uuid_00000000000c16bd:
	mov -5584(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c16c0:
	mov -5504(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c16c3:
	mov -5496(%RBP),%RSP
	add $-5656, %RSP
	mov -5488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16c5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c16c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c16c7
uuid_00000000000c16c5:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -5576(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -5568(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -5560(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -5552(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -5544(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -5536(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -5528(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -5520(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -5512(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c16c7:
	mov -5328(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c16cb:
	mov -5096(%RBP),%RSP
	add $-5656, %RSP
	jmp uuid_00000000000c16ce
uuid_00000000000c16cc:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq $0
	push %RBP
	mov -5400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c16b4
	jmp uuid_00000000000c16b6
uuid_00000000000c16b4:
	push %RBP
	pushq -5328(%RBP)
	pushq -5336(%RBP)
	pushq -5344(%RBP)
	pushq -5352(%RBP)
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	pushq -5384(%RBP)
	pushq -5392(%RBP)
	jmp uuid_00000000000c16b1
	jmp uuid_00000000000c16b3
uuid_00000000000c16b1:
	push %RBP
	pushq -5256(%RBP)
	pushq -5264(%RBP)
	pushq -5272(%RBP)
	pushq -5280(%RBP)
	pushq -5288(%RBP)
	pushq -5296(%RBP)
	pushq -5304(%RBP)
	pushq -5312(%RBP)
	pushq -5320(%RBP)
	jmp uuid_00000000000c16ae
	jmp uuid_00000000000c16b0
uuid_00000000000c16ae:
	movb $1, -5408(%rbp)
uuid_00000000000c16b0:
	mov -5504(%RBP),%RSP
	add $-5576, %RSP
uuid_00000000000c16b3:
	mov -5424(%RBP),%RSP
	add $-5576, %RSP
uuid_00000000000c16b6:
	mov -5416(%RBP),%RSP
	add $-5576, %RSP
	mov -5408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16b8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c16b7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c16ba
uuid_00000000000c16b8:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -5496(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -5488(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -5480(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -5472(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -5464(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -5456(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -5448(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -5440(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -5432(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c16ba:
	mov -5248(%RBP),%RSP
	add $-5576, %RSP
uuid_00000000000c16ce:
	mov -4648(%RBP),%RSP
	add $-5576, %RSP
	jmp uuid_00000000000c16d1
uuid_00000000000c16cf:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c168b
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c168c
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c168c
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4480(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c168d
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c168d
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c168e
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c168e
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c168c
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c168c
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c168e
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000c168e
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4464(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq -4464(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4480(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec44
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $3
	pushq $5
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -4352(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -4344(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -4336(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -4328(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -4320(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -4312(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -4304(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -4296(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -4288(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c16d1:
	mov -3992(%RBP),%RSP
	add $-4640, %RSP
	jmp uuid_00000000000c16d4
uuid_00000000000c16d2:
#call function tokenize : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3872(%rbp)
	mov %RBX, %RBP
	call tokenize_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -3760(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -3752(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -3744(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -3736(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -3728(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -3720(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -3712(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -3704(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -3696(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c16d4:
	mov -3496(%RBP),%RSP
	add $-3984, %RSP
	jmp uuid_00000000000c16d7
uuid_00000000000c16d5:
#call function index-size-of-class : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3376(%rbp)
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3264(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call index_SB_size_SB_of_SB_class_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -3152(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -3144(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -3136(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -3128(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -3120(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -3112(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -3104(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -3096(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -3088(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c16d7:
	mov -2792(%RBP),%RSP
	add $-3488, %RSP
	jmp uuid_00000000000c16da
uuid_00000000000c16d8:
#call function close : Arrow<SfxList,Array<SfxList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SfxListSfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2448(%rbp)
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bf13a
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bfcb2
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2560(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	mov $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	movq -2336(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2304(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2296(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2288(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2280(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2272(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c16da:
	mov -1880(%RBP),%RSP
	add $-2784, %RSP
	jmp uuid_00000000000c16dd
uuid_00000000000c16db:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq $0
	push %RBP
	mov -2184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c157a
	jmp uuid_00000000000c157c
uuid_00000000000c157a:
	push %RBP
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	jmp uuid_00000000000c1577
	jmp uuid_00000000000c1579
uuid_00000000000c1577:
	push %RBP
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	jmp uuid_00000000000c1574
	jmp uuid_00000000000c1576
uuid_00000000000c1574:
	movb $1, -2192(%rbp)
uuid_00000000000c1576:
	mov -2288(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c1579:
	mov -2208(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000c157c:
	mov -2200(%RBP),%RSP
	add $-2360, %RSP
	mov -2192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c158b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c158a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c158d
uuid_00000000000c158b:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq $0
	push %RBP
	mov -2672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1583
	jmp uuid_00000000000c1585
uuid_00000000000c1583:
	push %RBP
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	jmp uuid_00000000000c1580
	jmp uuid_00000000000c1582
uuid_00000000000c1580:
	push %RBP
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	jmp uuid_00000000000c157d
	jmp uuid_00000000000c157f
uuid_00000000000c157d:
	movb $1, -2680(%rbp)
uuid_00000000000c157f:
	mov -2776(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c1582:
	mov -2696(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c1585:
	mov -2688(%RBP),%RSP
	add $-2848, %RSP
	mov -2680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1587
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1586
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1589
uuid_00000000000c1587:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -2768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2704(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c1589:
	mov -2520(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c158d:
	mov -2032(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000c16dd:
	mov -1592(%RBP),%RSP
	add $-2848, %RSP
	jmp uuid_00000000000c16e0
uuid_00000000000c16de:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c154b
	jmp uuid_00000000000c154d
uuid_00000000000c154b:
	push %RBP
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	jmp uuid_00000000000c1548
	jmp uuid_00000000000c154a
uuid_00000000000c1548:
	push %RBP
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	jmp uuid_00000000000c1545
	jmp uuid_00000000000c1547
uuid_00000000000c1545:
	movb $1, -1904(%rbp)
uuid_00000000000c1547:
	mov -2000(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c154a:
	mov -1920(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c154d:
	mov -1912(%RBP),%RSP
	add $-2072, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c155c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c155b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c155e
uuid_00000000000c155c:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq $0
	push %RBP
	mov -2384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1554
	jmp uuid_00000000000c1556
uuid_00000000000c1554:
	push %RBP
	pushq -2312(%RBP)
	pushq -2320(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	jmp uuid_00000000000c1551
	jmp uuid_00000000000c1553
uuid_00000000000c1551:
	push %RBP
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	jmp uuid_00000000000c154e
	jmp uuid_00000000000c1550
uuid_00000000000c154e:
	movb $1, -2392(%rbp)
uuid_00000000000c1550:
	mov -2488(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c1553:
	mov -2408(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c1556:
	mov -2400(%RBP),%RSP
	add $-2560, %RSP
	mov -2392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1558
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1557
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c155a
uuid_00000000000c1558:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
#call function type-of-s : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function index-tag-is-fragment : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call index_SB_tag_SB_is_SB_fragment_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -2480(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2472(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2464(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2456(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2448(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2440(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2432(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2424(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2416(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c155a:
	mov -2232(%RBP),%RSP
	add $-2584, %RSP
uuid_00000000000c155e:
	mov -1744(%RBP),%RSP
	add $-2584, %RSP
uuid_00000000000c16e0:
	mov -1096(%RBP),%RSP
	add $-2584, %RSP
	jmp uuid_00000000000c16e3
uuid_00000000000c16e1:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq $0
	push %RBP
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1512
	jmp uuid_00000000000c1514
uuid_00000000000c1512:
	push %RBP
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	jmp uuid_00000000000c150f
	jmp uuid_00000000000c1511
uuid_00000000000c150f:
	push %RBP
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	jmp uuid_00000000000c150c
	jmp uuid_00000000000c150e
uuid_00000000000c150c:
	movb $1, -1408(%rbp)
uuid_00000000000c150e:
	mov -1504(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c1511:
	mov -1424(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c1514:
	mov -1416(%RBP),%RSP
	add $-1576, %RSP
	mov -1408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1516
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1515
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1518
uuid_00000000000c1516:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -1496(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c1518:
	mov -1248(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c16e3:
	mov -808(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000c16e6
uuid_00000000000c16e4:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq $0
	push %RBP
	mov -1112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c14d2
	jmp uuid_00000000000c14d4
uuid_00000000000c14d2:
	push %RBP
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000c14cf
	jmp uuid_00000000000c14d1
uuid_00000000000c14cf:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	jmp uuid_00000000000c14cc
	jmp uuid_00000000000c14ce
uuid_00000000000c14cc:
	movb $1, -1120(%rbp)
uuid_00000000000c14ce:
	mov -1216(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c14d1:
	mov -1136(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c14d4:
	mov -1128(%RBP),%RSP
	add $-1288, %RSP
	mov -1120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c14f3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c14f2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c14f5
uuid_00000000000c14f3:
#call function take-one-expr : Arrow<List<Token>,Tuple<List<Token>,List<Token>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	mov %RBX, %RBP
	call take_SB_one_SB_expr_CL_ArrowTupleListTokenListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq $0
	push %RBP
	mov -1600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c14db
	jmp uuid_00000000000c14dd
uuid_00000000000c14db:
	push %RBP
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	jmp uuid_00000000000c14d8
	jmp uuid_00000000000c14da
uuid_00000000000c14d8:
	push %RBP
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	jmp uuid_00000000000c14d5
	jmp uuid_00000000000c14d7
uuid_00000000000c14d5:
	movb $1, -1608(%rbp)
uuid_00000000000c14d7:
	mov -1704(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c14da:
	mov -1624(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c14dd:
	mov -1616(%RBP),%RSP
	add $-1776, %RSP
	mov -1608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c14ef
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c14ee
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c14f1
uuid_00000000000c14ef:
#call function parse-toplevel : Arrow<List<Token>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	mov %RBX, %RBP
	call parse_SB_toplevel_CL_ArrowASTListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	push %RBP
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq $0
	push %RBP
	mov -2000(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c14e4
	jmp uuid_00000000000c14e6
uuid_00000000000c14e4:
	push %RBP
	mov -1992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c14e1
	jmp uuid_00000000000c14e3
uuid_00000000000c14e1:
	push %RBP
	mov -1984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2176(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c14de
	jmp uuid_00000000000c14e0
uuid_00000000000c14de:
	movb $1, -2008(%rbp)
uuid_00000000000c14e0:
	mov -2104(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000c14e3:
	mov -2024(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000c14e6:
	mov -2016(%RBP),%RSP
	add $-2176, %RSP
	mov -2008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c14eb
	push %RBP
	jmp uuid_00000000000c14e8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c14e7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c14ea
uuid_00000000000c14e8:
uuid_00000000000c14ea:
	mov -2184(%RBP),%RSP
	add $-2184, %RSP
	jmp uuid_00000000000c14ed
uuid_00000000000c14eb:
	movq -2096(%rbp), %r15
	movq %r15, -1848(%rbp)
	movq -2088(%rbp), %r15
	movq %r15, -1840(%rbp)
	movq -2080(%rbp), %r15
	movq %r15, -1832(%rbp)
	movq -2072(%rbp), %r15
	movq %r15, -1824(%rbp)
	movq -2064(%rbp), %r15
	movq %r15, -1816(%rbp)
	movq -2056(%rbp), %r15
	movq %r15, -1808(%rbp)
	movq -2048(%rbp), %r15
	movq %r15, -1800(%rbp)
	movq -2040(%rbp), %r15
	movq %r15, -1792(%rbp)
	movq -2032(%rbp), %r15
	movq %r15, -1784(%rbp)
uuid_00000000000c14ed:
	mov -1928(%RBP),%RSP
	add $-2176, %RSP
#call function close : Arrow<MacroList,Array<MacroList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $preprocess_SB_macros_CL_MacroListMacroListCaseNumber1, %r15
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_MacroListMacroList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $0
	pushq $0
	mov $preprocess_SB_macros_CL_MacroListMacroListCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	movq -1696(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c14f1:
	mov -1448(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000c14f5:
	mov -960(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000c16e6:
	mov -520(%RBP),%RSP
	add $-2176, %RSP
	jmp uuid_00000000000c16e9
uuid_00000000000c16e7:
	movq -400(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c16e9:
	mov -232(%RBP),%RSP
	add $-512, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c16ea
uuid_00000000000c16ec:
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_type_SB_comma_SB_sep_CL_ArrowListTypeString:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c1705:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c1706
	jmp uuid_00000000000c1707
uuid_00000000000c1706:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16fc
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16f9
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16f6
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16f3
	push %RBP
	jmp uuid_00000000000c16f0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c16ef
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c16f2
uuid_00000000000c16f0:
uuid_00000000000c16f2:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c16f5
uuid_00000000000c16f3:
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000c16f5:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c16f8
uuid_00000000000c16f6:
	mov -48(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000c16f8:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c16fb
uuid_00000000000c16f9:
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000c16fb:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c16fe
uuid_00000000000c16fc:
	mov -48(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000c16fe:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -48(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1702
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000c1704
uuid_00000000000c1702:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $44, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c16ff
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000c1701
uuid_00000000000c16ff:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c1701:
	mov -128(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000c1704:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c1705
uuid_00000000000c1707:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
parse_SB_type_SB_single_CL_ArrowTypeString:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
uuid_00000000000c1766:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c1767
	jmp uuid_00000000000c1768
uuid_00000000000c1767:
	push %RBP
	mov -24(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1763
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1739
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1736
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1733
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1730
	push %RBP
	jmp uuid_00000000000c172d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c172c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c172f
uuid_00000000000c172d:
uuid_00000000000c172f:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c1732
uuid_00000000000c1730:
	mov -24(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c1732:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c1735
uuid_00000000000c1733:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c1735:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c1738
uuid_00000000000c1736:
	mov -24(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c1738:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c173b
uuid_00000000000c1739:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000c173b:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -24(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1760
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	jmp uuid_00000000000c1762
uuid_00000000000c1760:
	pushq -32(%rbp)
	push %RBP
	pushq -128(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c175d
	push %RBP
	pushq -128(%rbp)
	mov -160(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c175a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1759
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c175c
uuid_00000000000c175a:
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1745
	jmp uuid_00000000000c1747
uuid_00000000000c1745:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1742
	jmp uuid_00000000000c1744
uuid_00000000000c1742:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c173f
	jmp uuid_00000000000c1741
uuid_00000000000c173f:
	movb $1, -224(%rbp)
uuid_00000000000c1741:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c1744:
	mov -240(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c1747:
	mov -232(%RBP),%RSP
	add $-296, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1756
	push %RBP
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c174b
	jmp uuid_00000000000c174d
uuid_00000000000c174b:
	push %RBP
	mov -320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1748
	jmp uuid_00000000000c174a
uuid_00000000000c1748:
	movb $1, -336(%rbp)
uuid_00000000000c174a:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c174d:
	mov -344(%RBP),%RSP
	add $-360, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1753
	push %RBP
	jmp uuid_00000000000c1750
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c174f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1752
uuid_00000000000c1750:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c174e
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1752:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000c1755
uuid_00000000000c1753:
	pushq -360(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-comma-sep : Arrow<String,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_comma_SB_sep_CL_ArrowListTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c1755:
	mov -304(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000c1758
uuid_00000000000c1756:
	pushq -296(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-comma-sep : Arrow<String,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_comma_SB_sep_CL_ArrowListTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c1758:
	mov -192(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c175c:
	mov -152(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c175f
uuid_00000000000c175d:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c173c
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec78
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c173e
uuid_00000000000c173c:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec78
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c173e:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c175f:
	mov -136(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c1762:
	mov -120(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c1765
uuid_00000000000c1763:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1729
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1726
	push %RBP
	pushq -96(%rbp)
	jmp uuid_00000000000c1723
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1722
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1725
uuid_00000000000c1723:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c1725:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c1728
uuid_00000000000c1726:
	movb $60, -32(%rbp)
	movq $1, -24(%rbp)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c171f
	jmp uuid_00000000000c1721
uuid_00000000000c171f:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000be850
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c171c
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1719
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c171b
uuid_00000000000c1719:
	pushq $0
	pushq -144(%rbp)
	pushq $2
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c171b:
	mov -160(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c171e
uuid_00000000000c171c:
	pushq $0
	pushq $0
	pushq $3
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c171e:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c1721:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c1728:
	mov -120(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c172b
uuid_00000000000c1729:
	movb $91, -32(%rbp)
	movq $1, -24(%rbp)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1712
	jmp uuid_00000000000c1714
uuid_00000000000c1712:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000be850
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c170f
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c170c
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c170e
uuid_00000000000c170c:
	pushq $0
	pushq -128(%rbp)
	pushq $2
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c170e:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c1711
uuid_00000000000c170f:
	pushq $0
	pushq $0
	pushq $3
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1711:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c1714:
	mov -120(%RBP),%RSP
	add $-136, %RSP
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c172b:
	mov -104(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c1765:
	mov -88(%RBP),%RSP
	add $-136, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c1766
uuid_00000000000c1768:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1773
	jmp uuid_00000000000c1775
uuid_00000000000c1773:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000be850
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1770
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c176d
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<List<Type>+List<Type>+CaseNumber<1>,Array<List<Type>+List<Type>+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000c176f
uuid_00000000000c176d:
	pushq $0
	pushq -96(%rbp)
	pushq $2
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c176f:
	mov -112(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c1772
uuid_00000000000c1770:
	pushq $0
	pushq $0
	pushq $3
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000c1772:
	mov -104(%RBP),%RSP
	add $-104, %RSP
uuid_00000000000c1775:
	mov -88(%RBP),%RSP
	add $-104, %RSP
	subq $24, %rsp
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
parse_SB_type_CL_ArrowTypeString:
	pushq $0
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000bea38
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1776
	jmp uuid_00000000000c1778
uuid_00000000000c1776:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000bea38
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
	movb $1, -24(%rbp)
uuid_00000000000c1778:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	pushq $0
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
uuid_00000000000c179f:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c17a0
	jmp uuid_00000000000c17a1
uuid_00000000000c17a0:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1786
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1783
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1780
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c177d
	push %RBP
	jmp uuid_00000000000c177a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1779
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c177c
uuid_00000000000c177a:
uuid_00000000000c177c:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c177f
uuid_00000000000c177d:
	mov -40(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c177f:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c1782
uuid_00000000000c1780:
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c1782:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c1785
uuid_00000000000c1783:
	mov -40(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c1785:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c1788
uuid_00000000000c1786:
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c1788:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c179c
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	jmp uuid_00000000000c179e
uuid_00000000000c179c:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $43, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1799
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	jmp uuid_00000000000c179b
uuid_00000000000c1799:
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c178f
	jmp uuid_00000000000c1791
uuid_00000000000c178f:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c178c
	jmp uuid_00000000000c178e
uuid_00000000000c178c:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1789
	jmp uuid_00000000000c178b
uuid_00000000000c1789:
	movb $1, -192(%rbp)
uuid_00000000000c178b:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c178e:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000c1791:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1796
	push %RBP
	jmp uuid_00000000000c1793
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1792
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1795
uuid_00000000000c1793:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
uuid_00000000000c1795:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c1798
uuid_00000000000c1796:
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -288(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -72(%rbp)
uuid_00000000000c1798:
	mov -160(%RBP),%RSP
	add $-288, %RSP
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000c179b:
	mov -128(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000c179e:
	mov -120(%RBP),%RSP
	add $-288, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c179f
uuid_00000000000c17a1:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c17b2
	jmp uuid_00000000000c17b4
uuid_00000000000c17b2:
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17a8
	jmp uuid_00000000000c17aa
uuid_00000000000c17a8:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17a5
	jmp uuid_00000000000c17a7
uuid_00000000000c17a5:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c17a2
	jmp uuid_00000000000c17a4
uuid_00000000000c17a2:
	movb $1, -160(%rbp)
uuid_00000000000c17a4:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c17a7:
	mov -176(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c17aa:
	mov -168(%RBP),%RSP
	add $-232, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c17af
	push %RBP
	jmp uuid_00000000000c17ac
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c17ab
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c17ae
uuid_00000000000c17ac:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
uuid_00000000000c17ae:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c17b1
uuid_00000000000c17af:
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -256(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -248(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -240(%rbp), %r15
	movq %r15, -72(%rbp)
uuid_00000000000c17b1:
	mov -128(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000c17b4:
	mov -96(%RBP),%RSP
	add $-256, %RSP
	push %RBP
	mov -24(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c17b9
	jmp uuid_00000000000c17bb
uuid_00000000000c17b9:
	pushq $uuid_00000000000bea38
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
uuid_00000000000c17bb:
	mov -264(%RBP),%RSP
	add $-264, %RSP
	subq $24, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
parse_SB_unexpect_CL_ArrowNilConsListTokenString:
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
parse_CL_ArrowNilNil:
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
#call function parse-toplevel : Arrow<List<Token>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call parse_SB_toplevel_CL_ArrowASTListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
remove_SB_parens_CL_ArrowListTokenListToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17d6
	jmp uuid_00000000000c17d8
uuid_00000000000c17d6:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c17d3
	jmp uuid_00000000000c17d5
uuid_00000000000c17d3:
	push %RBP
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17cd
	jmp uuid_00000000000c17cf
uuid_00000000000c17cd:
	push %RBP
	jmp uuid_00000000000c17ca
	jmp uuid_00000000000c17cc
uuid_00000000000c17ca:
	push %RBP
	jmp uuid_00000000000c17c7
	jmp uuid_00000000000c17c9
uuid_00000000000c17c7:
	push %RBP
	mov -344(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq $uuid_00000000000be6c7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c17c4
	jmp uuid_00000000000c17c6
uuid_00000000000c17c4:
	movb $1, -400(%rbp)
uuid_00000000000c17c6:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c17c9:
	mov -424(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c17cc:
	mov -416(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c17cf:
	mov -408(%RBP),%RSP
	add $-440, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c17d0
	jmp uuid_00000000000c17d2
uuid_00000000000c17d0:
	movb $1, -240(%rbp)
uuid_00000000000c17d2:
	mov -336(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c17d5:
	mov -256(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c17d8:
	mov -248(%RBP),%RSP
	add $-440, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1804
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1803
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1806
uuid_00000000000c1804:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c1800:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1801
	jmp uuid_00000000000c1802
uuid_00000000000c1801:
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17ed
	jmp uuid_00000000000c17ef
uuid_00000000000c17ed:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17ea
	jmp uuid_00000000000c17ec
uuid_00000000000c17ea:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17e4
	jmp uuid_00000000000c17e6
uuid_00000000000c17e4:
	push %RBP
	jmp uuid_00000000000c17e1
	jmp uuid_00000000000c17e3
uuid_00000000000c17e1:
	push %RBP
	jmp uuid_00000000000c17de
	jmp uuid_00000000000c17e0
uuid_00000000000c17de:
	push %RBP
	mov -776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq $uuid_00000000000be6c9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c17db
	jmp uuid_00000000000c17dd
uuid_00000000000c17db:
	movb $1, -832(%rbp)
uuid_00000000000c17dd:
	mov -864(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c17e0:
	mov -856(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c17e3:
	mov -848(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c17e6:
	mov -840(%RBP),%RSP
	add $-872, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c17e7
	jmp uuid_00000000000c17e9
uuid_00000000000c17e7:
	movb $1, -672(%rbp)
uuid_00000000000c17e9:
	mov -768(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c17ec:
	mov -688(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000c17ef:
	mov -680(%RBP),%RSP
	add $-872, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c17fd
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c17f6
	jmp uuid_00000000000c17f8
uuid_00000000000c17f6:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c17f3
	jmp uuid_00000000000c17f5
uuid_00000000000c17f3:
	push %RBP
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000c17f0
	jmp uuid_00000000000c17f2
uuid_00000000000c17f0:
	movb $1, -960(%rbp)
uuid_00000000000c17f2:
	mov -1056(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c17f5:
	mov -976(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c17f8:
	mov -968(%RBP),%RSP
	add $-1112, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c17fa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c17f9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c17fc
uuid_00000000000c17fa:
#call function cons : Arrow<Cons<Token,List<Token>>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTokenConsListTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	movq -1048(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -264(%rbp)
uuid_00000000000c17fc:
	mov -880(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000c17ff
uuid_00000000000c17fd:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
uuid_00000000000c17ff:
	mov -592(%RBP),%RSP
	add $-872, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c1800
uuid_00000000000c1802:
#call function reverse : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1806:
	mov -160(%RBP),%RSP
	add $-512, %RSP
	subq $72, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
take_SB_one_SB_expr_CL_ArrowTupleListTokenListTokenListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq $0
uuid_00000000000c1857:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1858
	jmp uuid_00000000000c1859
uuid_00000000000c1858:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c181f
	jmp uuid_00000000000c1821
uuid_00000000000c181f:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c181c
	jmp uuid_00000000000c181e
uuid_00000000000c181c:
	push %RBP
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1816
	jmp uuid_00000000000c1818
uuid_00000000000c1816:
	push %RBP
	jmp uuid_00000000000c1813
	jmp uuid_00000000000c1815
uuid_00000000000c1813:
	push %RBP
	jmp uuid_00000000000c1810
	jmp uuid_00000000000c1812
uuid_00000000000c1810:
	push %RBP
	mov -496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000be8af
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c180d
	jmp uuid_00000000000c180f
uuid_00000000000c180d:
	movb $1, -552(%rbp)
uuid_00000000000c180f:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c1812:
	mov -576(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c1815:
	mov -568(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c1818:
	mov -560(%RBP),%RSP
	add $-592, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1819
	jmp uuid_00000000000c181b
uuid_00000000000c1819:
	movb $1, -392(%rbp)
uuid_00000000000c181b:
	mov -488(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c181e:
	mov -408(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c1821:
	mov -400(%RBP),%RSP
	add $-592, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1854
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c182b
	jmp uuid_00000000000c182d
uuid_00000000000c182b:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1828
	jmp uuid_00000000000c182a
uuid_00000000000c1828:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	jmp uuid_00000000000c1825
	jmp uuid_00000000000c1827
uuid_00000000000c1825:
	movb $1, -680(%rbp)
uuid_00000000000c1827:
	mov -776(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c182a:
	mov -696(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c182d:
	mov -688(%RBP),%RSP
	add $-832, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1851
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1850
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1853
uuid_00000000000c1851:
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	push %RBP
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1837
	jmp uuid_00000000000c1839
uuid_00000000000c1837:
	push %RBP
	jmp uuid_00000000000c1834
	jmp uuid_00000000000c1836
uuid_00000000000c1834:
	push %RBP
	jmp uuid_00000000000c1831
	jmp uuid_00000000000c1833
uuid_00000000000c1831:
	push %RBP
	mov -904(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq $uuid_00000000000be6c7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c182e
	jmp uuid_00000000000c1830
uuid_00000000000c182e:
	movb $1, -960(%rbp)
uuid_00000000000c1830:
	mov -992(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000c1833:
	mov -984(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000c1836:
	mov -976(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000c1839:
	mov -968(%RBP),%RSP
	add $-1000, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c184d
	push %RBP
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $0
	push %RBP
	mov -1064(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1843
	jmp uuid_00000000000c1845
uuid_00000000000c1843:
	push %RBP
	jmp uuid_00000000000c1840
	jmp uuid_00000000000c1842
uuid_00000000000c1840:
	push %RBP
	jmp uuid_00000000000c183d
	jmp uuid_00000000000c183f
uuid_00000000000c183d:
	push %RBP
	mov -1016(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq $uuid_00000000000be6c9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c183a
	jmp uuid_00000000000c183c
uuid_00000000000c183a:
	movb $1, -1072(%rbp)
uuid_00000000000c183c:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c183f:
	mov -1096(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c1842:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c1845:
	mov -1080(%RBP),%RSP
	add $-1112, %RSP
	mov -1072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c184a
	push %RBP
	jmp uuid_00000000000c1847
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1846
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1849
uuid_00000000000c1847:
uuid_00000000000c1849:
	mov -1120(%RBP),%RSP
	add $-1120, %RSP
	jmp uuid_00000000000c184c
uuid_00000000000c184a:
	mov -232(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -232(%rbp)
uuid_00000000000c184c:
	mov -1008(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000c184f
uuid_00000000000c184d:
	mov -232(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -232(%rbp)
uuid_00000000000c184f:
	mov -896(%RBP),%RSP
	add $-1000, %RSP
#call function cons : Arrow<Cons<Token,List<Token>>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTokenConsListTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -768(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c1853:
	mov -600(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000c1856
uuid_00000000000c1854:
	push %RBP
	mov -232(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1822
#call function cons : Arrow<Cons<Token,List<Token>>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function head : Arrow<List<Token>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call head_CL_ArrowTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTokenConsListTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -480(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c1824
uuid_00000000000c1822:
	movq -72(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -64(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -56(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -48(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -40(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -32(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -24(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -160(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1824:
	mov -600(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000c1856:
	mov -312(%RBP),%RSP
	add $-600, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c1857
uuid_00000000000c1859:
#call function remove-parens : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function reverse : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call remove_SB_parens_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
compile_SB_constructor_CL_ArrowFragmentConsI64ConsASTConsTypeConsTypeConsStringFContext:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	subq %R14,%RAX
	mov %RAX, %RAX
	mov $8, %R14
	subq %R14,%RAX
	push %RAX
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov -336(%RBP), %RAX
	mov -352(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed38
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed3a
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed3b
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed39
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $uuid_00000000000c185a
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $uuid_00000000000bed3c
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -336(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -336(%RBP), %RAX
	subq %R14,%RAX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	subq $152, %rsp
	pushq -880(%rbp)
	pushq -872(%rbp)
	pushq -864(%rbp)
	pushq -856(%rbp)
	pushq -848(%rbp)
	pushq -840(%rbp)
	pushq -832(%rbp)
	pushq -824(%rbp)
	pushq -816(%rbp)
	pushq -808(%rbp)
	pushq -800(%rbp)
	pushq -792(%rbp)
	pushq -784(%rbp)
	pushq -776(%rbp)
	pushq -768(%rbp)
	pushq -760(%rbp)
	pushq -752(%rbp)
	pushq -744(%rbp)
	pushq -736(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $344, %rsp
	ret
compile_SB_declare_SB_cstring_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber1, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1876
	mov $cstring_SB_cache_CL_StringStringListStringStringListCaseNumber1, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $uuid_00000000000be796
uuid_00000000000c186e:
#call function non-zero : Arrow<StringStringList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64StringStringList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c186f
	jmp uuid_00000000000c1870
uuid_00000000000c186f:
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1864
	jmp uuid_00000000000c1866
uuid_00000000000c1864:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1861
	jmp uuid_00000000000c1863
uuid_00000000000c1861:
	push %RBP
	mov -272(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c185e
	jmp uuid_00000000000c1860
uuid_00000000000c185e:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c185b
	jmp uuid_00000000000c185d
uuid_00000000000c185b:
	movb $1, -296(%rbp)
uuid_00000000000c185d:
	mov -344(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c1860:
	mov -328(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c1863:
	mov -312(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c1866:
	mov -304(%RBP),%RSP
	add $-376, %RSP
	mov -296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c186b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c186a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c186d
uuid_00000000000c186b:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1867
	movq -376(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -184(%rbp)
	jmp uuid_00000000000c1869
uuid_00000000000c1867:
	movq -320(%rbp), %r15
	movq %r15, -216(%rbp)
	mov -320(%rbp), %r15
	mov %r15, -216(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c1869:
	mov -384(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000c186d:
	mov -256(%RBP),%RSP
	add $-384, %RSP
	add $32, %rsp
	add $32, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $32, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c186e
uuid_00000000000c1870:
	push %RBP
	mov -216(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000c1873
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -216(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -216(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c1871
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function escape-literal : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call escape_SB_literal_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c1872
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<StringStringList,Array<StringStringList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $cstring_SB_cache_CL_StringStringListStringStringListCaseNumber1, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_StringStringListStringStringList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -216(%rbp)
	pushq $0
	mov $cstring_SB_cache_CL_StringStringListStringStringListCaseNumber1, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	jmp uuid_00000000000c1875
uuid_00000000000c1873:
uuid_00000000000c1875:
	mov -224(%RBP),%RSP
	add $-224, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c0b38
	pushq $0
	pushq -216(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000c1878
uuid_00000000000c1876:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c0b38
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000c1878:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType:
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c18a9
	jmp uuid_00000000000c18ab
uuid_00000000000c18a9:
	push %RBP
	mov -456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c18a0
	jmp uuid_00000000000c18a2
uuid_00000000000c18a0:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -656(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c188e
	jmp uuid_00000000000c1890
uuid_00000000000c188e:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c187c
	jmp uuid_00000000000c187e
uuid_00000000000c187c:
	push %RBP
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000c1879
	jmp uuid_00000000000c187b
uuid_00000000000c1879:
	movb $1, -760(%rbp)
uuid_00000000000c187b:
	mov -776(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c187e:
	mov -768(%RBP),%RSP
	add $-800, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c188b
	jmp uuid_00000000000c188d
uuid_00000000000c188b:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1885
	jmp uuid_00000000000c1887
uuid_00000000000c1885:
	push %RBP
	jmp uuid_00000000000c1882
	jmp uuid_00000000000c1884
uuid_00000000000c1882:
	push %RBP
	mov -816(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c187f
	jmp uuid_00000000000c1881
uuid_00000000000c187f:
	movb $1, -888(%rbp)
uuid_00000000000c1881:
	mov -912(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c1884:
	mov -904(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c1887:
	mov -896(%RBP),%RSP
	add $-920, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1888
	jmp uuid_00000000000c188a
uuid_00000000000c1888:
	movb $1, -664(%rbp)
uuid_00000000000c188a:
	mov -808(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c188d:
	mov -680(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c1890:
	mov -672(%RBP),%RSP
	add $-920, %RSP
	mov -664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c189d
	jmp uuid_00000000000c189f
uuid_00000000000c189d:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1000(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1897
	jmp uuid_00000000000c1899
uuid_00000000000c1897:
	push %RBP
	jmp uuid_00000000000c1894
	jmp uuid_00000000000c1896
uuid_00000000000c1894:
	push %RBP
	mov -936(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1891
	jmp uuid_00000000000c1893
uuid_00000000000c1891:
	movb $1, -1008(%rbp)
uuid_00000000000c1893:
	mov -1032(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c1896:
	mov -1024(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c1899:
	mov -1016(%RBP),%RSP
	add $-1040, %RSP
	mov -1008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c189a
	jmp uuid_00000000000c189c
uuid_00000000000c189a:
	movb $1, -568(%rbp)
uuid_00000000000c189c:
	mov -928(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c189f:
	mov -584(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c18a2:
	mov -576(%RBP),%RSP
	add $-1040, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18a6
	jmp uuid_00000000000c18a8
uuid_00000000000c18a6:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c18a3
	jmp uuid_00000000000c18a5
uuid_00000000000c18a3:
	movb $1, -472(%rbp)
uuid_00000000000c18a5:
	mov -1048(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000c18a8:
	mov -488(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000c18ab:
	mov -480(%RBP),%RSP
	add $-1120, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18e0
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c18d6
	jmp uuid_00000000000c18d8
uuid_00000000000c18d6:
	push %RBP
	mov -1192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1296(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c18c4
	jmp uuid_00000000000c18c6
uuid_00000000000c18c4:
	push %RBP
	mov -1288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c18b2
	jmp uuid_00000000000c18b4
uuid_00000000000c18b2:
	push %RBP
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	jmp uuid_00000000000c18af
	jmp uuid_00000000000c18b1
uuid_00000000000c18af:
	movb $1, -1400(%rbp)
uuid_00000000000c18b1:
	mov -1416(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c18b4:
	mov -1408(%RBP),%RSP
	add $-1440, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18c1
	jmp uuid_00000000000c18c3
uuid_00000000000c18c1:
	push %RBP
	mov -1280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1520(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c18bb
	jmp uuid_00000000000c18bd
uuid_00000000000c18bb:
	push %RBP
	jmp uuid_00000000000c18b8
	jmp uuid_00000000000c18ba
uuid_00000000000c18b8:
	push %RBP
	mov -1456(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c18b5
	jmp uuid_00000000000c18b7
uuid_00000000000c18b5:
	movb $1, -1528(%rbp)
uuid_00000000000c18b7:
	mov -1552(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c18ba:
	mov -1544(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c18bd:
	mov -1536(%RBP),%RSP
	add $-1560, %RSP
	mov -1528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18be
	jmp uuid_00000000000c18c0
uuid_00000000000c18be:
	movb $1, -1304(%rbp)
uuid_00000000000c18c0:
	mov -1448(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c18c3:
	mov -1320(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000c18c6:
	mov -1312(%RBP),%RSP
	add $-1560, %RSP
	mov -1304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18d3
	jmp uuid_00000000000c18d5
uuid_00000000000c18d3:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c18cd
	jmp uuid_00000000000c18cf
uuid_00000000000c18cd:
	push %RBP
	jmp uuid_00000000000c18ca
	jmp uuid_00000000000c18cc
uuid_00000000000c18ca:
	push %RBP
	mov -1576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c18c7
	jmp uuid_00000000000c18c9
uuid_00000000000c18c7:
	movb $1, -1648(%rbp)
uuid_00000000000c18c9:
	mov -1672(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c18cc:
	mov -1664(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c18cf:
	mov -1656(%RBP),%RSP
	add $-1680, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18d0
	jmp uuid_00000000000c18d2
uuid_00000000000c18d0:
	movb $1, -1208(%rbp)
uuid_00000000000c18d2:
	mov -1568(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c18d5:
	mov -1224(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000c18d8:
	mov -1216(%RBP),%RSP
	add $-1680, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c18dd
	push %RBP
	jmp uuid_00000000000c18da
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c18d9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c18dc
uuid_00000000000c18da:
uuid_00000000000c18dc:
	mov -1688(%RBP),%RSP
	add $-1688, %RSP
	jmp uuid_00000000000c18df
uuid_00000000000c18dd:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bf1a0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -304(%RBP), %RAX
	mov -1688(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -1560(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
#call function fragment::local-variable : Arrow<Cons<I64,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1696(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000c18df:
	mov -1128(%RBP),%RSP
	add $-1696, %RSP
	jmp uuid_00000000000c18e2
uuid_00000000000c18e0:
	push %RBP
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c18ac
	jmp uuid_00000000000c18ae
uuid_00000000000c18ac:
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function compile-destructure-args : Arrow<Cons<Cons<Cons<Type,FContext>,AST>,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -304(%RBP), %RAX
	mov -1160(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bf1a0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -1168(%RBP), %RAX
	mov -1176(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -920(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
#call function fragment::local-variable : Arrow<Cons<I64,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1184(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000c18ae:
	mov -1128(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000c18e2:
	mov -392(%RBP),%RSP
	add $-1184, %RSP
	subq $200, %rsp
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
compile_SB_expr_SB_direct_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b45
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	mov -680(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b42
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c18e9
	jmp uuid_00000000000c18eb
uuid_00000000000c18e9:
	push %RBP
	jmp uuid_00000000000c18e6
	jmp uuid_00000000000c18e8
uuid_00000000000c18e6:
	push %RBP
	mov -696(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c18e3
	jmp uuid_00000000000c18e5
uuid_00000000000c18e3:
	movb $1, -768(%rbp)
uuid_00000000000c18e5:
	mov -792(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c18e8:
	mov -784(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c18eb:
	mov -776(%RBP),%RSP
	add $-800, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b3f
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c18f2
	jmp uuid_00000000000c18f4
uuid_00000000000c18f2:
	push %RBP
	jmp uuid_00000000000c18ef
	jmp uuid_00000000000c18f1
uuid_00000000000c18ef:
	push %RBP
	mov -816(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c18ec
	jmp uuid_00000000000c18ee
uuid_00000000000c18ec:
	movb $1, -888(%rbp)
uuid_00000000000c18ee:
	mov -912(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c18f1:
	mov -904(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000c18f4:
	mov -896(%RBP),%RSP
	add $-920, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b3c
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -1000(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c195a
	jmp uuid_00000000000c195c
uuid_00000000000c195a:
	push %RBP
	mov -992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1096(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1948
	jmp uuid_00000000000c194a
uuid_00000000000c1948:
	push %RBP
	mov -1088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c193f
	jmp uuid_00000000000c1941
uuid_00000000000c193f:
	push %RBP
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	jmp uuid_00000000000c193c
	jmp uuid_00000000000c193e
uuid_00000000000c193c:
	movb $1, -1200(%rbp)
uuid_00000000000c193e:
	mov -1216(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000c1941:
	mov -1208(%RBP),%RSP
	add $-1240, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1945
	jmp uuid_00000000000c1947
uuid_00000000000c1945:
	push %RBP
	mov -1080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1942
	jmp uuid_00000000000c1944
uuid_00000000000c1942:
	movb $1, -1104(%rbp)
uuid_00000000000c1944:
	mov -1248(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c1947:
	mov -1120(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000c194a:
	mov -1112(%RBP),%RSP
	add $-1320, %RSP
	mov -1104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1957
	jmp uuid_00000000000c1959
uuid_00000000000c1957:
	push %RBP
	mov -984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1951
	jmp uuid_00000000000c1953
uuid_00000000000c1951:
	push %RBP
	jmp uuid_00000000000c194e
	jmp uuid_00000000000c1950
uuid_00000000000c194e:
	push %RBP
	mov -1336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c194b
	jmp uuid_00000000000c194d
uuid_00000000000c194b:
	movb $1, -1408(%rbp)
uuid_00000000000c194d:
	mov -1432(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c1950:
	mov -1424(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c1953:
	mov -1416(%RBP),%RSP
	add $-1440, %RSP
	mov -1408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1954
	jmp uuid_00000000000c1956
uuid_00000000000c1954:
	movb $1, -1008(%rbp)
uuid_00000000000c1956:
	mov -1328(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c1959:
	mov -1024(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c195c:
	mov -1016(%RBP),%RSP
	add $-1440, %RSP
	mov -1008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b39
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -1520(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1975
	jmp uuid_00000000000c1977
uuid_00000000000c1975:
	push %RBP
	mov -1512(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1963
	jmp uuid_00000000000c1965
uuid_00000000000c1963:
	push %RBP
	jmp uuid_00000000000c1960
	jmp uuid_00000000000c1962
uuid_00000000000c1960:
	push %RBP
	mov -1552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c195d
	jmp uuid_00000000000c195f
uuid_00000000000c195d:
	movb $1, -1624(%rbp)
uuid_00000000000c195f:
	mov -1648(%RBP),%RSP
	add $-1656, %RSP
uuid_00000000000c1962:
	mov -1640(%RBP),%RSP
	add $-1656, %RSP
uuid_00000000000c1965:
	mov -1632(%RBP),%RSP
	add $-1656, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1972
	jmp uuid_00000000000c1974
uuid_00000000000c1972:
	push %RBP
	mov -1504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1736(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c196c
	jmp uuid_00000000000c196e
uuid_00000000000c196c:
	push %RBP
	jmp uuid_00000000000c1969
	jmp uuid_00000000000c196b
uuid_00000000000c1969:
	push %RBP
	mov -1672(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1776(%rbp)
	pushq $uuid_00000000000beb85
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1966
	jmp uuid_00000000000c1968
uuid_00000000000c1966:
	movb $1, -1744(%rbp)
uuid_00000000000c1968:
	mov -1768(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c196b:
	mov -1760(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c196e:
	mov -1752(%RBP),%RSP
	add $-1776, %RSP
	mov -1744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c196f
	jmp uuid_00000000000c1971
uuid_00000000000c196f:
	movb $1, -1528(%rbp)
uuid_00000000000c1971:
	mov -1664(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c1974:
	mov -1544(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c1977:
	mov -1536(%RBP),%RSP
	add $-1776, %RSP
	mov -1528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b36
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -1856(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1990
	jmp uuid_00000000000c1992
uuid_00000000000c1990:
	push %RBP
	mov -1848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1952(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c197e
	jmp uuid_00000000000c1980
uuid_00000000000c197e:
	push %RBP
	jmp uuid_00000000000c197b
	jmp uuid_00000000000c197d
uuid_00000000000c197b:
	push %RBP
	mov -1888(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1978
	jmp uuid_00000000000c197a
uuid_00000000000c1978:
	movb $1, -1960(%rbp)
uuid_00000000000c197a:
	mov -1984(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000c197d:
	mov -1976(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000c1980:
	mov -1968(%RBP),%RSP
	add $-1992, %RSP
	mov -1960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c198d
	jmp uuid_00000000000c198f
uuid_00000000000c198d:
	push %RBP
	mov -1840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2072(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1987
	jmp uuid_00000000000c1989
uuid_00000000000c1987:
	push %RBP
	jmp uuid_00000000000c1984
	jmp uuid_00000000000c1986
uuid_00000000000c1984:
	push %RBP
	mov -2008(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2112(%rbp)
	pushq $uuid_00000000000beba2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1981
	jmp uuid_00000000000c1983
uuid_00000000000c1981:
	movb $1, -2080(%rbp)
uuid_00000000000c1983:
	mov -2104(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c1986:
	mov -2096(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c1989:
	mov -2088(%RBP),%RSP
	add $-2112, %RSP
	mov -2080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c198a
	jmp uuid_00000000000c198c
uuid_00000000000c198a:
	movb $1, -1864(%rbp)
uuid_00000000000c198c:
	mov -2000(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c198f:
	mov -1880(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c1992:
	mov -1872(%RBP),%RSP
	add $-2112, %RSP
	mov -1864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b33
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -2192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19a2
	jmp uuid_00000000000c19a4
uuid_00000000000c19a2:
	push %RBP
	mov -2184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c199f
	jmp uuid_00000000000c19a1
uuid_00000000000c199f:
	push %RBP
	mov -2176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1999
	jmp uuid_00000000000c199b
uuid_00000000000c1999:
	push %RBP
	jmp uuid_00000000000c1996
	jmp uuid_00000000000c1998
uuid_00000000000c1996:
	push %RBP
	mov -2304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2408(%rbp)
	pushq $uuid_00000000000bec52
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1993
	jmp uuid_00000000000c1995
uuid_00000000000c1993:
	movb $1, -2376(%rbp)
uuid_00000000000c1995:
	mov -2400(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000c1998:
	mov -2392(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000c199b:
	mov -2384(%RBP),%RSP
	add $-2408, %RSP
	mov -2376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c199c
	jmp uuid_00000000000c199e
uuid_00000000000c199c:
	movb $1, -2200(%rbp)
uuid_00000000000c199e:
	mov -2296(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000c19a1:
	mov -2216(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000c19a4:
	mov -2208(%RBP),%RSP
	add $-2408, %RSP
	mov -2200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b30
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -2488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19b4
	jmp uuid_00000000000c19b6
uuid_00000000000c19b4:
	push %RBP
	mov -2480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c19b1
	jmp uuid_00000000000c19b3
uuid_00000000000c19b1:
	push %RBP
	mov -2472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19ab
	jmp uuid_00000000000c19ad
uuid_00000000000c19ab:
	push %RBP
	jmp uuid_00000000000c19a8
	jmp uuid_00000000000c19aa
uuid_00000000000c19a8:
	push %RBP
	mov -2600(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2704(%rbp)
	pushq $uuid_00000000000bec65
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c19a5
	jmp uuid_00000000000c19a7
uuid_00000000000c19a5:
	movb $1, -2672(%rbp)
uuid_00000000000c19a7:
	mov -2696(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c19aa:
	mov -2688(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c19ad:
	mov -2680(%RBP),%RSP
	add $-2704, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c19ae
	jmp uuid_00000000000c19b0
uuid_00000000000c19ae:
	movb $1, -2496(%rbp)
uuid_00000000000c19b0:
	mov -2592(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c19b3:
	mov -2512(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000c19b6:
	mov -2504(%RBP),%RSP
	add $-2704, %RSP
	mov -2496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b2d
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -2784(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a0c
	jmp uuid_00000000000c1a0e
uuid_00000000000c1a0c:
	push %RBP
	mov -2776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2880(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19fa
	jmp uuid_00000000000c19fc
uuid_00000000000c19fa:
	push %RBP
	pushq -2856(%RBP)
	pushq -2864(%RBP)
	pushq -2872(%RBP)
	jmp uuid_00000000000c19f7
	jmp uuid_00000000000c19f9
uuid_00000000000c19f7:
	movb $1, -2888(%rbp)
uuid_00000000000c19f9:
	mov -2904(%RBP),%RSP
	add $-2928, %RSP
uuid_00000000000c19fc:
	mov -2896(%RBP),%RSP
	add $-2928, %RSP
	mov -2888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a09
	jmp uuid_00000000000c1a0b
uuid_00000000000c1a09:
	push %RBP
	mov -2768(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3008(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a03
	jmp uuid_00000000000c1a05
uuid_00000000000c1a03:
	push %RBP
	jmp uuid_00000000000c1a00
	jmp uuid_00000000000c1a02
uuid_00000000000c1a00:
	push %RBP
	mov -2944(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3048(%rbp)
	pushq $uuid_00000000000bec31
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c19fd
	jmp uuid_00000000000c19ff
uuid_00000000000c19fd:
	movb $1, -3016(%rbp)
uuid_00000000000c19ff:
	mov -3040(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000c1a02:
	mov -3032(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000c1a05:
	mov -3024(%RBP),%RSP
	add $-3048, %RSP
	mov -3016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a06
	jmp uuid_00000000000c1a08
uuid_00000000000c1a06:
	movb $1, -2792(%rbp)
uuid_00000000000c1a08:
	mov -2936(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000c1a0b:
	mov -2808(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000c1a0e:
	mov -2800(%RBP),%RSP
	add $-3048, %RSP
	mov -2792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b2a
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -3128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a2d
	jmp uuid_00000000000c1a2f
uuid_00000000000c1a2d:
	push %RBP
	mov -3120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3224(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a1b
	jmp uuid_00000000000c1a1d
uuid_00000000000c1a1b:
	push %RBP
	mov -3216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3320(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a12
	jmp uuid_00000000000c1a14
uuid_00000000000c1a12:
	push %RBP
	pushq -3296(%RBP)
	pushq -3304(%RBP)
	pushq -3312(%RBP)
	jmp uuid_00000000000c1a0f
	jmp uuid_00000000000c1a11
uuid_00000000000c1a0f:
	movb $1, -3328(%rbp)
uuid_00000000000c1a11:
	mov -3344(%RBP),%RSP
	add $-3368, %RSP
uuid_00000000000c1a14:
	mov -3336(%RBP),%RSP
	add $-3368, %RSP
	mov -3328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a18
	jmp uuid_00000000000c1a1a
uuid_00000000000c1a18:
	push %RBP
	mov -3208(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1a15
	jmp uuid_00000000000c1a17
uuid_00000000000c1a15:
	movb $1, -3232(%rbp)
uuid_00000000000c1a17:
	mov -3376(%RBP),%RSP
	add $-3448, %RSP
uuid_00000000000c1a1a:
	mov -3248(%RBP),%RSP
	add $-3448, %RSP
uuid_00000000000c1a1d:
	mov -3240(%RBP),%RSP
	add $-3448, %RSP
	mov -3232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a2a
	jmp uuid_00000000000c1a2c
uuid_00000000000c1a2a:
	push %RBP
	mov -3112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3528(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a24
	jmp uuid_00000000000c1a26
uuid_00000000000c1a24:
	push %RBP
	jmp uuid_00000000000c1a21
	jmp uuid_00000000000c1a23
uuid_00000000000c1a21:
	push %RBP
	mov -3464(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3568(%rbp)
	pushq $uuid_00000000000be915
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1a1e
	jmp uuid_00000000000c1a20
uuid_00000000000c1a1e:
	movb $1, -3536(%rbp)
uuid_00000000000c1a20:
	mov -3560(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000c1a23:
	mov -3552(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000c1a26:
	mov -3544(%RBP),%RSP
	add $-3568, %RSP
	mov -3536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a27
	jmp uuid_00000000000c1a29
uuid_00000000000c1a27:
	movb $1, -3136(%rbp)
uuid_00000000000c1a29:
	mov -3456(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000c1a2c:
	mov -3152(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000c1a2f:
	mov -3144(%RBP),%RSP
	add $-3568, %RSP
	mov -3136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b27
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -3648(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a51
	jmp uuid_00000000000c1a53
uuid_00000000000c1a51:
	push %RBP
	mov -3640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1a4e
	jmp uuid_00000000000c1a50
uuid_00000000000c1a4e:
	push %RBP
	mov -3632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3824(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a48
	jmp uuid_00000000000c1a4a
uuid_00000000000c1a48:
	push %RBP
	mov -3816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1a45
	jmp uuid_00000000000c1a47
uuid_00000000000c1a45:
	push %RBP
	mov -3808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4000(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a3f
	jmp uuid_00000000000c1a41
uuid_00000000000c1a3f:
	push %RBP
	mov -3992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1a3c
	jmp uuid_00000000000c1a3e
uuid_00000000000c1a3c:
	push %RBP
	mov -3984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4176(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a36
	jmp uuid_00000000000c1a38
uuid_00000000000c1a36:
	push %RBP
	jmp uuid_00000000000c1a33
	jmp uuid_00000000000c1a35
uuid_00000000000c1a33:
	push %RBP
	mov -4112(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4216(%rbp)
	pushq $uuid_00000000000bebb5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1a30
	jmp uuid_00000000000c1a32
uuid_00000000000c1a30:
	movb $1, -4184(%rbp)
uuid_00000000000c1a32:
	mov -4208(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c1a35:
	mov -4200(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c1a38:
	mov -4192(%RBP),%RSP
	add $-4216, %RSP
	mov -4184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a39
	jmp uuid_00000000000c1a3b
uuid_00000000000c1a39:
	movb $1, -4008(%rbp)
uuid_00000000000c1a3b:
	mov -4104(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c1a3e:
	mov -4024(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c1a41:
	mov -4016(%RBP),%RSP
	add $-4216, %RSP
	mov -4008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a42
	jmp uuid_00000000000c1a44
uuid_00000000000c1a42:
	movb $1, -3832(%rbp)
uuid_00000000000c1a44:
	mov -3928(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c1a47:
	mov -3848(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c1a4a:
	mov -3840(%RBP),%RSP
	add $-4216, %RSP
	mov -3832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a4b
	jmp uuid_00000000000c1a4d
uuid_00000000000c1a4b:
	movb $1, -3656(%rbp)
uuid_00000000000c1a4d:
	mov -3752(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c1a50:
	mov -3672(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c1a53:
	mov -3664(%RBP),%RSP
	add $-4216, %RSP
	mov -3656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b24
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -4296(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a79
	jmp uuid_00000000000c1a7b
uuid_00000000000c1a79:
	push %RBP
	mov -4288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1a76
	jmp uuid_00000000000c1a78
uuid_00000000000c1a76:
	push %RBP
	mov -4280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4472(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a70
	jmp uuid_00000000000c1a72
uuid_00000000000c1a70:
	push %RBP
	pushq -4448(%RBP)
	pushq -4456(%RBP)
	pushq -4464(%RBP)
	jmp uuid_00000000000c1a6d
	jmp uuid_00000000000c1a6f
uuid_00000000000c1a6d:
	push %RBP
	mov -4440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4600(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a6a
	jmp uuid_00000000000c1a6c
uuid_00000000000c1a6a:
	push %RBP
	mov -4432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq $0
	push %RBP
	mov -4752(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a64
	jmp uuid_00000000000c1a66
uuid_00000000000c1a64:
	push %RBP
	jmp uuid_00000000000c1a61
	jmp uuid_00000000000c1a63
uuid_00000000000c1a61:
	push %RBP
	mov -4688(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1a5e
	jmp uuid_00000000000c1a60
uuid_00000000000c1a5e:
	movb $1, -4760(%rbp)
uuid_00000000000c1a60:
	mov -4784(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c1a63:
	mov -4776(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c1a66:
	mov -4768(%RBP),%RSP
	add $-4792, %RSP
	mov -4760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a67
	jmp uuid_00000000000c1a69
uuid_00000000000c1a67:
	movb $1, -4480(%rbp)
uuid_00000000000c1a69:
	mov -4608(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c1a6c:
	mov -4528(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c1a6f:
	mov -4496(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c1a72:
	mov -4488(%RBP),%RSP
	add $-4792, %RSP
	mov -4480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a73
	jmp uuid_00000000000c1a75
uuid_00000000000c1a73:
	movb $1, -4304(%rbp)
uuid_00000000000c1a75:
	mov -4400(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c1a78:
	mov -4320(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000c1a7b:
	mov -4312(%RBP),%RSP
	add $-4792, %RSP
	mov -4304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b21
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -4872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1aa1
	jmp uuid_00000000000c1aa3
uuid_00000000000c1aa1:
	push %RBP
	mov -4864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1a9e
	jmp uuid_00000000000c1aa0
uuid_00000000000c1a9e:
	push %RBP
	mov -4856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1a9b
	jmp uuid_00000000000c1a9d
uuid_00000000000c1a9b:
	movb $1, -4880(%rbp)
uuid_00000000000c1a9d:
	mov -4976(%RBP),%RSP
	add $-5048, %RSP
uuid_00000000000c1aa0:
	mov -4896(%RBP),%RSP
	add $-5048, %RSP
uuid_00000000000c1aa3:
	mov -4888(%RBP),%RSP
	add $-5048, %RSP
	mov -4880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b1e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1b1d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1b20
uuid_00000000000c1b1e:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1b1a
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1b17
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -280(%rbp)
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -5184(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov -5152(%RBP), %RAX
	push %RAX
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c1b19
uuid_00000000000c1b17:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -280(%rbp)
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -5184(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov -5152(%RBP), %RAX
	push %RAX
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b19:
	mov -5064(%RBP),%RSP
	add $-5368, %RSP
	jmp uuid_00000000000c1b1c
uuid_00000000000c1b1a:
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -5208(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1aaa
	jmp uuid_00000000000c1aac
uuid_00000000000c1aaa:
	push %RBP
	jmp uuid_00000000000c1aa7
	jmp uuid_00000000000c1aa9
uuid_00000000000c1aa7:
	push %RBP
	mov -5144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1aa4
	jmp uuid_00000000000c1aa6
uuid_00000000000c1aa4:
	movb $1, -5216(%rbp)
uuid_00000000000c1aa6:
	mov -5240(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000c1aa9:
	mov -5232(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000c1aac:
	mov -5224(%RBP),%RSP
	add $-5248, %RSP
	mov -5216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b14
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -5328(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ad4
	jmp uuid_00000000000c1ad6
uuid_00000000000c1ad4:
	push %RBP
	mov -5320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5424(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ac2
	jmp uuid_00000000000c1ac4
uuid_00000000000c1ac2:
	push %RBP
	mov -5416(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5520(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ab0
	jmp uuid_00000000000c1ab2
uuid_00000000000c1ab0:
	push %RBP
	pushq -5496(%RBP)
	pushq -5504(%RBP)
	pushq -5512(%RBP)
	jmp uuid_00000000000c1aad
	jmp uuid_00000000000c1aaf
uuid_00000000000c1aad:
	movb $1, -5528(%rbp)
uuid_00000000000c1aaf:
	mov -5544(%RBP),%RSP
	add $-5568, %RSP
uuid_00000000000c1ab2:
	mov -5536(%RBP),%RSP
	add $-5568, %RSP
	mov -5528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1abf
	jmp uuid_00000000000c1ac1
uuid_00000000000c1abf:
	push %RBP
	mov -5408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5648(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ab9
	jmp uuid_00000000000c1abb
uuid_00000000000c1ab9:
	push %RBP
	jmp uuid_00000000000c1ab6
	jmp uuid_00000000000c1ab8
uuid_00000000000c1ab6:
	push %RBP
	mov -5584(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1ab3
	jmp uuid_00000000000c1ab5
uuid_00000000000c1ab3:
	movb $1, -5656(%rbp)
uuid_00000000000c1ab5:
	mov -5680(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000c1ab8:
	mov -5672(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000c1abb:
	mov -5664(%RBP),%RSP
	add $-5688, %RSP
	mov -5656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1abc
	jmp uuid_00000000000c1abe
uuid_00000000000c1abc:
	movb $1, -5432(%rbp)
uuid_00000000000c1abe:
	mov -5576(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000c1ac1:
	mov -5448(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000c1ac4:
	mov -5440(%RBP),%RSP
	add $-5688, %RSP
	mov -5432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ad1
	jmp uuid_00000000000c1ad3
uuid_00000000000c1ad1:
	push %RBP
	mov -5312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5768(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1acb
	jmp uuid_00000000000c1acd
uuid_00000000000c1acb:
	push %RBP
	jmp uuid_00000000000c1ac8
	jmp uuid_00000000000c1aca
uuid_00000000000c1ac8:
	push %RBP
	mov -5704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5808(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ac5
	jmp uuid_00000000000c1ac7
uuid_00000000000c1ac5:
	movb $1, -5776(%rbp)
uuid_00000000000c1ac7:
	mov -5800(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000c1aca:
	mov -5792(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000c1acd:
	mov -5784(%RBP),%RSP
	add $-5808, %RSP
	mov -5776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ace
	jmp uuid_00000000000c1ad0
uuid_00000000000c1ace:
	movb $1, -5336(%rbp)
uuid_00000000000c1ad0:
	mov -5696(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000c1ad3:
	mov -5352(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000c1ad6:
	mov -5344(%RBP),%RSP
	add $-5808, %RSP
	mov -5336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b11
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -5888(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1add
	jmp uuid_00000000000c1adf
uuid_00000000000c1add:
	push %RBP
	jmp uuid_00000000000c1ada
	jmp uuid_00000000000c1adc
uuid_00000000000c1ada:
	push %RBP
	mov -5824(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1ad7
	jmp uuid_00000000000c1ad9
uuid_00000000000c1ad7:
	movb $1, -5896(%rbp)
uuid_00000000000c1ad9:
	mov -5920(%RBP),%RSP
	add $-5928, %RSP
uuid_00000000000c1adc:
	mov -5912(%RBP),%RSP
	add $-5928, %RSP
uuid_00000000000c1adf:
	mov -5904(%RBP),%RSP
	add $-5928, %RSP
	mov -5896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b0e
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -6008(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b07
	jmp uuid_00000000000c1b09
uuid_00000000000c1b07:
	push %RBP
	mov -6000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6104(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1af5
	jmp uuid_00000000000c1af7
uuid_00000000000c1af5:
	push %RBP
	mov -6096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6200(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ae3
	jmp uuid_00000000000c1ae5
uuid_00000000000c1ae3:
	push %RBP
	pushq -6176(%RBP)
	pushq -6184(%RBP)
	pushq -6192(%RBP)
	jmp uuid_00000000000c1ae0
	jmp uuid_00000000000c1ae2
uuid_00000000000c1ae0:
	movb $1, -6208(%rbp)
uuid_00000000000c1ae2:
	mov -6224(%RBP),%RSP
	add $-6248, %RSP
uuid_00000000000c1ae5:
	mov -6216(%RBP),%RSP
	add $-6248, %RSP
	mov -6208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1af2
	jmp uuid_00000000000c1af4
uuid_00000000000c1af2:
	push %RBP
	mov -6088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6328(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1aec
	jmp uuid_00000000000c1aee
uuid_00000000000c1aec:
	push %RBP
	jmp uuid_00000000000c1ae9
	jmp uuid_00000000000c1aeb
uuid_00000000000c1ae9:
	push %RBP
	mov -6264(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1ae6
	jmp uuid_00000000000c1ae8
uuid_00000000000c1ae6:
	movb $1, -6336(%rbp)
uuid_00000000000c1ae8:
	mov -6360(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000c1aeb:
	mov -6352(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000c1aee:
	mov -6344(%RBP),%RSP
	add $-6368, %RSP
	mov -6336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1aef
	jmp uuid_00000000000c1af1
uuid_00000000000c1aef:
	movb $1, -6112(%rbp)
uuid_00000000000c1af1:
	mov -6256(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000c1af4:
	mov -6128(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000c1af7:
	mov -6120(%RBP),%RSP
	add $-6368, %RSP
	mov -6112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b04
	jmp uuid_00000000000c1b06
uuid_00000000000c1b04:
	push %RBP
	mov -5992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6448(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1afe
	jmp uuid_00000000000c1b00
uuid_00000000000c1afe:
	push %RBP
	jmp uuid_00000000000c1afb
	jmp uuid_00000000000c1afd
uuid_00000000000c1afb:
	push %RBP
	mov -6384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6488(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1af8
	jmp uuid_00000000000c1afa
uuid_00000000000c1af8:
	movb $1, -6456(%rbp)
uuid_00000000000c1afa:
	mov -6480(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000c1afd:
	mov -6472(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000c1b00:
	mov -6464(%RBP),%RSP
	add $-6488, %RSP
	mov -6456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b01
	jmp uuid_00000000000c1b03
uuid_00000000000c1b01:
	movb $1, -6016(%rbp)
uuid_00000000000c1b03:
	mov -6376(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000c1b06:
	mov -6032(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000c1b09:
	mov -6024(%RBP),%RSP
	add $-6488, %RSP
	mov -6016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b0b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1b0a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1b0d
uuid_00000000000c1b0b:
#call function compile-constructor : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -6368(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_constructor_CL_ArrowFragmentConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b0d:
	mov -5936(%RBP),%RSP
	add $-6488, %RSP
	jmp uuid_00000000000c1b10
uuid_00000000000c1b0e:
#call function compile-constructor : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -5928(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_constructor_CL_ArrowFragmentConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b10:
	mov -5816(%RBP),%RSP
	add $-5928, %RSP
	jmp uuid_00000000000c1b13
uuid_00000000000c1b11:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -5688(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b13:
	mov -5256(%RBP),%RSP
	add $-5808, %RSP
	jmp uuid_00000000000c1b16
uuid_00000000000c1b14:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -5248(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b16:
	mov -5136(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000c1b1c:
	mov -5056(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000c1b20:
	mov -4800(%RBP),%RSP
	add $-5248, %RSP
	jmp uuid_00000000000c1b23
uuid_00000000000c1b21:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function compile-push-rvalue : Arrow<Cons<Cons<FContext,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	mov -280(%RBP), %RAX
	mov -4824(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	pushq $0
	pushq $0
	pushq $3
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
#call function fragment::local-variable : Arrow<Cons<I64,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4832(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq $0
	push %RBP
	mov -5008(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a8e
	jmp uuid_00000000000c1a90
uuid_00000000000c1a8e:
	push %RBP
	jmp uuid_00000000000c1a8b
	jmp uuid_00000000000c1a8d
uuid_00000000000c1a8b:
	push %RBP
	mov -4992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5112(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a85
	jmp uuid_00000000000c1a87
uuid_00000000000c1a85:
	push %RBP
	jmp uuid_00000000000c1a82
	jmp uuid_00000000000c1a84
uuid_00000000000c1a82:
	push %RBP
	jmp uuid_00000000000c1a7f
	jmp uuid_00000000000c1a81
uuid_00000000000c1a7f:
	push %RBP
	mov -5072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1a7c
	jmp uuid_00000000000c1a7e
uuid_00000000000c1a7c:
	movb $1, -5120(%rbp)
uuid_00000000000c1a7e:
	mov -5152(%RBP),%RSP
	add $-5224, %RSP
uuid_00000000000c1a81:
	mov -5144(%RBP),%RSP
	add $-5224, %RSP
uuid_00000000000c1a84:
	mov -5136(%RBP),%RSP
	add $-5224, %RSP
uuid_00000000000c1a87:
	mov -5128(%RBP),%RSP
	add $-5224, %RSP
	mov -5120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a88
	jmp uuid_00000000000c1a8a
uuid_00000000000c1a88:
	movb $1, -5016(%rbp)
uuid_00000000000c1a8a:
	mov -5040(%RBP),%RSP
	add $-5224, %RSP
uuid_00000000000c1a8d:
	mov -5032(%RBP),%RSP
	add $-5224, %RSP
uuid_00000000000c1a90:
	mov -5024(%RBP),%RSP
	add $-5224, %RSP
	mov -5016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a95
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1a94
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1a97
uuid_00000000000c1a95:
#call function fragment-context::lookup-soft : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000becfd
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	pushq -5320(%RBP)
	pushq -5328(%RBP)
	pushq -5336(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5384(%rbp)
	pushq -5392(%rbp)
	pushq -5400(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1a91
	jmp uuid_00000000000c1a93
uuid_00000000000c1a91:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000becfd
	pushq $0
	pushq $0
	pushq $3
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	pushq -5440(%rbp)
	pushq -5448(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq $uuid_00000000000bf2fb
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -4856(%RBP)
	popq -4848(%RBP)
	popq -4840(%RBP)
uuid_00000000000c1a93:
	mov -5408(%RBP),%RSP
	add $-5560, %RSP
uuid_00000000000c1a97:
	mov -4936(%RBP),%RSP
	add $-5560, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000becfd
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c1a98
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000c1a98
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c1a99
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4824(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c1a9a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -4832(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b23:
	mov -4224(%RBP),%RSP
	add $-5560, %RSP
	jmp uuid_00000000000c1b26
uuid_00000000000c1b24:
	mov -280(%RBP), %RAX
	mov $-8, %R14
	addq %R14,%RAX
	push %RAX
#call function cc-blob : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c1a54
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4224(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4344(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov -4312(%RBP), %RAX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	mov -4464(%RBP), %RAX
	push %RAX
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4496(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4464(%RBP), %RAX
	push %RAX
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -4528(%RBP)
	popq -4520(%RBP)
	popq -4512(%RBP)
	popq -4504(%RBP)
	popq -4496(%RBP)
	popq -4488(%RBP)
	popq -4480(%RBP)
	popq -4472(%RBP)
	popq -4464(%RBP)
	popq -4456(%RBP)
	popq -4448(%RBP)
	popq -4440(%RBP)
	popq -4432(%RBP)
	popq -4424(%RBP)
	popq -4416(%RBP)
	popq -4408(%RBP)
	popq -4400(%RBP)
	popq -4392(%RBP)
	popq -4384(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4528(%RBP)
	popq -4520(%RBP)
	popq -4512(%RBP)
	popq -4504(%RBP)
	popq -4496(%RBP)
	popq -4488(%RBP)
	popq -4480(%RBP)
	popq -4472(%RBP)
	popq -4464(%RBP)
	popq -4456(%RBP)
	popq -4448(%RBP)
	popq -4440(%RBP)
	popq -4432(%RBP)
	popq -4424(%RBP)
	popq -4416(%RBP)
	popq -4408(%RBP)
	popq -4400(%RBP)
	popq -4392(%RBP)
	popq -4384(%RBP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4344(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov -4312(%RBP), %RAX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4656(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4624(%RBP), %RAX
	push %RAX
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -4688(%RBP)
	popq -4680(%RBP)
	popq -4672(%RBP)
	popq -4664(%RBP)
	popq -4656(%RBP)
	popq -4648(%RBP)
	popq -4640(%RBP)
	popq -4632(%RBP)
	popq -4624(%RBP)
	popq -4616(%RBP)
	popq -4608(%RBP)
	popq -4600(%RBP)
	popq -4592(%RBP)
	popq -4584(%RBP)
	popq -4576(%RBP)
	popq -4568(%RBP)
	popq -4560(%RBP)
	popq -4552(%RBP)
	popq -4544(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4688(%RBP)
	popq -4680(%RBP)
	popq -4672(%RBP)
	popq -4664(%RBP)
	popq -4656(%RBP)
	popq -4648(%RBP)
	popq -4640(%RBP)
	popq -4632(%RBP)
	popq -4624(%RBP)
	popq -4616(%RBP)
	popq -4608(%RBP)
	popq -4600(%RBP)
	popq -4592(%RBP)
	popq -4584(%RBP)
	popq -4576(%RBP)
	popq -4568(%RBP)
	popq -4560(%RBP)
	popq -4552(%RBP)
	popq -4544(%RBP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4696(%rbp)
	pushq -4704(%rbp)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq $uuid_00000000000c1a55
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4224(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
	popq -4712(%RBP)
	popq -4704(%RBP)
	popq -4696(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4696(%rbp)
	pushq -4704(%rbp)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq $uuid_00000000000c1a56
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4536(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
	popq -4712(%RBP)
	popq -4704(%RBP)
	popq -4696(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4696(%rbp)
	pushq -4704(%rbp)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq $uuid_00000000000c1a57
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
	popq -4712(%RBP)
	popq -4704(%RBP)
	popq -4696(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4696(%rbp)
	pushq -4704(%rbp)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1a58
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
	popq -4712(%RBP)
	popq -4704(%RBP)
	popq -4696(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c1a59
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1a58
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -4696(%rbp)
	pushq -4704(%rbp)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000be75e
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1021
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -4232(%rbp)
	pushq -4240(%rbp)
	pushq -4248(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -4312(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c168c
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000be761
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beafa
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beafa
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beafa
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1a58
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1021
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c1a5a
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -280(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov -4496(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -4536(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	push %RBP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1a5b
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c1a5d
uuid_00000000000c1a5b:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000becb0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1a5d:
	mov -4872(%RBP),%RSP
	add $-4872, %RSP
uuid_00000000000c1b26:
	mov -3576(%RBP),%RSP
	add $-4872, %RSP
	jmp uuid_00000000000c1b29
uuid_00000000000c1b27:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -3384(%rbp)
	pushq -3392(%rbp)
	pushq -3400(%rbp)
	pushq -3408(%rbp)
	pushq -3416(%rbp)
	pushq -3424(%rbp)
	pushq -3432(%rbp)
	pushq -3440(%rbp)
	pushq -3448(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b29:
	mov -3056(%RBP),%RSP
	add $-3568, %RSP
	jmp uuid_00000000000c1b2c
uuid_00000000000c1b2a:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3056(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bfcb2
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bf13a
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec44
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed3a
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be75a
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -3064(%rbp)
	pushq -3072(%rbp)
	pushq -3080(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b2c:
	mov -2712(%RBP),%RSP
	add $-3080, %RSP
	jmp uuid_00000000000c1b2f
uuid_00000000000c1b2d:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq $uuid_00000000000bec78
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq $0
	push %RBP
	mov -2784(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19cf
	jmp uuid_00000000000c19d1
uuid_00000000000c19cf:
	push %RBP
	mov -2776(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2848(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19c6
	jmp uuid_00000000000c19c8
uuid_00000000000c19c6:
	push %RBP
	mov -2840(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2912(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19bd
	jmp uuid_00000000000c19bf
uuid_00000000000c19bd:
	push %RBP
	mov -2904(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2976(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19ba
	jmp uuid_00000000000c19bc
uuid_00000000000c19ba:
	push %RBP
	pushq -2880(%RBP)
	pushq -2888(%RBP)
	pushq -2896(%RBP)
	mov -3008(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19b7
	jmp uuid_00000000000c19b9
uuid_00000000000c19b7:
	movb $1, -2920(%rbp)
uuid_00000000000c19b9:
	mov -2984(%RBP),%RSP
	add $-3008, %RSP
uuid_00000000000c19bc:
	mov -2936(%RBP),%RSP
	add $-3008, %RSP
uuid_00000000000c19bf:
	mov -2928(%RBP),%RSP
	add $-3008, %RSP
	mov -2920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c19c3
	jmp uuid_00000000000c19c5
uuid_00000000000c19c3:
	push %RBP
	jmp uuid_00000000000c19c0
	jmp uuid_00000000000c19c2
uuid_00000000000c19c0:
	movb $1, -2856(%rbp)
uuid_00000000000c19c2:
	mov -3016(%RBP),%RSP
	add $-3016, %RSP
uuid_00000000000c19c5:
	mov -2872(%RBP),%RSP
	add $-3016, %RSP
uuid_00000000000c19c8:
	mov -2864(%RBP),%RSP
	add $-3016, %RSP
	mov -2856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c19cc
	jmp uuid_00000000000c19ce
uuid_00000000000c19cc:
	push %RBP
	mov -2768(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3032(%rbp)
	pushq $uuid_00000000000bec78
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c19c9
	jmp uuid_00000000000c19cb
uuid_00000000000c19c9:
	movb $1, -2792(%rbp)
uuid_00000000000c19cb:
	mov -3024(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000c19ce:
	mov -2808(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000c19d1:
	mov -2800(%RBP),%RSP
	add $-3032, %RSP
	mov -2792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c19f4
	push %RBP
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq $0
	push %RBP
	mov -3064(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19ea
	jmp uuid_00000000000c19ec
uuid_00000000000c19ea:
	push %RBP
	mov -3056(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3128(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19e1
	jmp uuid_00000000000c19e3
uuid_00000000000c19e1:
	push %RBP
	mov -3120(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19d8
	jmp uuid_00000000000c19da
uuid_00000000000c19d8:
	push %RBP
	mov -3184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19d5
	jmp uuid_00000000000c19d7
uuid_00000000000c19d5:
	push %RBP
	pushq -3160(%RBP)
	pushq -3168(%RBP)
	pushq -3176(%RBP)
	jmp uuid_00000000000c19d2
	jmp uuid_00000000000c19d4
uuid_00000000000c19d2:
	movb $1, -3200(%rbp)
uuid_00000000000c19d4:
	mov -3264(%RBP),%RSP
	add $-3288, %RSP
uuid_00000000000c19d7:
	mov -3216(%RBP),%RSP
	add $-3288, %RSP
uuid_00000000000c19da:
	mov -3208(%RBP),%RSP
	add $-3288, %RSP
	mov -3200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c19de
	jmp uuid_00000000000c19e0
uuid_00000000000c19de:
	push %RBP
	pushq -3096(%RBP)
	pushq -3104(%RBP)
	pushq -3112(%RBP)
	mov -3320(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c19db
	jmp uuid_00000000000c19dd
uuid_00000000000c19db:
	movb $1, -3136(%rbp)
uuid_00000000000c19dd:
	mov -3296(%RBP),%RSP
	add $-3320, %RSP
uuid_00000000000c19e0:
	mov -3152(%RBP),%RSP
	add $-3320, %RSP
uuid_00000000000c19e3:
	mov -3144(%RBP),%RSP
	add $-3320, %RSP
	mov -3136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c19e7
	jmp uuid_00000000000c19e9
uuid_00000000000c19e7:
	push %RBP
	mov -3048(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3336(%rbp)
	pushq $uuid_00000000000bec78
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c19e4
	jmp uuid_00000000000c19e6
uuid_00000000000c19e4:
	movb $1, -3072(%rbp)
uuid_00000000000c19e6:
	mov -3328(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000c19e9:
	mov -3088(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000c19ec:
	mov -3080(%RBP),%RSP
	add $-3336, %RSP
	mov -3072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c19f1
	push %RBP
	jmp uuid_00000000000c19ee
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c19ed
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c19f0
uuid_00000000000c19ee:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c19f0:
	mov -3344(%RBP),%RSP
	add $-3344, %RSP
	jmp uuid_00000000000c19f3
uuid_00000000000c19f1:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000becaf
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3272(%rbp)
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000becb0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3272(%rbp)
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -280(%RBP), %RAX
	subq %R14,%RAX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -3344(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c19f3:
	mov -3040(%RBP),%RSP
	add $-3344, %RSP
	jmp uuid_00000000000c19f6
uuid_00000000000c19f4:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c19f6:
	mov -2760(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000c1b2f:
	mov -2416(%RBP),%RSP
	add $-3032, %RSP
	jmp uuid_00000000000c1b32
uuid_00000000000c1b30:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -280(%rbp)
	pushq $2
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b32:
	mov -2120(%RBP),%RSP
	add $-2408, %RSP
	jmp uuid_00000000000c1b35
uuid_00000000000c1b33:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1992(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb98
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq $uuid_00000000000c0b38
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be929
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000bf2fb
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b35:
	mov -1784(%RBP),%RSP
	add $-2288, %RSP
	jmp uuid_00000000000c1b38
uuid_00000000000c1b36:
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1656(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb98
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function fragment::label : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_label_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b38:
	mov -1448(%RBP),%RSP
	add $-1776, %RSP
	jmp uuid_00000000000c1b3b
uuid_00000000000c1b39:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b3b:
	mov -928(%RBP),%RSP
	add $-1440, %RSP
	jmp uuid_00000000000c1b3e
uuid_00000000000c1b3c:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1939
	pushq $0
	push %RBP
#call function is-reg8 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c18f5
	jmp uuid_00000000000c18f7
uuid_00000000000c18f5:
	movb $1, -960(%rbp)
uuid_00000000000c18f7:
	mov -968(%RBP),%RSP
	add $-968, %RSP
	push %RBP
#call function is-reg16 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c18f8
	jmp uuid_00000000000c18fa
uuid_00000000000c18f8:
	movb $1, -960(%rbp)
uuid_00000000000c18fa:
	mov -976(%RBP),%RSP
	add $-976, %RSP
	push %RBP
#call function is-reg32 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c18fb
	jmp uuid_00000000000c18fd
uuid_00000000000c18fb:
	movb $1, -960(%rbp)
uuid_00000000000c18fd:
	mov -984(%RBP),%RSP
	add $-984, %RSP
	push %RBP
#call function is-reg64 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c18fe
	jmp uuid_00000000000c1900
uuid_00000000000c18fe:
	movb $1, -960(%rbp)
uuid_00000000000c1900:
	mov -992(%RBP),%RSP
	add $-992, %RSP
	push %RBP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1936
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function class-of-tag : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call class_SB_of_SB_tag_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1933
	pushq -920(%rbp)
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq $uuid_00000000000c1901
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1930
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq $uuid_00000000000c1902
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c192d
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq $uuid_00000000000c1903
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c192a
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq $uuid_00000000000be8dc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1927
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq $uuid_00000000000c1905
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1924
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq $uuid_00000000000c1907
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1921
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1128(%rbp)
	pushq $uuid_00000000000c1909
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c191e
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq $uuid_00000000000c190b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c191b
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq $uuid_00000000000c190d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1918
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq $uuid_00000000000c190f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1915
	push %RBP
	jmp uuid_00000000000c1912
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1911
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1914
uuid_00000000000c1912:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1914:
	mov -1184(%RBP),%RSP
	add $-1184, %RSP
	jmp uuid_00000000000c1917
uuid_00000000000c1915:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1910
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1917:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
	jmp uuid_00000000000c191a
uuid_00000000000c1918:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c190e
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c191a:
	mov -1152(%RBP),%RSP
	add $-1160, %RSP
	jmp uuid_00000000000c191d
uuid_00000000000c191b:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c190c
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c191d:
	mov -1136(%RBP),%RSP
	add $-1144, %RSP
	jmp uuid_00000000000c1920
uuid_00000000000c191e:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c190a
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1920:
	mov -1120(%RBP),%RSP
	add $-1128, %RSP
	jmp uuid_00000000000c1923
uuid_00000000000c1921:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1908
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1923:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000c1926
uuid_00000000000c1924:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1906
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1926:
	mov -1088(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000c1929
uuid_00000000000c1927:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1904
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1929:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000c192c
uuid_00000000000c192a:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be75b
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c192c:
	mov -1056(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000c192f
uuid_00000000000c192d:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be71a
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c192f:
	mov -1040(%RBP),%RSP
	add $-1048, %RSP
	jmp uuid_00000000000c1932
uuid_00000000000c1930:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be753
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1932:
	mov -1024(%RBP),%RSP
	add $-1032, %RSP
	jmp uuid_00000000000c1935
uuid_00000000000c1933:
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000bf2fb
#call function close : Arrow<S+CaseNumber<3>,Array<S+CaseNumber<3>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SCaseNumber3SCaseNumber3
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S+CaseNumber<3>,Array<S+CaseNumber<3>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SCaseNumber3SCaseNumber3
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1935:
	mov -1008(%RBP),%RSP
	add $-1016, %RSP
	jmp uuid_00000000000c1938
uuid_00000000000c1936:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1938:
	mov -1000(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000c193b
uuid_00000000000c1939:
#call function compile-declare-cstring : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call compile_SB_declare_SB_cstring_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c193b:
	mov -952(%RBP),%RSP
	add $-952, %RSP
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b3e:
	mov -808(%RBP),%RSP
	add $-952, %RSP
	jmp uuid_00000000000c1b41
uuid_00000000000c1b3f:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -800(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b41:
	mov -688(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000c1b44
uuid_00000000000c1b42:
uuid_00000000000c1b44:
	mov -608(%RBP),%RSP
	add $-680, %RSP
	jmp uuid_00000000000c1b47
uuid_00000000000c1b45:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b47:
	mov -528(%RBP),%RSP
	add $-600, %RSP
	subq $152, %rsp
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -288(%rbp)
	push %RBP
	pushq -456(%rbp)
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b4c
	push %RBP
	jmp uuid_00000000000c1b49
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1b48
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1b4b
uuid_00000000000c1b49:
#call function compile-expr-direct : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_expr_SB_direct_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b4b:
	mov -480(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000c1b4e
uuid_00000000000c1b4c:
#call function compile-stack-call : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000bed7c
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1b4e:
	mov -464(%RBP),%RSP
	add $-472, %RSP
	subq $152, %rsp
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
compile_SB_fragment_SB_args_CL_ArrowFragmentListConsI64ConsASTConsTypeFContext:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b67
	jmp uuid_00000000000c1b69
uuid_00000000000c1b67:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b5e
	jmp uuid_00000000000c1b60
uuid_00000000000c1b5e:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b55
	jmp uuid_00000000000c1b57
uuid_00000000000c1b55:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b52
	jmp uuid_00000000000c1b54
uuid_00000000000c1b52:
	push %RBP
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	jmp uuid_00000000000c1b4f
	jmp uuid_00000000000c1b51
uuid_00000000000c1b4f:
	movb $1, -672(%rbp)
uuid_00000000000c1b51:
	mov -736(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c1b54:
	mov -688(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c1b57:
	mov -680(%RBP),%RSP
	add $-760, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b5b
	jmp uuid_00000000000c1b5d
uuid_00000000000c1b5b:
	push %RBP
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	jmp uuid_00000000000c1b58
	jmp uuid_00000000000c1b5a
uuid_00000000000c1b58:
	movb $1, -608(%rbp)
uuid_00000000000c1b5a:
	mov -768(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c1b5d:
	mov -624(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c1b60:
	mov -616(%RBP),%RSP
	add $-792, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b64
	jmp uuid_00000000000c1b66
uuid_00000000000c1b64:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1b61
	jmp uuid_00000000000c1b63
uuid_00000000000c1b61:
	movb $1, -544(%rbp)
uuid_00000000000c1b63:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c1b66:
	mov -560(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c1b69:
	mov -552(%RBP),%RSP
	add $-808, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b87
	push %RBP
	jmp uuid_00000000000c1b84
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1b83
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1b86
uuid_00000000000c1b84:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1b80
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -968(%RBP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	jmp uuid_00000000000c1b82
uuid_00000000000c1b80:
uuid_00000000000c1b82:
	mov -976(%RBP),%RSP
	add $-976, %RSP
#call function close : Arrow<FragmentList+CaseNumber<1>,Array<FragmentList+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentListCaseNumber1FragmentListCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq $0
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
uuid_00000000000c1b86:
	mov -816(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000c1b89
uuid_00000000000c1b87:
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	push %RBP
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b70
	jmp uuid_00000000000c1b72
uuid_00000000000c1b70:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1b6d
	jmp uuid_00000000000c1b6f
uuid_00000000000c1b6d:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1b6a
	jmp uuid_00000000000c1b6c
uuid_00000000000c1b6a:
	movb $1, -968(%rbp)
uuid_00000000000c1b6c:
	mov -1064(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c1b6f:
	mov -984(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000c1b72:
	mov -976(%RBP),%RSP
	add $-1136, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b7d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1b7c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1b7f
uuid_00000000000c1b7d:
#call function compile-fragment-args : Arrow<Cons<Cons<Cons<FContext,Type>,AST>,I64>,FragmentList+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function cons-head : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call cons_SB_head_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call compile_SB_fragment_SB_args_CL_ArrowFragmentListConsI64ConsASTConsTypeFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Cons<Type,String>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons-head : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call cons_SB_head_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $uuid_00000000000bf361
	pushq $uuid_00000000000c0fc3
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1b73
	jmp uuid_00000000000c1b75
uuid_00000000000c1b73:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons-head : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call cons_SB_head_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -304(%RBP), %RAX
	subq %R14,%RAX
	movq %RAX, -304(%rbp)
uuid_00000000000c1b75:
	mov -1312(%RBP),%RSP
	add $-1312, %RSP
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Cons<Type,String>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons-tail : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons-head : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call cons_SB_head_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call cons_SB_tail_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $uuid_00000000000bf361
	pushq $uuid_00000000000c0fc3
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1b76
	jmp uuid_00000000000c1b78
uuid_00000000000c1b76:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons-tail : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons-head : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call cons_SB_head_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call cons_SB_tail_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -304(%RBP), %RAX
	subq %R14,%RAX
	movq %RAX, -304(%rbp)
uuid_00000000000c1b78:
	mov -1320(%RBP),%RSP
	add $-1320, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -304(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1b79
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1472(%RBP)
	popq -1464(%RBP)
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
	popq -1416(%RBP)
	popq -1408(%RBP)
	popq -1400(%RBP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	jmp uuid_00000000000c1b7b
uuid_00000000000c1b79:
uuid_00000000000c1b7b:
	mov -1480(%RBP),%RSP
	add $-1480, %RSP
#call function close : Arrow<FragmentList,Array<FragmentList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentListFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq $0
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
uuid_00000000000c1b7f:
	mov -888(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c1b89:
	mov -512(%RBP),%RSP
	add $-1480, %RSP
	subq $168, %rsp
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
compile_SB_global_CL_ArrowNilConsASTConsStringFContext:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b93
	jmp uuid_00000000000c1b95
uuid_00000000000c1b93:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c1b90
	jmp uuid_00000000000c1b92
uuid_00000000000c1b90:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1b8d
	jmp uuid_00000000000c1b8f
uuid_00000000000c1b8d:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1b8a
	jmp uuid_00000000000c1b8c
uuid_00000000000c1b8a:
	movb $1, -472(%rbp)
uuid_00000000000c1b8c:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c1b8f:
	mov -520(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c1b92:
	mov -488(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c1b95:
	mov -480(%RBP),%RSP
	add $-672, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bdb
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bd3
	jmp uuid_00000000000c1bd5
uuid_00000000000c1bd3:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bc1
	jmp uuid_00000000000c1bc3
uuid_00000000000c1bc1:
	push %RBP
	mov -840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bb8
	jmp uuid_00000000000c1bba
uuid_00000000000c1bb8:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000c1bb5
	jmp uuid_00000000000c1bb7
uuid_00000000000c1bb5:
	movb $1, -952(%rbp)
uuid_00000000000c1bb7:
	mov -968(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c1bba:
	mov -960(%RBP),%RSP
	add $-992, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bbe
	jmp uuid_00000000000c1bc0
uuid_00000000000c1bbe:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1bbb
	jmp uuid_00000000000c1bbd
uuid_00000000000c1bbb:
	movb $1, -856(%rbp)
uuid_00000000000c1bbd:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c1bc0:
	mov -872(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c1bc3:
	mov -864(%RBP),%RSP
	add $-1072, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bd0
	jmp uuid_00000000000c1bd2
uuid_00000000000c1bd0:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bca
	jmp uuid_00000000000c1bcc
uuid_00000000000c1bca:
	push %RBP
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	jmp uuid_00000000000c1bc7
	jmp uuid_00000000000c1bc9
uuid_00000000000c1bc7:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1bc4
	jmp uuid_00000000000c1bc6
uuid_00000000000c1bc4:
	movb $1, -1160(%rbp)
uuid_00000000000c1bc6:
	mov -1240(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c1bc9:
	mov -1176(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c1bcc:
	mov -1168(%RBP),%RSP
	add $-1248, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bcd
	jmp uuid_00000000000c1bcf
uuid_00000000000c1bcd:
	movb $1, -760(%rbp)
uuid_00000000000c1bcf:
	mov -1080(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c1bd2:
	mov -776(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000c1bd5:
	mov -768(%RBP),%RSP
	add $-1248, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bd8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1bd7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1bda
uuid_00000000000c1bd8:
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -1280(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c1bd6
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be6ec
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	pushq -208(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq $7
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beafa
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beaf8
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000beaf9
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beadc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq $-8
	pushq $4
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_init_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq $uuid_00000000000bf2fb
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_init_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
uuid_00000000000c1bda:
	mov -680(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000c1bdd
uuid_00000000000c1bdb:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $uuid_00000000000c022b
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bb2
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function compile-destructure-args : Arrow<Cons<Cons<Cons<Type,FContext>,AST>,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq $0
	mov %RBX, %RBP
	call compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $uuid_00000000000c1b96
	pushq $0
	pushq $0
	pushq $3
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq $0
	mov -720(%RBP), %RAX
	mov $8, %R14
	subq %R14,%RAX
	movq %RAX, -720(%rbp)
	mov -720(%RBP), %RAX
	mov -712(%RBP), %R14
	subq %R14,%RAX
	movq %RAX, -720(%rbp)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -720(%rbp)
	pushq $1
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq $0
	pushq $0
	pushq $3
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c0b67
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1b9e
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	jmp uuid_00000000000c1ba0
uuid_00000000000c1b9e:
	mov $main_SB_with_CL_U8, %r15
	movb $1, 0(%r15)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	push %RBP
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov -1056(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1b9b
	push %RBP
	jmp uuid_00000000000c1b98
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1b97
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1b9a
uuid_00000000000c1b98:
	mov $main_SB_with_SB_argv_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c1b9a:
	mov -1064(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000c1b9d
uuid_00000000000c1b9b:
uuid_00000000000c1b9d:
	mov -984(%RBP),%RSP
	add $-1056, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0b67
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
uuid_00000000000c1ba0:
	mov -904(%RBP),%RSP
	add $-1056, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000be929
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	push %RBP
	mov $config_SB_profile_SB_invocations_CL_U8, %RAX
	mov 0(%RAX), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bac
	jmp uuid_00000000000c1bae
uuid_00000000000c1bac:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	pushq $0
	pushq $uuid_00000000000c1ba1
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c1ba2
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c1ba3
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c1ba4
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $assemble_SB_data_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c1ba5
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c1ba6
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000c1ba7
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_profile_SB_onexit_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c1ba5
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c1ba6
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000c1ba8
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c1ba9
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000c1baa
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000c1bab
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $assemble_SB_profile_SB_onexit_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
uuid_00000000000c1bae:
	mov -1064(%RBP),%RSP
	add $-1088, %RSP
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $uuid_00000000000c1baf
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $uuid_00000000000bf2fb
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c0a89
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c1bb0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -712(%RBP), %RAX
	mov $8, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c1a9a
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c1bb1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SSCaseNumber3, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_text_SB_section_CL_SSCaseNumber3, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	jmp uuid_00000000000c1bb4
uuid_00000000000c1bb2:
uuid_00000000000c1bb4:
	mov -680(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000c1bdd:
	mov -392(%RBP),%RSP
	add $-680, %RSP
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext:
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1bde
	movq -384(%rbp), %r15
	movq %r15, -488(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -472(%rbp)
	jmp uuid_00000000000c1be0
uuid_00000000000c1bde:
uuid_00000000000c1be0:
	mov -496(%RBP),%RSP
	add $-496, %RSP
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq $uuid_00000000000becb0
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1be7
	jmp uuid_00000000000c1be9
uuid_00000000000c1be7:
	push %RBP
	jmp uuid_00000000000c1be4
	jmp uuid_00000000000c1be6
uuid_00000000000c1be4:
	push %RBP
	mov -536(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000becb0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1be1
	jmp uuid_00000000000c1be3
uuid_00000000000c1be1:
	movb $1, -560(%rbp)
uuid_00000000000c1be3:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c1be6:
	mov -576(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c1be9:
	mov -568(%RBP),%RSP
	add $-592, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bee
	push %RBP
	jmp uuid_00000000000c1beb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1bea
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1bed
uuid_00000000000c1beb:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq $uuid_00000000000c185a
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq $uuid_00000000000bed3c
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -208(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000becb0
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov -208(%RBP), %RAX
	mov -808(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
uuid_00000000000c1bed:
	mov -600(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000c1bf0
uuid_00000000000c1bee:
uuid_00000000000c1bf0:
	mov -528(%RBP),%RSP
	add $-592, %RSP
	subq $152, %rsp
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $464, %rsp
	ret
compile_SB_push_SB_rvalue_CL_ArrowFragmentConsI64ConsASTFContext:
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq $0
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq $0
	push %RBP
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c09
	jmp uuid_00000000000c1c0b
uuid_00000000000c1c09:
	push %RBP
	mov -496(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c00
	jmp uuid_00000000000c1c02
uuid_00000000000c1c00:
	push %RBP
	mov -560(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bf7
	jmp uuid_00000000000c1bf9
uuid_00000000000c1bf7:
	push %RBP
	mov -624(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bf4
	jmp uuid_00000000000c1bf6
uuid_00000000000c1bf4:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	jmp uuid_00000000000c1bf1
	jmp uuid_00000000000c1bf3
uuid_00000000000c1bf1:
	movb $1, -640(%rbp)
uuid_00000000000c1bf3:
	mov -704(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c1bf6:
	mov -656(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c1bf9:
	mov -648(%RBP),%RSP
	add $-728, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1bfd
	jmp uuid_00000000000c1bff
uuid_00000000000c1bfd:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000c1bfa
	jmp uuid_00000000000c1bfc
uuid_00000000000c1bfa:
	movb $1, -576(%rbp)
uuid_00000000000c1bfc:
	mov -736(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c1bff:
	mov -592(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c1c02:
	mov -584(%RBP),%RSP
	add $-760, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c06
	jmp uuid_00000000000c1c08
uuid_00000000000c1c06:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq $uuid_00000000000beafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1c03
	jmp uuid_00000000000c1c05
uuid_00000000000c1c03:
	movb $1, -512(%rbp)
uuid_00000000000c1c05:
	mov -768(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c1c08:
	mov -528(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000c1c0b:
	mov -520(%RBP),%RSP
	add $-776, %RSP
	mov -512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c2c
	push %RBP
	jmp uuid_00000000000c1c29
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1c28
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1c2b
uuid_00000000000c1c29:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -792(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c25
	push %RBP
	mov -288(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c22
	jmp uuid_00000000000c1c24
uuid_00000000000c1c22:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq $uuid_00000000000bed29
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1c1f
	jmp uuid_00000000000c1c21
uuid_00000000000c1c1f:
	pushq $uuid_00000000000bed2a
#call function token::new : Arrow<String,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed2a
	mov %RBX, %RBP
	call token_CL__CL_new_CL_ArrowTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $7
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed7b
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1c21:
	mov -840(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c1c24:
	mov -808(%RBP),%RSP
	add $-912, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -384(%RBP), %RAX
	push %RAX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov -280(%RBP), %RAX
	mov -792(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c1c27
uuid_00000000000c1c25:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000bf2fb
#call function close : Arrow<S+CaseNumber<3>,Array<S+CaseNumber<3>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SCaseNumber3SCaseNumber3
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S+CaseNumber<3>,Array<S+CaseNumber<3>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SCaseNumber3SCaseNumber3
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1c27:
	mov -800(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c1c2b:
	mov -784(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000c1c2e
uuid_00000000000c1c2c:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq $0
	push %RBP
	mov -928(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c12
	jmp uuid_00000000000c1c14
uuid_00000000000c1c12:
	push %RBP
	mov -920(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1c0f
	jmp uuid_00000000000c1c11
uuid_00000000000c1c0f:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1c0c
	jmp uuid_00000000000c1c0e
uuid_00000000000c1c0c:
	movb $1, -936(%rbp)
uuid_00000000000c1c0e:
	mov -1032(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c1c11:
	mov -952(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000c1c14:
	mov -944(%RBP),%RSP
	add $-1104, %RSP
	mov -936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c1c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1c1b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1c1e
uuid_00000000000c1c1c:
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
	mov -288(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c18
	jmp uuid_00000000000c1c1a
uuid_00000000000c1c18:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq $uuid_00000000000bed29
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1c15
	jmp uuid_00000000000c1c17
uuid_00000000000c1c15:
	pushq $uuid_00000000000bed2a
#call function token::new : Arrow<String,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed2a
	mov %RBX, %RBP
	call token_CL__CL_new_CL_ArrowTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $7
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bed7b
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -1024(%RBP)
	popq -1016(%RBP)
	popq -1008(%RBP)
	popq -1000(%RBP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	popq -960(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c1c17:
	mov -1296(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000c1c1a:
	mov -1264(%RBP),%RSP
	add $-1368, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov -1192(%RBP), %RAX
	push %RAX
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -1456(%RBP), %RAX
	push %RAX
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -1520(%RBP)
	popq -1512(%RBP)
	popq -1504(%RBP)
	popq -1496(%RBP)
	popq -1488(%RBP)
	popq -1480(%RBP)
	popq -1472(%RBP)
	popq -1464(%RBP)
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
	popq -1416(%RBP)
	popq -1408(%RBP)
	popq -1400(%RBP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	mov -280(%RBP), %RAX
	mov -1528(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -1520(%RBP)
	popq -1512(%RBP)
	popq -1504(%RBP)
	popq -1496(%RBP)
	popq -1488(%RBP)
	popq -1480(%RBP)
	popq -1472(%RBP)
	popq -1464(%RBP)
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
	popq -1416(%RBP)
	popq -1408(%RBP)
	popq -1400(%RBP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1c1e:
	mov -856(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c1c2e:
	mov -480(%RBP),%RSP
	add $-1528, %RSP
	subq $152, %rsp
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
compile_SB_stack_SB_call_SB_push_SB_args_CL_ArrowFragmentConsI64ConsASTFContext:
#call function compile-push-rvalue : Arrow<Cons<Cons<FContext,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	subq $152, %rsp
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringConsFragmentFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq $uuid_00000000000c022b
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1c43
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $2
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1c2f
	jmp uuid_00000000000c1c31
uuid_00000000000c1c2f:
	pushq $4
	popq -472(%RBP)
uuid_00000000000c1c31:
	mov -872(%RBP),%RSP
	add $-872, %RSP
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1c32
	jmp uuid_00000000000c1c34
uuid_00000000000c1c32:
	pushq $4
	popq -472(%RBP)
uuid_00000000000c1c34:
	mov -880(%RBP),%RSP
	add $-880, %RSP
#call function compile-stack-call-push-args : Arrow<Cons<Cons<FContext,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_call_SB_push_SB_args_CL_ArrowFragmentConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1c35
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1032(%RBP)
	popq -1024(%RBP)
	popq -1016(%RBP)
	popq -1008(%RBP)
	popq -1000(%RBP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	pushq $0
	pushq $0
	pushq $3
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $uuid_00000000000c1c36
	pushq $0
	pushq -1064(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $uuid_00000000000c1c37
	pushq $0
	pushq -360(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $uuid_00000000000c1c38
	pushq $0
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $uuid_00000000000c1c36
	pushq $0
	pushq -1064(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $uuid_00000000000c1a57
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $uuid_00000000000c1c39
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $uuid_00000000000c1c3a
	pushq $0
#call function to-string : Arrow<IsUsed,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringIsUsed
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1a58
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c1a59
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1a58
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c1c3b
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c1c3c
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beafa
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1a58
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq -464(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	push %RBP
	mov -1072(%RBP), %RAX
	mov $8, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c40
	jmp uuid_00000000000c1c42
uuid_00000000000c1c40:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $4
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1c3d
	jmp uuid_00000000000c1c3f
uuid_00000000000c1c3d:
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov -464(%RBP), %RAX
	mov -1072(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
uuid_00000000000c1c3f:
	mov -1264(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c1c42:
	mov -1256(%RBP),%RSP
	add $-1264, %RSP
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	jmp uuid_00000000000c1c45
uuid_00000000000c1c43:
#call function cc-blob : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -360(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
uuid_00000000000c1c45:
	mov -864(%RBP),%RSP
	add $-864, %RSP
	subq $152, %rsp
	pushq -856(%rbp)
	pushq -848(%rbp)
	pushq -840(%rbp)
	pushq -832(%rbp)
	pushq -824(%rbp)
	pushq -816(%rbp)
	pushq -808(%rbp)
	pushq -800(%rbp)
	pushq -792(%rbp)
	pushq -784(%rbp)
	pushq -776(%rbp)
	pushq -768(%rbp)
	pushq -760(%rbp)
	pushq -752(%rbp)
	pushq -744(%rbp)
	pushq -736(%rbp)
	pushq -728(%rbp)
	pushq -720(%rbp)
	pushq -712(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	popq -632(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $480, %rsp
	ret
compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function compile-stack-call : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,Fragment>,String>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringConsFragmentFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
#call function fragment-context::lookups : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
uuid_00000000000c1c53:
#call function non-zero : Arrow<List<Fragment>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1c54
	jmp uuid_00000000000c1c55
uuid_00000000000c1c54:
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	push %RBP
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $0
	push %RBP
	mov -1184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c4c
	jmp uuid_00000000000c1c4e
uuid_00000000000c1c4c:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1c49
	jmp uuid_00000000000c1c4b
uuid_00000000000c1c49:
	push %RBP
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	jmp uuid_00000000000c1c46
	jmp uuid_00000000000c1c48
uuid_00000000000c1c46:
	movb $1, -1192(%rbp)
uuid_00000000000c1c48:
	mov -1384(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c1c4b:
	mov -1208(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c1c4e:
	mov -1200(%RBP),%RSP
	add $-1536, %RSP
	mov -1192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c50
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1c4f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1c52
uuid_00000000000c1c50:
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
#call function compile-stack-call : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,Fragment>,String>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -208(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringConsFragmentFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	movq -1376(%rbp), %r15
	movq %r15, -840(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -832(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -824(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -792(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -784(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -776(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -768(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -760(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -752(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -744(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -736(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -728(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -720(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -712(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -704(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -680(%rbp)
uuid_00000000000c1c52:
	mov -1016(%RBP),%RSP
	add $-1536, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $168, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c1c53
uuid_00000000000c1c55:
	subq $152, %rsp
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $352, %rsp
	ret
translate_SB_local_SB_variables_CL_ArrowFContextConsI64FContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c80
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq $0
	push %RBP
	mov -832(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c62
	jmp uuid_00000000000c1c64
uuid_00000000000c1c62:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000c1c5f
	jmp uuid_00000000000c1c61
uuid_00000000000c1c5f:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000c1c5c
	jmp uuid_00000000000c1c5e
uuid_00000000000c1c5c:
	push %RBP
	mov -648(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1c59
	jmp uuid_00000000000c1c5b
uuid_00000000000c1c59:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1c56
	jmp uuid_00000000000c1c58
uuid_00000000000c1c56:
	movb $1, -840(%rbp)
uuid_00000000000c1c58:
	mov -1064(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c1c5b:
	mov -1048(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c1c5e:
	mov -1016(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c1c61:
	mov -856(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c1c64:
	mov -848(%RBP),%RSP
	add $-1264, %RSP
	mov -840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c7d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1c7c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1c7f
uuid_00000000000c1c7d:
#call function translate-local-variables : Arrow<Cons<FContext,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call translate_SB_local_SB_variables_CL_ArrowFContextConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
	popq -1240(%RBP)
	popq -1232(%RBP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $uuid_00000000000c0ad1
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push %RBP
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c68
	jmp uuid_00000000000c1c6a
uuid_00000000000c1c68:
	push %RBP
	mov -1312(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1352(%rbp)
	pushq $uuid_00000000000bf1a0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1c65
	jmp uuid_00000000000c1c67
uuid_00000000000c1c65:
	movb $1, -1328(%rbp)
uuid_00000000000c1c67:
	mov -1344(%RBP),%RSP
	add $-1352, %RSP
uuid_00000000000c1c6a:
	mov -1336(%RBP),%RSP
	add $-1352, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c79
	push %RBP
	jmp uuid_00000000000c1c76
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1c75
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1c78
uuid_00000000000c1c76:
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1056(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1c78:
	mov -1360(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000c1c7b
uuid_00000000000c1c79:
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $uuid_00000000000c0b38
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push %RBP
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq $0
	push %RBP
	mov -1408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c6e
	jmp uuid_00000000000c1c70
uuid_00000000000c1c6e:
	push %RBP
	mov -1400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1c6b
	jmp uuid_00000000000c1c6d
uuid_00000000000c1c6b:
	movb $1, -1416(%rbp)
uuid_00000000000c1c6d:
	mov -1432(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000c1c70:
	mov -1424(%RBP),%RSP
	add $-1440, %RSP
	mov -1416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c72
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1c71
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1c74
uuid_00000000000c1c72:
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -1448(%RBP), %RAX
	mov -208(%RBP), %R14
	addq %R14,%RAX
	push %RAX
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $uuid_00000000000c0b38
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1008(%RBP)
	popq -1000(%RBP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1056(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1c74:
	mov -1384(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c1c7b:
	mov -1296(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000c1c7f:
	mov -632(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000c1c82
uuid_00000000000c1c80:
uuid_00000000000c1c82:
	mov -424(%RBP),%RSP
	add $-624, %RSP
	subq $200, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $216, %rsp
	ret
cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	push %RBP
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c8c
	jmp uuid_00000000000c1c8e
uuid_00000000000c1c8c:
	push %RBP
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000c1c89
	jmp uuid_00000000000c1c8b
uuid_00000000000c1c89:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1c86
	jmp uuid_00000000000c1c88
uuid_00000000000c1c86:
	push %RBP
	mov -712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1c83
	jmp uuid_00000000000c1c85
uuid_00000000000c1c83:
	movb $1, -760(%rbp)
uuid_00000000000c1c85:
	mov -888(%RBP),%RSP
	add $-960, %RSP
uuid_00000000000c1c88:
	mov -808(%RBP),%RSP
	add $-960, %RSP
uuid_00000000000c1c8b:
	mov -776(%RBP),%RSP
	add $-960, %RSP
uuid_00000000000c1c8e:
	mov -768(%RBP),%RSP
	add $-960, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1c94
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1c93
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1c96
uuid_00000000000c1c94:
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContextCaseNumber1, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	mov -968(%RBP), %RAX
	movq %RAX, -288(%rbp)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000bed7c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1c90
	jmp uuid_00000000000c1c92
uuid_00000000000c1c90:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c1b96
	pushq $0
	pushq $0
	pushq $3
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq $uuid_00000000000c1b96
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1c8f
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -1992(%RBP)
	popq -1984(%RBP)
	popq -1976(%RBP)
	popq -1968(%RBP)
	popq -1960(%RBP)
	popq -1952(%RBP)
	popq -1944(%RBP)
	popq -1936(%RBP)
	popq -1928(%RBP)
	popq -1920(%RBP)
	popq -1912(%RBP)
	popq -1904(%RBP)
	popq -1896(%RBP)
	popq -1888(%RBP)
	popq -1880(%RBP)
	popq -1872(%RBP)
	popq -1864(%RBP)
	popq -1856(%RBP)
	popq -1848(%RBP)
	popq -1840(%RBP)
	popq -1832(%RBP)
	popq -1824(%RBP)
	popq -1816(%RBP)
	popq -1808(%RBP)
	popq -1800(%RBP)
uuid_00000000000c1c92:
	mov -2000(%RBP),%RSP
	add $-2152, %RSP
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
uuid_00000000000c1c96:
	mov -680(%RBP),%RSP
	add $-2224, %RSP
	subq $152, %rsp
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	push %RBP
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq $0
	push %RBP
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ca0
	jmp uuid_00000000000c1ca2
uuid_00000000000c1ca0:
	push %RBP
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	jmp uuid_00000000000c1c9d
	jmp uuid_00000000000c1c9f
uuid_00000000000c1c9d:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1c9a
	jmp uuid_00000000000c1c9c
uuid_00000000000c1c9a:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1c97
	jmp uuid_00000000000c1c99
uuid_00000000000c1c97:
	movb $1, -784(%rbp)
uuid_00000000000c1c99:
	mov -912(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c1c9c:
	mov -832(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c1c9f:
	mov -800(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c1ca2:
	mov -792(%RBP),%RSP
	add $-984, %RSP
	mov -784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ca4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1ca3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1ca6
uuid_00000000000c1ca4:
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
uuid_00000000000c1ca6:
	mov -704(%RBP),%RSP
	add $-1056, %RSP
	subq $152, %rsp
	pushq -624(%rbp)
	pushq -616(%rbp)
	pushq -608(%rbp)
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $320, %rsp
	ret
cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext:
	pushq -552(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	push %RBP
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq $0
	push %RBP
	mov -720(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cd7
	jmp uuid_00000000000c1cd9
uuid_00000000000c1cd7:
	push %RBP
	mov -712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cce
	jmp uuid_00000000000c1cd0
uuid_00000000000c1cce:
	push %RBP
	mov -808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -912(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cbc
	jmp uuid_00000000000c1cbe
uuid_00000000000c1cbc:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1008(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1caa
	jmp uuid_00000000000c1cac
uuid_00000000000c1caa:
	push %RBP
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	jmp uuid_00000000000c1ca7
	jmp uuid_00000000000c1ca9
uuid_00000000000c1ca7:
	movb $1, -1016(%rbp)
uuid_00000000000c1ca9:
	mov -1032(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000c1cac:
	mov -1024(%RBP),%RSP
	add $-1056, %RSP
	mov -1016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cb9
	jmp uuid_00000000000c1cbb
uuid_00000000000c1cb9:
	push %RBP
	mov -896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1136(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cb3
	jmp uuid_00000000000c1cb5
uuid_00000000000c1cb3:
	push %RBP
	jmp uuid_00000000000c1cb0
	jmp uuid_00000000000c1cb2
uuid_00000000000c1cb0:
	push %RBP
	mov -1072(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1cad
	jmp uuid_00000000000c1caf
uuid_00000000000c1cad:
	movb $1, -1144(%rbp)
uuid_00000000000c1caf:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c1cb2:
	mov -1160(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c1cb5:
	mov -1152(%RBP),%RSP
	add $-1176, %RSP
	mov -1144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cb6
	jmp uuid_00000000000c1cb8
uuid_00000000000c1cb6:
	movb $1, -920(%rbp)
uuid_00000000000c1cb8:
	mov -1064(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c1cbb:
	mov -936(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c1cbe:
	mov -928(%RBP),%RSP
	add $-1176, %RSP
	mov -920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ccb
	jmp uuid_00000000000c1ccd
uuid_00000000000c1ccb:
	push %RBP
	mov -800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cc5
	jmp uuid_00000000000c1cc7
uuid_00000000000c1cc5:
	push %RBP
	jmp uuid_00000000000c1cc2
	jmp uuid_00000000000c1cc4
uuid_00000000000c1cc2:
	push %RBP
	mov -1192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1cbf
	jmp uuid_00000000000c1cc1
uuid_00000000000c1cbf:
	movb $1, -1264(%rbp)
uuid_00000000000c1cc1:
	mov -1288(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c1cc4:
	mov -1280(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c1cc7:
	mov -1272(%RBP),%RSP
	add $-1296, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cc8
	jmp uuid_00000000000c1cca
uuid_00000000000c1cc8:
	movb $1, -824(%rbp)
uuid_00000000000c1cca:
	mov -1184(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c1ccd:
	mov -840(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000c1cd0:
	mov -832(%RBP),%RSP
	add $-1296, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cd4
	jmp uuid_00000000000c1cd6
uuid_00000000000c1cd4:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1cd1
	jmp uuid_00000000000c1cd3
uuid_00000000000c1cd1:
	movb $1, -728(%rbp)
uuid_00000000000c1cd3:
	mov -1304(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c1cd6:
	mov -744(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000c1cd9:
	mov -736(%RBP),%RSP
	add $-1376, %RSP
	mov -728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d68
	push %RBP
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq $0
	push %RBP
	mov -1456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d3b
	jmp uuid_00000000000c1d3d
uuid_00000000000c1d3b:
	push %RBP
	mov -1448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1552(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d29
	jmp uuid_00000000000c1d2b
uuid_00000000000c1d29:
	push %RBP
	mov -1544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1648(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d17
	jmp uuid_00000000000c1d19
uuid_00000000000c1d17:
	push %RBP
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	jmp uuid_00000000000c1d14
	jmp uuid_00000000000c1d16
uuid_00000000000c1d14:
	movb $1, -1656(%rbp)
uuid_00000000000c1d16:
	mov -1672(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c1d19:
	mov -1664(%RBP),%RSP
	add $-1696, %RSP
	mov -1656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d26
	jmp uuid_00000000000c1d28
uuid_00000000000c1d26:
	push %RBP
	mov -1536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1776(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d20
	jmp uuid_00000000000c1d22
uuid_00000000000c1d20:
	push %RBP
	jmp uuid_00000000000c1d1d
	jmp uuid_00000000000c1d1f
uuid_00000000000c1d1d:
	push %RBP
	mov -1712(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1d1a
	jmp uuid_00000000000c1d1c
uuid_00000000000c1d1a:
	movb $1, -1784(%rbp)
uuid_00000000000c1d1c:
	mov -1808(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c1d1f:
	mov -1800(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c1d22:
	mov -1792(%RBP),%RSP
	add $-1816, %RSP
	mov -1784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d23
	jmp uuid_00000000000c1d25
uuid_00000000000c1d23:
	movb $1, -1560(%rbp)
uuid_00000000000c1d25:
	mov -1704(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c1d28:
	mov -1576(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c1d2b:
	mov -1568(%RBP),%RSP
	add $-1816, %RSP
	mov -1560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d38
	jmp uuid_00000000000c1d3a
uuid_00000000000c1d38:
	push %RBP
	mov -1440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d32
	jmp uuid_00000000000c1d34
uuid_00000000000c1d32:
	push %RBP
	jmp uuid_00000000000c1d2f
	jmp uuid_00000000000c1d31
uuid_00000000000c1d2f:
	push %RBP
	mov -1832(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d2c
	jmp uuid_00000000000c1d2e
uuid_00000000000c1d2c:
	movb $1, -1904(%rbp)
uuid_00000000000c1d2e:
	mov -1928(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000c1d31:
	mov -1920(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000c1d34:
	mov -1912(%RBP),%RSP
	add $-1936, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d35
	jmp uuid_00000000000c1d37
uuid_00000000000c1d35:
	movb $1, -1464(%rbp)
uuid_00000000000c1d37:
	mov -1824(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000c1d3a:
	mov -1480(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000c1d3d:
	mov -1472(%RBP),%RSP
	add $-1936, %RSP
	mov -1464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d65
	push %RBP
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	mov -2016(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d62
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1d61
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1d64
uuid_00000000000c1d62:
uuid_00000000000c1d64:
	mov -1944(%RBP),%RSP
	add $-2016, %RSP
	jmp uuid_00000000000c1d67
uuid_00000000000c1d65:
	push %RBP
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d5e
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d5b
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d55
	jmp uuid_00000000000c1d57
uuid_00000000000c1d55:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1d57:
	mov -1960(%RBP),%RSP
	add $-1960, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d58
	jmp uuid_00000000000c1d5a
uuid_00000000000c1d58:
	mov -2048(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c1d5a:
	mov -2120(%RBP),%RSP
	add $-2120, %RSP
	mov -2080(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1816(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c1d5d
uuid_00000000000c1d5b:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1696(%RBP)
	popq -1688(%RBP)
	popq -1680(%RBP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d52
	jmp uuid_00000000000c1d54
uuid_00000000000c1d52:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1d54:
	mov -1960(%RBP),%RSP
	add $-1960, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	mov -2080(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1816(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1d5d:
	mov -1952(%RBP),%RSP
	add $-2112, %RSP
	jmp uuid_00000000000c1d60
uuid_00000000000c1d5e:
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	push %RBP
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq $0
	push %RBP
	mov -2096(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d44
	jmp uuid_00000000000c1d46
uuid_00000000000c1d44:
	push %RBP
	mov -2088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1d41
	jmp uuid_00000000000c1d43
uuid_00000000000c1d41:
	push %RBP
	mov -2080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1d3e
	jmp uuid_00000000000c1d40
uuid_00000000000c1d3e:
	movb $1, -2104(%rbp)
uuid_00000000000c1d40:
	mov -2200(%RBP),%RSP
	add $-2272, %RSP
uuid_00000000000c1d43:
	mov -2120(%RBP),%RSP
	add $-2272, %RSP
uuid_00000000000c1d46:
	mov -2112(%RBP),%RSP
	add $-2272, %RSP
	mov -2104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d4f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1d4e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1d51
uuid_00000000000c1d4f:
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d4b
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1d4a
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1d4d
uuid_00000000000c1d4b:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1696(%RBP)
	popq -1688(%RBP)
	popq -1680(%RBP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d47
	jmp uuid_00000000000c1d49
uuid_00000000000c1d47:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1d49:
	mov -2288(%RBP),%RSP
	add $-2288, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	mov -2408(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1816(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	pushq -2736(%RBP)
	pushq -2744(%RBP)
	pushq -2752(%RBP)
	pushq -2760(%RBP)
	pushq -2768(%RBP)
	pushq -2776(%RBP)
	pushq -2784(%RBP)
	pushq -2792(%RBP)
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	pushq -2848(%RBP)
	pushq -2856(%RBP)
	pushq -2872(%RBP)
	pushq -2880(%RBP)
	pushq -2888(%RBP)
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq -2952(%RBP)
	pushq -2960(%RBP)
	pushq -2968(%RBP)
	pushq -2976(%RBP)
	pushq -2984(%RBP)
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq -3048(%RBP)
	pushq -3056(%RBP)
	pushq -3064(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -3072(%RBP)
	pushq -3080(%RBP)
	pushq -3088(%RBP)
	pushq -3096(%RBP)
	pushq -3104(%RBP)
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	pushq -3128(%RBP)
	pushq -3136(%RBP)
	pushq -3144(%RBP)
	pushq -3152(%RBP)
	pushq -3160(%RBP)
	pushq -3168(%RBP)
	pushq -3176(%RBP)
	pushq -3184(%RBP)
	pushq -3192(%RBP)
	pushq -3200(%RBP)
	pushq -3208(%RBP)
	pushq -3216(%RBP)
	pushq -3224(%RBP)
	pushq -3232(%RBP)
	pushq -3240(%RBP)
	pushq -3248(%RBP)
	pushq -3256(%RBP)
	pushq -3264(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -2448(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c1d4d:
	mov -2280(%RBP),%RSP
	add $-3272, %RSP
uuid_00000000000c1d51:
	mov -2024(%RBP),%RSP
	add $-3272, %RSP
uuid_00000000000c1d60:
	mov -1944(%RBP),%RSP
	add $-3272, %RSP
uuid_00000000000c1d67:
	mov -1384(%RBP),%RSP
	add $-3272, %RSP
	jmp uuid_00000000000c1d6a
uuid_00000000000c1d68:
	push %RBP
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d0e
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d0b
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d05
	jmp uuid_00000000000c1d07
uuid_00000000000c1d05:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1d07:
	mov -1400(%RBP),%RSP
	add $-1400, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d08
	jmp uuid_00000000000c1d0a
uuid_00000000000c1d08:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c1d0a:
	mov -1560(%RBP),%RSP
	add $-1560, %RSP
	mov -1520(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c1d0d
uuid_00000000000c1d0b:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1056(%RBP)
	popq -1048(%RBP)
	popq -1040(%RBP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d02
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1408(%RBP), %RAX
	movq %RAX, -552(%rbp)
	jmp uuid_00000000000c1d04
uuid_00000000000c1d02:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1cfc
	jmp uuid_00000000000c1cfe
uuid_00000000000c1cfc:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1cfe:
	mov -1408(%RBP),%RSP
	add $-1408, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1cff
	jmp uuid_00000000000c1d01
uuid_00000000000c1cff:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c1d01:
	mov -1568(%RBP),%RSP
	add $-1568, %RSP
	mov -1528(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1d04:
	mov -1400(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000c1d0d:
	mov -1392(%RBP),%RSP
	add $-1568, %RSP
	jmp uuid_00000000000c1d10
uuid_00000000000c1d0e:
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	push %RBP
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ce0
	jmp uuid_00000000000c1ce2
uuid_00000000000c1ce0:
	push %RBP
	mov -1528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1cdd
	jmp uuid_00000000000c1cdf
uuid_00000000000c1cdd:
	push %RBP
	mov -1520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1cda
	jmp uuid_00000000000c1cdc
uuid_00000000000c1cda:
	movb $1, -1544(%rbp)
uuid_00000000000c1cdc:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c1cdf:
	mov -1560(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c1ce2:
	mov -1552(%RBP),%RSP
	add $-1712, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1cf9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1cf8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1cfb
uuid_00000000000c1cf9:
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1cf5
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1cec
	jmp uuid_00000000000c1cee
uuid_00000000000c1cec:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1cee:
	mov -1728(%RBP),%RSP
	add $-1728, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1cef
	jmp uuid_00000000000c1cf1
uuid_00000000000c1cef:
	mov -1816(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c1cf1:
	mov -1888(%RBP),%RSP
	add $-1888, %RSP
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1cf2
	jmp uuid_00000000000c1cf4
uuid_00000000000c1cf2:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c1cf4:
	mov -1896(%RBP),%RSP
	add $-1896, %RSP
	mov -1848(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	pushq -2312(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1904(%RBP), %RAX
	movq %RAX, -552(%rbp)
	jmp uuid_00000000000c1cf7
uuid_00000000000c1cf5:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1056(%RBP)
	popq -1048(%RBP)
	popq -1040(%RBP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ce9
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	pushq -2312(%RBP)
	pushq -2320(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1736(%RBP), %RAX
	movq %RAX, -552(%rbp)
	jmp uuid_00000000000c1ceb
uuid_00000000000c1ce9:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ce3
	jmp uuid_00000000000c1ce5
uuid_00000000000c1ce3:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c1ce5:
	mov -1736(%RBP),%RSP
	add $-1736, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ce6
	jmp uuid_00000000000c1ce8
uuid_00000000000c1ce6:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c1ce8:
	mov -1896(%RBP),%RSP
	add $-1896, %RSP
	mov -1856(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	pushq -2312(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1904(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000c1ceb:
	mov -1728(%RBP),%RSP
	add $-2728, %RSP
uuid_00000000000c1cf7:
	mov -1720(%RBP),%RSP
	add $-2728, %RSP
uuid_00000000000c1cfb:
	mov -1464(%RBP),%RSP
	add $-2728, %RSP
uuid_00000000000c1d10:
	mov -1384(%RBP),%RSP
	add $-2728, %RSP
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d11
	jmp uuid_00000000000c1d13
uuid_00000000000c1d11:
	movq -568(%rbp), %r15
	movq %r15, -552(%rbp)
	mov -568(%rbp), %r15
	mov %r15, -552(%rbp)
uuid_00000000000c1d13:
	mov -2736(%RBP),%RSP
	add $-2736, %RSP
uuid_00000000000c1d6a:
	mov -648(%RBP),%RSP
	add $-2736, %RSP
	pushq -552(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	pushq $0
	subq $424, %rsp
	pushq 424(%rsp)
	pushq 440(%rsp)
	pushq 456(%rsp)
	pushq 472(%rsp)
	pushq 488(%rsp)
	pushq 504(%rsp)
	pushq 520(%rsp)
	pushq 536(%rsp)
	pushq 552(%rsp)
	pushq 568(%rsp)
	pushq 584(%rsp)
	pushq 600(%rsp)
	pushq 616(%rsp)
	pushq 632(%rsp)
	pushq 648(%rsp)
	pushq 664(%rsp)
	pushq 680(%rsp)
	pushq 696(%rsp)
	pushq 712(%rsp)
	pushq 728(%rsp)
	pushq 744(%rsp)
	pushq 760(%rsp)
	pushq 776(%rsp)
	pushq 792(%rsp)
	pushq 808(%rsp)
	pushq 824(%rsp)
	pushq 840(%rsp)
	pushq 856(%rsp)
	pushq 872(%rsp)
	pushq 888(%rsp)
	pushq 904(%rsp)
	pushq 920(%rsp)
	pushq 936(%rsp)
	pushq 952(%rsp)
	pushq 968(%rsp)
	pushq 984(%rsp)
	pushq 1000(%rsp)
	pushq 1016(%rsp)
	pushq 1032(%rsp)
	pushq 1048(%rsp)
	pushq 1064(%rsp)
	pushq 1080(%rsp)
	pushq 1096(%rsp)
	pushq 1112(%rsp)
	pushq 1128(%rsp)
	pushq 1144(%rsp)
	pushq 1160(%rsp)
	pushq 1176(%rsp)
	pushq 1192(%rsp)
	pushq 1208(%rsp)
	pushq 1224(%rsp)
	pushq 1240(%rsp)
	pushq 1256(%rsp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	popq -632(%rbp)
	popq -640(%rbp)
	popq -648(%rbp)
	popq -656(%rbp)
	popq -664(%rbp)
	popq -672(%rbp)
	popq -680(%rbp)
	popq -688(%rbp)
	popq -696(%rbp)
	popq -704(%rbp)
	popq -712(%rbp)
	popq -720(%rbp)
	popq -728(%rbp)
	popq -736(%rbp)
	popq -744(%rbp)
	popq -752(%rbp)
	popq -760(%rbp)
	popq -768(%rbp)
	popq -776(%rbp)
	popq -784(%rbp)
	popq -792(%rbp)
	popq -800(%rbp)
	popq -808(%rbp)
	popq -816(%rbp)
	popq -824(%rbp)
	popq -832(%rbp)
	popq -840(%rbp)
	popq -848(%rbp)
	popq -856(%rbp)
	popq -864(%rbp)
	popq -872(%rbp)
	popq -880(%rbp)
	popq -888(%rbp)
	popq -896(%rbp)
	popq -904(%rbp)
	popq -912(%rbp)
	popq -920(%rbp)
	popq -928(%rbp)
	popq -936(%rbp)
	popq -944(%rbp)
	popq -952(%rbp)
	popq -960(%rbp)
	popq -968(%rbp)
	popq -976(%rbp)
	popq -984(%rbp)
	addq $424, %rsp
	mov %rbp, %rsp
	sub $560, %rsp
	ret
blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext:
	pushq $0
	pushq $0
	pushq $3
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2081
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c207e
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d71
	jmp uuid_00000000000c1d73
uuid_00000000000c1d71:
	push %RBP
	jmp uuid_00000000000c1d6e
	jmp uuid_00000000000c1d70
uuid_00000000000c1d6e:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1d6b
	jmp uuid_00000000000c1d6d
uuid_00000000000c1d6b:
	movb $1, -640(%rbp)
uuid_00000000000c1d6d:
	mov -664(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c1d70:
	mov -656(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c1d73:
	mov -648(%RBP),%RSP
	add $-672, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c207b
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d7a
	jmp uuid_00000000000c1d7c
uuid_00000000000c1d7a:
	push %RBP
	jmp uuid_00000000000c1d77
	jmp uuid_00000000000c1d79
uuid_00000000000c1d77:
	push %RBP
	mov -688(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1d74
	jmp uuid_00000000000c1d76
uuid_00000000000c1d74:
	movb $1, -760(%rbp)
uuid_00000000000c1d76:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c1d79:
	mov -776(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c1d7c:
	mov -768(%RBP),%RSP
	add $-792, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2078
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d9b
	jmp uuid_00000000000c1d9d
uuid_00000000000c1d9b:
	push %RBP
	mov -864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d89
	jmp uuid_00000000000c1d8b
uuid_00000000000c1d89:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1064(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d80
	jmp uuid_00000000000c1d82
uuid_00000000000c1d80:
	push %RBP
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	jmp uuid_00000000000c1d7d
	jmp uuid_00000000000c1d7f
uuid_00000000000c1d7d:
	movb $1, -1072(%rbp)
uuid_00000000000c1d7f:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c1d82:
	mov -1080(%RBP),%RSP
	add $-1112, %RSP
	mov -1072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d86
	jmp uuid_00000000000c1d88
uuid_00000000000c1d86:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1d83
	jmp uuid_00000000000c1d85
uuid_00000000000c1d83:
	movb $1, -976(%rbp)
uuid_00000000000c1d85:
	mov -1120(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000c1d88:
	mov -992(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000c1d8b:
	mov -984(%RBP),%RSP
	add $-1192, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d98
	jmp uuid_00000000000c1d9a
uuid_00000000000c1d98:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d92
	jmp uuid_00000000000c1d94
uuid_00000000000c1d92:
	push %RBP
	jmp uuid_00000000000c1d8f
	jmp uuid_00000000000c1d91
uuid_00000000000c1d8f:
	push %RBP
	mov -1208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1312(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1d8c
	jmp uuid_00000000000c1d8e
uuid_00000000000c1d8c:
	movb $1, -1280(%rbp)
uuid_00000000000c1d8e:
	mov -1304(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c1d91:
	mov -1296(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c1d94:
	mov -1288(%RBP),%RSP
	add $-1312, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1d95
	jmp uuid_00000000000c1d97
uuid_00000000000c1d95:
	movb $1, -880(%rbp)
uuid_00000000000c1d97:
	mov -1200(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c1d9a:
	mov -896(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c1d9d:
	mov -888(%RBP),%RSP
	add $-1312, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2075
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dbc
	jmp uuid_00000000000c1dbe
uuid_00000000000c1dbc:
	push %RBP
	mov -1384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1daa
	jmp uuid_00000000000c1dac
uuid_00000000000c1daa:
	push %RBP
	mov -1480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1584(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1da1
	jmp uuid_00000000000c1da3
uuid_00000000000c1da1:
	push %RBP
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	jmp uuid_00000000000c1d9e
	jmp uuid_00000000000c1da0
uuid_00000000000c1d9e:
	movb $1, -1592(%rbp)
uuid_00000000000c1da0:
	mov -1608(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c1da3:
	mov -1600(%RBP),%RSP
	add $-1632, %RSP
	mov -1592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1da7
	jmp uuid_00000000000c1da9
uuid_00000000000c1da7:
	push %RBP
	mov -1472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1da4
	jmp uuid_00000000000c1da6
uuid_00000000000c1da4:
	movb $1, -1496(%rbp)
uuid_00000000000c1da6:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c1da9:
	mov -1512(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c1dac:
	mov -1504(%RBP),%RSP
	add $-1712, %RSP
	mov -1496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1db9
	jmp uuid_00000000000c1dbb
uuid_00000000000c1db9:
	push %RBP
	mov -1376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1792(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1db3
	jmp uuid_00000000000c1db5
uuid_00000000000c1db3:
	push %RBP
	jmp uuid_00000000000c1db0
	jmp uuid_00000000000c1db2
uuid_00000000000c1db0:
	push %RBP
	mov -1728(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1832(%rbp)
	pushq $uuid_00000000000be915
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1dad
	jmp uuid_00000000000c1daf
uuid_00000000000c1dad:
	movb $1, -1800(%rbp)
uuid_00000000000c1daf:
	mov -1824(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c1db2:
	mov -1816(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c1db5:
	mov -1808(%RBP),%RSP
	add $-1832, %RSP
	mov -1800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1db6
	jmp uuid_00000000000c1db8
uuid_00000000000c1db6:
	movb $1, -1400(%rbp)
uuid_00000000000c1db8:
	mov -1720(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c1dbb:
	mov -1416(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000c1dbe:
	mov -1408(%RBP),%RSP
	add $-1832, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2072
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -1912(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dce
	jmp uuid_00000000000c1dd0
uuid_00000000000c1dce:
	push %RBP
	mov -1904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1dcb
	jmp uuid_00000000000c1dcd
uuid_00000000000c1dcb:
	push %RBP
	mov -1896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2088(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dc5
	jmp uuid_00000000000c1dc7
uuid_00000000000c1dc5:
	push %RBP
	jmp uuid_00000000000c1dc2
	jmp uuid_00000000000c1dc4
uuid_00000000000c1dc2:
	push %RBP
	mov -2024(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2128(%rbp)
	pushq $uuid_00000000000bec52
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1dbf
	jmp uuid_00000000000c1dc1
uuid_00000000000c1dbf:
	movb $1, -2096(%rbp)
uuid_00000000000c1dc1:
	mov -2120(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c1dc4:
	mov -2112(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c1dc7:
	mov -2104(%RBP),%RSP
	add $-2128, %RSP
	mov -2096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dc8
	jmp uuid_00000000000c1dca
uuid_00000000000c1dc8:
	movb $1, -1920(%rbp)
uuid_00000000000c1dca:
	mov -2016(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c1dcd:
	mov -1936(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000c1dd0:
	mov -1928(%RBP),%RSP
	add $-2128, %RSP
	mov -1920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c206f
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -2208(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e45
	jmp uuid_00000000000c1e47
uuid_00000000000c1e45:
	push %RBP
	mov -2200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e11
	jmp uuid_00000000000c1e13
uuid_00000000000c1e11:
	push %RBP
	mov -2296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1e0e
	jmp uuid_00000000000c1e10
uuid_00000000000c1e0e:
	push %RBP
	mov -2288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2480(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e08
	jmp uuid_00000000000c1e0a
uuid_00000000000c1e08:
	push %RBP
	mov -2472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2576(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dea
	jmp uuid_00000000000c1dec
uuid_00000000000c1dea:
	push %RBP
	mov -2568(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2672(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dd7
	jmp uuid_00000000000c1dd9
uuid_00000000000c1dd7:
	push %RBP
	jmp uuid_00000000000c1dd4
	jmp uuid_00000000000c1dd6
uuid_00000000000c1dd4:
	push %RBP
	mov -2608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1dd1
	jmp uuid_00000000000c1dd3
uuid_00000000000c1dd1:
	movb $1, -2680(%rbp)
uuid_00000000000c1dd3:
	mov -2704(%RBP),%RSP
	add $-2712, %RSP
uuid_00000000000c1dd6:
	mov -2696(%RBP),%RSP
	add $-2712, %RSP
uuid_00000000000c1dd9:
	mov -2688(%RBP),%RSP
	add $-2712, %RSP
	mov -2680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1de7
	jmp uuid_00000000000c1de9
uuid_00000000000c1de7:
	push %RBP
	mov -2560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1de1
	jmp uuid_00000000000c1de3
uuid_00000000000c1de1:
	push %RBP
	jmp uuid_00000000000c1dde
	jmp uuid_00000000000c1de0
uuid_00000000000c1dde:
	push %RBP
	mov -2728(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2832(%rbp)
	pushq $uuid_00000000000c1dda
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ddb
	jmp uuid_00000000000c1ddd
uuid_00000000000c1ddb:
	movb $1, -2800(%rbp)
uuid_00000000000c1ddd:
	mov -2824(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c1de0:
	mov -2816(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c1de3:
	mov -2808(%RBP),%RSP
	add $-2832, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1de4
	jmp uuid_00000000000c1de6
uuid_00000000000c1de4:
	movb $1, -2584(%rbp)
uuid_00000000000c1de6:
	mov -2720(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c1de9:
	mov -2600(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000c1dec:
	mov -2592(%RBP),%RSP
	add $-2832, %RSP
	mov -2584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e05
	jmp uuid_00000000000c1e07
uuid_00000000000c1e05:
	push %RBP
	mov -2464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2912(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1dff
	jmp uuid_00000000000c1e01
uuid_00000000000c1dff:
	push %RBP
	jmp uuid_00000000000c1dfc
	jmp uuid_00000000000c1dfe
uuid_00000000000c1dfc:
	push %RBP
	mov -2880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3016(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1df9
	jmp uuid_00000000000c1dfb
uuid_00000000000c1df9:
	push %RBP
	mov -2872(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3096(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1df3
	jmp uuid_00000000000c1df5
uuid_00000000000c1df3:
	push %RBP
	jmp uuid_00000000000c1df0
	jmp uuid_00000000000c1df2
uuid_00000000000c1df0:
	push %RBP
	mov -3032(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1ded
	jmp uuid_00000000000c1def
uuid_00000000000c1ded:
	movb $1, -3104(%rbp)
uuid_00000000000c1def:
	mov -3128(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c1df2:
	mov -3120(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c1df5:
	mov -3112(%RBP),%RSP
	add $-3136, %RSP
	mov -3104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1df6
	jmp uuid_00000000000c1df8
uuid_00000000000c1df6:
	movb $1, -2920(%rbp)
uuid_00000000000c1df8:
	mov -3024(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c1dfb:
	mov -2944(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c1dfe:
	mov -2936(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c1e01:
	mov -2928(%RBP),%RSP
	add $-3136, %RSP
	mov -2920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e02
	jmp uuid_00000000000c1e04
uuid_00000000000c1e02:
	movb $1, -2488(%rbp)
uuid_00000000000c1e04:
	mov -2840(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c1e07:
	mov -2504(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c1e0a:
	mov -2496(%RBP),%RSP
	add $-3136, %RSP
	mov -2488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e0b
	jmp uuid_00000000000c1e0d
uuid_00000000000c1e0b:
	movb $1, -2312(%rbp)
uuid_00000000000c1e0d:
	mov -2408(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c1e10:
	mov -2328(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000c1e13:
	mov -2320(%RBP),%RSP
	add $-3136, %RSP
	mov -2312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e42
	jmp uuid_00000000000c1e44
uuid_00000000000c1e42:
	push %RBP
	mov -2192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3216(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e3c
	jmp uuid_00000000000c1e3e
uuid_00000000000c1e3c:
	push %RBP
	mov -3208(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3312(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e2a
	jmp uuid_00000000000c1e2c
uuid_00000000000c1e2a:
	push %RBP
	mov -3304(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3408(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e17
	jmp uuid_00000000000c1e19
uuid_00000000000c1e17:
	push %RBP
	jmp uuid_00000000000c1e14
	jmp uuid_00000000000c1e16
uuid_00000000000c1e14:
	movb $1, -3416(%rbp)
uuid_00000000000c1e16:
	mov -3432(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c1e19:
	mov -3424(%RBP),%RSP
	add $-3432, %RSP
	mov -3416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e27
	jmp uuid_00000000000c1e29
uuid_00000000000c1e27:
	push %RBP
	mov -3296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3512(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e21
	jmp uuid_00000000000c1e23
uuid_00000000000c1e21:
	push %RBP
	jmp uuid_00000000000c1e1e
	jmp uuid_00000000000c1e20
uuid_00000000000c1e1e:
	push %RBP
	mov -3448(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3552(%rbp)
	pushq $uuid_00000000000c1e1a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1e1b
	jmp uuid_00000000000c1e1d
uuid_00000000000c1e1b:
	movb $1, -3520(%rbp)
uuid_00000000000c1e1d:
	mov -3544(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c1e20:
	mov -3536(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c1e23:
	mov -3528(%RBP),%RSP
	add $-3552, %RSP
	mov -3520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e24
	jmp uuid_00000000000c1e26
uuid_00000000000c1e24:
	movb $1, -3320(%rbp)
uuid_00000000000c1e26:
	mov -3440(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c1e29:
	mov -3336(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000c1e2c:
	mov -3328(%RBP),%RSP
	add $-3552, %RSP
	mov -3320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e39
	jmp uuid_00000000000c1e3b
uuid_00000000000c1e39:
	push %RBP
	mov -3200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3632(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e33
	jmp uuid_00000000000c1e35
uuid_00000000000c1e33:
	push %RBP
	jmp uuid_00000000000c1e30
	jmp uuid_00000000000c1e32
uuid_00000000000c1e30:
	push %RBP
	mov -3568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3672(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1e2d
	jmp uuid_00000000000c1e2f
uuid_00000000000c1e2d:
	movb $1, -3640(%rbp)
uuid_00000000000c1e2f:
	mov -3664(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c1e32:
	mov -3656(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c1e35:
	mov -3648(%RBP),%RSP
	add $-3672, %RSP
	mov -3640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e36
	jmp uuid_00000000000c1e38
uuid_00000000000c1e36:
	movb $1, -3224(%rbp)
uuid_00000000000c1e38:
	mov -3560(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c1e3b:
	mov -3240(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c1e3e:
	mov -3232(%RBP),%RSP
	add $-3672, %RSP
	mov -3224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e3f
	jmp uuid_00000000000c1e41
uuid_00000000000c1e3f:
	movb $1, -2216(%rbp)
uuid_00000000000c1e41:
	mov -3144(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c1e44:
	mov -2232(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000c1e47:
	mov -2224(%RBP),%RSP
	add $-3672, %RSP
	mov -2216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c206c
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -3752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1eb0
	jmp uuid_00000000000c1eb2
uuid_00000000000c1eb0:
	push %RBP
	mov -3744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e7c
	jmp uuid_00000000000c1e7e
uuid_00000000000c1e7c:
	push %RBP
	mov -3840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1e79
	jmp uuid_00000000000c1e7b
uuid_00000000000c1e79:
	push %RBP
	mov -3832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4024(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e73
	jmp uuid_00000000000c1e75
uuid_00000000000c1e73:
	push %RBP
	mov -4016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1e70
	jmp uuid_00000000000c1e72
uuid_00000000000c1e70:
	push %RBP
	mov -4008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4200(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e6a
	jmp uuid_00000000000c1e6c
uuid_00000000000c1e6a:
	push %RBP
	jmp uuid_00000000000c1e67
	jmp uuid_00000000000c1e69
uuid_00000000000c1e67:
	push %RBP
	mov -4168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4304(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e64
	jmp uuid_00000000000c1e66
uuid_00000000000c1e64:
	push %RBP
	mov -4160(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4384(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e5e
	jmp uuid_00000000000c1e60
uuid_00000000000c1e5e:
	push %RBP
	jmp uuid_00000000000c1e5b
	jmp uuid_00000000000c1e5d
uuid_00000000000c1e5b:
	push %RBP
	mov -4320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c1e58
	jmp uuid_00000000000c1e5a
uuid_00000000000c1e58:
	movb $1, -4392(%rbp)
uuid_00000000000c1e5a:
	mov -4416(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c1e5d:
	mov -4408(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c1e60:
	mov -4400(%RBP),%RSP
	add $-4424, %RSP
	mov -4392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e61
	jmp uuid_00000000000c1e63
uuid_00000000000c1e61:
	movb $1, -4208(%rbp)
uuid_00000000000c1e63:
	mov -4312(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c1e66:
	mov -4232(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c1e69:
	mov -4224(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c1e6c:
	mov -4216(%RBP),%RSP
	add $-4424, %RSP
	mov -4208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e6d
	jmp uuid_00000000000c1e6f
uuid_00000000000c1e6d:
	movb $1, -4032(%rbp)
uuid_00000000000c1e6f:
	mov -4128(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c1e72:
	mov -4048(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c1e75:
	mov -4040(%RBP),%RSP
	add $-4424, %RSP
	mov -4032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e76
	jmp uuid_00000000000c1e78
uuid_00000000000c1e76:
	movb $1, -3856(%rbp)
uuid_00000000000c1e78:
	mov -3952(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c1e7b:
	mov -3872(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000c1e7e:
	mov -3864(%RBP),%RSP
	add $-4424, %RSP
	mov -3856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ead
	jmp uuid_00000000000c1eaf
uuid_00000000000c1ead:
	push %RBP
	mov -3736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4504(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ea7
	jmp uuid_00000000000c1ea9
uuid_00000000000c1ea7:
	push %RBP
	mov -4496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e95
	jmp uuid_00000000000c1e97
uuid_00000000000c1e95:
	push %RBP
	mov -4592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4696(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e82
	jmp uuid_00000000000c1e84
uuid_00000000000c1e82:
	push %RBP
	jmp uuid_00000000000c1e7f
	jmp uuid_00000000000c1e81
uuid_00000000000c1e7f:
	movb $1, -4704(%rbp)
uuid_00000000000c1e81:
	mov -4720(%RBP),%RSP
	add $-4720, %RSP
uuid_00000000000c1e84:
	mov -4712(%RBP),%RSP
	add $-4720, %RSP
	mov -4704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e92
	jmp uuid_00000000000c1e94
uuid_00000000000c1e92:
	push %RBP
	mov -4584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4800(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e8c
	jmp uuid_00000000000c1e8e
uuid_00000000000c1e8c:
	push %RBP
	jmp uuid_00000000000c1e89
	jmp uuid_00000000000c1e8b
uuid_00000000000c1e89:
	push %RBP
	mov -4736(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4840(%rbp)
	pushq $uuid_00000000000c1e85
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1e86
	jmp uuid_00000000000c1e88
uuid_00000000000c1e86:
	movb $1, -4808(%rbp)
uuid_00000000000c1e88:
	mov -4832(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000c1e8b:
	mov -4824(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000c1e8e:
	mov -4816(%RBP),%RSP
	add $-4840, %RSP
	mov -4808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e8f
	jmp uuid_00000000000c1e91
uuid_00000000000c1e8f:
	movb $1, -4608(%rbp)
uuid_00000000000c1e91:
	mov -4728(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000c1e94:
	mov -4624(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000c1e97:
	mov -4616(%RBP),%RSP
	add $-4840, %RSP
	mov -4608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ea4
	jmp uuid_00000000000c1ea6
uuid_00000000000c1ea4:
	push %RBP
	mov -4488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4920(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e9e
	jmp uuid_00000000000c1ea0
uuid_00000000000c1e9e:
	push %RBP
	jmp uuid_00000000000c1e9b
	jmp uuid_00000000000c1e9d
uuid_00000000000c1e9b:
	push %RBP
	mov -4856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1e98
	jmp uuid_00000000000c1e9a
uuid_00000000000c1e98:
	movb $1, -4928(%rbp)
uuid_00000000000c1e9a:
	mov -4952(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c1e9d:
	mov -4944(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c1ea0:
	mov -4936(%RBP),%RSP
	add $-4960, %RSP
	mov -4928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ea1
	jmp uuid_00000000000c1ea3
uuid_00000000000c1ea1:
	movb $1, -4512(%rbp)
uuid_00000000000c1ea3:
	mov -4848(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c1ea6:
	mov -4528(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c1ea9:
	mov -4520(%RBP),%RSP
	add $-4960, %RSP
	mov -4512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1eaa
	jmp uuid_00000000000c1eac
uuid_00000000000c1eaa:
	movb $1, -3760(%rbp)
uuid_00000000000c1eac:
	mov -4432(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c1eaf:
	mov -3776(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c1eb2:
	mov -3768(%RBP),%RSP
	add $-4960, %RSP
	mov -3760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2069
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -5040(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1edf
	jmp uuid_00000000000c1ee1
uuid_00000000000c1edf:
	push %RBP
	mov -5032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5136(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ecc
	jmp uuid_00000000000c1ece
uuid_00000000000c1ecc:
	push %RBP
	mov -5128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1ec9
	jmp uuid_00000000000c1ecb
uuid_00000000000c1ec9:
	push %RBP
	mov -5120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1ec6
	jmp uuid_00000000000c1ec8
uuid_00000000000c1ec6:
	movb $1, -5144(%rbp)
uuid_00000000000c1ec8:
	mov -5240(%RBP),%RSP
	add $-5312, %RSP
uuid_00000000000c1ecb:
	mov -5160(%RBP),%RSP
	add $-5312, %RSP
uuid_00000000000c1ece:
	mov -5152(%RBP),%RSP
	add $-5312, %RSP
	mov -5144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1edc
	jmp uuid_00000000000c1ede
uuid_00000000000c1edc:
	push %RBP
	mov -5024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5392(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ed6
	jmp uuid_00000000000c1ed8
uuid_00000000000c1ed6:
	push %RBP
	jmp uuid_00000000000c1ed3
	jmp uuid_00000000000c1ed5
uuid_00000000000c1ed3:
	push %RBP
	mov -5328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5432(%rbp)
	pushq $uuid_00000000000c1ecf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ed0
	jmp uuid_00000000000c1ed2
uuid_00000000000c1ed0:
	movb $1, -5400(%rbp)
uuid_00000000000c1ed2:
	mov -5424(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000c1ed5:
	mov -5416(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000c1ed8:
	mov -5408(%RBP),%RSP
	add $-5432, %RSP
	mov -5400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ed9
	jmp uuid_00000000000c1edb
uuid_00000000000c1ed9:
	movb $1, -5048(%rbp)
uuid_00000000000c1edb:
	mov -5320(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000c1ede:
	mov -5064(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000c1ee1:
	mov -5056(%RBP),%RSP
	add $-5432, %RSP
	mov -5048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2066
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -5512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ef5
	jmp uuid_00000000000c1ef7
uuid_00000000000c1ef5:
	push %RBP
	jmp uuid_00000000000c1ef2
	jmp uuid_00000000000c1ef4
uuid_00000000000c1ef2:
	push %RBP
	mov -5496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1eec
	jmp uuid_00000000000c1eee
uuid_00000000000c1eec:
	push %RBP
	jmp uuid_00000000000c1ee9
	jmp uuid_00000000000c1eeb
uuid_00000000000c1ee9:
	push %RBP
	mov -5552(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5656(%rbp)
	pushq $uuid_00000000000c1ee5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ee6
	jmp uuid_00000000000c1ee8
uuid_00000000000c1ee6:
	movb $1, -5624(%rbp)
uuid_00000000000c1ee8:
	mov -5648(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c1eeb:
	mov -5640(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c1eee:
	mov -5632(%RBP),%RSP
	add $-5656, %RSP
	mov -5624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1eef
	jmp uuid_00000000000c1ef1
uuid_00000000000c1eef:
	movb $1, -5520(%rbp)
uuid_00000000000c1ef1:
	mov -5544(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c1ef4:
	mov -5536(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000c1ef7:
	mov -5528(%RBP),%RSP
	add $-5656, %RSP
	mov -5520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2063
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -5736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f08
	jmp uuid_00000000000c1f0a
uuid_00000000000c1f08:
	push %RBP
	mov -5728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f05
	jmp uuid_00000000000c1f07
uuid_00000000000c1f05:
	push %RBP
	mov -5720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5912(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1eff
	jmp uuid_00000000000c1f01
uuid_00000000000c1eff:
	push %RBP
	jmp uuid_00000000000c1efc
	jmp uuid_00000000000c1efe
uuid_00000000000c1efc:
	push %RBP
	mov -5848(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5952(%rbp)
	pushq $uuid_00000000000c1ef8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ef9
	jmp uuid_00000000000c1efb
uuid_00000000000c1ef9:
	movb $1, -5920(%rbp)
uuid_00000000000c1efb:
	mov -5944(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c1efe:
	mov -5936(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c1f01:
	mov -5928(%RBP),%RSP
	add $-5952, %RSP
	mov -5920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f02
	jmp uuid_00000000000c1f04
uuid_00000000000c1f02:
	movb $1, -5744(%rbp)
uuid_00000000000c1f04:
	mov -5840(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c1f07:
	mov -5760(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000c1f0a:
	mov -5752(%RBP),%RSP
	add $-5952, %RSP
	mov -5744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2060
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -6032(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f24
	jmp uuid_00000000000c1f26
uuid_00000000000c1f24:
	push %RBP
	mov -6024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f11
	jmp uuid_00000000000c1f13
uuid_00000000000c1f11:
	push %RBP
	mov -6120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f0e
	jmp uuid_00000000000c1f10
uuid_00000000000c1f0e:
	push %RBP
	mov -6112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f0b
	jmp uuid_00000000000c1f0d
uuid_00000000000c1f0b:
	movb $1, -6136(%rbp)
uuid_00000000000c1f0d:
	mov -6232(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c1f10:
	mov -6152(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c1f13:
	mov -6144(%RBP),%RSP
	add $-6304, %RSP
	mov -6136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f21
	jmp uuid_00000000000c1f23
uuid_00000000000c1f21:
	push %RBP
	mov -6016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6384(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f1b
	jmp uuid_00000000000c1f1d
uuid_00000000000c1f1b:
	push %RBP
	jmp uuid_00000000000c1f18
	jmp uuid_00000000000c1f1a
uuid_00000000000c1f18:
	push %RBP
	mov -6320(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6424(%rbp)
	pushq $uuid_00000000000c1f14
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1f15
	jmp uuid_00000000000c1f17
uuid_00000000000c1f15:
	movb $1, -6392(%rbp)
uuid_00000000000c1f17:
	mov -6416(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000c1f1a:
	mov -6408(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000c1f1d:
	mov -6400(%RBP),%RSP
	add $-6424, %RSP
	mov -6392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f1e
	jmp uuid_00000000000c1f20
uuid_00000000000c1f1e:
	movb $1, -6040(%rbp)
uuid_00000000000c1f20:
	mov -6312(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000c1f23:
	mov -6056(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000c1f26:
	mov -6048(%RBP),%RSP
	add $-6424, %RSP
	mov -6040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c205d
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -6504(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f42
	jmp uuid_00000000000c1f44
uuid_00000000000c1f42:
	push %RBP
	mov -6496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f30
	jmp uuid_00000000000c1f32
uuid_00000000000c1f30:
	push %RBP
	mov -6592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f2d
	jmp uuid_00000000000c1f2f
uuid_00000000000c1f2d:
	push %RBP
	mov -6584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f2a
	jmp uuid_00000000000c1f2c
uuid_00000000000c1f2a:
	movb $1, -6608(%rbp)
uuid_00000000000c1f2c:
	mov -6704(%RBP),%RSP
	add $-6776, %RSP
uuid_00000000000c1f2f:
	mov -6624(%RBP),%RSP
	add $-6776, %RSP
uuid_00000000000c1f32:
	mov -6616(%RBP),%RSP
	add $-6776, %RSP
	mov -6608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f3f
	jmp uuid_00000000000c1f41
uuid_00000000000c1f3f:
	push %RBP
	mov -6488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6856(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f39
	jmp uuid_00000000000c1f3b
uuid_00000000000c1f39:
	push %RBP
	jmp uuid_00000000000c1f36
	jmp uuid_00000000000c1f38
uuid_00000000000c1f36:
	push %RBP
	mov -6792(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6896(%rbp)
	pushq $uuid_00000000000bea4c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1f33
	jmp uuid_00000000000c1f35
uuid_00000000000c1f33:
	movb $1, -6864(%rbp)
uuid_00000000000c1f35:
	mov -6888(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000c1f38:
	mov -6880(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000c1f3b:
	mov -6872(%RBP),%RSP
	add $-6896, %RSP
	mov -6864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f3c
	jmp uuid_00000000000c1f3e
uuid_00000000000c1f3c:
	movb $1, -6512(%rbp)
uuid_00000000000c1f3e:
	mov -6784(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000c1f41:
	mov -6528(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000c1f44:
	mov -6520(%RBP),%RSP
	add $-6896, %RSP
	mov -6512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c205a
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -6976(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f61
	jmp uuid_00000000000c1f63
uuid_00000000000c1f61:
	push %RBP
	mov -6968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7072(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f4e
	jmp uuid_00000000000c1f50
uuid_00000000000c1f4e:
	push %RBP
	mov -7064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f4b
	jmp uuid_00000000000c1f4d
uuid_00000000000c1f4b:
	push %RBP
	mov -7056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f48
	jmp uuid_00000000000c1f4a
uuid_00000000000c1f48:
	movb $1, -7080(%rbp)
uuid_00000000000c1f4a:
	mov -7176(%RBP),%RSP
	add $-7248, %RSP
uuid_00000000000c1f4d:
	mov -7096(%RBP),%RSP
	add $-7248, %RSP
uuid_00000000000c1f50:
	mov -7088(%RBP),%RSP
	add $-7248, %RSP
	mov -7080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f5e
	jmp uuid_00000000000c1f60
uuid_00000000000c1f5e:
	push %RBP
	mov -6960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7328(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f58
	jmp uuid_00000000000c1f5a
uuid_00000000000c1f58:
	push %RBP
	jmp uuid_00000000000c1f55
	jmp uuid_00000000000c1f57
uuid_00000000000c1f55:
	push %RBP
	mov -7264(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7368(%rbp)
	pushq $uuid_00000000000c1f51
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1f52
	jmp uuid_00000000000c1f54
uuid_00000000000c1f52:
	movb $1, -7336(%rbp)
uuid_00000000000c1f54:
	mov -7360(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000c1f57:
	mov -7352(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000c1f5a:
	mov -7344(%RBP),%RSP
	add $-7368, %RSP
	mov -7336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f5b
	jmp uuid_00000000000c1f5d
uuid_00000000000c1f5b:
	movb $1, -6984(%rbp)
uuid_00000000000c1f5d:
	mov -7256(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000c1f60:
	mov -7000(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000c1f63:
	mov -6992(%RBP),%RSP
	add $-7368, %RSP
	mov -6984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2057
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -7448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f7d
	jmp uuid_00000000000c1f7f
uuid_00000000000c1f7d:
	push %RBP
	mov -7440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7544(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f6a
	jmp uuid_00000000000c1f6c
uuid_00000000000c1f6a:
	push %RBP
	mov -7536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f67
	jmp uuid_00000000000c1f69
uuid_00000000000c1f67:
	push %RBP
	mov -7528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f64
	jmp uuid_00000000000c1f66
uuid_00000000000c1f64:
	movb $1, -7552(%rbp)
uuid_00000000000c1f66:
	mov -7648(%RBP),%RSP
	add $-7720, %RSP
uuid_00000000000c1f69:
	mov -7568(%RBP),%RSP
	add $-7720, %RSP
uuid_00000000000c1f6c:
	mov -7560(%RBP),%RSP
	add $-7720, %RSP
	mov -7552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f7a
	jmp uuid_00000000000c1f7c
uuid_00000000000c1f7a:
	push %RBP
	mov -7432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7800(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f74
	jmp uuid_00000000000c1f76
uuid_00000000000c1f74:
	push %RBP
	jmp uuid_00000000000c1f71
	jmp uuid_00000000000c1f73
uuid_00000000000c1f71:
	push %RBP
	mov -7736(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7840(%rbp)
	pushq $uuid_00000000000c1f6d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1f6e
	jmp uuid_00000000000c1f70
uuid_00000000000c1f6e:
	movb $1, -7808(%rbp)
uuid_00000000000c1f70:
	mov -7832(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000c1f73:
	mov -7824(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000c1f76:
	mov -7816(%RBP),%RSP
	add $-7840, %RSP
	mov -7808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f77
	jmp uuid_00000000000c1f79
uuid_00000000000c1f77:
	movb $1, -7456(%rbp)
uuid_00000000000c1f79:
	mov -7728(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000c1f7c:
	mov -7472(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000c1f7f:
	mov -7464(%RBP),%RSP
	add $-7840, %RSP
	mov -7456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2054
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -7920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f99
	jmp uuid_00000000000c1f9b
uuid_00000000000c1f99:
	push %RBP
	mov -7912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8016(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f86
	jmp uuid_00000000000c1f88
uuid_00000000000c1f86:
	push %RBP
	mov -8008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f83
	jmp uuid_00000000000c1f85
uuid_00000000000c1f83:
	push %RBP
	mov -8000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f80
	jmp uuid_00000000000c1f82
uuid_00000000000c1f80:
	movb $1, -8024(%rbp)
uuid_00000000000c1f82:
	mov -8120(%RBP),%RSP
	add $-8192, %RSP
uuid_00000000000c1f85:
	mov -8040(%RBP),%RSP
	add $-8192, %RSP
uuid_00000000000c1f88:
	mov -8032(%RBP),%RSP
	add $-8192, %RSP
	mov -8024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f96
	jmp uuid_00000000000c1f98
uuid_00000000000c1f96:
	push %RBP
	mov -7904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8272(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f90
	jmp uuid_00000000000c1f92
uuid_00000000000c1f90:
	push %RBP
	jmp uuid_00000000000c1f8d
	jmp uuid_00000000000c1f8f
uuid_00000000000c1f8d:
	push %RBP
	mov -8208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8312(%rbp)
	pushq $uuid_00000000000c1f89
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1f8a
	jmp uuid_00000000000c1f8c
uuid_00000000000c1f8a:
	movb $1, -8280(%rbp)
uuid_00000000000c1f8c:
	mov -8304(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000c1f8f:
	mov -8296(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000c1f92:
	mov -8288(%RBP),%RSP
	add $-8312, %RSP
	mov -8280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f93
	jmp uuid_00000000000c1f95
uuid_00000000000c1f93:
	movb $1, -7928(%rbp)
uuid_00000000000c1f95:
	mov -8200(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000c1f98:
	mov -7944(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000c1f9b:
	mov -7936(%RBP),%RSP
	add $-8312, %RSP
	mov -7928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2051
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -8392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fb4
	jmp uuid_00000000000c1fb6
uuid_00000000000c1fb4:
	push %RBP
	mov -8384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fa2
	jmp uuid_00000000000c1fa4
uuid_00000000000c1fa2:
	push %RBP
	mov -8480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f9f
	jmp uuid_00000000000c1fa1
uuid_00000000000c1f9f:
	push %RBP
	mov -8472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1f9c
	jmp uuid_00000000000c1f9e
uuid_00000000000c1f9c:
	movb $1, -8496(%rbp)
uuid_00000000000c1f9e:
	mov -8592(%RBP),%RSP
	add $-8664, %RSP
uuid_00000000000c1fa1:
	mov -8512(%RBP),%RSP
	add $-8664, %RSP
uuid_00000000000c1fa4:
	mov -8504(%RBP),%RSP
	add $-8664, %RSP
	mov -8496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fb1
	jmp uuid_00000000000c1fb3
uuid_00000000000c1fb1:
	push %RBP
	mov -8376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8744(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fab
	jmp uuid_00000000000c1fad
uuid_00000000000c1fab:
	push %RBP
	jmp uuid_00000000000c1fa8
	jmp uuid_00000000000c1faa
uuid_00000000000c1fa8:
	push %RBP
	mov -8680(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8784(%rbp)
	pushq $uuid_00000000000bea25
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1fa5
	jmp uuid_00000000000c1fa7
uuid_00000000000c1fa5:
	movb $1, -8752(%rbp)
uuid_00000000000c1fa7:
	mov -8776(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000c1faa:
	mov -8768(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000c1fad:
	mov -8760(%RBP),%RSP
	add $-8784, %RSP
	mov -8752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fae
	jmp uuid_00000000000c1fb0
uuid_00000000000c1fae:
	movb $1, -8400(%rbp)
uuid_00000000000c1fb0:
	mov -8672(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000c1fb3:
	mov -8416(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000c1fb6:
	mov -8408(%RBP),%RSP
	add $-8784, %RSP
	mov -8400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c204e
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -8864(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fcf
	jmp uuid_00000000000c1fd1
uuid_00000000000c1fcf:
	push %RBP
	mov -8856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8960(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fbd
	jmp uuid_00000000000c1fbf
uuid_00000000000c1fbd:
	push %RBP
	mov -8952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1fba
	jmp uuid_00000000000c1fbc
uuid_00000000000c1fba:
	push %RBP
	mov -8944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1fb7
	jmp uuid_00000000000c1fb9
uuid_00000000000c1fb7:
	movb $1, -8968(%rbp)
uuid_00000000000c1fb9:
	mov -9064(%RBP),%RSP
	add $-9136, %RSP
uuid_00000000000c1fbc:
	mov -8984(%RBP),%RSP
	add $-9136, %RSP
uuid_00000000000c1fbf:
	mov -8976(%RBP),%RSP
	add $-9136, %RSP
	mov -8968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fcc
	jmp uuid_00000000000c1fce
uuid_00000000000c1fcc:
	push %RBP
	mov -8848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9216(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fc6
	jmp uuid_00000000000c1fc8
uuid_00000000000c1fc6:
	push %RBP
	jmp uuid_00000000000c1fc3
	jmp uuid_00000000000c1fc5
uuid_00000000000c1fc3:
	push %RBP
	mov -9152(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9256(%rbp)
	pushq $uuid_00000000000be71e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1fc0
	jmp uuid_00000000000c1fc2
uuid_00000000000c1fc0:
	movb $1, -9224(%rbp)
uuid_00000000000c1fc2:
	mov -9248(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000c1fc5:
	mov -9240(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000c1fc8:
	mov -9232(%RBP),%RSP
	add $-9256, %RSP
	mov -9224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fc9
	jmp uuid_00000000000c1fcb
uuid_00000000000c1fc9:
	movb $1, -8872(%rbp)
uuid_00000000000c1fcb:
	mov -9144(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000c1fce:
	mov -8888(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000c1fd1:
	mov -8880(%RBP),%RSP
	add $-9256, %RSP
	mov -8872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c204b
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -9336(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ff3
	jmp uuid_00000000000c1ff5
uuid_00000000000c1ff3:
	push %RBP
	mov -9328(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1ff0
	jmp uuid_00000000000c1ff2
uuid_00000000000c1ff0:
	push %RBP
	mov -9320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fea
	jmp uuid_00000000000c1fec
uuid_00000000000c1fea:
	push %RBP
	mov -9504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1fe7
	jmp uuid_00000000000c1fe9
uuid_00000000000c1fe7:
	push %RBP
	mov -9496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9688(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fe1
	jmp uuid_00000000000c1fe3
uuid_00000000000c1fe1:
	push %RBP
	mov -9680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1fde
	jmp uuid_00000000000c1fe0
uuid_00000000000c1fde:
	push %RBP
	mov -9672(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9864(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fd8
	jmp uuid_00000000000c1fda
uuid_00000000000c1fd8:
	push %RBP
	jmp uuid_00000000000c1fd5
	jmp uuid_00000000000c1fd7
uuid_00000000000c1fd5:
	push %RBP
	mov -9800(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9904(%rbp)
	pushq $uuid_00000000000bebb5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1fd2
	jmp uuid_00000000000c1fd4
uuid_00000000000c1fd2:
	movb $1, -9872(%rbp)
uuid_00000000000c1fd4:
	mov -9896(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c1fd7:
	mov -9888(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c1fda:
	mov -9880(%RBP),%RSP
	add $-9904, %RSP
	mov -9872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fdb
	jmp uuid_00000000000c1fdd
uuid_00000000000c1fdb:
	movb $1, -9696(%rbp)
uuid_00000000000c1fdd:
	mov -9792(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c1fe0:
	mov -9712(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c1fe3:
	mov -9704(%RBP),%RSP
	add $-9904, %RSP
	mov -9696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fe4
	jmp uuid_00000000000c1fe6
uuid_00000000000c1fe4:
	movb $1, -9520(%rbp)
uuid_00000000000c1fe6:
	mov -9616(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c1fe9:
	mov -9536(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c1fec:
	mov -9528(%RBP),%RSP
	add $-9904, %RSP
	mov -9520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1fed
	jmp uuid_00000000000c1fef
uuid_00000000000c1fed:
	movb $1, -9344(%rbp)
uuid_00000000000c1fef:
	mov -9440(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c1ff2:
	mov -9360(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000c1ff5:
	mov -9352(%RBP),%RSP
	add $-9904, %RSP
	mov -9344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2048
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -9984(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c201e
	jmp uuid_00000000000c2020
uuid_00000000000c201e:
	push %RBP
	mov -9976(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c201b
	jmp uuid_00000000000c201d
uuid_00000000000c201b:
	push %RBP
	mov -9968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -10160(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2015
	jmp uuid_00000000000c2017
uuid_00000000000c2015:
	push %RBP
	pushq -10136(%RBP)
	pushq -10144(%RBP)
	pushq -10152(%RBP)
	jmp uuid_00000000000c2012
	jmp uuid_00000000000c2014
uuid_00000000000c2012:
	push %RBP
	mov -10128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -10288(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c200f
	jmp uuid_00000000000c2011
uuid_00000000000c200f:
	push %RBP
	mov -10120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -10368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2009
	jmp uuid_00000000000c200b
uuid_00000000000c2009:
	push %RBP
	jmp uuid_00000000000c2006
	jmp uuid_00000000000c2008
uuid_00000000000c2006:
	push %RBP
	mov -10304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2003
	jmp uuid_00000000000c2005
uuid_00000000000c2003:
	movb $1, -10376(%rbp)
uuid_00000000000c2005:
	mov -10400(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c2008:
	mov -10392(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c200b:
	mov -10384(%RBP),%RSP
	add $-10408, %RSP
	mov -10376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c200c
	jmp uuid_00000000000c200e
uuid_00000000000c200c:
	movb $1, -10168(%rbp)
uuid_00000000000c200e:
	mov -10296(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c2011:
	mov -10216(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c2014:
	mov -10184(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c2017:
	mov -10176(%RBP),%RSP
	add $-10408, %RSP
	mov -10168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2018
	jmp uuid_00000000000c201a
uuid_00000000000c2018:
	movb $1, -9992(%rbp)
uuid_00000000000c201a:
	mov -10088(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c201d:
	mov -10008(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000c2020:
	mov -10000(%RBP),%RSP
	add $-10408, %RSP
	mov -9992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2045
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -10488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2027
	jmp uuid_00000000000c2029
uuid_00000000000c2027:
	push %RBP
	mov -10480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2024
	jmp uuid_00000000000c2026
uuid_00000000000c2024:
	push %RBP
	mov -10472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2021
	jmp uuid_00000000000c2023
uuid_00000000000c2021:
	movb $1, -10496(%rbp)
uuid_00000000000c2023:
	mov -10592(%RBP),%RSP
	add $-10664, %RSP
uuid_00000000000c2026:
	mov -10512(%RBP),%RSP
	add $-10664, %RSP
uuid_00000000000c2029:
	mov -10504(%RBP),%RSP
	add $-10664, %RSP
	mov -10496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2042
	push %RBP
	jmp uuid_00000000000c203f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c203e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2041
uuid_00000000000c203f:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c203d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2041:
	mov -10672(%RBP),%RSP
	add $-10672, %RSP
	jmp uuid_00000000000c2044
uuid_00000000000c2042:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10600(%rbp)
	pushq -10608(%rbp)
	pushq -10616(%rbp)
	pushq -10624(%rbp)
	pushq -10632(%rbp)
	pushq -10640(%rbp)
	pushq -10648(%rbp)
	pushq -10656(%rbp)
	pushq -10664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c203a
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -10600(%rbp)
	pushq -10608(%rbp)
	pushq -10616(%rbp)
	pushq -10624(%rbp)
	pushq -10632(%rbp)
	pushq -10640(%rbp)
	pushq -10648(%rbp)
	pushq -10656(%rbp)
	pushq -10664(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10680(%RBP)
	pushq -10688(%RBP)
	pushq -10696(%RBP)
	pushq -10704(%RBP)
	pushq -10712(%RBP)
	pushq -10720(%RBP)
	pushq -10728(%RBP)
	pushq -10736(%RBP)
	pushq -10744(%RBP)
	pushq -10752(%RBP)
	pushq -10760(%RBP)
	pushq -10768(%RBP)
	pushq -10776(%RBP)
	pushq -10784(%RBP)
	pushq -10792(%RBP)
	pushq -10800(%RBP)
	pushq -10808(%RBP)
	pushq -10816(%RBP)
	pushq -10824(%RBP)
	pushq -10832(%RBP)
	pushq -10840(%RBP)
	pushq -10848(%RBP)
	pushq -10856(%RBP)
	pushq -10864(%RBP)
	pushq -10872(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -10568(%rbp)
	pushq -10576(%rbp)
	pushq -10584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10912(%RBP)
	pushq -10920(%RBP)
	pushq -10928(%RBP)
	pushq -10936(%RBP)
	pushq -10944(%RBP)
	pushq -10952(%RBP)
	pushq -10960(%RBP)
	pushq -10968(%RBP)
	pushq -10976(%RBP)
	pushq -10984(%RBP)
	pushq -10992(%RBP)
	pushq -11000(%RBP)
	pushq -11008(%RBP)
	pushq -11016(%RBP)
	pushq -11024(%RBP)
	pushq -11032(%RBP)
	pushq -11040(%RBP)
	pushq -11048(%RBP)
	pushq -11056(%RBP)
	pushq -11064(%RBP)
	pushq -11072(%RBP)
	pushq -11080(%RBP)
	pushq -11088(%RBP)
	pushq -11096(%RBP)
	pushq -11104(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -10880(%RBP)
	pushq -10888(%RBP)
	pushq -10896(%RBP)
	pushq -11112(%RBP)
	pushq -11120(%RBP)
	pushq -11128(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -11144(%rbp)
	pushq -11152(%rbp)
	pushq -11160(%rbp)
	pushq -11168(%rbp)
	pushq -11176(%rbp)
	pushq -11184(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c203c
uuid_00000000000c203a:
	pushq -10600(%rbp)
	pushq -10608(%rbp)
	pushq -10616(%rbp)
	pushq -10624(%rbp)
	pushq -10632(%rbp)
	pushq -10640(%rbp)
	pushq -10648(%rbp)
	pushq -10656(%rbp)
	pushq -10664(%rbp)
	push %RBP
	pushq -10680(%rbp)
	pushq -10688(%rbp)
	pushq -10696(%rbp)
	pushq -10704(%rbp)
	pushq -10712(%rbp)
	pushq -10720(%rbp)
	pushq -10728(%rbp)
	pushq -10736(%rbp)
	pushq -10744(%rbp)
	pushq $0
	push %RBP
	mov -10824(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2030
	jmp uuid_00000000000c2032
uuid_00000000000c2030:
	push %RBP
	jmp uuid_00000000000c202d
	jmp uuid_00000000000c202f
uuid_00000000000c202d:
	push %RBP
	mov -10760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c202a
	jmp uuid_00000000000c202c
uuid_00000000000c202a:
	movb $1, -10832(%rbp)
uuid_00000000000c202c:
	mov -10856(%RBP),%RSP
	add $-10864, %RSP
uuid_00000000000c202f:
	mov -10848(%RBP),%RSP
	add $-10864, %RSP
uuid_00000000000c2032:
	mov -10840(%RBP),%RSP
	add $-10864, %RSP
	mov -10832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2037
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2036
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2039
uuid_00000000000c2037:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10864(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2033
#call function cc-blob : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -10864(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -10568(%rbp)
	pushq -10576(%rbp)
	pushq -10584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10880(%rbp)
	pushq -10888(%rbp)
	pushq -10896(%rbp)
	pushq -10904(%rbp)
	pushq -10912(%rbp)
	pushq -10920(%rbp)
	pushq -10928(%rbp)
	pushq -10936(%rbp)
	pushq -10944(%rbp)
	pushq -10952(%rbp)
	pushq -10960(%rbp)
	pushq -10968(%rbp)
	pushq -10976(%rbp)
	pushq -10984(%rbp)
	pushq -10992(%rbp)
	pushq -11000(%rbp)
	pushq -11008(%rbp)
	pushq -11016(%rbp)
	pushq -11024(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c2035
uuid_00000000000c2033:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -10864(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -10568(%rbp)
	pushq -10576(%rbp)
	pushq -10584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -11080(%RBP)
	pushq -11088(%RBP)
	pushq -11096(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c2035:
	mov -10872(%RBP),%RSP
	add $-11104, %RSP
uuid_00000000000c2039:
	mov -10752(%RBP),%RSP
	add $-11104, %RSP
uuid_00000000000c203c:
	mov -10672(%RBP),%RSP
	add $-11104, %RSP
uuid_00000000000c2044:
	mov -10416(%RBP),%RSP
	add $-11104, %RSP
	jmp uuid_00000000000c2047
uuid_00000000000c2045:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -10016(%rbp)
	pushq -10024(%rbp)
	pushq -10032(%rbp)
	pushq -10040(%rbp)
	pushq -10048(%rbp)
	pushq -10056(%rbp)
	pushq -10064(%rbp)
	pushq -10072(%rbp)
	pushq -10080(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10768(%RBP)
	pushq -10776(%RBP)
	pushq -10784(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10416(%rbp)
	pushq -10424(%rbp)
	pushq -10432(%rbp)
	pushq -10440(%rbp)
	pushq -10448(%rbp)
	pushq -10456(%rbp)
	pushq -10464(%rbp)
	pushq -10472(%rbp)
	pushq -10480(%rbp)
	pushq -10488(%rbp)
	pushq -10496(%rbp)
	pushq -10504(%rbp)
	pushq -10512(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -208(%rbp)
	pushq -10800(%rbp)
	pushq -10808(%rbp)
	pushq -10816(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -10560(%RBP)
	popq -10552(%RBP)
	popq -10544(%RBP)
	popq -10536(%RBP)
	popq -10528(%RBP)
	popq -10520(%RBP)
	popq -10512(%RBP)
	popq -10504(%RBP)
	popq -10496(%RBP)
	popq -10488(%RBP)
	popq -10480(%RBP)
	popq -10472(%RBP)
	popq -10464(%RBP)
	popq -10456(%RBP)
	popq -10448(%RBP)
	popq -10440(%RBP)
	popq -10432(%RBP)
	popq -10424(%RBP)
	popq -10416(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10416(%rbp)
	pushq -10424(%rbp)
	pushq -10432(%rbp)
	pushq -10440(%rbp)
	pushq -10448(%rbp)
	pushq -10456(%rbp)
	pushq -10464(%rbp)
	pushq -10472(%rbp)
	pushq -10480(%rbp)
	pushq -10488(%rbp)
	pushq -10496(%rbp)
	pushq -10504(%rbp)
	pushq -10512(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq $uuid_00000000000c0b38
	pushq -10800(%rbp)
	pushq -10808(%rbp)
	pushq -10816(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -10560(%RBP)
	popq -10552(%RBP)
	popq -10544(%RBP)
	popq -10536(%RBP)
	popq -10528(%RBP)
	popq -10520(%RBP)
	popq -10512(%RBP)
	popq -10504(%RBP)
	popq -10496(%RBP)
	popq -10488(%RBP)
	popq -10480(%RBP)
	popq -10472(%RBP)
	popq -10464(%RBP)
	popq -10456(%RBP)
	popq -10448(%RBP)
	popq -10440(%RBP)
	popq -10432(%RBP)
	popq -10424(%RBP)
	popq -10416(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -10408(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10016(%rbp)
	pushq -10024(%rbp)
	pushq -10032(%rbp)
	pushq -10040(%rbp)
	pushq -10048(%rbp)
	pushq -10056(%rbp)
	pushq -10064(%rbp)
	pushq -10072(%rbp)
	pushq -10080(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -10416(%rbp)
	pushq -10424(%rbp)
	pushq -10432(%rbp)
	pushq -10440(%rbp)
	pushq -10448(%rbp)
	pushq -10456(%rbp)
	pushq -10464(%rbp)
	pushq -10472(%rbp)
	pushq -10480(%rbp)
	pushq -10488(%rbp)
	pushq -10496(%rbp)
	pushq -10504(%rbp)
	pushq -10512(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2047:
	mov -9912(%RBP),%RSP
	add $-10816, %RSP
	jmp uuid_00000000000c204a
uuid_00000000000c2048:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9720(%rbp)
	pushq -9728(%rbp)
	pushq -9736(%rbp)
	pushq -9744(%rbp)
	pushq -9752(%rbp)
	pushq -9760(%rbp)
	pushq -9768(%rbp)
	pushq -9776(%rbp)
	pushq -9784(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10112(%RBP)
	pushq -10120(%RBP)
	pushq -10128(%RBP)
	pushq -10144(%rbp)
	pushq -10152(%rbp)
	pushq -10160(%rbp)
	push %RBP
	pushq -10168(%rbp)
	pushq -10176(%rbp)
	pushq -10184(%rbp)
	pushq $0
	push %RBP
	mov -10216(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ff9
	jmp uuid_00000000000c1ffb
uuid_00000000000c1ff9:
	push %RBP
	mov -10208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10248(%rbp)
	pushq $uuid_00000000000be753
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ff6
	jmp uuid_00000000000c1ff8
uuid_00000000000c1ff6:
	movb $1, -10224(%rbp)
uuid_00000000000c1ff8:
	mov -10240(%RBP),%RSP
	add $-10248, %RSP
uuid_00000000000c1ffb:
	mov -10232(%RBP),%RSP
	add $-10248, %RSP
	mov -10224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2000
	push %RBP
	jmp uuid_00000000000c1ffd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1ffc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1fff
uuid_00000000000c1ffd:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9368(%rbp)
	pushq -9376(%rbp)
	pushq -9384(%rbp)
	pushq -9392(%rbp)
	pushq -9400(%rbp)
	pushq -9408(%rbp)
	pushq -9416(%rbp)
	pushq -9424(%rbp)
	pushq -9432(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10464(%RBP)
	pushq -10472(%RBP)
	pushq -10480(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1fff:
	mov -10256(%RBP),%RSP
	add $-10488, %RSP
	jmp uuid_00000000000c2002
uuid_00000000000c2000:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9544(%rbp)
	pushq -9552(%rbp)
	pushq -9560(%rbp)
	pushq -9568(%rbp)
	pushq -9576(%rbp)
	pushq -9584(%rbp)
	pushq -9592(%rbp)
	pushq -9600(%rbp)
	pushq -9608(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10456(%RBP)
	pushq -10464(%RBP)
	pushq -10472(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c2002:
	mov -10192(%RBP),%RSP
	add $-10480, %RSP
uuid_00000000000c204a:
	mov -9264(%RBP),%RSP
	add $-10480, %RSP
	jmp uuid_00000000000c204d
uuid_00000000000c204b:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9072(%rbp)
	pushq -9080(%rbp)
	pushq -9088(%rbp)
	pushq -9096(%rbp)
	pushq -9104(%rbp)
	pushq -9112(%rbp)
	pushq -9120(%rbp)
	pushq -9128(%rbp)
	pushq -9136(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -9464(%RBP)
	pushq -9472(%RBP)
	pushq -9480(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8992(%rbp)
	pushq -9000(%rbp)
	pushq -9008(%rbp)
	pushq -9016(%rbp)
	pushq -9024(%rbp)
	pushq -9032(%rbp)
	pushq -9040(%rbp)
	pushq -9048(%rbp)
	pushq -9056(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -9720(%RBP)
	pushq -9728(%RBP)
	pushq -9736(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9496(%rbp)
	pushq -9504(%rbp)
	pushq -9512(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9752(%rbp)
	pushq -9760(%rbp)
	pushq -9768(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -9776(%RBP), %RAX
	mov -9784(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c204d:
	mov -8792(%RBP),%RSP
	add $-9784, %RSP
	jmp uuid_00000000000c2050
uuid_00000000000c204e:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq -8648(%rbp)
	pushq -8656(%rbp)
	pushq -8664(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8992(%RBP)
	pushq -9000(%RBP)
	pushq -9008(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8520(%rbp)
	pushq -8528(%rbp)
	pushq -8536(%rbp)
	pushq -8544(%rbp)
	pushq -8552(%rbp)
	pushq -8560(%rbp)
	pushq -8568(%rbp)
	pushq -8576(%rbp)
	pushq -8584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -9248(%RBP)
	pushq -9256(%RBP)
	pushq -9264(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9024(%rbp)
	pushq -9032(%rbp)
	pushq -9040(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9280(%rbp)
	pushq -9288(%rbp)
	pushq -9296(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -9304(%RBP), %RAX
	mov -9312(%RBP), %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c2050:
	mov -8320(%RBP),%RSP
	add $-9312, %RSP
	jmp uuid_00000000000c2053
uuid_00000000000c2051:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8128(%rbp)
	pushq -8136(%rbp)
	pushq -8144(%rbp)
	pushq -8152(%rbp)
	pushq -8160(%rbp)
	pushq -8168(%rbp)
	pushq -8176(%rbp)
	pushq -8184(%rbp)
	pushq -8192(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8520(%RBP)
	pushq -8528(%RBP)
	pushq -8536(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8048(%rbp)
	pushq -8056(%rbp)
	pushq -8064(%rbp)
	pushq -8072(%rbp)
	pushq -8080(%rbp)
	pushq -8088(%rbp)
	pushq -8096(%rbp)
	pushq -8104(%rbp)
	pushq -8112(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8776(%RBP)
	pushq -8784(%RBP)
	pushq -8792(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8552(%rbp)
	pushq -8560(%rbp)
	pushq -8568(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8808(%rbp)
	pushq -8816(%rbp)
	pushq -8824(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8832(%RBP), %RAX
	mov -8840(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c2053:
	mov -7848(%RBP),%RSP
	add $-8840, %RSP
	jmp uuid_00000000000c2056
uuid_00000000000c2054:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7656(%rbp)
	pushq -7664(%rbp)
	pushq -7672(%rbp)
	pushq -7680(%rbp)
	pushq -7688(%rbp)
	pushq -7696(%rbp)
	pushq -7704(%rbp)
	pushq -7712(%rbp)
	pushq -7720(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8048(%RBP)
	pushq -8056(%RBP)
	pushq -8064(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7576(%rbp)
	pushq -7584(%rbp)
	pushq -7592(%rbp)
	pushq -7600(%rbp)
	pushq -7608(%rbp)
	pushq -7616(%rbp)
	pushq -7624(%rbp)
	pushq -7632(%rbp)
	pushq -7640(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8304(%RBP)
	pushq -8312(%RBP)
	pushq -8320(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8080(%rbp)
	pushq -8088(%rbp)
	pushq -8096(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8336(%rbp)
	pushq -8344(%rbp)
	pushq -8352(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8360(%RBP), %RAX
	mov -8368(%RBP), %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c2056:
	mov -7376(%RBP),%RSP
	add $-8368, %RSP
	jmp uuid_00000000000c2059
uuid_00000000000c2057:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7184(%rbp)
	pushq -7192(%rbp)
	pushq -7200(%rbp)
	pushq -7208(%rbp)
	pushq -7216(%rbp)
	pushq -7224(%rbp)
	pushq -7232(%rbp)
	pushq -7240(%rbp)
	pushq -7248(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7576(%RBP)
	pushq -7584(%RBP)
	pushq -7592(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7104(%rbp)
	pushq -7112(%rbp)
	pushq -7120(%rbp)
	pushq -7128(%rbp)
	pushq -7136(%rbp)
	pushq -7144(%rbp)
	pushq -7152(%rbp)
	pushq -7160(%rbp)
	pushq -7168(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7832(%RBP)
	pushq -7840(%RBP)
	pushq -7848(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7608(%rbp)
	pushq -7616(%rbp)
	pushq -7624(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7864(%rbp)
	pushq -7872(%rbp)
	pushq -7880(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -7888(%RBP), %RAX
	mov -7896(%RBP), %R14
	mov $0, %RDX
	div %R14
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c2059:
	mov -6904(%RBP),%RSP
	add $-7896, %RSP
	jmp uuid_00000000000c205c
uuid_00000000000c205a:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6712(%rbp)
	pushq -6720(%rbp)
	pushq -6728(%rbp)
	pushq -6736(%rbp)
	pushq -6744(%rbp)
	pushq -6752(%rbp)
	pushq -6760(%rbp)
	pushq -6768(%rbp)
	pushq -6776(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7104(%RBP)
	pushq -7112(%RBP)
	pushq -7120(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6632(%rbp)
	pushq -6640(%rbp)
	pushq -6648(%rbp)
	pushq -6656(%rbp)
	pushq -6664(%rbp)
	pushq -6672(%rbp)
	pushq -6680(%rbp)
	pushq -6688(%rbp)
	pushq -6696(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7360(%RBP)
	pushq -7368(%RBP)
	pushq -7376(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7136(%rbp)
	pushq -7144(%rbp)
	pushq -7152(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7392(%rbp)
	pushq -7400(%rbp)
	pushq -7408(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -7416(%RBP), %RAX
	mov -7424(%RBP), %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1f45
	pushq $0
	pushq $uuid_00000000000be71a
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c1f47
uuid_00000000000c1f45:
	pushq $0
	pushq $uuid_00000000000be753
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1f47:
	mov -7432(%RBP),%RSP
	add $-7432, %RSP
uuid_00000000000c205c:
	mov -6432(%RBP),%RSP
	add $-7432, %RSP
	jmp uuid_00000000000c205f
uuid_00000000000c205d:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6240(%rbp)
	pushq -6248(%rbp)
	pushq -6256(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	pushq -6288(%rbp)
	pushq -6296(%rbp)
	pushq -6304(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -6632(%RBP)
	pushq -6640(%RBP)
	pushq -6648(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6160(%rbp)
	pushq -6168(%rbp)
	pushq -6176(%rbp)
	pushq -6184(%rbp)
	pushq -6192(%rbp)
	pushq -6200(%rbp)
	pushq -6208(%rbp)
	pushq -6216(%rbp)
	pushq -6224(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -6888(%RBP)
	pushq -6896(%RBP)
	pushq -6904(%RBP)
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6664(%rbp)
	pushq -6672(%rbp)
	pushq -6680(%rbp)
	pushq -6920(%rbp)
	pushq -6928(%rbp)
	pushq -6936(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1f27
	pushq $0
	pushq $uuid_00000000000be71a
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c1f29
uuid_00000000000c1f27:
	pushq $0
	pushq $uuid_00000000000be753
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c1f29:
	mov -6944(%RBP),%RSP
	add $-6944, %RSP
uuid_00000000000c205f:
	mov -5960(%RBP),%RSP
	add $-6944, %RSP
	jmp uuid_00000000000c2062
uuid_00000000000c2060:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -5768(%rbp)
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	pushq -5800(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -6160(%RBP)
	pushq -6168(%RBP)
	pushq -6176(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6192(%rbp)
	pushq -6200(%rbp)
	pushq -6208(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function align : Arrow<I64,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6216(%rbp)
	mov %RBX, %RBP
	call align_CL_ArrowI64I64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c2062:
	mov -5664(%RBP),%RSP
	add $-6216, %RSP
	jmp uuid_00000000000c2065
uuid_00000000000c2063:
	pushq $0
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c2065:
	mov -5440(%RBP),%RSP
	add $-5656, %RSP
	jmp uuid_00000000000c2068
uuid_00000000000c2066:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5640(%RBP)
	pushq -5648(%RBP)
	pushq -5656(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5896(%RBP)
	pushq -5904(%RBP)
	pushq -5912(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5672(%rbp)
	pushq -5680(%rbp)
	pushq -5688(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5928(%rbp)
	pushq -5936(%rbp)
	pushq -5944(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c1ee2:
	mov -5952(%RBP), %RAX
	mov -5960(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ee3
	jmp uuid_00000000000c1ee4
uuid_00000000000c1ee3:
	mov -5960(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -5960(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5960(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000c1ee2
uuid_00000000000c1ee4:
uuid_00000000000c2068:
	mov -4968(%RBP),%RSP
	add $-5960, %RSP
	jmp uuid_00000000000c206b
uuid_00000000000c2069:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	pushq -4120(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5168(%RBP)
	pushq -5176(%RBP)
	pushq -5184(%RBP)
uuid_00000000000c1ec3:
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1ec4
	jmp uuid_00000000000c1ec5
uuid_00000000000c1ec4:
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	push %RBP
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq $0
	push %RBP
	mov -5272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1eb9
	jmp uuid_00000000000c1ebb
uuid_00000000000c1eb9:
	push %RBP
	mov -5264(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1eb6
	jmp uuid_00000000000c1eb8
uuid_00000000000c1eb6:
	push %RBP
	mov -5256(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1eb3
	jmp uuid_00000000000c1eb5
uuid_00000000000c1eb3:
	movb $1, -5280(%rbp)
uuid_00000000000c1eb5:
	mov -5328(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000c1eb8:
	mov -5296(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000c1ebb:
	mov -5288(%RBP),%RSP
	add $-5352, %RSP
	mov -5280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1ec0
	push %RBP
	jmp uuid_00000000000c1ebd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1ebc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1ebf
uuid_00000000000c1ebd:
	pushq $0
	pushq $0
	pushq $3
	popq -5216(%RBP)
	popq -5208(%RBP)
	popq -5200(%RBP)
uuid_00000000000c1ebf:
	mov -5360(%RBP),%RSP
	add $-5360, %RSP
	jmp uuid_00000000000c1ec2
uuid_00000000000c1ec0:
#call function fragment::expression : Arrow<S,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4424(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c1c8f
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	pushq -5376(%rbp)
	pushq -5384(%rbp)
	pushq -5392(%rbp)
	pushq -5400(%rbp)
	pushq -5408(%rbp)
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	pushq -5440(%rbp)
	pushq -5448(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq -5672(%rbp)
	pushq -5680(%rbp)
	pushq -5688(%rbp)
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -208(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	pushq -3928(%rbp)
	pushq -3936(%rbp)
	pushq -3944(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5912(%RBP)
	pushq -5920(%RBP)
	pushq -5928(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -5944(%rbp)
	pushq -5952(%rbp)
	pushq -5960(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	movq -5320(%rbp), %r15
	movq %r15, -5216(%rbp)
	movq -5312(%rbp), %r15
	movq %r15, -5208(%rbp)
	movq -5304(%rbp), %r15
	movq %r15, -5200(%rbp)
uuid_00000000000c1ec2:
	mov -5248(%RBP),%RSP
	add $-5960, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $152, %rsp
	add $200, %rsp
	add $232, %rsp
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000c1ec3
uuid_00000000000c1ec5:
uuid_00000000000c206b:
	mov -3680(%RBP),%RSP
	add $-5216, %RSP
	jmp uuid_00000000000c206e
uuid_00000000000c206c:
#call function fragment-context::lookup-soft : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2712(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	pushq -3800(%RBP)
	pushq -3808(%RBP)
	pushq -3816(%RBP)
uuid_00000000000c1e55:
#call function non-zero : Arrow<List<Array<Fragment,?>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListArray_QM_Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c1e56
	jmp uuid_00000000000c1e57
uuid_00000000000c1e56:
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	push %RBP
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq $0
	push %RBP
	mov -3904(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e4e
	jmp uuid_00000000000c1e50
uuid_00000000000c1e4e:
	push %RBP
	mov -3896(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1e4b
	jmp uuid_00000000000c1e4d
uuid_00000000000c1e4b:
	push %RBP
	mov -3888(%RBP), %RAX
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c1e48
	jmp uuid_00000000000c1e4a
uuid_00000000000c1e48:
	movb $1, -3912(%rbp)
uuid_00000000000c1e4a:
	mov -3960(%RBP),%RSP
	add $-4112, %RSP
uuid_00000000000c1e4d:
	mov -3928(%RBP),%RSP
	add $-4112, %RSP
uuid_00000000000c1e50:
	mov -3920(%RBP),%RSP
	add $-4112, %RSP
	mov -3912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c1e52
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c1e51
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c1e54
uuid_00000000000c1e52:
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -3136(%rbp)
	pushq -3768(%RBP)
	pushq -3776(%RBP)
	pushq -3784(%RBP)
	pushq -3968(%rbp)
	pushq -3976(%rbp)
	pushq -3984(%rbp)
	pushq -3992(%rbp)
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	pushq -4024(%rbp)
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4120(%rbp)
	pushq -4128(%rbp)
	pushq -4136(%rbp)
	pushq -4144(%rbp)
	pushq -4152(%rbp)
	pushq -4160(%rbp)
	pushq -4168(%rbp)
	pushq -4176(%rbp)
	pushq -4184(%rbp)
	pushq -4192(%rbp)
	pushq -4200(%rbp)
	pushq -4208(%rbp)
	pushq -4216(%rbp)
	pushq -4224(%rbp)
	pushq -4232(%rbp)
	pushq -4240(%rbp)
	pushq -4248(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -4312(%rbp)
	pushq -208(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -4520(%RBP)
	pushq -4528(%RBP)
	pushq -4536(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	movq -3952(%rbp), %r15
	movq %r15, -3848(%rbp)
	movq -3944(%rbp), %r15
	movq %r15, -3840(%rbp)
	movq -3936(%rbp), %r15
	movq %r15, -3832(%rbp)
uuid_00000000000c1e54:
	mov -3880(%RBP),%RSP
	add $-4568, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $24, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $200, %rsp
	add $232, %rsp
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000c1e55
uuid_00000000000c1e57:
uuid_00000000000c206e:
	mov -2136(%RBP),%RSP
	add $-3848, %RSP
	jmp uuid_00000000000c2071
uuid_00000000000c206f:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c2071:
	mov -1840(%RBP),%RSP
	add $-2360, %RSP
	jmp uuid_00000000000c2074
uuid_00000000000c2072:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c2074:
	mov -1320(%RBP),%RSP
	add $-2064, %RSP
	jmp uuid_00000000000c2077
uuid_00000000000c2075:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c2077:
	mov -800(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000c207a
uuid_00000000000c2078:
	pushq $0
	pushq -792(%rbp)
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c207a:
	mov -680(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000c207d
uuid_00000000000c207b:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -672(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000c207d:
	mov -560(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000c2080
uuid_00000000000c207e:
uuid_00000000000c2080:
	mov -480(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000c2083
uuid_00000000000c2081:
uuid_00000000000c2083:
	mov -400(%RBP),%RSP
	add $-472, %RSP
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	subq $232, %rsp
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	pushq 456(%rsp)
	pushq 472(%rsp)
	pushq 488(%rsp)
	pushq 504(%rsp)
	pushq 520(%rsp)
	pushq 536(%rsp)
	pushq 552(%rsp)
	pushq 568(%rsp)
	pushq 584(%rsp)
	pushq 600(%rsp)
	pushq 616(%rsp)
	pushq 632(%rsp)
	pushq 648(%rsp)
	pushq 664(%rsp)
	pushq 680(%rsp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	addq $232, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c20a2
	jmp uuid_00000000000c20a4
uuid_00000000000c20a2:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2090
	jmp uuid_00000000000c2092
uuid_00000000000c2090:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -784(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2087
	jmp uuid_00000000000c2089
uuid_00000000000c2087:
	push %RBP
	jmp uuid_00000000000c2084
	jmp uuid_00000000000c2086
uuid_00000000000c2084:
	movb $1, -792(%rbp)
uuid_00000000000c2086:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c2089:
	mov -800(%RBP),%RSP
	add $-808, %RSP
	mov -792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c208d
	jmp uuid_00000000000c208f
uuid_00000000000c208d:
	push %RBP
	mov -672(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c208a
	jmp uuid_00000000000c208c
uuid_00000000000c208a:
	movb $1, -696(%rbp)
uuid_00000000000c208c:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c208f:
	mov -712(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000c2092:
	mov -704(%RBP),%RSP
	add $-888, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c209f
	jmp uuid_00000000000c20a1
uuid_00000000000c209f:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2099
	jmp uuid_00000000000c209b
uuid_00000000000c2099:
	push %RBP
	jmp uuid_00000000000c2096
	jmp uuid_00000000000c2098
uuid_00000000000c2096:
	push %RBP
	mov -904(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1008(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2093
	jmp uuid_00000000000c2095
uuid_00000000000c2093:
	movb $1, -976(%rbp)
uuid_00000000000c2095:
	mov -1000(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c2098:
	mov -992(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c209b:
	mov -984(%RBP),%RSP
	add $-1008, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c209c
	jmp uuid_00000000000c209e
uuid_00000000000c209c:
	movb $1, -600(%rbp)
uuid_00000000000c209e:
	mov -896(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c20a1:
	mov -616(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c20a4:
	mov -608(%RBP),%RSP
	add $-1008, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c20e2
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -1088(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c20b4
	jmp uuid_00000000000c20b6
uuid_00000000000c20b4:
	push %RBP
	mov -1080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c20b1
	jmp uuid_00000000000c20b3
uuid_00000000000c20b1:
	push %RBP
	mov -1072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1264(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c20ab
	jmp uuid_00000000000c20ad
uuid_00000000000c20ab:
	push %RBP
	jmp uuid_00000000000c20a8
	jmp uuid_00000000000c20aa
uuid_00000000000c20a8:
	push %RBP
	mov -1200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c20a5
	jmp uuid_00000000000c20a7
uuid_00000000000c20a5:
	movb $1, -1272(%rbp)
uuid_00000000000c20a7:
	mov -1296(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c20aa:
	mov -1288(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c20ad:
	mov -1280(%RBP),%RSP
	add $-1304, %RSP
	mov -1272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c20ae
	jmp uuid_00000000000c20b0
uuid_00000000000c20ae:
	movb $1, -1096(%rbp)
uuid_00000000000c20b0:
	mov -1192(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c20b3:
	mov -1112(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000c20b6:
	mov -1104(%RBP),%RSP
	add $-1304, %RSP
	mov -1096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c20df
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c20d2
	jmp uuid_00000000000c20d4
uuid_00000000000c20d2:
	push %RBP
	mov -1376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c20c9
	jmp uuid_00000000000c20cb
uuid_00000000000c20c9:
	push %RBP
	mov -1472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c20c6
	jmp uuid_00000000000c20c8
uuid_00000000000c20c6:
	push %RBP
	mov -1464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c20c0
	jmp uuid_00000000000c20c2
uuid_00000000000c20c0:
	push %RBP
	jmp uuid_00000000000c20bd
	jmp uuid_00000000000c20bf
uuid_00000000000c20bd:
	push %RBP
	mov -1592(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c20ba
	jmp uuid_00000000000c20bc
uuid_00000000000c20ba:
	movb $1, -1664(%rbp)
uuid_00000000000c20bc:
	mov -1688(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c20bf:
	mov -1680(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c20c2:
	mov -1672(%RBP),%RSP
	add $-1696, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c20c3
	jmp uuid_00000000000c20c5
uuid_00000000000c20c3:
	movb $1, -1488(%rbp)
uuid_00000000000c20c5:
	mov -1584(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c20c8:
	mov -1504(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c20cb:
	mov -1496(%RBP),%RSP
	add $-1696, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c20cf
	jmp uuid_00000000000c20d1
uuid_00000000000c20cf:
	push %RBP
	mov -1368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c20cc
	jmp uuid_00000000000c20ce
uuid_00000000000c20cc:
	movb $1, -1392(%rbp)
uuid_00000000000c20ce:
	mov -1704(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c20d1:
	mov -1408(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000c20d4:
	mov -1400(%RBP),%RSP
	add $-1776, %RSP
	mov -1392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c20dc
	push %RBP
	jmp uuid_00000000000c20d9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c20d8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c20db
uuid_00000000000c20d9:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c0b38
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $uuid_00000000000c0b38
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000c20db:
	mov -1784(%RBP),%RSP
	add $-2040, %RSP
	jmp uuid_00000000000c20de
uuid_00000000000c20dc:
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1696(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20d5
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c0b38
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $uuid_00000000000c0b38
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	jmp uuid_00000000000c20d7
uuid_00000000000c20d5:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -1696(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov -1696(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000c20d7:
	mov -1784(%RBP),%RSP
	add $-2040, %RSP
uuid_00000000000c20de:
	mov -1312(%RBP),%RSP
	add $-2040, %RSP
	jmp uuid_00000000000c20e1
uuid_00000000000c20df:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20b7
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000c0b38
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $uuid_00000000000c0b38
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	jmp uuid_00000000000c20b9
uuid_00000000000c20b7:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -1304(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov -1304(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000c20b9:
	mov -1312(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000c20e1:
	mov -1016(%RBP),%RSP
	add $-1568, %RSP
	jmp uuid_00000000000c20e4
uuid_00000000000c20e2:
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000c20e4:
	mov -520(%RBP),%RSP
	add $-1008, %RSP
	subq $152, %rsp
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $440, %rsp
	ret
extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c20fd
	jmp uuid_00000000000c20ff
uuid_00000000000c20fd:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c20eb
	jmp uuid_00000000000c20ed
uuid_00000000000c20eb:
	push %RBP
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	jmp uuid_00000000000c20e8
	jmp uuid_00000000000c20ea
uuid_00000000000c20e8:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c20e5
	jmp uuid_00000000000c20e7
uuid_00000000000c20e5:
	movb $1, -560(%rbp)
uuid_00000000000c20e7:
	mov -640(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c20ea:
	mov -576(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c20ed:
	mov -568(%RBP),%RSP
	add $-648, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c20fa
	jmp uuid_00000000000c20fc
uuid_00000000000c20fa:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c20f4
	jmp uuid_00000000000c20f6
uuid_00000000000c20f4:
	push %RBP
	jmp uuid_00000000000c20f1
	jmp uuid_00000000000c20f3
uuid_00000000000c20f1:
	push %RBP
	mov -664(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq $uuid_00000000000c1ee5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c20ee
	jmp uuid_00000000000c20f0
uuid_00000000000c20ee:
	movb $1, -736(%rbp)
uuid_00000000000c20f0:
	mov -760(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c20f3:
	mov -752(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c20f6:
	mov -744(%RBP),%RSP
	add $-768, %RSP
	mov -736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c20f7
	jmp uuid_00000000000c20f9
uuid_00000000000c20f7:
	movb $1, -464(%rbp)
uuid_00000000000c20f9:
	mov -656(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c20fc:
	mov -480(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c20ff:
	mov -472(%RBP),%RSP
	add $-768, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2167
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2106
	jmp uuid_00000000000c2108
uuid_00000000000c2106:
	push %RBP
	mov -840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2103
	jmp uuid_00000000000c2105
uuid_00000000000c2103:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2100
	jmp uuid_00000000000c2102
uuid_00000000000c2100:
	movb $1, -856(%rbp)
uuid_00000000000c2102:
	mov -952(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c2105:
	mov -872(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c2108:
	mov -864(%RBP),%RSP
	add $-1024, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2164
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1104(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2112
	jmp uuid_00000000000c2114
uuid_00000000000c2112:
	push %RBP
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	jmp uuid_00000000000c210f
	jmp uuid_00000000000c2111
uuid_00000000000c210f:
	push %RBP
	mov -1072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c210c
	jmp uuid_00000000000c210e
uuid_00000000000c210c:
	push %RBP
	mov -1064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2109
	jmp uuid_00000000000c210b
uuid_00000000000c2109:
	movb $1, -1112(%rbp)
uuid_00000000000c210b:
	mov -1240(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c210e:
	mov -1160(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c2111:
	mov -1128(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000c2114:
	mov -1120(%RBP),%RSP
	add $-1312, %RSP
	mov -1112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2161
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c215e
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov -1472(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c215b
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1552(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2118
	jmp uuid_00000000000c211a
uuid_00000000000c2118:
	push %RBP
	jmp uuid_00000000000c2115
	jmp uuid_00000000000c2117
uuid_00000000000c2115:
	movb $1, -1560(%rbp)
uuid_00000000000c2117:
	mov -1576(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000c211a:
	mov -1568(%RBP),%RSP
	add $-1576, %RSP
	mov -1560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2158
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2121
	jmp uuid_00000000000c2123
uuid_00000000000c2121:
	push %RBP
	jmp uuid_00000000000c211e
	jmp uuid_00000000000c2120
uuid_00000000000c211e:
	push %RBP
	mov -1592(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c211b
	jmp uuid_00000000000c211d
uuid_00000000000c211b:
	movb $1, -1664(%rbp)
uuid_00000000000c211d:
	mov -1688(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c2120:
	mov -1680(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000c2123:
	mov -1672(%RBP),%RSP
	add $-1696, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2155
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1776(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c212a
	jmp uuid_00000000000c212c
uuid_00000000000c212a:
	push %RBP
	jmp uuid_00000000000c2127
	jmp uuid_00000000000c2129
uuid_00000000000c2127:
	push %RBP
	mov -1712(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2124
	jmp uuid_00000000000c2126
uuid_00000000000c2124:
	movb $1, -1784(%rbp)
uuid_00000000000c2126:
	mov -1808(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c2129:
	mov -1800(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000c212c:
	mov -1792(%RBP),%RSP
	add $-1816, %RSP
	mov -1784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2152
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2133
	jmp uuid_00000000000c2135
uuid_00000000000c2133:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2130
	jmp uuid_00000000000c2132
uuid_00000000000c2130:
	push %RBP
	mov -1880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c212d
	jmp uuid_00000000000c212f
uuid_00000000000c212d:
	movb $1, -1904(%rbp)
uuid_00000000000c212f:
	mov -2000(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c2132:
	mov -1920(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000c2135:
	mov -1912(%RBP),%RSP
	add $-2072, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c214f
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -2152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c213c
	jmp uuid_00000000000c213e
uuid_00000000000c213c:
	push %RBP
	mov -2144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2139
	jmp uuid_00000000000c213b
uuid_00000000000c2139:
	push %RBP
	mov -2136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2136
	jmp uuid_00000000000c2138
uuid_00000000000c2136:
	movb $1, -2160(%rbp)
uuid_00000000000c2138:
	mov -2256(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000c213b:
	mov -2176(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000c213e:
	mov -2168(%RBP),%RSP
	add $-2328, %RSP
	mov -2160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c214c
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -2408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2145
	jmp uuid_00000000000c2147
uuid_00000000000c2145:
	push %RBP
	mov -2400(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2142
	jmp uuid_00000000000c2144
uuid_00000000000c2142:
	push %RBP
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	jmp uuid_00000000000c213f
	jmp uuid_00000000000c2141
uuid_00000000000c213f:
	movb $1, -2416(%rbp)
uuid_00000000000c2141:
	mov -2512(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000c2144:
	mov -2432(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000c2147:
	mov -2424(%RBP),%RSP
	add $-2568, %RSP
	mov -2416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2149
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2148
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c214b
uuid_00000000000c2149:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -2664(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -2656(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -2648(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -2640(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -2632(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -2624(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -2616(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -2608(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -2600(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -2592(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -2584(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -2576(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c214b:
	mov -2336(%RBP),%RSP
	add $-2664, %RSP
	jmp uuid_00000000000c214e
uuid_00000000000c214c:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -2520(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -2512(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -2504(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -2496(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -2488(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -2480(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -2472(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -2464(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -2456(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -2448(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -2440(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -2432(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c214e:
	mov -2080(%RBP),%RSP
	add $-2520, %RSP
	jmp uuid_00000000000c2151
uuid_00000000000c214f:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -2264(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -2256(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -2248(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -2240(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -2232(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -2224(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -2216(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -2208(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -2200(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -2192(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -2184(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -2176(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c2151:
	mov -1824(%RBP),%RSP
	add $-2264, %RSP
	jmp uuid_00000000000c2154
uuid_00000000000c2152:
uuid_00000000000c2154:
	mov -1704(%RBP),%RSP
	add $-1816, %RSP
	jmp uuid_00000000000c2157
uuid_00000000000c2155:
uuid_00000000000c2157:
	mov -1584(%RBP),%RSP
	add $-1696, %RSP
	jmp uuid_00000000000c215a
uuid_00000000000c2158:
uuid_00000000000c215a:
	mov -1480(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000c215d
uuid_00000000000c215b:
uuid_00000000000c215d:
	mov -1400(%RBP),%RSP
	add $-1472, %RSP
	jmp uuid_00000000000c2160
uuid_00000000000c215e:
uuid_00000000000c2160:
	mov -1320(%RBP),%RSP
	add $-1392, %RSP
	jmp uuid_00000000000c2163
uuid_00000000000c2161:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -1504(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c2163:
	mov -1032(%RBP),%RSP
	add $-1504, %RSP
	jmp uuid_00000000000c2166
uuid_00000000000c2164:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -1216(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c2166:
	mov -776(%RBP),%RSP
	add $-1216, %RSP
	jmp uuid_00000000000c2169
uuid_00000000000c2167:
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -648(%rbp)
	pushq -776(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	pushq $0
	movq -872(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -832(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -824(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -816(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000c2169:
	mov -384(%RBP),%RSP
	add $-872, %RSP
	subq $96, %rsp
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	addq $96, %rsp
	mov %rbp, %rsp
	sub $208, %rsp
	ret
index_SB_typedefs_CL_ArrowNilAST:
uuid_00000000000c218f:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2190
	jmp uuid_00000000000c2191
uuid_00000000000c2190:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2179
	jmp uuid_00000000000c217b
uuid_00000000000c2179:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2170
	jmp uuid_00000000000c2172
uuid_00000000000c2170:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c216d
	jmp uuid_00000000000c216f
uuid_00000000000c216d:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c216a
	jmp uuid_00000000000c216c
uuid_00000000000c216a:
	movb $1, -336(%rbp)
uuid_00000000000c216c:
	mov -432(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c216f:
	mov -352(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000c2172:
	mov -344(%RBP),%RSP
	add $-504, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2176
	jmp uuid_00000000000c2178
uuid_00000000000c2176:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2173
	jmp uuid_00000000000c2175
uuid_00000000000c2173:
	movb $1, -240(%rbp)
uuid_00000000000c2175:
	mov -512(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c2178:
	mov -256(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000c217b:
	mov -248(%RBP),%RSP
	add $-584, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c218c
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2182
	jmp uuid_00000000000c2184
uuid_00000000000c2182:
	push %RBP
	jmp uuid_00000000000c217f
	jmp uuid_00000000000c2181
uuid_00000000000c217f:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c217c
	jmp uuid_00000000000c217e
uuid_00000000000c217c:
	movb $1, -672(%rbp)
uuid_00000000000c217e:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c2181:
	mov -688(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c2184:
	mov -680(%RBP),%RSP
	add $-768, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2189
	push %RBP
	jmp uuid_00000000000c2186
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2185
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2188
uuid_00000000000c2186:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2188:
	mov -776(%RBP),%RSP
	add $-776, %RSP
	jmp uuid_00000000000c218b
uuid_00000000000c2189:
	movq -768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c218b:
	mov -592(%RBP),%RSP
	add $-768, %RSP
	jmp uuid_00000000000c218e
uuid_00000000000c218c:
#call function index-typedefs : Arrow<Cons<AST,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $0
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilConsU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -584(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -544(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -536(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -528(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -520(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c218e:
	mov -160(%RBP),%RSP
	add $-584, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c218f
uuid_00000000000c2191:
	mov %rbp, %rsp
	sub $80, %rsp
	ret
index_SB_typedefs_CL_ArrowNilConsU64AST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21b3
	jmp uuid_00000000000c21b5
uuid_00000000000c21b3:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2198
	jmp uuid_00000000000c219a
uuid_00000000000c2198:
	push %RBP
	jmp uuid_00000000000c2195
	jmp uuid_00000000000c2197
uuid_00000000000c2195:
	push %RBP
	mov -272(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2192
	jmp uuid_00000000000c2194
uuid_00000000000c2192:
	movb $1, -344(%rbp)
uuid_00000000000c2194:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c2197:
	mov -360(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c219a:
	mov -352(%RBP),%RSP
	add $-376, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21b0
	jmp uuid_00000000000c21b2
uuid_00000000000c21b0:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21aa
	jmp uuid_00000000000c21ac
uuid_00000000000c21aa:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21a1
	jmp uuid_00000000000c21a3
uuid_00000000000c21a1:
	push %RBP
	jmp uuid_00000000000c219e
	jmp uuid_00000000000c21a0
uuid_00000000000c219e:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000c02b1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c219b
	jmp uuid_00000000000c219d
uuid_00000000000c219b:
	movb $1, -560(%rbp)
uuid_00000000000c219d:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c21a0:
	mov -576(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000c21a3:
	mov -568(%RBP),%RSP
	add $-592, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21a7
	jmp uuid_00000000000c21a9
uuid_00000000000c21a7:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c21a4
	jmp uuid_00000000000c21a6
uuid_00000000000c21a4:
	movb $1, -464(%rbp)
uuid_00000000000c21a6:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c21a9:
	mov -480(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c21ac:
	mov -472(%RBP),%RSP
	add $-672, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21ad
	jmp uuid_00000000000c21af
uuid_00000000000c21ad:
	movb $1, -248(%rbp)
uuid_00000000000c21af:
	mov -384(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c21b2:
	mov -264(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000c21b5:
	mov -256(%RBP),%RSP
	add $-672, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c220f
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21e0
	jmp uuid_00000000000c21e2
uuid_00000000000c21e0:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21c5
	jmp uuid_00000000000c21c7
uuid_00000000000c21c5:
	push %RBP
	jmp uuid_00000000000c21c2
	jmp uuid_00000000000c21c4
uuid_00000000000c21c2:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21bc
	jmp uuid_00000000000c21be
uuid_00000000000c21bc:
	push %RBP
	jmp uuid_00000000000c21b9
	jmp uuid_00000000000c21bb
uuid_00000000000c21b9:
	push %RBP
	mov -888(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c21b6
	jmp uuid_00000000000c21b8
uuid_00000000000c21b6:
	movb $1, -960(%rbp)
uuid_00000000000c21b8:
	mov -984(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c21bb:
	mov -976(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c21be:
	mov -968(%RBP),%RSP
	add $-992, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21bf
	jmp uuid_00000000000c21c1
uuid_00000000000c21bf:
	movb $1, -856(%rbp)
uuid_00000000000c21c1:
	mov -880(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c21c4:
	mov -872(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c21c7:
	mov -864(%RBP),%RSP
	add $-992, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21dd
	jmp uuid_00000000000c21df
uuid_00000000000c21dd:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1072(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21d7
	jmp uuid_00000000000c21d9
uuid_00000000000c21d7:
	push %RBP
	mov -1064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1168(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21ce
	jmp uuid_00000000000c21d0
uuid_00000000000c21ce:
	push %RBP
	jmp uuid_00000000000c21cb
	jmp uuid_00000000000c21cd
uuid_00000000000c21cb:
	push %RBP
	mov -1104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1208(%rbp)
	pushq $uuid_00000000000c02b1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c21c8
	jmp uuid_00000000000c21ca
uuid_00000000000c21c8:
	movb $1, -1176(%rbp)
uuid_00000000000c21ca:
	mov -1200(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000c21cd:
	mov -1192(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000c21d0:
	mov -1184(%RBP),%RSP
	add $-1208, %RSP
	mov -1176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21d4
	jmp uuid_00000000000c21d6
uuid_00000000000c21d4:
	push %RBP
	mov -1056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c21d1
	jmp uuid_00000000000c21d3
uuid_00000000000c21d1:
	movb $1, -1080(%rbp)
uuid_00000000000c21d3:
	mov -1216(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c21d6:
	mov -1096(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c21d9:
	mov -1088(%RBP),%RSP
	add $-1288, %RSP
	mov -1080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21da
	jmp uuid_00000000000c21dc
uuid_00000000000c21da:
	movb $1, -760(%rbp)
uuid_00000000000c21dc:
	mov -1000(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c21df:
	mov -776(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c21e2:
	mov -768(%RBP),%RSP
	add $-1288, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c220c
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -1368(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21e9
	jmp uuid_00000000000c21eb
uuid_00000000000c21e9:
	push %RBP
	jmp uuid_00000000000c21e6
	jmp uuid_00000000000c21e8
uuid_00000000000c21e6:
	push %RBP
	mov -1304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c21e3
	jmp uuid_00000000000c21e5
uuid_00000000000c21e3:
	movb $1, -1376(%rbp)
uuid_00000000000c21e5:
	mov -1400(%RBP),%RSP
	add $-1408, %RSP
uuid_00000000000c21e8:
	mov -1392(%RBP),%RSP
	add $-1408, %RSP
uuid_00000000000c21eb:
	mov -1384(%RBP),%RSP
	add $-1408, %RSP
	mov -1376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2209
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -1488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21fb
	jmp uuid_00000000000c21fd
uuid_00000000000c21fb:
	push %RBP
	jmp uuid_00000000000c21f8
	jmp uuid_00000000000c21fa
uuid_00000000000c21f8:
	push %RBP
	mov -1472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1592(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c21f2
	jmp uuid_00000000000c21f4
uuid_00000000000c21f2:
	push %RBP
	jmp uuid_00000000000c21ef
	jmp uuid_00000000000c21f1
uuid_00000000000c21ef:
	push %RBP
	mov -1528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c21ec
	jmp uuid_00000000000c21ee
uuid_00000000000c21ec:
	movb $1, -1600(%rbp)
uuid_00000000000c21ee:
	mov -1624(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c21f1:
	mov -1616(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c21f4:
	mov -1608(%RBP),%RSP
	add $-1632, %RSP
	mov -1600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c21f5
	jmp uuid_00000000000c21f7
uuid_00000000000c21f5:
	movb $1, -1496(%rbp)
uuid_00000000000c21f7:
	mov -1520(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c21fa:
	mov -1512(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000c21fd:
	mov -1504(%RBP),%RSP
	add $-1632, %RSP
	mov -1496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2206
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov -1712(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2203
	push %RBP
	jmp uuid_00000000000c2200
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c21ff
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2202
uuid_00000000000c2200:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c21fe
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2202:
	mov -1720(%RBP),%RSP
	add $-1720, %RSP
	jmp uuid_00000000000c2205
uuid_00000000000c2203:
uuid_00000000000c2205:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
	jmp uuid_00000000000c2208
uuid_00000000000c2206:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1632(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2208:
	mov -1416(%RBP),%RSP
	add $-1632, %RSP
	jmp uuid_00000000000c220b
uuid_00000000000c2209:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1408(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-lone-tag : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1408(%rbp)
	mov %RBX, %RBP
	call index_SB_lone_SB_tag_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c220b:
	mov -1296(%RBP),%RSP
	add $-1408, %RSP
	jmp uuid_00000000000c220e
uuid_00000000000c220c:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -992(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-typedefs : Arrow<Cons<AST,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilConsU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c220e:
	mov -680(%RBP),%RSP
	add $-1288, %RSP
	jmp uuid_00000000000c2211
uuid_00000000000c220f:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-lone-tag : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	mov %RBX, %RBP
	call index_SB_lone_SB_tag_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-typedefs : Arrow<Cons<AST,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilConsU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2211:
	mov -168(%RBP),%RSP
	add $-672, %RSP
	mov %rbp, %rsp
	sub $88, %rsp
	ret
is_SB_macro_SB_head_CL_ArrowU64ConsU64String:
	mov $preprocess_SB_macros_CL_MacroListMacroListCaseNumber1, %r15
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
uuid_00000000000c2286:
#call function non-zero : Arrow<MacroList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64MacroList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2287
	jmp uuid_00000000000c2288
uuid_00000000000c2287:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2233
	jmp uuid_00000000000c2235
uuid_00000000000c2233:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq $0
	push %RBP
	mov -720(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c222a
	jmp uuid_00000000000c222c
uuid_00000000000c222a:
	push %RBP
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	jmp uuid_00000000000c2227
	jmp uuid_00000000000c2229
uuid_00000000000c2227:
	push %RBP
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2221
	jmp uuid_00000000000c2223
uuid_00000000000c2221:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c221e
	jmp uuid_00000000000c2220
uuid_00000000000c221e:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1072(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2218
	jmp uuid_00000000000c221a
uuid_00000000000c2218:
	push %RBP
	jmp uuid_00000000000c2215
	jmp uuid_00000000000c2217
uuid_00000000000c2215:
	push %RBP
	mov -1008(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2212
	jmp uuid_00000000000c2214
uuid_00000000000c2212:
	movb $1, -1080(%rbp)
uuid_00000000000c2214:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c2217:
	mov -1096(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c221a:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
	mov -1080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c221b
	jmp uuid_00000000000c221d
uuid_00000000000c221b:
	movb $1, -904(%rbp)
uuid_00000000000c221d:
	mov -1000(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c2220:
	mov -920(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c2223:
	mov -912(%RBP),%RSP
	add $-1112, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2224
	jmp uuid_00000000000c2226
uuid_00000000000c2224:
	movb $1, -728(%rbp)
uuid_00000000000c2226:
	mov -824(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c2229:
	mov -744(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000c222c:
	mov -736(%RBP),%RSP
	add $-1112, %RSP
	mov -728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2230
	jmp uuid_00000000000c2232
uuid_00000000000c2230:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c222d
	jmp uuid_00000000000c222f
uuid_00000000000c222d:
	movb $1, -552(%rbp)
uuid_00000000000c222f:
	mov -1120(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c2232:
	mov -568(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000c2235:
	mov -560(%RBP),%RSP
	add $-1288, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2283
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2263
	jmp uuid_00000000000c2265
uuid_00000000000c2263:
	push %RBP
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c225a
	jmp uuid_00000000000c225c
uuid_00000000000c225a:
	push %RBP
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	jmp uuid_00000000000c2257
	jmp uuid_00000000000c2259
uuid_00000000000c2257:
	push %RBP
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq $0
	push %RBP
	mov -1816(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2251
	jmp uuid_00000000000c2253
uuid_00000000000c2251:
	push %RBP
	mov -1808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c224e
	jmp uuid_00000000000c2250
uuid_00000000000c224e:
	push %RBP
	mov -1800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1992(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2248
	jmp uuid_00000000000c224a
uuid_00000000000c2248:
	push %RBP
	mov -1984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2245
	jmp uuid_00000000000c2247
uuid_00000000000c2245:
	push %RBP
	mov -1976(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2168(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c223f
	jmp uuid_00000000000c2241
uuid_00000000000c223f:
	push %RBP
	jmp uuid_00000000000c223c
	jmp uuid_00000000000c223e
uuid_00000000000c223c:
	push %RBP
	mov -2104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2239
	jmp uuid_00000000000c223b
uuid_00000000000c2239:
	movb $1, -2176(%rbp)
uuid_00000000000c223b:
	mov -2200(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c223e:
	mov -2192(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c2241:
	mov -2184(%RBP),%RSP
	add $-2208, %RSP
	mov -2176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2242
	jmp uuid_00000000000c2244
uuid_00000000000c2242:
	movb $1, -2000(%rbp)
uuid_00000000000c2244:
	mov -2096(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c2247:
	mov -2016(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c224a:
	mov -2008(%RBP),%RSP
	add $-2208, %RSP
	mov -2000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c224b
	jmp uuid_00000000000c224d
uuid_00000000000c224b:
	movb $1, -1824(%rbp)
uuid_00000000000c224d:
	mov -1920(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c2250:
	mov -1840(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c2253:
	mov -1832(%RBP),%RSP
	add $-2208, %RSP
	mov -1824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2254
	jmp uuid_00000000000c2256
uuid_00000000000c2254:
	movb $1, -1648(%rbp)
uuid_00000000000c2256:
	mov -1744(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c2259:
	mov -1664(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000c225c:
	mov -1656(%RBP),%RSP
	add $-2208, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2260
	jmp uuid_00000000000c2262
uuid_00000000000c2260:
	push %RBP
	mov -1304(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c225d
	jmp uuid_00000000000c225f
uuid_00000000000c225d:
	movb $1, -1472(%rbp)
uuid_00000000000c225f:
	mov -2216(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c2262:
	mov -1488(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c2265:
	mov -1480(%RBP),%RSP
	add $-2384, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2280
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2278
	jmp uuid_00000000000c227a
uuid_00000000000c2278:
	push %RBP
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq $0
	push %RBP
	mov -2736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c226f
	jmp uuid_00000000000c2271
uuid_00000000000c226f:
	push %RBP
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	jmp uuid_00000000000c226c
	jmp uuid_00000000000c226e
uuid_00000000000c226c:
	push %RBP
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	jmp uuid_00000000000c2269
	jmp uuid_00000000000c226b
uuid_00000000000c2269:
	movb $1, -2744(%rbp)
uuid_00000000000c226b:
	mov -2840(%RBP),%RSP
	add $-2912, %RSP
uuid_00000000000c226e:
	mov -2760(%RBP),%RSP
	add $-2912, %RSP
uuid_00000000000c2271:
	mov -2752(%RBP),%RSP
	add $-2912, %RSP
	mov -2744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2275
	jmp uuid_00000000000c2277
uuid_00000000000c2275:
	push %RBP
	mov -2400(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2272
	jmp uuid_00000000000c2274
uuid_00000000000c2272:
	movb $1, -2568(%rbp)
uuid_00000000000c2274:
	mov -2920(%RBP),%RSP
	add $-3088, %RSP
uuid_00000000000c2277:
	mov -2584(%RBP),%RSP
	add $-3088, %RSP
uuid_00000000000c227a:
	mov -2576(%RBP),%RSP
	add $-3088, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c227d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c227c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c227f
uuid_00000000000c227d:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c227b
	pushq -2848(%rbp)
	pushq -2856(%rbp)
	pushq -2864(%rbp)
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c227f:
	mov -2392(%RBP),%RSP
	add $-3088, %RSP
	jmp uuid_00000000000c2282
uuid_00000000000c2280:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -16(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2266
	jmp uuid_00000000000c2268
uuid_00000000000c2266:
	movq $1, -200(%rbp)
uuid_00000000000c2268:
	mov -2392(%RBP),%RSP
	add $-2392, %RSP
	movq -2384(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -2376(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -2368(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -2360(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -2352(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -2344(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -2336(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2304(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2296(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2288(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2280(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -2272(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -2264(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2256(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2248(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2240(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2232(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2224(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000c2282:
	mov -1296(%RBP),%RSP
	add $-2392, %RSP
	jmp uuid_00000000000c2285
uuid_00000000000c2283:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -16(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2236
	jmp uuid_00000000000c2238
uuid_00000000000c2236:
	movq $1, -200(%rbp)
uuid_00000000000c2238:
	mov -1296(%RBP),%RSP
	add $-1296, %RSP
	movq -1288(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000c2285:
	mov -376(%RBP),%RSP
	add $-1296, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2286
uuid_00000000000c2288:
	mov -200(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
preprocess_SB_apply_SB_hard_CL_ArrowASTConsASTConsU64String:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov $preprocess_SB_macros_CL_MacroListMacroListCaseNumber1, %r15
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
uuid_00000000000c22e9:
#call function non-zero : Arrow<MacroList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64MacroList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c22ea
	jmp uuid_00000000000c22eb
uuid_00000000000c22ea:
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	push %RBP
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2298
	jmp uuid_00000000000c229a
uuid_00000000000c2298:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c228f
	jmp uuid_00000000000c2291
uuid_00000000000c228f:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	jmp uuid_00000000000c228c
	jmp uuid_00000000000c228e
uuid_00000000000c228c:
	push %RBP
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	jmp uuid_00000000000c2289
	jmp uuid_00000000000c228b
uuid_00000000000c2289:
	movb $1, -872(%rbp)
uuid_00000000000c228b:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c228e:
	mov -888(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000c2291:
	mov -880(%RBP),%RSP
	add $-1040, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2295
	jmp uuid_00000000000c2297
uuid_00000000000c2295:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2292
	jmp uuid_00000000000c2294
uuid_00000000000c2292:
	movb $1, -696(%rbp)
uuid_00000000000c2294:
	mov -1048(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000c2297:
	mov -712(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000c229a:
	mov -704(%RBP),%RSP
	add $-1216, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c22e6
	push %RBP
	jmp uuid_00000000000c22e3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c22e2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c22e5
uuid_00000000000c22e3:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
uuid_00000000000c22e5:
	mov -1224(%RBP),%RSP
	add $-1224, %RSP
	jmp uuid_00000000000c22e8
uuid_00000000000c22e6:
	movq -1216(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -176(%rbp)
	pushq $0
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	push %RBP
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq $0
	push %RBP
	mov -1376(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22aa
	jmp uuid_00000000000c22ac
uuid_00000000000c22aa:
	push %RBP
	jmp uuid_00000000000c22a7
	jmp uuid_00000000000c22a9
uuid_00000000000c22a7:
	push %RBP
	mov -1360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22a1
	jmp uuid_00000000000c22a3
uuid_00000000000c22a1:
	push %RBP
	jmp uuid_00000000000c229e
	jmp uuid_00000000000c22a0
uuid_00000000000c229e:
	push %RBP
	mov -1416(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c229b
	jmp uuid_00000000000c229d
uuid_00000000000c229b:
	movb $1, -1488(%rbp)
uuid_00000000000c229d:
	mov -1512(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000c22a0:
	mov -1504(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000c22a3:
	mov -1496(%RBP),%RSP
	add $-1520, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c22a4
	jmp uuid_00000000000c22a6
uuid_00000000000c22a4:
	movb $1, -1384(%rbp)
uuid_00000000000c22a6:
	mov -1408(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000c22a9:
	mov -1400(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000c22ac:
	mov -1392(%RBP),%RSP
	add $-1520, %RSP
	mov -1384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c22d2
	push %RBP
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq $0
	push %RBP
	mov -1600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22c8
	jmp uuid_00000000000c22ca
uuid_00000000000c22c8:
	push %RBP
	jmp uuid_00000000000c22c5
	jmp uuid_00000000000c22c7
uuid_00000000000c22c5:
	push %RBP
	mov -1584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1704(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22bf
	jmp uuid_00000000000c22c1
uuid_00000000000c22bf:
	push %RBP
	jmp uuid_00000000000c22bc
	jmp uuid_00000000000c22be
uuid_00000000000c22bc:
	push %RBP
	mov -1688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1808(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22b6
	jmp uuid_00000000000c22b8
uuid_00000000000c22b6:
	push %RBP
	jmp uuid_00000000000c22b3
	jmp uuid_00000000000c22b5
uuid_00000000000c22b3:
	push %RBP
	mov -1744(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c22b0
	jmp uuid_00000000000c22b2
uuid_00000000000c22b0:
	movb $1, -1816(%rbp)
uuid_00000000000c22b2:
	mov -1840(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c22b5:
	mov -1832(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c22b8:
	mov -1824(%RBP),%RSP
	add $-1848, %RSP
	mov -1816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c22b9
	jmp uuid_00000000000c22bb
uuid_00000000000c22b9:
	movb $1, -1712(%rbp)
uuid_00000000000c22bb:
	mov -1736(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c22be:
	mov -1728(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c22c1:
	mov -1720(%RBP),%RSP
	add $-1848, %RSP
	mov -1712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c22c2
	jmp uuid_00000000000c22c4
uuid_00000000000c22c2:
	movb $1, -1608(%rbp)
uuid_00000000000c22c4:
	mov -1632(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c22c7:
	mov -1624(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000c22ca:
	mov -1616(%RBP),%RSP
	add $-1848, %RSP
	mov -1608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c22cf
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c22ce
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c22d1
uuid_00000000000c22cf:
	push %RBP
	mov -16(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -1848(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22cb
	jmp uuid_00000000000c22cd
uuid_00000000000c22cb:
	movb $1, -1224(%rbp)
uuid_00000000000c22cd:
	mov -1856(%RBP),%RSP
	add $-1856, %RSP
uuid_00000000000c22d1:
	mov -1528(%RBP),%RSP
	add $-1856, %RSP
	jmp uuid_00000000000c22d4
uuid_00000000000c22d2:
	push %RBP
	mov -16(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -1520(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22ad
	jmp uuid_00000000000c22af
uuid_00000000000c22ad:
	movb $1, -1224(%rbp)
uuid_00000000000c22af:
	mov -1528(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000c22d4:
	mov -1304(%RBP),%RSP
	add $-1528, %RSP
	push %RBP
	mov -1224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c22df
	jmp uuid_00000000000c22e1
uuid_00000000000c22df:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov -1736(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22dc
	push %RBP
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	jmp uuid_00000000000c22d9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c22d8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c22db
uuid_00000000000c22d9:
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c22d5
	jmp uuid_00000000000c22d7
uuid_00000000000c22d5:
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	popq -1912(%RBP)
	popq -1904(%RBP)
	popq -1896(%RBP)
	popq -1888(%RBP)
	popq -1880(%RBP)
	popq -1872(%RBP)
	popq -1864(%RBP)
	popq -1856(%RBP)
	popq -1848(%RBP)
uuid_00000000000c22d7:
	mov -2016(%RBP),%RSP
	add $-2016, %RSP
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	movb $1, -344(%rbp)
uuid_00000000000c22db:
	mov -1744(%RBP),%RSP
	add $-2016, %RSP
	jmp uuid_00000000000c22de
uuid_00000000000c22dc:
	movq -1216(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -176(%rbp)
uuid_00000000000c22de:
	mov -1640(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c22e1:
	mov -1536(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c22e8:
	mov -520(%RBP),%RSP
	add $-1736, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c22e9
uuid_00000000000c22eb:
	push %RBP
#call function not : Arrow<U8,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	mov %RBX, %RBP
	call not_CL_ArrowU64U8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c22ed
	jmp uuid_00000000000c22ef
uuid_00000000000c22ed:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c22ec
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c22ef:
	mov -352(%RBP),%RSP
	add $-352, %RSP
	subq $72, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $96, %rsp
	ret
preprocess_SB_apply_SB_literals_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2311
	jmp uuid_00000000000c2313
uuid_00000000000c2311:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22f6
	jmp uuid_00000000000c22f8
uuid_00000000000c22f6:
	push %RBP
	jmp uuid_00000000000c22f3
	jmp uuid_00000000000c22f5
uuid_00000000000c22f3:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c22f0
	jmp uuid_00000000000c22f2
uuid_00000000000c22f0:
	movb $1, -408(%rbp)
uuid_00000000000c22f2:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c22f5:
	mov -424(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c22f8:
	mov -416(%RBP),%RSP
	add $-440, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c230e
	jmp uuid_00000000000c2310
uuid_00000000000c230e:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2308
	jmp uuid_00000000000c230a
uuid_00000000000c2308:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2305
	jmp uuid_00000000000c2307
uuid_00000000000c2305:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c22ff
	jmp uuid_00000000000c2301
uuid_00000000000c22ff:
	push %RBP
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000c22fc
	jmp uuid_00000000000c22fe
uuid_00000000000c22fc:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c22f9
	jmp uuid_00000000000c22fb
uuid_00000000000c22f9:
	movb $1, -704(%rbp)
uuid_00000000000c22fb:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c22fe:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c2301:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2302
	jmp uuid_00000000000c2304
uuid_00000000000c2302:
	movb $1, -528(%rbp)
uuid_00000000000c2304:
	mov -624(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c2307:
	mov -544(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c230a:
	mov -536(%RBP),%RSP
	add $-792, %RSP
	mov -528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c230b
	jmp uuid_00000000000c230d
uuid_00000000000c230b:
	movb $1, -312(%rbp)
uuid_00000000000c230d:
	mov -448(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c2310:
	mov -328(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c2313:
	mov -320(%RBP),%RSP
	add $-792, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c23a0
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2335
	jmp uuid_00000000000c2337
uuid_00000000000c2335:
	push %RBP
	mov -864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c231a
	jmp uuid_00000000000c231c
uuid_00000000000c231a:
	push %RBP
	jmp uuid_00000000000c2317
	jmp uuid_00000000000c2319
uuid_00000000000c2317:
	push %RBP
	mov -904(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2314
	jmp uuid_00000000000c2316
uuid_00000000000c2314:
	movb $1, -976(%rbp)
uuid_00000000000c2316:
	mov -1000(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c2319:
	mov -992(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000c231c:
	mov -984(%RBP),%RSP
	add $-1008, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2332
	jmp uuid_00000000000c2334
uuid_00000000000c2332:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1088(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c232c
	jmp uuid_00000000000c232e
uuid_00000000000c232c:
	push %RBP
	mov -1080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2329
	jmp uuid_00000000000c232b
uuid_00000000000c2329:
	push %RBP
	mov -1072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2323
	jmp uuid_00000000000c2325
uuid_00000000000c2323:
	push %RBP
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	jmp uuid_00000000000c2320
	jmp uuid_00000000000c2322
uuid_00000000000c2320:
	push %RBP
	mov -1200(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1360(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c231d
	jmp uuid_00000000000c231f
uuid_00000000000c231d:
	movb $1, -1272(%rbp)
uuid_00000000000c231f:
	mov -1352(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c2322:
	mov -1288(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c2325:
	mov -1280(%RBP),%RSP
	add $-1360, %RSP
	mov -1272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2326
	jmp uuid_00000000000c2328
uuid_00000000000c2326:
	movb $1, -1096(%rbp)
uuid_00000000000c2328:
	mov -1192(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c232b:
	mov -1112(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c232e:
	mov -1104(%RBP),%RSP
	add $-1360, %RSP
	mov -1096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c232f
	jmp uuid_00000000000c2331
uuid_00000000000c232f:
	movb $1, -880(%rbp)
uuid_00000000000c2331:
	mov -1016(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c2334:
	mov -896(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000c2337:
	mov -888(%RBP),%RSP
	add $-1360, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c239d
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1440(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c233e
	jmp uuid_00000000000c2340
uuid_00000000000c233e:
	push %RBP
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	jmp uuid_00000000000c233b
	jmp uuid_00000000000c233d
uuid_00000000000c233b:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2338
	jmp uuid_00000000000c233a
uuid_00000000000c2338:
	movb $1, -1448(%rbp)
uuid_00000000000c233a:
	mov -1528(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c233d:
	mov -1464(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000c2340:
	mov -1456(%RBP),%RSP
	add $-1536, %RSP
	mov -1448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c239a
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c234e
	jmp uuid_00000000000c2350
uuid_00000000000c234e:
	push %RBP
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	jmp uuid_00000000000c234b
	jmp uuid_00000000000c234d
uuid_00000000000c234b:
	push %RBP
	mov -1552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2348
	jmp uuid_00000000000c234a
uuid_00000000000c2348:
	movb $1, -1624(%rbp)
uuid_00000000000c234a:
	mov -1704(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c234d:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c2350:
	mov -1632(%RBP),%RSP
	add $-1712, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2397
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1792(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c235a
	jmp uuid_00000000000c235c
uuid_00000000000c235a:
	push %RBP
	mov -1784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2357
	jmp uuid_00000000000c2359
uuid_00000000000c2357:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2354
	jmp uuid_00000000000c2356
uuid_00000000000c2354:
	movb $1, -1800(%rbp)
uuid_00000000000c2356:
	mov -1896(%RBP),%RSP
	add $-1968, %RSP
uuid_00000000000c2359:
	mov -1816(%RBP),%RSP
	add $-1968, %RSP
uuid_00000000000c235c:
	mov -1808(%RBP),%RSP
	add $-1968, %RSP
	mov -1800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2394
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2048(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2363
	jmp uuid_00000000000c2365
uuid_00000000000c2363:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2360
	jmp uuid_00000000000c2362
uuid_00000000000c2360:
	push %RBP
	mov -2032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c235d
	jmp uuid_00000000000c235f
uuid_00000000000c235d:
	movb $1, -2056(%rbp)
uuid_00000000000c235f:
	mov -2152(%RBP),%RSP
	add $-2224, %RSP
uuid_00000000000c2362:
	mov -2072(%RBP),%RSP
	add $-2224, %RSP
uuid_00000000000c2365:
	mov -2064(%RBP),%RSP
	add $-2224, %RSP
	mov -2056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2391
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c236c
	jmp uuid_00000000000c236e
uuid_00000000000c236c:
	push %RBP
	mov -2296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2369
	jmp uuid_00000000000c236b
uuid_00000000000c2369:
	push %RBP
	mov -2288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2366
	jmp uuid_00000000000c2368
uuid_00000000000c2366:
	movb $1, -2312(%rbp)
uuid_00000000000c2368:
	mov -2408(%RBP),%RSP
	add $-2480, %RSP
uuid_00000000000c236b:
	mov -2328(%RBP),%RSP
	add $-2480, %RSP
uuid_00000000000c236e:
	mov -2320(%RBP),%RSP
	add $-2480, %RSP
	mov -2312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c238e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2378
	jmp uuid_00000000000c237a
uuid_00000000000c2378:
	push %RBP
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	jmp uuid_00000000000c2375
	jmp uuid_00000000000c2377
uuid_00000000000c2375:
	push %RBP
	mov -2528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2372
	jmp uuid_00000000000c2374
uuid_00000000000c2372:
	push %RBP
	mov -2520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c236f
	jmp uuid_00000000000c2371
uuid_00000000000c236f:
	movb $1, -2568(%rbp)
uuid_00000000000c2371:
	mov -2696(%RBP),%RSP
	add $-2768, %RSP
uuid_00000000000c2374:
	mov -2616(%RBP),%RSP
	add $-2768, %RSP
uuid_00000000000c2377:
	mov -2584(%RBP),%RSP
	add $-2768, %RSP
uuid_00000000000c237a:
	mov -2576(%RBP),%RSP
	add $-2768, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c238b
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2848(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2381
	jmp uuid_00000000000c2383
uuid_00000000000c2381:
	push %RBP
	mov -2840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c237e
	jmp uuid_00000000000c2380
uuid_00000000000c237e:
	push %RBP
	pushq -2784(%RBP)
	pushq -2792(%RBP)
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	jmp uuid_00000000000c237b
	jmp uuid_00000000000c237d
uuid_00000000000c237b:
	movb $1, -2856(%rbp)
uuid_00000000000c237d:
	mov -2952(%RBP),%RSP
	add $-3008, %RSP
uuid_00000000000c2380:
	mov -2872(%RBP),%RSP
	add $-3008, %RSP
uuid_00000000000c2383:
	mov -2864(%RBP),%RSP
	add $-3008, %RSP
	mov -2856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2388
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000c2385
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2384
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2387
uuid_00000000000c2385:
	movq -3088(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -3080(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -3072(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -3064(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -3056(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -3048(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -3040(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -3032(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -3024(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c2387:
	mov -3016(%RBP),%RSP
	add $-3088, %RSP
	jmp uuid_00000000000c238a
uuid_00000000000c2388:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2960(%rbp)
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	pushq -2984(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq -3008(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c238a:
	mov -2776(%RBP),%RSP
	add $-3008, %RSP
	jmp uuid_00000000000c238d
uuid_00000000000c238b:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2704(%rbp)
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2624(%rbp)
	pushq -2632(%rbp)
	pushq -2640(%rbp)
	pushq -2648(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2592(%rbp)
	pushq -2600(%rbp)
	pushq -2608(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c238d:
	mov -2488(%RBP),%RSP
	add $-2768, %RSP
	jmp uuid_00000000000c2390
uuid_00000000000c238e:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2390:
	mov -2232(%RBP),%RSP
	add $-2480, %RSP
	jmp uuid_00000000000c2393
uuid_00000000000c2391:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2393:
	mov -1976(%RBP),%RSP
	add $-2224, %RSP
	jmp uuid_00000000000c2396
uuid_00000000000c2394:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2396:
	mov -1720(%RBP),%RSP
	add $-1968, %RSP
	jmp uuid_00000000000c2399
uuid_00000000000c2397:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq $uuid_00000000000c2341
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2351
	jmp uuid_00000000000c2353
uuid_00000000000c2351:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq $uuid_00000000000c2341
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2342
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq $uuid_00000000000c2342
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1728(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1728(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2344
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq $uuid_00000000000c2344
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2344
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq $uuid_00000000000c2344
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2353:
	mov -1720(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000c2399:
	mov -1544(%RBP),%RSP
	add $-1728, %RSP
	jmp uuid_00000000000c239c
uuid_00000000000c239a:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1536(%rbp)
	pushq $uuid_00000000000c2341
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2345
	jmp uuid_00000000000c2347
uuid_00000000000c2345:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1536(%rbp)
	pushq $uuid_00000000000c2341
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2342
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000c2342
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1552(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1552(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2343
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2344
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000c2344
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2344
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000c2344
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2347:
	mov -1544(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000c239c:
	mov -1368(%RBP),%RSP
	add $-1552, %RSP
	jmp uuid_00000000000c239f
uuid_00000000000c239d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1008(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c239f:
	mov -800(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000c23a2
uuid_00000000000c23a0:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c23a2:
	mov -232(%RBP),%RSP
	add $-792, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
preprocess_SB_apply_SB_locations_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23bd
	jmp uuid_00000000000c23bf
uuid_00000000000c23bd:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23aa
	jmp uuid_00000000000c23ac
uuid_00000000000c23aa:
	push %RBP
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000c23a7
	jmp uuid_00000000000c23a9
uuid_00000000000c23a7:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq $uuid_00000000000c23a3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c23a4
	jmp uuid_00000000000c23a6
uuid_00000000000c23a4:
	movb $1, -408(%rbp)
uuid_00000000000c23a6:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c23a9:
	mov -424(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000c23ac:
	mov -416(%RBP),%RSP
	add $-496, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c23ba
	jmp uuid_00000000000c23bc
uuid_00000000000c23ba:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23b4
	jmp uuid_00000000000c23b6
uuid_00000000000c23b4:
	push %RBP
	jmp uuid_00000000000c23b1
	jmp uuid_00000000000c23b3
uuid_00000000000c23b1:
	push %RBP
	mov -512(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq $uuid_00000000000c23ad
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c23ae
	jmp uuid_00000000000c23b0
uuid_00000000000c23ae:
	movb $1, -584(%rbp)
uuid_00000000000c23b0:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c23b3:
	mov -600(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c23b6:
	mov -592(%RBP),%RSP
	add $-616, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c23b7
	jmp uuid_00000000000c23b9
uuid_00000000000c23b7:
	movb $1, -312(%rbp)
uuid_00000000000c23b9:
	mov -504(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c23bc:
	mov -328(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000c23bf:
	mov -320(%RBP),%RSP
	add $-616, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c242f
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23da
	jmp uuid_00000000000c23dc
uuid_00000000000c23da:
	push %RBP
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000c23d7
	jmp uuid_00000000000c23d9
uuid_00000000000c23d7:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c23d4
	jmp uuid_00000000000c23d6
uuid_00000000000c23d4:
	movb $1, -704(%rbp)
uuid_00000000000c23d6:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c23d9:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c23dc:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c242c
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23e3
	jmp uuid_00000000000c23e5
uuid_00000000000c23e3:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	jmp uuid_00000000000c23e0
	jmp uuid_00000000000c23e2
uuid_00000000000c23e0:
	push %RBP
	mov -808(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c23dd
	jmp uuid_00000000000c23df
uuid_00000000000c23dd:
	movb $1, -880(%rbp)
uuid_00000000000c23df:
	mov -960(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c23e2:
	mov -896(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000c23e5:
	mov -888(%RBP),%RSP
	add $-968, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2429
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23ec
	jmp uuid_00000000000c23ee
uuid_00000000000c23ec:
	push %RBP
	mov -1040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c23e9
	jmp uuid_00000000000c23eb
uuid_00000000000c23e9:
	push %RBP
	mov -1032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c23e6
	jmp uuid_00000000000c23e8
uuid_00000000000c23e6:
	movb $1, -1056(%rbp)
uuid_00000000000c23e8:
	mov -1152(%RBP),%RSP
	add $-1224, %RSP
uuid_00000000000c23eb:
	mov -1072(%RBP),%RSP
	add $-1224, %RSP
uuid_00000000000c23ee:
	mov -1064(%RBP),%RSP
	add $-1224, %RSP
	mov -1056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2426
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23f5
	jmp uuid_00000000000c23f7
uuid_00000000000c23f5:
	push %RBP
	mov -1296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c23f2
	jmp uuid_00000000000c23f4
uuid_00000000000c23f2:
	push %RBP
	mov -1288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c23ef
	jmp uuid_00000000000c23f1
uuid_00000000000c23ef:
	movb $1, -1312(%rbp)
uuid_00000000000c23f1:
	mov -1408(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c23f4:
	mov -1328(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c23f7:
	mov -1320(%RBP),%RSP
	add $-1480, %RSP
	mov -1312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2423
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1560(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23fe
	jmp uuid_00000000000c2400
uuid_00000000000c23fe:
	push %RBP
	mov -1552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c23fb
	jmp uuid_00000000000c23fd
uuid_00000000000c23fb:
	push %RBP
	mov -1544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c23f8
	jmp uuid_00000000000c23fa
uuid_00000000000c23f8:
	movb $1, -1568(%rbp)
uuid_00000000000c23fa:
	mov -1664(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c23fd:
	mov -1584(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000c2400:
	mov -1576(%RBP),%RSP
	add $-1736, %RSP
	mov -1568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2420
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1816(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c240a
	jmp uuid_00000000000c240c
uuid_00000000000c240a:
	push %RBP
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	jmp uuid_00000000000c2407
	jmp uuid_00000000000c2409
uuid_00000000000c2407:
	push %RBP
	mov -1784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2404
	jmp uuid_00000000000c2406
uuid_00000000000c2404:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2401
	jmp uuid_00000000000c2403
uuid_00000000000c2401:
	movb $1, -1824(%rbp)
uuid_00000000000c2403:
	mov -1952(%RBP),%RSP
	add $-2024, %RSP
uuid_00000000000c2406:
	mov -1872(%RBP),%RSP
	add $-2024, %RSP
uuid_00000000000c2409:
	mov -1840(%RBP),%RSP
	add $-2024, %RSP
uuid_00000000000c240c:
	mov -1832(%RBP),%RSP
	add $-2024, %RSP
	mov -1824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c241d
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2104(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2413
	jmp uuid_00000000000c2415
uuid_00000000000c2413:
	push %RBP
	mov -2096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2410
	jmp uuid_00000000000c2412
uuid_00000000000c2410:
	push %RBP
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	jmp uuid_00000000000c240d
	jmp uuid_00000000000c240f
uuid_00000000000c240d:
	movb $1, -2112(%rbp)
uuid_00000000000c240f:
	mov -2208(%RBP),%RSP
	add $-2264, %RSP
uuid_00000000000c2412:
	mov -2128(%RBP),%RSP
	add $-2264, %RSP
uuid_00000000000c2415:
	mov -2120(%RBP),%RSP
	add $-2264, %RSP
	mov -2112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c241a
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000c2417
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2416
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2419
uuid_00000000000c2417:
	movq -2344(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -2336(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2304(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2296(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2288(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2280(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c2419:
	mov -2272(%RBP),%RSP
	add $-2344, %RSP
	jmp uuid_00000000000c241c
uuid_00000000000c241a:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c241c:
	mov -2032(%RBP),%RSP
	add $-2264, %RSP
	jmp uuid_00000000000c241f
uuid_00000000000c241d:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c241f:
	mov -1744(%RBP),%RSP
	add $-2024, %RSP
	jmp uuid_00000000000c2422
uuid_00000000000c2420:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2422:
	mov -1488(%RBP),%RSP
	add $-1736, %RSP
	jmp uuid_00000000000c2425
uuid_00000000000c2423:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2425:
	mov -1232(%RBP),%RSP
	add $-1480, %RSP
	jmp uuid_00000000000c2428
uuid_00000000000c2426:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2428:
	mov -976(%RBP),%RSP
	add $-1224, %RSP
	jmp uuid_00000000000c242b
uuid_00000000000c2429:
	pushq -968(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c242b:
	mov -800(%RBP),%RSP
	add $-968, %RSP
	jmp uuid_00000000000c242e
uuid_00000000000c242c:
	pushq -792(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c242e:
	mov -624(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000c2431
uuid_00000000000c242f:
	pushq $uuid_00000000000c23c0
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	push %RBP
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c23ca
	jmp uuid_00000000000c23cc
uuid_00000000000c23ca:
	push %RBP
	mov -688(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c23c7
	jmp uuid_00000000000c23c9
uuid_00000000000c23c7:
	push %RBP
	mov -680(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c23c4
	jmp uuid_00000000000c23c6
uuid_00000000000c23c4:
	push %RBP
	mov -672(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c23c1
	jmp uuid_00000000000c23c3
uuid_00000000000c23c1:
	movb $1, -704(%rbp)
uuid_00000000000c23c3:
	mov -752(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c23c6:
	mov -736(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c23c9:
	mov -720(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000c23cc:
	mov -712(%RBP),%RSP
	add $-760, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c23d1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c23d0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c23d3
uuid_00000000000c23d1:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c23cd
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -760(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c23ce
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -744(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c23cf
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -624(%rbp)
uuid_00000000000c23d3:
	mov -664(%RBP),%RSP
	add $-760, %RSP
	pushq -624(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2431:
	mov -232(%RBP),%RSP
	add $-760, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
preprocess_SB_apply_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2459
	jmp uuid_00000000000c245b
uuid_00000000000c2459:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2456
	jmp uuid_00000000000c2458
uuid_00000000000c2456:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2450
	jmp uuid_00000000000c2452
uuid_00000000000c2450:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c243e
	jmp uuid_00000000000c2440
uuid_00000000000c243e:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2435
	jmp uuid_00000000000c2437
uuid_00000000000c2435:
	push %RBP
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000c2432
	jmp uuid_00000000000c2434
uuid_00000000000c2432:
	movb $1, -680(%rbp)
uuid_00000000000c2434:
	mov -696(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000c2437:
	mov -688(%RBP),%RSP
	add $-720, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c243b
	jmp uuid_00000000000c243d
uuid_00000000000c243b:
	push %RBP
	mov -560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2438
	jmp uuid_00000000000c243a
uuid_00000000000c2438:
	movb $1, -584(%rbp)
uuid_00000000000c243a:
	mov -728(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c243d:
	mov -600(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000c2440:
	mov -592(%RBP),%RSP
	add $-800, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c244d
	jmp uuid_00000000000c244f
uuid_00000000000c244d:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2447
	jmp uuid_00000000000c2449
uuid_00000000000c2447:
	push %RBP
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	jmp uuid_00000000000c2444
	jmp uuid_00000000000c2446
uuid_00000000000c2444:
	push %RBP
	mov -816(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2441
	jmp uuid_00000000000c2443
uuid_00000000000c2441:
	movb $1, -888(%rbp)
uuid_00000000000c2443:
	mov -968(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c2446:
	mov -904(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c2449:
	mov -896(%RBP),%RSP
	add $-976, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c244a
	jmp uuid_00000000000c244c
uuid_00000000000c244a:
	movb $1, -488(%rbp)
uuid_00000000000c244c:
	mov -808(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c244f:
	mov -504(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c2452:
	mov -496(%RBP),%RSP
	add $-976, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2453
	jmp uuid_00000000000c2455
uuid_00000000000c2453:
	movb $1, -312(%rbp)
uuid_00000000000c2455:
	mov -408(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c2458:
	mov -328(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000c245b:
	mov -320(%RBP),%RSP
	add $-976, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2615
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1056(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c247d
	jmp uuid_00000000000c247f
uuid_00000000000c247d:
	push %RBP
	mov -1048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2462
	jmp uuid_00000000000c2464
uuid_00000000000c2462:
	push %RBP
	jmp uuid_00000000000c245f
	jmp uuid_00000000000c2461
uuid_00000000000c245f:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c245c
	jmp uuid_00000000000c245e
uuid_00000000000c245c:
	movb $1, -1160(%rbp)
uuid_00000000000c245e:
	mov -1184(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000c2461:
	mov -1176(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000c2464:
	mov -1168(%RBP),%RSP
	add $-1192, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c247a
	jmp uuid_00000000000c247c
uuid_00000000000c247a:
	push %RBP
	mov -1040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2474
	jmp uuid_00000000000c2476
uuid_00000000000c2474:
	push %RBP
	mov -1264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2471
	jmp uuid_00000000000c2473
uuid_00000000000c2471:
	push %RBP
	mov -1256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1448(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c246b
	jmp uuid_00000000000c246d
uuid_00000000000c246b:
	push %RBP
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	jmp uuid_00000000000c2468
	jmp uuid_00000000000c246a
uuid_00000000000c2468:
	push %RBP
	mov -1384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1544(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2465
	jmp uuid_00000000000c2467
uuid_00000000000c2465:
	movb $1, -1456(%rbp)
uuid_00000000000c2467:
	mov -1536(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c246a:
	mov -1472(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c246d:
	mov -1464(%RBP),%RSP
	add $-1544, %RSP
	mov -1456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c246e
	jmp uuid_00000000000c2470
uuid_00000000000c246e:
	movb $1, -1280(%rbp)
uuid_00000000000c2470:
	mov -1376(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c2473:
	mov -1296(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c2476:
	mov -1288(%RBP),%RSP
	add $-1544, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2477
	jmp uuid_00000000000c2479
uuid_00000000000c2477:
	movb $1, -1064(%rbp)
uuid_00000000000c2479:
	mov -1200(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c247c:
	mov -1080(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000c247f:
	mov -1072(%RBP),%RSP
	add $-1544, %RSP
	mov -1064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2612
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1624(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24a1
	jmp uuid_00000000000c24a3
uuid_00000000000c24a1:
	push %RBP
	mov -1616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1720(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2486
	jmp uuid_00000000000c2488
uuid_00000000000c2486:
	push %RBP
	jmp uuid_00000000000c2483
	jmp uuid_00000000000c2485
uuid_00000000000c2483:
	push %RBP
	mov -1656(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2480
	jmp uuid_00000000000c2482
uuid_00000000000c2480:
	movb $1, -1728(%rbp)
uuid_00000000000c2482:
	mov -1752(%RBP),%RSP
	add $-1760, %RSP
uuid_00000000000c2485:
	mov -1744(%RBP),%RSP
	add $-1760, %RSP
uuid_00000000000c2488:
	mov -1736(%RBP),%RSP
	add $-1760, %RSP
	mov -1728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c249e
	jmp uuid_00000000000c24a0
uuid_00000000000c249e:
	push %RBP
	mov -1608(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1840(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2498
	jmp uuid_00000000000c249a
uuid_00000000000c2498:
	push %RBP
	mov -1832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2495
	jmp uuid_00000000000c2497
uuid_00000000000c2495:
	push %RBP
	mov -1824(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2016(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c248f
	jmp uuid_00000000000c2491
uuid_00000000000c248f:
	push %RBP
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	jmp uuid_00000000000c248c
	jmp uuid_00000000000c248e
uuid_00000000000c248c:
	push %RBP
	mov -1952(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2112(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2489
	jmp uuid_00000000000c248b
uuid_00000000000c2489:
	movb $1, -2024(%rbp)
uuid_00000000000c248b:
	mov -2104(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c248e:
	mov -2040(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c2491:
	mov -2032(%RBP),%RSP
	add $-2112, %RSP
	mov -2024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2492
	jmp uuid_00000000000c2494
uuid_00000000000c2492:
	movb $1, -1848(%rbp)
uuid_00000000000c2494:
	mov -1944(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c2497:
	mov -1864(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c249a:
	mov -1856(%RBP),%RSP
	add $-2112, %RSP
	mov -1848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c249b
	jmp uuid_00000000000c249d
uuid_00000000000c249b:
	movb $1, -1632(%rbp)
uuid_00000000000c249d:
	mov -1768(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c24a0:
	mov -1648(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000c24a3:
	mov -1640(%RBP),%RSP
	add $-2112, %RSP
	mov -1632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c260f
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24cb
	jmp uuid_00000000000c24cd
uuid_00000000000c24cb:
	push %RBP
	mov -2184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c24c8
	jmp uuid_00000000000c24ca
uuid_00000000000c24c8:
	push %RBP
	mov -2176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2368(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24c2
	jmp uuid_00000000000c24c4
uuid_00000000000c24c2:
	push %RBP
	mov -2360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2464(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24b0
	jmp uuid_00000000000c24b2
uuid_00000000000c24b0:
	push %RBP
	mov -2456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24a7
	jmp uuid_00000000000c24a9
uuid_00000000000c24a7:
	push %RBP
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	jmp uuid_00000000000c24a4
	jmp uuid_00000000000c24a6
uuid_00000000000c24a4:
	movb $1, -2568(%rbp)
uuid_00000000000c24a6:
	mov -2584(%RBP),%RSP
	add $-2608, %RSP
uuid_00000000000c24a9:
	mov -2576(%RBP),%RSP
	add $-2608, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c24ad
	jmp uuid_00000000000c24af
uuid_00000000000c24ad:
	push %RBP
	mov -2448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c24aa
	jmp uuid_00000000000c24ac
uuid_00000000000c24aa:
	movb $1, -2472(%rbp)
uuid_00000000000c24ac:
	mov -2616(%RBP),%RSP
	add $-2688, %RSP
uuid_00000000000c24af:
	mov -2488(%RBP),%RSP
	add $-2688, %RSP
uuid_00000000000c24b2:
	mov -2480(%RBP),%RSP
	add $-2688, %RSP
	mov -2472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c24bf
	jmp uuid_00000000000c24c1
uuid_00000000000c24bf:
	push %RBP
	mov -2352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24b9
	jmp uuid_00000000000c24bb
uuid_00000000000c24b9:
	push %RBP
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	pushq -2736(%RBP)
	pushq -2744(%RBP)
	pushq -2752(%RBP)
	pushq -2760(%RBP)
	jmp uuid_00000000000c24b6
	jmp uuid_00000000000c24b8
uuid_00000000000c24b6:
	push %RBP
	mov -2704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2864(%rbp)
	pushq $uuid_00000000000be915
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c24b3
	jmp uuid_00000000000c24b5
uuid_00000000000c24b3:
	movb $1, -2776(%rbp)
uuid_00000000000c24b5:
	mov -2856(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c24b8:
	mov -2792(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c24bb:
	mov -2784(%RBP),%RSP
	add $-2864, %RSP
	mov -2776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c24bc
	jmp uuid_00000000000c24be
uuid_00000000000c24bc:
	movb $1, -2376(%rbp)
uuid_00000000000c24be:
	mov -2696(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c24c1:
	mov -2392(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c24c4:
	mov -2384(%RBP),%RSP
	add $-2864, %RSP
	mov -2376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c24c5
	jmp uuid_00000000000c24c7
uuid_00000000000c24c5:
	movb $1, -2200(%rbp)
uuid_00000000000c24c7:
	mov -2296(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c24ca:
	mov -2216(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000c24cd:
	mov -2208(%RBP),%RSP
	add $-2864, %RSP
	mov -2200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c260c
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2944(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24ef
	jmp uuid_00000000000c24f1
uuid_00000000000c24ef:
	push %RBP
	mov -2936(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3040(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24d4
	jmp uuid_00000000000c24d6
uuid_00000000000c24d4:
	push %RBP
	jmp uuid_00000000000c24d1
	jmp uuid_00000000000c24d3
uuid_00000000000c24d1:
	push %RBP
	mov -2976(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c24ce
	jmp uuid_00000000000c24d0
uuid_00000000000c24ce:
	movb $1, -3048(%rbp)
uuid_00000000000c24d0:
	mov -3072(%RBP),%RSP
	add $-3080, %RSP
uuid_00000000000c24d3:
	mov -3064(%RBP),%RSP
	add $-3080, %RSP
uuid_00000000000c24d6:
	mov -3056(%RBP),%RSP
	add $-3080, %RSP
	mov -3048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c24ec
	jmp uuid_00000000000c24ee
uuid_00000000000c24ec:
	push %RBP
	mov -2928(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3160(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24e6
	jmp uuid_00000000000c24e8
uuid_00000000000c24e6:
	push %RBP
	mov -3152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c24e3
	jmp uuid_00000000000c24e5
uuid_00000000000c24e3:
	push %RBP
	mov -3144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3336(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24dd
	jmp uuid_00000000000c24df
uuid_00000000000c24dd:
	push %RBP
	pushq -3280(%RBP)
	pushq -3288(%RBP)
	pushq -3296(%RBP)
	pushq -3304(%RBP)
	pushq -3312(%RBP)
	pushq -3320(%RBP)
	pushq -3328(%RBP)
	jmp uuid_00000000000c24da
	jmp uuid_00000000000c24dc
uuid_00000000000c24da:
	push %RBP
	mov -3272(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3432(%rbp)
	pushq $uuid_00000000000be915
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c24d7
	jmp uuid_00000000000c24d9
uuid_00000000000c24d7:
	movb $1, -3344(%rbp)
uuid_00000000000c24d9:
	mov -3424(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c24dc:
	mov -3360(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c24df:
	mov -3352(%RBP),%RSP
	add $-3432, %RSP
	mov -3344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c24e0
	jmp uuid_00000000000c24e2
uuid_00000000000c24e0:
	movb $1, -3168(%rbp)
uuid_00000000000c24e2:
	mov -3264(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c24e5:
	mov -3184(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c24e8:
	mov -3176(%RBP),%RSP
	add $-3432, %RSP
	mov -3168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c24e9
	jmp uuid_00000000000c24eb
uuid_00000000000c24e9:
	movb $1, -2952(%rbp)
uuid_00000000000c24eb:
	mov -3088(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c24ee:
	mov -2968(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000c24f1:
	mov -2960(%RBP),%RSP
	add $-3432, %RSP
	mov -2952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2609
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -3512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2513
	jmp uuid_00000000000c2515
uuid_00000000000c2513:
	push %RBP
	mov -3504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3608(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c24f8
	jmp uuid_00000000000c24fa
uuid_00000000000c24f8:
	push %RBP
	jmp uuid_00000000000c24f5
	jmp uuid_00000000000c24f7
uuid_00000000000c24f5:
	push %RBP
	mov -3544(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c24f2
	jmp uuid_00000000000c24f4
uuid_00000000000c24f2:
	movb $1, -3616(%rbp)
uuid_00000000000c24f4:
	mov -3640(%RBP),%RSP
	add $-3648, %RSP
uuid_00000000000c24f7:
	mov -3632(%RBP),%RSP
	add $-3648, %RSP
uuid_00000000000c24fa:
	mov -3624(%RBP),%RSP
	add $-3648, %RSP
	mov -3616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2510
	jmp uuid_00000000000c2512
uuid_00000000000c2510:
	push %RBP
	mov -3496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3728(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c250a
	jmp uuid_00000000000c250c
uuid_00000000000c250a:
	push %RBP
	mov -3720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2507
	jmp uuid_00000000000c2509
uuid_00000000000c2507:
	push %RBP
	mov -3712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3904(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2501
	jmp uuid_00000000000c2503
uuid_00000000000c2501:
	push %RBP
	pushq -3848(%RBP)
	pushq -3856(%RBP)
	pushq -3864(%RBP)
	pushq -3872(%RBP)
	pushq -3880(%RBP)
	pushq -3888(%RBP)
	pushq -3896(%RBP)
	jmp uuid_00000000000c24fe
	jmp uuid_00000000000c2500
uuid_00000000000c24fe:
	push %RBP
	mov -3840(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq $uuid_00000000000be915
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c24fb
	jmp uuid_00000000000c24fd
uuid_00000000000c24fb:
	movb $1, -3912(%rbp)
uuid_00000000000c24fd:
	mov -3992(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c2500:
	mov -3928(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c2503:
	mov -3920(%RBP),%RSP
	add $-4000, %RSP
	mov -3912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2504
	jmp uuid_00000000000c2506
uuid_00000000000c2504:
	movb $1, -3736(%rbp)
uuid_00000000000c2506:
	mov -3832(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c2509:
	mov -3752(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c250c:
	mov -3744(%RBP),%RSP
	add $-4000, %RSP
	mov -3736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c250d
	jmp uuid_00000000000c250f
uuid_00000000000c250d:
	movb $1, -3520(%rbp)
uuid_00000000000c250f:
	mov -3656(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c2512:
	mov -3536(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000c2515:
	mov -3528(%RBP),%RSP
	add $-4000, %RSP
	mov -3520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2606
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4080(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c252e
	jmp uuid_00000000000c2530
uuid_00000000000c252e:
	push %RBP
	mov -4072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4176(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c251c
	jmp uuid_00000000000c251e
uuid_00000000000c251c:
	push %RBP
	jmp uuid_00000000000c2519
	jmp uuid_00000000000c251b
uuid_00000000000c2519:
	push %RBP
	mov -4112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2516
	jmp uuid_00000000000c2518
uuid_00000000000c2516:
	movb $1, -4184(%rbp)
uuid_00000000000c2518:
	mov -4208(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c251b:
	mov -4200(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000c251e:
	mov -4192(%RBP),%RSP
	add $-4216, %RSP
	mov -4184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c252b
	jmp uuid_00000000000c252d
uuid_00000000000c252b:
	push %RBP
	mov -4064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4296(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2525
	jmp uuid_00000000000c2527
uuid_00000000000c2525:
	push %RBP
	pushq -4240(%RBP)
	pushq -4248(%RBP)
	pushq -4256(%RBP)
	pushq -4264(%RBP)
	pushq -4272(%RBP)
	pushq -4280(%RBP)
	pushq -4288(%RBP)
	jmp uuid_00000000000c2522
	jmp uuid_00000000000c2524
uuid_00000000000c2522:
	push %RBP
	mov -4232(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4392(%rbp)
	pushq $uuid_00000000000bec31
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c251f
	jmp uuid_00000000000c2521
uuid_00000000000c251f:
	movb $1, -4304(%rbp)
uuid_00000000000c2521:
	mov -4384(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000c2524:
	mov -4320(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000c2527:
	mov -4312(%RBP),%RSP
	add $-4392, %RSP
	mov -4304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2528
	jmp uuid_00000000000c252a
uuid_00000000000c2528:
	movb $1, -4088(%rbp)
uuid_00000000000c252a:
	mov -4224(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000c252d:
	mov -4104(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000c2530:
	mov -4096(%RBP),%RSP
	add $-4392, %RSP
	mov -4088(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2603
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4472(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2549
	jmp uuid_00000000000c254b
uuid_00000000000c2549:
	push %RBP
	mov -4464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4568(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2537
	jmp uuid_00000000000c2539
uuid_00000000000c2537:
	push %RBP
	jmp uuid_00000000000c2534
	jmp uuid_00000000000c2536
uuid_00000000000c2534:
	push %RBP
	mov -4504(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2531
	jmp uuid_00000000000c2533
uuid_00000000000c2531:
	movb $1, -4576(%rbp)
uuid_00000000000c2533:
	mov -4600(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000c2536:
	mov -4592(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000c2539:
	mov -4584(%RBP),%RSP
	add $-4608, %RSP
	mov -4576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2546
	jmp uuid_00000000000c2548
uuid_00000000000c2546:
	push %RBP
	mov -4456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4688(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2540
	jmp uuid_00000000000c2542
uuid_00000000000c2540:
	push %RBP
	pushq -4632(%RBP)
	pushq -4640(%RBP)
	pushq -4648(%RBP)
	pushq -4656(%RBP)
	pushq -4664(%RBP)
	pushq -4672(%RBP)
	pushq -4680(%RBP)
	jmp uuid_00000000000c253d
	jmp uuid_00000000000c253f
uuid_00000000000c253d:
	push %RBP
	mov -4624(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4784(%rbp)
	pushq $uuid_00000000000bec31
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c253a
	jmp uuid_00000000000c253c
uuid_00000000000c253a:
	movb $1, -4696(%rbp)
uuid_00000000000c253c:
	mov -4776(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000c253f:
	mov -4712(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000c2542:
	mov -4704(%RBP),%RSP
	add $-4784, %RSP
	mov -4696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2543
	jmp uuid_00000000000c2545
uuid_00000000000c2543:
	movb $1, -4480(%rbp)
uuid_00000000000c2545:
	mov -4616(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000c2548:
	mov -4496(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000c254b:
	mov -4488(%RBP),%RSP
	add $-4784, %RSP
	mov -4480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2600
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4864(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2552
	jmp uuid_00000000000c2554
uuid_00000000000c2552:
	push %RBP
	pushq -4808(%RBP)
	pushq -4816(%RBP)
	pushq -4824(%RBP)
	pushq -4832(%RBP)
	pushq -4840(%RBP)
	pushq -4848(%RBP)
	pushq -4856(%RBP)
	jmp uuid_00000000000c254f
	jmp uuid_00000000000c2551
uuid_00000000000c254f:
	push %RBP
	mov -4800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c254c
	jmp uuid_00000000000c254e
uuid_00000000000c254c:
	movb $1, -4872(%rbp)
uuid_00000000000c254e:
	mov -4952(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c2551:
	mov -4888(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000c2554:
	mov -4880(%RBP),%RSP
	add $-4960, %RSP
	mov -4872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25fd
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -5040(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2571
	jmp uuid_00000000000c2573
uuid_00000000000c2571:
	push %RBP
	pushq -4984(%RBP)
	pushq -4992(%RBP)
	pushq -5000(%RBP)
	pushq -5008(%RBP)
	pushq -5016(%RBP)
	pushq -5024(%RBP)
	pushq -5032(%RBP)
	jmp uuid_00000000000c256e
	jmp uuid_00000000000c2570
uuid_00000000000c256e:
	push %RBP
	mov -4976(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c256b
	jmp uuid_00000000000c256d
uuid_00000000000c256b:
	movb $1, -5048(%rbp)
uuid_00000000000c256d:
	mov -5128(%RBP),%RSP
	add $-5136, %RSP
uuid_00000000000c2570:
	mov -5064(%RBP),%RSP
	add $-5136, %RSP
uuid_00000000000c2573:
	mov -5056(%RBP),%RSP
	add $-5136, %RSP
	mov -5048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25fa
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -5216(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2599
	jmp uuid_00000000000c259b
uuid_00000000000c2599:
	push %RBP
	mov -5208(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2596
	jmp uuid_00000000000c2598
uuid_00000000000c2596:
	push %RBP
	mov -5200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5392(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2590
	jmp uuid_00000000000c2592
uuid_00000000000c2590:
	push %RBP
	pushq -5336(%RBP)
	pushq -5344(%RBP)
	pushq -5352(%RBP)
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	pushq -5384(%RBP)
	jmp uuid_00000000000c258d
	jmp uuid_00000000000c258f
uuid_00000000000c258d:
	push %RBP
	mov -5328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c258a
	jmp uuid_00000000000c258c
uuid_00000000000c258a:
	movb $1, -5400(%rbp)
uuid_00000000000c258c:
	mov -5480(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c258f:
	mov -5416(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c2592:
	mov -5408(%RBP),%RSP
	add $-5488, %RSP
	mov -5400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2593
	jmp uuid_00000000000c2595
uuid_00000000000c2593:
	movb $1, -5224(%rbp)
uuid_00000000000c2595:
	mov -5320(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c2598:
	mov -5240(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000c259b:
	mov -5232(%RBP),%RSP
	add $-5488, %RSP
	mov -5224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25f7
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -5568(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c25b7
	jmp uuid_00000000000c25b9
uuid_00000000000c25b7:
	push %RBP
	mov -5560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c25b4
	jmp uuid_00000000000c25b6
uuid_00000000000c25b4:
	push %RBP
	mov -5552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5744(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c25ae
	jmp uuid_00000000000c25b0
uuid_00000000000c25ae:
	push %RBP
	mov -5736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c25ab
	jmp uuid_00000000000c25ad
uuid_00000000000c25ab:
	push %RBP
	mov -5728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5920(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c25a5
	jmp uuid_00000000000c25a7
uuid_00000000000c25a5:
	push %RBP
	pushq -5864(%RBP)
	pushq -5872(%RBP)
	pushq -5880(%RBP)
	pushq -5888(%RBP)
	pushq -5896(%RBP)
	pushq -5904(%RBP)
	pushq -5912(%RBP)
	jmp uuid_00000000000c25a2
	jmp uuid_00000000000c25a4
uuid_00000000000c25a2:
	push %RBP
	mov -5856(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c259f
	jmp uuid_00000000000c25a1
uuid_00000000000c259f:
	movb $1, -5928(%rbp)
uuid_00000000000c25a1:
	mov -6008(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c25a4:
	mov -5944(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c25a7:
	mov -5936(%RBP),%RSP
	add $-6016, %RSP
	mov -5928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25a8
	jmp uuid_00000000000c25aa
uuid_00000000000c25a8:
	movb $1, -5752(%rbp)
uuid_00000000000c25aa:
	mov -5848(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c25ad:
	mov -5768(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c25b0:
	mov -5760(%RBP),%RSP
	add $-6016, %RSP
	mov -5752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25b1
	jmp uuid_00000000000c25b3
uuid_00000000000c25b1:
	movb $1, -5576(%rbp)
uuid_00000000000c25b3:
	mov -5672(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c25b6:
	mov -5592(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000c25b9:
	mov -5584(%RBP),%RSP
	add $-6016, %RSP
	mov -5576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25f4
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6096(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c25c3
	jmp uuid_00000000000c25c5
uuid_00000000000c25c3:
	push %RBP
	mov -6088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c25c0
	jmp uuid_00000000000c25c2
uuid_00000000000c25c0:
	push %RBP
	mov -6080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c25bd
	jmp uuid_00000000000c25bf
uuid_00000000000c25bd:
	movb $1, -6104(%rbp)
uuid_00000000000c25bf:
	mov -6200(%RBP),%RSP
	add $-6272, %RSP
uuid_00000000000c25c2:
	mov -6120(%RBP),%RSP
	add $-6272, %RSP
uuid_00000000000c25c5:
	mov -6112(%RBP),%RSP
	add $-6272, %RSP
	mov -6104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25f1
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c25cc
	jmp uuid_00000000000c25ce
uuid_00000000000c25cc:
	push %RBP
	mov -6344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c25c9
	jmp uuid_00000000000c25cb
uuid_00000000000c25c9:
	push %RBP
	mov -6336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c25c6
	jmp uuid_00000000000c25c8
uuid_00000000000c25c6:
	movb $1, -6360(%rbp)
uuid_00000000000c25c8:
	mov -6456(%RBP),%RSP
	add $-6528, %RSP
uuid_00000000000c25cb:
	mov -6376(%RBP),%RSP
	add $-6528, %RSP
uuid_00000000000c25ce:
	mov -6368(%RBP),%RSP
	add $-6528, %RSP
	mov -6360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25ee
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6608(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c25d8
	jmp uuid_00000000000c25da
uuid_00000000000c25d8:
	push %RBP
	pushq -6584(%RBP)
	pushq -6592(%RBP)
	pushq -6600(%RBP)
	jmp uuid_00000000000c25d5
	jmp uuid_00000000000c25d7
uuid_00000000000c25d5:
	push %RBP
	mov -6576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c25d2
	jmp uuid_00000000000c25d4
uuid_00000000000c25d2:
	push %RBP
	mov -6568(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c25cf
	jmp uuid_00000000000c25d1
uuid_00000000000c25cf:
	movb $1, -6616(%rbp)
uuid_00000000000c25d1:
	mov -6744(%RBP),%RSP
	add $-6816, %RSP
uuid_00000000000c25d4:
	mov -6664(%RBP),%RSP
	add $-6816, %RSP
uuid_00000000000c25d7:
	mov -6632(%RBP),%RSP
	add $-6816, %RSP
uuid_00000000000c25da:
	mov -6624(%RBP),%RSP
	add $-6816, %RSP
	mov -6616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25eb
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6896(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c25e1
	jmp uuid_00000000000c25e3
uuid_00000000000c25e1:
	push %RBP
	mov -6888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c25de
	jmp uuid_00000000000c25e0
uuid_00000000000c25de:
	push %RBP
	pushq -6832(%RBP)
	pushq -6840(%RBP)
	pushq -6848(%RBP)
	pushq -6856(%RBP)
	pushq -6864(%RBP)
	pushq -6872(%RBP)
	pushq -6880(%RBP)
	jmp uuid_00000000000c25db
	jmp uuid_00000000000c25dd
uuid_00000000000c25db:
	movb $1, -6904(%rbp)
uuid_00000000000c25dd:
	mov -7000(%RBP),%RSP
	add $-7056, %RSP
uuid_00000000000c25e0:
	mov -6920(%RBP),%RSP
	add $-7056, %RSP
uuid_00000000000c25e3:
	mov -6912(%RBP),%RSP
	add $-7056, %RSP
	mov -6904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c25e8
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000c25e5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c25e4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c25e7
uuid_00000000000c25e5:
	movq -7136(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -7128(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -7120(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -7112(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -7104(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -7096(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -7088(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -7080(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -7072(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c25e7:
	mov -7064(%RBP),%RSP
	add $-7136, %RSP
	jmp uuid_00000000000c25ea
uuid_00000000000c25e8:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7008(%rbp)
	pushq -7016(%rbp)
	pushq -7024(%rbp)
	pushq -7032(%rbp)
	pushq -7040(%rbp)
	pushq -7048(%rbp)
	pushq -7056(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6928(%rbp)
	pushq -6936(%rbp)
	pushq -6944(%rbp)
	pushq -6952(%rbp)
	pushq -6960(%rbp)
	pushq -6968(%rbp)
	pushq -6976(%rbp)
	pushq -6984(%rbp)
	pushq -6992(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c25ea:
	mov -6824(%RBP),%RSP
	add $-7056, %RSP
	jmp uuid_00000000000c25ed
uuid_00000000000c25eb:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6752(%rbp)
	pushq -6760(%rbp)
	pushq -6768(%rbp)
	pushq -6776(%rbp)
	pushq -6784(%rbp)
	pushq -6792(%rbp)
	pushq -6800(%rbp)
	pushq -6808(%rbp)
	pushq -6816(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6672(%rbp)
	pushq -6680(%rbp)
	pushq -6688(%rbp)
	pushq -6696(%rbp)
	pushq -6704(%rbp)
	pushq -6712(%rbp)
	pushq -6720(%rbp)
	pushq -6728(%rbp)
	pushq -6736(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -6640(%rbp)
	pushq -6648(%rbp)
	pushq -6656(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c25ed:
	mov -6536(%RBP),%RSP
	add $-6816, %RSP
	jmp uuid_00000000000c25f0
uuid_00000000000c25ee:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6464(%rbp)
	pushq -6472(%rbp)
	pushq -6480(%rbp)
	pushq -6488(%rbp)
	pushq -6496(%rbp)
	pushq -6504(%rbp)
	pushq -6512(%rbp)
	pushq -6520(%rbp)
	pushq -6528(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6384(%rbp)
	pushq -6392(%rbp)
	pushq -6400(%rbp)
	pushq -6408(%rbp)
	pushq -6416(%rbp)
	pushq -6424(%rbp)
	pushq -6432(%rbp)
	pushq -6440(%rbp)
	pushq -6448(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c25f0:
	mov -6280(%RBP),%RSP
	add $-6528, %RSP
	jmp uuid_00000000000c25f3
uuid_00000000000c25f1:
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6208(%rbp)
	pushq -6216(%rbp)
	pushq -6224(%rbp)
	pushq -6232(%rbp)
	pushq -6240(%rbp)
	pushq -6248(%rbp)
	pushq -6256(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6128(%rbp)
	pushq -6136(%rbp)
	pushq -6144(%rbp)
	pushq -6152(%rbp)
	pushq -6160(%rbp)
	pushq -6168(%rbp)
	pushq -6176(%rbp)
	pushq -6184(%rbp)
	pushq -6192(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c25f3:
	mov -6024(%RBP),%RSP
	add $-6272, %RSP
	jmp uuid_00000000000c25f6
uuid_00000000000c25f4:
	push %RBP
#call function is-macro-head : Arrow<Cons<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6016(%rbp)
	pushq $2
	mov %RBX, %RBP
	call is_SB_macro_SB_head_CL_ArrowU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c25ba
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6016(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5952(%rbp)
	pushq -5960(%rbp)
	pushq -5968(%rbp)
	pushq -5976(%rbp)
	pushq -5984(%rbp)
	pushq -5992(%rbp)
	pushq -6000(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	pushq -5800(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000c25bc
uuid_00000000000c25ba:
#call function preprocess-apply-hard : Arrow<Cons<Cons<String,U64>,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6016(%rbp)
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_hard_CL_ArrowASTConsASTConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	movq -6096(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -6088(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -6080(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -6072(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -6064(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -6056(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -6048(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -6040(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -6032(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c25bc:
	mov -6024(%RBP),%RSP
	add $-6096, %RSP
uuid_00000000000c25f6:
	mov -5496(%RBP),%RSP
	add $-6096, %RSP
	jmp uuid_00000000000c25f9
uuid_00000000000c25f7:
	push %RBP
#call function is-macro-head : Arrow<Cons<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5488(%rbp)
	pushq $1
	mov %RBX, %RBP
	call is_SB_macro_SB_head_CL_ArrowU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c259c
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5488(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	pushq -5440(%rbp)
	pushq -5448(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000c259e
uuid_00000000000c259c:
#call function preprocess-apply-hard : Arrow<Cons<Cons<String,U64>,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5488(%rbp)
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_hard_CL_ArrowASTConsASTConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	movq -5568(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -5560(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -5552(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -5544(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -5536(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -5528(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -5520(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -5512(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -5504(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000c259e:
	mov -5496(%RBP),%RSP
	add $-5568, %RSP
uuid_00000000000c25f9:
	mov -5144(%RBP),%RSP
	add $-5568, %RSP
	jmp uuid_00000000000c25fc
uuid_00000000000c25fa:
	mov $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c2587:
#call function non-zero : Arrow<SfxList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2588
	jmp uuid_00000000000c2589
uuid_00000000000c2588:
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	push %RBP
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq $0
	push %RBP
	mov -5288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c257d
	jmp uuid_00000000000c257f
uuid_00000000000c257d:
	push %RBP
	pushq -5264(%RBP)
	pushq -5272(%RBP)
	pushq -5280(%RBP)
	jmp uuid_00000000000c257a
	jmp uuid_00000000000c257c
uuid_00000000000c257a:
	push %RBP
	mov -5256(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2577
	jmp uuid_00000000000c2579
uuid_00000000000c2577:
	push %RBP
	mov -5248(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2574
	jmp uuid_00000000000c2576
uuid_00000000000c2574:
	movb $1, -5296(%rbp)
uuid_00000000000c2576:
	mov -5360(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c2579:
	mov -5344(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c257c:
	mov -5312(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000c257f:
	mov -5304(%RBP),%RSP
	add $-5408, %RSP
	mov -5296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2584
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2583
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2586
uuid_00000000000c2584:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5136(%rbp)
	pushq -5352(%rbp)
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2580
	movq -5408(%rbp), %r15
	movq %r15, -5184(%rbp)
	movq -5400(%rbp), %r15
	movq %r15, -5176(%rbp)
	movq -5392(%rbp), %r15
	movq %r15, -5168(%rbp)
	movq -5384(%rbp), %r15
	movq %r15, -5160(%rbp)
	movq -5376(%rbp), %r15
	movq %r15, -5152(%rbp)
	movq -5368(%rbp), %r15
	movq %r15, -5144(%rbp)
	jmp uuid_00000000000c2582
uuid_00000000000c2580:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5136(%rbp)
	pushq -5352(%rbp)
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5424(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5424(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -5184(%RBP)
	popq -5176(%RBP)
	popq -5168(%RBP)
	popq -5160(%RBP)
	popq -5152(%RBP)
	popq -5144(%RBP)
uuid_00000000000c2582:
	mov -5416(%RBP),%RSP
	add $-5424, %RSP
uuid_00000000000c2586:
	mov -5240(%RBP),%RSP
	add $-5424, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2587
uuid_00000000000c2589:
uuid_00000000000c25fc:
	mov -4968(%RBP),%RSP
	add $-5184, %RSP
	jmp uuid_00000000000c25ff
uuid_00000000000c25fd:
	mov $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c2568:
#call function non-zero : Arrow<SfxList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2569
	jmp uuid_00000000000c256a
uuid_00000000000c2569:
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	push %RBP
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq $0
	push %RBP
	mov -5112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c255e
	jmp uuid_00000000000c2560
uuid_00000000000c255e:
	push %RBP
	pushq -5088(%RBP)
	pushq -5096(%RBP)
	pushq -5104(%RBP)
	jmp uuid_00000000000c255b
	jmp uuid_00000000000c255d
uuid_00000000000c255b:
	push %RBP
	mov -5080(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2558
	jmp uuid_00000000000c255a
uuid_00000000000c2558:
	push %RBP
	mov -5072(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2555
	jmp uuid_00000000000c2557
uuid_00000000000c2555:
	movb $1, -5120(%rbp)
uuid_00000000000c2557:
	mov -5184(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000c255a:
	mov -5168(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000c255d:
	mov -5136(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000c2560:
	mov -5128(%RBP),%RSP
	add $-5232, %RSP
	mov -5120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2565
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2564
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2567
uuid_00000000000c2565:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq -5176(%rbp)
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2561
	movq -5232(%rbp), %r15
	movq %r15, -5008(%rbp)
	movq -5224(%rbp), %r15
	movq %r15, -5000(%rbp)
	movq -5216(%rbp), %r15
	movq %r15, -4992(%rbp)
	movq -5208(%rbp), %r15
	movq %r15, -4984(%rbp)
	movq -5200(%rbp), %r15
	movq %r15, -4976(%rbp)
	movq -5192(%rbp), %r15
	movq %r15, -4968(%rbp)
	jmp uuid_00000000000c2563
uuid_00000000000c2561:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq -5176(%rbp)
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5248(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -5248(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -5008(%RBP)
	popq -5000(%RBP)
	popq -4992(%RBP)
	popq -4984(%RBP)
	popq -4976(%RBP)
	popq -4968(%RBP)
uuid_00000000000c2563:
	mov -5240(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000c2567:
	mov -5064(%RBP),%RSP
	add $-5248, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2568
uuid_00000000000c256a:
uuid_00000000000c25ff:
	mov -4792(%RBP),%RSP
	add $-5008, %RSP
	jmp uuid_00000000000c2602
uuid_00000000000c2600:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec31
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4608(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2602:
	mov -4400(%RBP),%RSP
	add $-4784, %RSP
	jmp uuid_00000000000c2605
uuid_00000000000c2603:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bec31
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4216(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2605:
	mov -4008(%RBP),%RSP
	add $-4392, %RSP
	jmp uuid_00000000000c2608
uuid_00000000000c2606:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be915
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3936(%rbp)
	pushq -3944(%rbp)
	pushq -3952(%rbp)
	pushq -3960(%rbp)
	pushq -3968(%rbp)
	pushq -3976(%rbp)
	pushq -3984(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3760(%rbp)
	pushq -3768(%rbp)
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -3800(%rbp)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3648(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2608:
	mov -3440(%RBP),%RSP
	add $-4000, %RSP
	jmp uuid_00000000000c260b
uuid_00000000000c2609:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be915
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3368(%rbp)
	pushq -3376(%rbp)
	pushq -3384(%rbp)
	pushq -3392(%rbp)
	pushq -3400(%rbp)
	pushq -3408(%rbp)
	pushq -3416(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3192(%rbp)
	pushq -3200(%rbp)
	pushq -3208(%rbp)
	pushq -3216(%rbp)
	pushq -3224(%rbp)
	pushq -3232(%rbp)
	pushq -3240(%rbp)
	pushq -3248(%rbp)
	pushq -3256(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3080(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c260b:
	mov -2872(%RBP),%RSP
	add $-3432, %RSP
	jmp uuid_00000000000c260e
uuid_00000000000c260c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be915
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2624(%rbp)
	pushq -2632(%rbp)
	pushq -2640(%rbp)
	pushq -2648(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -2592(%rbp)
	pushq -2600(%rbp)
	pushq -2608(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c260e:
	mov -2120(%RBP),%RSP
	add $-2864, %RSP
	jmp uuid_00000000000c2611
uuid_00000000000c260f:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2611:
	mov -1552(%RBP),%RSP
	add $-2112, %RSP
	jmp uuid_00000000000c2614
uuid_00000000000c2612:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1192(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2614:
	mov -984(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000c2617
uuid_00000000000c2615:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000c2617:
	mov -232(%RBP),%RSP
	add $-976, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
preprocess_SB_is_SB_suffixed_CL_ArrowU64String:
	pushq $0
	mov $parse_SB_suffixes_CL_SfxListSfxListCaseNumber1, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000c262b:
#call function non-zero : Arrow<SfxList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c262c
	jmp uuid_00000000000c262d
uuid_00000000000c262c:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2621
	jmp uuid_00000000000c2623
uuid_00000000000c2621:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000c261e
	jmp uuid_00000000000c2620
uuid_00000000000c261e:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c261b
	jmp uuid_00000000000c261d
uuid_00000000000c261b:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2618
	jmp uuid_00000000000c261a
uuid_00000000000c2618:
	movb $1, -184(%rbp)
uuid_00000000000c261a:
	mov -248(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c261d:
	mov -232(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c2620:
	mov -200(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c2623:
	mov -192(%RBP),%RSP
	add $-296, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2628
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2627
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c262a
uuid_00000000000c2628:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2624
	jmp uuid_00000000000c2626
uuid_00000000000c2624:
	movq $1, -24(%rbp)
uuid_00000000000c2626:
	mov -304(%RBP),%RSP
	add $-304, %RSP
	movq -296(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000c262a:
	mov -128(%RBP),%RSP
	add $-304, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c262b
uuid_00000000000c262d:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
preprocess_CL_ArrowNilNil:
#call function index-typedefs : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
substitute_SB_uuids_CL_ArrowASTConsASTContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2646
	jmp uuid_00000000000c2648
uuid_00000000000c2646:
	push %RBP
	mov -392(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2634
	jmp uuid_00000000000c2636
uuid_00000000000c2634:
	push %RBP
	jmp uuid_00000000000c2631
	jmp uuid_00000000000c2633
uuid_00000000000c2631:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c262e
	jmp uuid_00000000000c2630
uuid_00000000000c262e:
	movb $1, -504(%rbp)
uuid_00000000000c2630:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c2633:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c2636:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2643
	jmp uuid_00000000000c2645
uuid_00000000000c2643:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c263d
	jmp uuid_00000000000c263f
uuid_00000000000c263d:
	push %RBP
	jmp uuid_00000000000c263a
	jmp uuid_00000000000c263c
uuid_00000000000c263a:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq $uuid_00000000000c1ee5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2637
	jmp uuid_00000000000c2639
uuid_00000000000c2637:
	movb $1, -624(%rbp)
uuid_00000000000c2639:
	mov -648(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c263c:
	mov -640(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c263f:
	mov -632(%RBP),%RSP
	add $-656, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2640
	jmp uuid_00000000000c2642
uuid_00000000000c2640:
	movb $1, -408(%rbp)
uuid_00000000000c2642:
	mov -544(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c2645:
	mov -424(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000c2648:
	mov -416(%RBP),%RSP
	add $-656, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c26c9
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2668
	jmp uuid_00000000000c266a
uuid_00000000000c2668:
	push %RBP
	mov -728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2665
	jmp uuid_00000000000c2667
uuid_00000000000c2665:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2662
	jmp uuid_00000000000c2664
uuid_00000000000c2662:
	movb $1, -744(%rbp)
uuid_00000000000c2664:
	mov -840(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c2667:
	mov -760(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000c266a:
	mov -752(%RBP),%RSP
	add $-912, %RSP
	mov -744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c26c6
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2674
	jmp uuid_00000000000c2676
uuid_00000000000c2674:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000c2671
	jmp uuid_00000000000c2673
uuid_00000000000c2671:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c266e
	jmp uuid_00000000000c2670
uuid_00000000000c266e:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c266b
	jmp uuid_00000000000c266d
uuid_00000000000c266b:
	movb $1, -1000(%rbp)
uuid_00000000000c266d:
	mov -1128(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c2670:
	mov -1048(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c2673:
	mov -1016(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000c2676:
	mov -1008(%RBP),%RSP
	add $-1200, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c26c3
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -1280(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26c0
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26bd
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1440(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c267a
	jmp uuid_00000000000c267c
uuid_00000000000c267a:
	push %RBP
	jmp uuid_00000000000c2677
	jmp uuid_00000000000c2679
uuid_00000000000c2677:
	movb $1, -1448(%rbp)
uuid_00000000000c2679:
	mov -1464(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000c267c:
	mov -1456(%RBP),%RSP
	add $-1464, %RSP
	mov -1448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c26ba
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1544(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2683
	jmp uuid_00000000000c2685
uuid_00000000000c2683:
	push %RBP
	jmp uuid_00000000000c2680
	jmp uuid_00000000000c2682
uuid_00000000000c2680:
	push %RBP
	mov -1480(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c267d
	jmp uuid_00000000000c267f
uuid_00000000000c267d:
	movb $1, -1552(%rbp)
uuid_00000000000c267f:
	mov -1576(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c2682:
	mov -1568(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000c2685:
	mov -1560(%RBP),%RSP
	add $-1584, %RSP
	mov -1552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c26b7
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1664(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c268c
	jmp uuid_00000000000c268e
uuid_00000000000c268c:
	push %RBP
	jmp uuid_00000000000c2689
	jmp uuid_00000000000c268b
uuid_00000000000c2689:
	push %RBP
	mov -1600(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2686
	jmp uuid_00000000000c2688
uuid_00000000000c2686:
	movb $1, -1672(%rbp)
uuid_00000000000c2688:
	mov -1696(%RBP),%RSP
	add $-1704, %RSP
uuid_00000000000c268b:
	mov -1688(%RBP),%RSP
	add $-1704, %RSP
uuid_00000000000c268e:
	mov -1680(%RBP),%RSP
	add $-1704, %RSP
	mov -1672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c26b4
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2695
	jmp uuid_00000000000c2697
uuid_00000000000c2695:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2692
	jmp uuid_00000000000c2694
uuid_00000000000c2692:
	push %RBP
	mov -1768(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c268f
	jmp uuid_00000000000c2691
uuid_00000000000c268f:
	movb $1, -1792(%rbp)
uuid_00000000000c2691:
	mov -1888(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c2694:
	mov -1808(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000c2697:
	mov -1800(%RBP),%RSP
	add $-1960, %RSP
	mov -1792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c26b1
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -2040(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c269e
	jmp uuid_00000000000c26a0
uuid_00000000000c269e:
	push %RBP
	mov -2032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c269b
	jmp uuid_00000000000c269d
uuid_00000000000c269b:
	push %RBP
	mov -2024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2698
	jmp uuid_00000000000c269a
uuid_00000000000c2698:
	movb $1, -2048(%rbp)
uuid_00000000000c269a:
	mov -2144(%RBP),%RSP
	add $-2216, %RSP
uuid_00000000000c269d:
	mov -2064(%RBP),%RSP
	add $-2216, %RSP
uuid_00000000000c26a0:
	mov -2056(%RBP),%RSP
	add $-2216, %RSP
	mov -2048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c26ae
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -2296(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26a7
	jmp uuid_00000000000c26a9
uuid_00000000000c26a7:
	push %RBP
	mov -2288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c26a4
	jmp uuid_00000000000c26a6
uuid_00000000000c26a4:
	push %RBP
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	jmp uuid_00000000000c26a1
	jmp uuid_00000000000c26a3
uuid_00000000000c26a1:
	movb $1, -2304(%rbp)
uuid_00000000000c26a3:
	mov -2400(%RBP),%RSP
	add $-2456, %RSP
uuid_00000000000c26a6:
	mov -2320(%RBP),%RSP
	add $-2456, %RSP
uuid_00000000000c26a9:
	mov -2312(%RBP),%RSP
	add $-2456, %RSP
	mov -2304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c26ab
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c26aa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c26ad
uuid_00000000000c26ab:
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c26ad:
	mov -2224(%RBP),%RSP
	add $-2456, %RSP
	jmp uuid_00000000000c26b0
uuid_00000000000c26ae:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c26b0:
	mov -1968(%RBP),%RSP
	add $-2216, %RSP
	jmp uuid_00000000000c26b3
uuid_00000000000c26b1:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c26b3:
	mov -1712(%RBP),%RSP
	add $-1960, %RSP
	jmp uuid_00000000000c26b6
uuid_00000000000c26b4:
uuid_00000000000c26b6:
	mov -1592(%RBP),%RSP
	add $-1704, %RSP
	jmp uuid_00000000000c26b9
uuid_00000000000c26b7:
uuid_00000000000c26b9:
	mov -1472(%RBP),%RSP
	add $-1584, %RSP
	jmp uuid_00000000000c26bc
uuid_00000000000c26ba:
uuid_00000000000c26bc:
	mov -1368(%RBP),%RSP
	add $-1464, %RSP
	jmp uuid_00000000000c26bf
uuid_00000000000c26bd:
uuid_00000000000c26bf:
	mov -1288(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000c26c2
uuid_00000000000c26c0:
uuid_00000000000c26c2:
	mov -1208(%RBP),%RSP
	add $-1280, %RSP
	jmp uuid_00000000000c26c5
uuid_00000000000c26c3:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq $5
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c26c5:
	mov -920(%RBP),%RSP
	add $-1200, %RSP
	jmp uuid_00000000000c26c8
uuid_00000000000c26c6:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000c26c8:
	mov -664(%RBP),%RSP
	add $-912, %RSP
	jmp uuid_00000000000c26cb
uuid_00000000000c26c9:
uuid_00000000000c265f:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2660
	jmp uuid_00000000000c2661
uuid_00000000000c2660:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq $0
	push %RBP
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2652
	jmp uuid_00000000000c2654
uuid_00000000000c2652:
	push %RBP
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	jmp uuid_00000000000c264f
	jmp uuid_00000000000c2651
uuid_00000000000c264f:
	push %RBP
	mov -776(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c264c
	jmp uuid_00000000000c264e
uuid_00000000000c264c:
	push %RBP
	mov -768(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2649
	jmp uuid_00000000000c264b
uuid_00000000000c2649:
	movb $1, -864(%rbp)
uuid_00000000000c264b:
	mov -976(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c264e:
	mov -960(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c2651:
	mov -880(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c2654:
	mov -872(%RBP),%RSP
	add $-1072, %RSP
	mov -864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c265c
	push %RBP
	jmp uuid_00000000000c2659
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2658
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c265b
uuid_00000000000c2659:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c265b:
	mov -1080(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000c265e
uuid_00000000000c265c:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -968(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2655
	movq -1072(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000c2657
uuid_00000000000c2655:
	movq -952(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c2657:
	mov -1080(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000c265e:
	mov -760(%RBP),%RSP
	add $-1080, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c265f
uuid_00000000000c2661:
uuid_00000000000c26cb:
	mov -328(%RBP),%RSP
	add $-656, %RSP
	subq $72, %rsp
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26d2
	jmp uuid_00000000000c26d4
uuid_00000000000c26d2:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26cf
	jmp uuid_00000000000c26d1
uuid_00000000000c26cf:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26cc
	jmp uuid_00000000000c26ce
uuid_00000000000c26cc:
	movb $1, -600(%rbp)
uuid_00000000000c26ce:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c26d1:
	mov -616(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000c26d4:
	mov -608(%RBP),%RSP
	add $-768, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2980
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -928(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2723
	jmp uuid_00000000000c2725
uuid_00000000000c2723:
	push %RBP
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq $0
	push %RBP
	mov -1024(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26ed
	jmp uuid_00000000000c26ef
uuid_00000000000c26ed:
	push %RBP
	jmp uuid_00000000000c26ea
	jmp uuid_00000000000c26ec
uuid_00000000000c26ea:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26e4
	jmp uuid_00000000000c26e6
uuid_00000000000c26e4:
	push %RBP
	jmp uuid_00000000000c26e1
	jmp uuid_00000000000c26e3
uuid_00000000000c26e1:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1232(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26db
	jmp uuid_00000000000c26dd
uuid_00000000000c26db:
	push %RBP
	jmp uuid_00000000000c26d8
	jmp uuid_00000000000c26da
uuid_00000000000c26d8:
	push %RBP
	mov -1168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c26d5
	jmp uuid_00000000000c26d7
uuid_00000000000c26d5:
	movb $1, -1240(%rbp)
uuid_00000000000c26d7:
	mov -1264(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c26da:
	mov -1256(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c26dd:
	mov -1248(%RBP),%RSP
	add $-1272, %RSP
	mov -1240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c26de
	jmp uuid_00000000000c26e0
uuid_00000000000c26de:
	movb $1, -1136(%rbp)
uuid_00000000000c26e0:
	mov -1160(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c26e3:
	mov -1152(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c26e6:
	mov -1144(%RBP),%RSP
	add $-1272, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c26e7
	jmp uuid_00000000000c26e9
uuid_00000000000c26e7:
	movb $1, -1032(%rbp)
uuid_00000000000c26e9:
	mov -1056(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c26ec:
	mov -1048(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000c26ef:
	mov -1040(%RBP),%RSP
	add $-1272, %RSP
	mov -1032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2720
	jmp uuid_00000000000c2722
uuid_00000000000c2720:
	push %RBP
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c271a
	jmp uuid_00000000000c271c
uuid_00000000000c271a:
	push %RBP
	mov -1344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1448(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26f6
	jmp uuid_00000000000c26f8
uuid_00000000000c26f6:
	push %RBP
	jmp uuid_00000000000c26f3
	jmp uuid_00000000000c26f5
uuid_00000000000c26f3:
	push %RBP
	jmp uuid_00000000000c26f0
	jmp uuid_00000000000c26f2
uuid_00000000000c26f0:
	movb $1, -1456(%rbp)
uuid_00000000000c26f2:
	mov -1480(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c26f5:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000c26f8:
	mov -1464(%RBP),%RSP
	add $-1480, %RSP
	mov -1456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2717
	jmp uuid_00000000000c2719
uuid_00000000000c2717:
	push %RBP
	mov -1336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1560(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2711
	jmp uuid_00000000000c2713
uuid_00000000000c2711:
	push %RBP
	mov -1552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c26ff
	jmp uuid_00000000000c2701
uuid_00000000000c26ff:
	push %RBP
	jmp uuid_00000000000c26fc
	jmp uuid_00000000000c26fe
uuid_00000000000c26fc:
	push %RBP
	jmp uuid_00000000000c26f9
	jmp uuid_00000000000c26fb
uuid_00000000000c26f9:
	movb $1, -1664(%rbp)
uuid_00000000000c26fb:
	mov -1688(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c26fe:
	mov -1680(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000c2701:
	mov -1672(%RBP),%RSP
	add $-1688, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c270e
	jmp uuid_00000000000c2710
uuid_00000000000c270e:
	push %RBP
	mov -1544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2708
	jmp uuid_00000000000c270a
uuid_00000000000c2708:
	push %RBP
	jmp uuid_00000000000c2705
	jmp uuid_00000000000c2707
uuid_00000000000c2705:
	push %RBP
	jmp uuid_00000000000c2702
	jmp uuid_00000000000c2704
uuid_00000000000c2702:
	movb $1, -1776(%rbp)
uuid_00000000000c2704:
	mov -1800(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c2707:
	mov -1792(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c270a:
	mov -1784(%RBP),%RSP
	add $-1800, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c270b
	jmp uuid_00000000000c270d
uuid_00000000000c270b:
	movb $1, -1568(%rbp)
uuid_00000000000c270d:
	mov -1696(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c2710:
	mov -1584(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c2713:
	mov -1576(%RBP),%RSP
	add $-1800, %RSP
	mov -1568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2714
	jmp uuid_00000000000c2716
uuid_00000000000c2714:
	movb $1, -1360(%rbp)
uuid_00000000000c2716:
	mov -1488(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c2719:
	mov -1376(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c271c:
	mov -1368(%RBP),%RSP
	add $-1800, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c271d
	jmp uuid_00000000000c271f
uuid_00000000000c271d:
	movb $1, -936(%rbp)
uuid_00000000000c271f:
	mov -1280(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c2722:
	mov -952(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000c2725:
	mov -944(%RBP),%RSP
	add $-1800, %RSP
	mov -936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c297d
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -1960(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2772
	jmp uuid_00000000000c2774
uuid_00000000000c2772:
	push %RBP
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq $0
	push %RBP
	mov -2056(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c274d
	jmp uuid_00000000000c274f
uuid_00000000000c274d:
	push %RBP
	mov -2048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2152(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c273b
	jmp uuid_00000000000c273d
uuid_00000000000c273b:
	push %RBP
	mov -2144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2248(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2729
	jmp uuid_00000000000c272b
uuid_00000000000c2729:
	push %RBP
	jmp uuid_00000000000c2726
	jmp uuid_00000000000c2728
uuid_00000000000c2726:
	movb $1, -2256(%rbp)
uuid_00000000000c2728:
	mov -2272(%RBP),%RSP
	add $-2272, %RSP
uuid_00000000000c272b:
	mov -2264(%RBP),%RSP
	add $-2272, %RSP
	mov -2256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2738
	jmp uuid_00000000000c273a
uuid_00000000000c2738:
	push %RBP
	mov -2136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2352(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2732
	jmp uuid_00000000000c2734
uuid_00000000000c2732:
	push %RBP
	jmp uuid_00000000000c272f
	jmp uuid_00000000000c2731
uuid_00000000000c272f:
	push %RBP
	jmp uuid_00000000000c272c
	jmp uuid_00000000000c272e
uuid_00000000000c272c:
	movb $1, -2360(%rbp)
uuid_00000000000c272e:
	mov -2384(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c2731:
	mov -2376(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c2734:
	mov -2368(%RBP),%RSP
	add $-2384, %RSP
	mov -2360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2735
	jmp uuid_00000000000c2737
uuid_00000000000c2735:
	movb $1, -2160(%rbp)
uuid_00000000000c2737:
	mov -2280(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c273a:
	mov -2176(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000c273d:
	mov -2168(%RBP),%RSP
	add $-2384, %RSP
	mov -2160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c274a
	jmp uuid_00000000000c274c
uuid_00000000000c274a:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2464(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2744
	jmp uuid_00000000000c2746
uuid_00000000000c2744:
	push %RBP
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	jmp uuid_00000000000c2741
	jmp uuid_00000000000c2743
uuid_00000000000c2741:
	push %RBP
	mov -2400(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2560(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c273e
	jmp uuid_00000000000c2740
uuid_00000000000c273e:
	movb $1, -2472(%rbp)
uuid_00000000000c2740:
	mov -2552(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c2743:
	mov -2488(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c2746:
	mov -2480(%RBP),%RSP
	add $-2560, %RSP
	mov -2472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2747
	jmp uuid_00000000000c2749
uuid_00000000000c2747:
	movb $1, -2064(%rbp)
uuid_00000000000c2749:
	mov -2392(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c274c:
	mov -2080(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000c274f:
	mov -2072(%RBP),%RSP
	add $-2560, %RSP
	mov -2064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c276f
	jmp uuid_00000000000c2771
uuid_00000000000c276f:
	push %RBP
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq $0
	push %RBP
	mov -2640(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2769
	jmp uuid_00000000000c276b
uuid_00000000000c2769:
	push %RBP
	mov -2632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2736(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2756
	jmp uuid_00000000000c2758
uuid_00000000000c2756:
	push %RBP
	jmp uuid_00000000000c2753
	jmp uuid_00000000000c2755
uuid_00000000000c2753:
	push %RBP
	mov -2672(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2750
	jmp uuid_00000000000c2752
uuid_00000000000c2750:
	movb $1, -2744(%rbp)
uuid_00000000000c2752:
	mov -2768(%RBP),%RSP
	add $-2776, %RSP
uuid_00000000000c2755:
	mov -2760(%RBP),%RSP
	add $-2776, %RSP
uuid_00000000000c2758:
	mov -2752(%RBP),%RSP
	add $-2776, %RSP
	mov -2744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2766
	jmp uuid_00000000000c2768
uuid_00000000000c2766:
	push %RBP
	mov -2624(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2760
	jmp uuid_00000000000c2762
uuid_00000000000c2760:
	push %RBP
	jmp uuid_00000000000c275d
	jmp uuid_00000000000c275f
uuid_00000000000c275d:
	push %RBP
	mov -2792(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2896(%rbp)
	pushq $uuid_00000000000c2759
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c275a
	jmp uuid_00000000000c275c
uuid_00000000000c275a:
	movb $1, -2864(%rbp)
uuid_00000000000c275c:
	mov -2888(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c275f:
	mov -2880(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c2762:
	mov -2872(%RBP),%RSP
	add $-2896, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2763
	jmp uuid_00000000000c2765
uuid_00000000000c2763:
	movb $1, -2648(%rbp)
uuid_00000000000c2765:
	mov -2784(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c2768:
	mov -2664(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c276b:
	mov -2656(%RBP),%RSP
	add $-2896, %RSP
	mov -2648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c276c
	jmp uuid_00000000000c276e
uuid_00000000000c276c:
	movb $1, -1968(%rbp)
uuid_00000000000c276e:
	mov -2568(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c2771:
	mov -1984(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000c2774:
	mov -1976(%RBP),%RSP
	add $-2896, %RSP
	mov -1968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c297a
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -3056(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27a8
	jmp uuid_00000000000c27aa
uuid_00000000000c27a8:
	push %RBP
	pushq -2984(%RBP)
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq -3048(%RBP)
	pushq $0
	push %RBP
	mov -3152(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2784
	jmp uuid_00000000000c2786
uuid_00000000000c2784:
	push %RBP
	jmp uuid_00000000000c2781
	jmp uuid_00000000000c2783
uuid_00000000000c2781:
	push %RBP
	mov -3136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c277b
	jmp uuid_00000000000c277d
uuid_00000000000c277b:
	push %RBP
	jmp uuid_00000000000c2778
	jmp uuid_00000000000c277a
uuid_00000000000c2778:
	push %RBP
	mov -3192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2775
	jmp uuid_00000000000c2777
uuid_00000000000c2775:
	movb $1, -3264(%rbp)
uuid_00000000000c2777:
	mov -3288(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c277a:
	mov -3280(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c277d:
	mov -3272(%RBP),%RSP
	add $-3296, %RSP
	mov -3264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c277e
	jmp uuid_00000000000c2780
uuid_00000000000c277e:
	movb $1, -3160(%rbp)
uuid_00000000000c2780:
	mov -3184(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c2783:
	mov -3176(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000c2786:
	mov -3168(%RBP),%RSP
	add $-3296, %RSP
	mov -3160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c27a5
	jmp uuid_00000000000c27a7
uuid_00000000000c27a5:
	push %RBP
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq -2952(%RBP)
	pushq -2960(%RBP)
	pushq -2968(%RBP)
	pushq -2976(%RBP)
	pushq $0
	push %RBP
	mov -3376(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c279f
	jmp uuid_00000000000c27a1
uuid_00000000000c279f:
	push %RBP
	mov -3368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3472(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c278d
	jmp uuid_00000000000c278f
uuid_00000000000c278d:
	push %RBP
	jmp uuid_00000000000c278a
	jmp uuid_00000000000c278c
uuid_00000000000c278a:
	push %RBP
	jmp uuid_00000000000c2787
	jmp uuid_00000000000c2789
uuid_00000000000c2787:
	movb $1, -3480(%rbp)
uuid_00000000000c2789:
	mov -3504(%RBP),%RSP
	add $-3504, %RSP
uuid_00000000000c278c:
	mov -3496(%RBP),%RSP
	add $-3504, %RSP
uuid_00000000000c278f:
	mov -3488(%RBP),%RSP
	add $-3504, %RSP
	mov -3480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c279c
	jmp uuid_00000000000c279e
uuid_00000000000c279c:
	push %RBP
	mov -3360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3584(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2796
	jmp uuid_00000000000c2798
uuid_00000000000c2796:
	push %RBP
	jmp uuid_00000000000c2793
	jmp uuid_00000000000c2795
uuid_00000000000c2793:
	push %RBP
	jmp uuid_00000000000c2790
	jmp uuid_00000000000c2792
uuid_00000000000c2790:
	movb $1, -3592(%rbp)
uuid_00000000000c2792:
	mov -3616(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c2795:
	mov -3608(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c2798:
	mov -3600(%RBP),%RSP
	add $-3616, %RSP
	mov -3592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2799
	jmp uuid_00000000000c279b
uuid_00000000000c2799:
	movb $1, -3384(%rbp)
uuid_00000000000c279b:
	mov -3512(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c279e:
	mov -3400(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c27a1:
	mov -3392(%RBP),%RSP
	add $-3616, %RSP
	mov -3384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c27a2
	jmp uuid_00000000000c27a4
uuid_00000000000c27a2:
	movb $1, -3064(%rbp)
uuid_00000000000c27a4:
	mov -3304(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c27a7:
	mov -3080(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000c27aa:
	mov -3072(%RBP),%RSP
	add $-3616, %RSP
	mov -3064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2977
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -3776(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27eb
	jmp uuid_00000000000c27ed
uuid_00000000000c27eb:
	push %RBP
	pushq -3704(%RBP)
	pushq -3712(%RBP)
	pushq -3720(%RBP)
	pushq -3728(%RBP)
	pushq -3736(%RBP)
	pushq -3744(%RBP)
	pushq -3752(%RBP)
	pushq -3760(%RBP)
	pushq -3768(%RBP)
	pushq $0
	push %RBP
	mov -3872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27d9
	jmp uuid_00000000000c27db
uuid_00000000000c27d9:
	push %RBP
	mov -3864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c27d6
	jmp uuid_00000000000c27d8
uuid_00000000000c27d6:
	push %RBP
	mov -3856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c27d3
	jmp uuid_00000000000c27d5
uuid_00000000000c27d3:
	movb $1, -3880(%rbp)
uuid_00000000000c27d5:
	mov -3976(%RBP),%RSP
	add $-4048, %RSP
uuid_00000000000c27d8:
	mov -3896(%RBP),%RSP
	add $-4048, %RSP
uuid_00000000000c27db:
	mov -3888(%RBP),%RSP
	add $-4048, %RSP
	mov -3880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c27e8
	jmp uuid_00000000000c27ea
uuid_00000000000c27e8:
	push %RBP
	pushq -3632(%RBP)
	pushq -3640(%RBP)
	pushq -3648(%RBP)
	pushq -3656(%RBP)
	pushq -3664(%RBP)
	pushq -3672(%RBP)
	pushq -3680(%RBP)
	pushq -3688(%RBP)
	pushq -3696(%RBP)
	pushq $0
	push %RBP
	mov -4128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27e2
	jmp uuid_00000000000c27e4
uuid_00000000000c27e2:
	push %RBP
	mov -4120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c27df
	jmp uuid_00000000000c27e1
uuid_00000000000c27df:
	push %RBP
	mov -4112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c27dc
	jmp uuid_00000000000c27de
uuid_00000000000c27dc:
	movb $1, -4136(%rbp)
uuid_00000000000c27de:
	mov -4232(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000c27e1:
	mov -4152(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000c27e4:
	mov -4144(%RBP),%RSP
	add $-4304, %RSP
	mov -4136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c27e5
	jmp uuid_00000000000c27e7
uuid_00000000000c27e5:
	movb $1, -3784(%rbp)
uuid_00000000000c27e7:
	mov -4056(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000c27ea:
	mov -3800(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000c27ed:
	mov -3792(%RBP),%RSP
	add $-4304, %RSP
	mov -3784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2974
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -4464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2812
	jmp uuid_00000000000c2814
uuid_00000000000c2812:
	push %RBP
	pushq -4392(%RBP)
	pushq -4400(%RBP)
	pushq -4408(%RBP)
	pushq -4416(%RBP)
	pushq -4424(%RBP)
	pushq -4432(%RBP)
	pushq -4440(%RBP)
	pushq -4448(%RBP)
	pushq -4456(%RBP)
	pushq $0
	push %RBP
	mov -4560(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27fd
	jmp uuid_00000000000c27ff
uuid_00000000000c27fd:
	push %RBP
	pushq -4536(%RBP)
	pushq -4544(%RBP)
	pushq -4552(%RBP)
	jmp uuid_00000000000c27fa
	jmp uuid_00000000000c27fc
uuid_00000000000c27fa:
	push %RBP
	mov -4528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c27f7
	jmp uuid_00000000000c27f9
uuid_00000000000c27f7:
	push %RBP
	mov -4520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c27f4
	jmp uuid_00000000000c27f6
uuid_00000000000c27f4:
	movb $1, -4568(%rbp)
uuid_00000000000c27f6:
	mov -4696(%RBP),%RSP
	add $-4768, %RSP
uuid_00000000000c27f9:
	mov -4616(%RBP),%RSP
	add $-4768, %RSP
uuid_00000000000c27fc:
	mov -4584(%RBP),%RSP
	add $-4768, %RSP
uuid_00000000000c27ff:
	mov -4576(%RBP),%RSP
	add $-4768, %RSP
	mov -4568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c280f
	jmp uuid_00000000000c2811
uuid_00000000000c280f:
	push %RBP
	pushq -4320(%RBP)
	pushq -4328(%RBP)
	pushq -4336(%RBP)
	pushq -4344(%RBP)
	pushq -4352(%RBP)
	pushq -4360(%RBP)
	pushq -4368(%RBP)
	pushq -4376(%RBP)
	pushq -4384(%RBP)
	pushq $0
	push %RBP
	mov -4848(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2809
	jmp uuid_00000000000c280b
uuid_00000000000c2809:
	push %RBP
	pushq -4824(%RBP)
	pushq -4832(%RBP)
	pushq -4840(%RBP)
	jmp uuid_00000000000c2806
	jmp uuid_00000000000c2808
uuid_00000000000c2806:
	push %RBP
	mov -4816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2803
	jmp uuid_00000000000c2805
uuid_00000000000c2803:
	push %RBP
	mov -4808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2800
	jmp uuid_00000000000c2802
uuid_00000000000c2800:
	movb $1, -4856(%rbp)
uuid_00000000000c2802:
	mov -4984(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000c2805:
	mov -4904(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000c2808:
	mov -4872(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000c280b:
	mov -4864(%RBP),%RSP
	add $-5056, %RSP
	mov -4856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c280c
	jmp uuid_00000000000c280e
uuid_00000000000c280c:
	movb $1, -4472(%rbp)
uuid_00000000000c280e:
	mov -4776(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000c2811:
	mov -4488(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000c2814:
	mov -4480(%RBP),%RSP
	add $-5056, %RSP
	mov -4472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2971
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -5216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2834
	jmp uuid_00000000000c2836
uuid_00000000000c2834:
	push %RBP
	pushq -5144(%RBP)
	pushq -5152(%RBP)
	pushq -5160(%RBP)
	pushq -5168(%RBP)
	pushq -5176(%RBP)
	pushq -5184(%RBP)
	pushq -5192(%RBP)
	pushq -5200(%RBP)
	pushq -5208(%RBP)
	pushq $0
	push %RBP
	mov -5312(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2821
	jmp uuid_00000000000c2823
uuid_00000000000c2821:
	push %RBP
	jmp uuid_00000000000c281e
	jmp uuid_00000000000c2820
uuid_00000000000c281e:
	push %RBP
	mov -5248(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5352(%rbp)
	pushq $uuid_00000000000c2344
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c281b
	jmp uuid_00000000000c281d
uuid_00000000000c281b:
	movb $1, -5320(%rbp)
uuid_00000000000c281d:
	mov -5344(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000c2820:
	mov -5336(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000c2823:
	mov -5328(%RBP),%RSP
	add $-5352, %RSP
	mov -5320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2831
	jmp uuid_00000000000c2833
uuid_00000000000c2831:
	push %RBP
	pushq -5072(%RBP)
	pushq -5080(%RBP)
	pushq -5088(%RBP)
	pushq -5096(%RBP)
	pushq -5104(%RBP)
	pushq -5112(%RBP)
	pushq -5120(%RBP)
	pushq -5128(%RBP)
	pushq -5136(%RBP)
	pushq $0
	push %RBP
	mov -5432(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c282b
	jmp uuid_00000000000c282d
uuid_00000000000c282b:
	push %RBP
	jmp uuid_00000000000c2828
	jmp uuid_00000000000c282a
uuid_00000000000c2828:
	push %RBP
	mov -5368(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5472(%rbp)
	pushq $uuid_00000000000c2824
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2825
	jmp uuid_00000000000c2827
uuid_00000000000c2825:
	movb $1, -5440(%rbp)
uuid_00000000000c2827:
	mov -5464(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000c282a:
	mov -5456(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000c282d:
	mov -5448(%RBP),%RSP
	add $-5472, %RSP
	mov -5440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c282e
	jmp uuid_00000000000c2830
uuid_00000000000c282e:
	movb $1, -5224(%rbp)
uuid_00000000000c2830:
	mov -5360(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000c2833:
	mov -5240(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000c2836:
	mov -5232(%RBP),%RSP
	add $-5472, %RSP
	mov -5224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c296e
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -5632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c284f
	jmp uuid_00000000000c2851
uuid_00000000000c284f:
	push %RBP
	pushq -5560(%RBP)
	pushq -5568(%RBP)
	pushq -5576(%RBP)
	pushq -5584(%RBP)
	pushq -5592(%RBP)
	pushq -5600(%RBP)
	pushq -5608(%RBP)
	pushq -5616(%RBP)
	pushq -5624(%RBP)
	pushq $0
	push %RBP
	mov -5728(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c283d
	jmp uuid_00000000000c283f
uuid_00000000000c283d:
	push %RBP
	jmp uuid_00000000000c283a
	jmp uuid_00000000000c283c
uuid_00000000000c283a:
	push %RBP
	mov -5664(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2837
	jmp uuid_00000000000c2839
uuid_00000000000c2837:
	movb $1, -5736(%rbp)
uuid_00000000000c2839:
	mov -5760(%RBP),%RSP
	add $-5768, %RSP
uuid_00000000000c283c:
	mov -5752(%RBP),%RSP
	add $-5768, %RSP
uuid_00000000000c283f:
	mov -5744(%RBP),%RSP
	add $-5768, %RSP
	mov -5736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c284c
	jmp uuid_00000000000c284e
uuid_00000000000c284c:
	push %RBP
	pushq -5488(%RBP)
	pushq -5496(%RBP)
	pushq -5504(%RBP)
	pushq -5512(%RBP)
	pushq -5520(%RBP)
	pushq -5528(%RBP)
	pushq -5536(%RBP)
	pushq -5544(%RBP)
	pushq -5552(%RBP)
	pushq $0
	push %RBP
	mov -5848(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2846
	jmp uuid_00000000000c2848
uuid_00000000000c2846:
	push %RBP
	jmp uuid_00000000000c2843
	jmp uuid_00000000000c2845
uuid_00000000000c2843:
	push %RBP
	mov -5784(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2840
	jmp uuid_00000000000c2842
uuid_00000000000c2840:
	movb $1, -5856(%rbp)
uuid_00000000000c2842:
	mov -5880(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000c2845:
	mov -5872(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000c2848:
	mov -5864(%RBP),%RSP
	add $-5888, %RSP
	mov -5856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2849
	jmp uuid_00000000000c284b
uuid_00000000000c2849:
	movb $1, -5640(%rbp)
uuid_00000000000c284b:
	mov -5776(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000c284e:
	mov -5656(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000c2851:
	mov -5648(%RBP),%RSP
	add $-5888, %RSP
	mov -5640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c296b
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -6048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c286d
	jmp uuid_00000000000c286f
uuid_00000000000c286d:
	push %RBP
	pushq -5976(%RBP)
	pushq -5984(%RBP)
	pushq -5992(%RBP)
	pushq -6000(%RBP)
	pushq -6008(%RBP)
	pushq -6016(%RBP)
	pushq -6024(%RBP)
	pushq -6032(%RBP)
	pushq -6040(%RBP)
	pushq $0
	push %RBP
	mov -6144(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c285b
	jmp uuid_00000000000c285d
uuid_00000000000c285b:
	push %RBP
	jmp uuid_00000000000c2858
	jmp uuid_00000000000c285a
uuid_00000000000c2858:
	push %RBP
	mov -6080(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2855
	jmp uuid_00000000000c2857
uuid_00000000000c2855:
	movb $1, -6152(%rbp)
uuid_00000000000c2857:
	mov -6176(%RBP),%RSP
	add $-6184, %RSP
uuid_00000000000c285a:
	mov -6168(%RBP),%RSP
	add $-6184, %RSP
uuid_00000000000c285d:
	mov -6160(%RBP),%RSP
	add $-6184, %RSP
	mov -6152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c286a
	jmp uuid_00000000000c286c
uuid_00000000000c286a:
	push %RBP
	pushq -5904(%RBP)
	pushq -5912(%RBP)
	pushq -5920(%RBP)
	pushq -5928(%RBP)
	pushq -5936(%RBP)
	pushq -5944(%RBP)
	pushq -5952(%RBP)
	pushq -5960(%RBP)
	pushq -5968(%RBP)
	pushq $0
	push %RBP
	mov -6264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2864
	jmp uuid_00000000000c2866
uuid_00000000000c2864:
	push %RBP
	jmp uuid_00000000000c2861
	jmp uuid_00000000000c2863
uuid_00000000000c2861:
	push %RBP
	mov -6200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c285e
	jmp uuid_00000000000c2860
uuid_00000000000c285e:
	movb $1, -6272(%rbp)
uuid_00000000000c2860:
	mov -6296(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c2863:
	mov -6288(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c2866:
	mov -6280(%RBP),%RSP
	add $-6304, %RSP
	mov -6272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2867
	jmp uuid_00000000000c2869
uuid_00000000000c2867:
	movb $1, -6056(%rbp)
uuid_00000000000c2869:
	mov -6192(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c286c:
	mov -6072(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000c286f:
	mov -6064(%RBP),%RSP
	add $-6304, %RSP
	mov -6056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2968
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -6464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c289d
	jmp uuid_00000000000c289f
uuid_00000000000c289d:
	push %RBP
	pushq -6392(%RBP)
	pushq -6400(%RBP)
	pushq -6408(%RBP)
	pushq -6416(%RBP)
	pushq -6424(%RBP)
	pushq -6432(%RBP)
	pushq -6440(%RBP)
	pushq -6448(%RBP)
	pushq -6456(%RBP)
	pushq $0
	push %RBP
	mov -6560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2879
	jmp uuid_00000000000c287b
uuid_00000000000c2879:
	push %RBP
	pushq -6504(%RBP)
	pushq -6512(%RBP)
	pushq -6520(%RBP)
	pushq -6528(%RBP)
	pushq -6536(%RBP)
	pushq -6544(%RBP)
	pushq -6552(%RBP)
	jmp uuid_00000000000c2876
	jmp uuid_00000000000c2878
uuid_00000000000c2876:
	push %RBP
	mov -6496(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2873
	jmp uuid_00000000000c2875
uuid_00000000000c2873:
	movb $1, -6568(%rbp)
uuid_00000000000c2875:
	mov -6648(%RBP),%RSP
	add $-6656, %RSP
uuid_00000000000c2878:
	mov -6584(%RBP),%RSP
	add $-6656, %RSP
uuid_00000000000c287b:
	mov -6576(%RBP),%RSP
	add $-6656, %RSP
	mov -6568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c289a
	jmp uuid_00000000000c289c
uuid_00000000000c289a:
	push %RBP
	pushq -6320(%RBP)
	pushq -6328(%RBP)
	pushq -6336(%RBP)
	pushq -6344(%RBP)
	pushq -6352(%RBP)
	pushq -6360(%RBP)
	pushq -6368(%RBP)
	pushq -6376(%RBP)
	pushq -6384(%RBP)
	pushq $0
	push %RBP
	mov -6736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2894
	jmp uuid_00000000000c2896
uuid_00000000000c2894:
	push %RBP
	mov -6728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6832(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2882
	jmp uuid_00000000000c2884
uuid_00000000000c2882:
	push %RBP
	jmp uuid_00000000000c287f
	jmp uuid_00000000000c2881
uuid_00000000000c287f:
	push %RBP
	mov -6768(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c287c
	jmp uuid_00000000000c287e
uuid_00000000000c287c:
	movb $1, -6840(%rbp)
uuid_00000000000c287e:
	mov -6864(%RBP),%RSP
	add $-6872, %RSP
uuid_00000000000c2881:
	mov -6856(%RBP),%RSP
	add $-6872, %RSP
uuid_00000000000c2884:
	mov -6848(%RBP),%RSP
	add $-6872, %RSP
	mov -6840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2891
	jmp uuid_00000000000c2893
uuid_00000000000c2891:
	push %RBP
	mov -6720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6952(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c288b
	jmp uuid_00000000000c288d
uuid_00000000000c288b:
	push %RBP
	jmp uuid_00000000000c2888
	jmp uuid_00000000000c288a
uuid_00000000000c2888:
	push %RBP
	mov -6888(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6992(%rbp)
	pushq $uuid_00000000000c2759
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2885
	jmp uuid_00000000000c2887
uuid_00000000000c2885:
	movb $1, -6960(%rbp)
uuid_00000000000c2887:
	mov -6984(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c288a:
	mov -6976(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c288d:
	mov -6968(%RBP),%RSP
	add $-6992, %RSP
	mov -6960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c288e
	jmp uuid_00000000000c2890
uuid_00000000000c288e:
	movb $1, -6744(%rbp)
uuid_00000000000c2890:
	mov -6880(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c2893:
	mov -6760(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c2896:
	mov -6752(%RBP),%RSP
	add $-6992, %RSP
	mov -6744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2897
	jmp uuid_00000000000c2899
uuid_00000000000c2897:
	movb $1, -6472(%rbp)
uuid_00000000000c2899:
	mov -6664(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c289c:
	mov -6488(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000c289f:
	mov -6480(%RBP),%RSP
	add $-6992, %RSP
	mov -6472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2965
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -7152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28ce
	jmp uuid_00000000000c28d0
uuid_00000000000c28ce:
	push %RBP
	pushq -7080(%RBP)
	pushq -7088(%RBP)
	pushq -7096(%RBP)
	pushq -7104(%RBP)
	pushq -7112(%RBP)
	pushq -7120(%RBP)
	pushq -7128(%RBP)
	pushq -7136(%RBP)
	pushq -7144(%RBP)
	pushq $0
	push %RBP
	mov -7248(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28a9
	jmp uuid_00000000000c28ab
uuid_00000000000c28a9:
	push %RBP
	jmp uuid_00000000000c28a6
	jmp uuid_00000000000c28a8
uuid_00000000000c28a6:
	push %RBP
	mov -7184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7288(%rbp)
	pushq $uuid_00000000000c2344
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c28a3
	jmp uuid_00000000000c28a5
uuid_00000000000c28a3:
	movb $1, -7256(%rbp)
uuid_00000000000c28a5:
	mov -7280(%RBP),%RSP
	add $-7288, %RSP
uuid_00000000000c28a8:
	mov -7272(%RBP),%RSP
	add $-7288, %RSP
uuid_00000000000c28ab:
	mov -7264(%RBP),%RSP
	add $-7288, %RSP
	mov -7256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28cb
	jmp uuid_00000000000c28cd
uuid_00000000000c28cb:
	push %RBP
	pushq -7008(%RBP)
	pushq -7016(%RBP)
	pushq -7024(%RBP)
	pushq -7032(%RBP)
	pushq -7040(%RBP)
	pushq -7048(%RBP)
	pushq -7056(%RBP)
	pushq -7064(%RBP)
	pushq -7072(%RBP)
	pushq $0
	push %RBP
	mov -7368(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28c5
	jmp uuid_00000000000c28c7
uuid_00000000000c28c5:
	push %RBP
	mov -7360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7464(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28b2
	jmp uuid_00000000000c28b4
uuid_00000000000c28b2:
	push %RBP
	jmp uuid_00000000000c28af
	jmp uuid_00000000000c28b1
uuid_00000000000c28af:
	push %RBP
	jmp uuid_00000000000c28ac
	jmp uuid_00000000000c28ae
uuid_00000000000c28ac:
	movb $1, -7472(%rbp)
uuid_00000000000c28ae:
	mov -7496(%RBP),%RSP
	add $-7496, %RSP
uuid_00000000000c28b1:
	mov -7488(%RBP),%RSP
	add $-7496, %RSP
uuid_00000000000c28b4:
	mov -7480(%RBP),%RSP
	add $-7496, %RSP
	mov -7472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28c2
	jmp uuid_00000000000c28c4
uuid_00000000000c28c2:
	push %RBP
	mov -7352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7576(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28bc
	jmp uuid_00000000000c28be
uuid_00000000000c28bc:
	push %RBP
	jmp uuid_00000000000c28b9
	jmp uuid_00000000000c28bb
uuid_00000000000c28b9:
	push %RBP
	mov -7512(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7616(%rbp)
	pushq $uuid_00000000000c28b5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c28b6
	jmp uuid_00000000000c28b8
uuid_00000000000c28b6:
	movb $1, -7584(%rbp)
uuid_00000000000c28b8:
	mov -7608(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c28bb:
	mov -7600(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c28be:
	mov -7592(%RBP),%RSP
	add $-7616, %RSP
	mov -7584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28bf
	jmp uuid_00000000000c28c1
uuid_00000000000c28bf:
	movb $1, -7376(%rbp)
uuid_00000000000c28c1:
	mov -7504(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c28c4:
	mov -7392(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c28c7:
	mov -7384(%RBP),%RSP
	add $-7616, %RSP
	mov -7376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28c8
	jmp uuid_00000000000c28ca
uuid_00000000000c28c8:
	movb $1, -7160(%rbp)
uuid_00000000000c28ca:
	mov -7296(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c28cd:
	mov -7176(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000c28d0:
	mov -7168(%RBP),%RSP
	add $-7616, %RSP
	mov -7160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2962
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -7776(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28fb
	jmp uuid_00000000000c28fd
uuid_00000000000c28fb:
	push %RBP
	pushq -7704(%RBP)
	pushq -7712(%RBP)
	pushq -7720(%RBP)
	pushq -7728(%RBP)
	pushq -7736(%RBP)
	pushq -7744(%RBP)
	pushq -7752(%RBP)
	pushq -7760(%RBP)
	pushq -7768(%RBP)
	pushq $0
	push %RBP
	mov -7872(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28d7
	jmp uuid_00000000000c28d9
uuid_00000000000c28d7:
	push %RBP
	pushq -7816(%RBP)
	pushq -7824(%RBP)
	pushq -7832(%RBP)
	pushq -7840(%RBP)
	pushq -7848(%RBP)
	pushq -7856(%RBP)
	pushq -7864(%RBP)
	jmp uuid_00000000000c28d4
	jmp uuid_00000000000c28d6
uuid_00000000000c28d4:
	push %RBP
	mov -7808(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c28d1
	jmp uuid_00000000000c28d3
uuid_00000000000c28d1:
	movb $1, -7880(%rbp)
uuid_00000000000c28d3:
	mov -7960(%RBP),%RSP
	add $-7968, %RSP
uuid_00000000000c28d6:
	mov -7896(%RBP),%RSP
	add $-7968, %RSP
uuid_00000000000c28d9:
	mov -7888(%RBP),%RSP
	add $-7968, %RSP
	mov -7880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28f8
	jmp uuid_00000000000c28fa
uuid_00000000000c28f8:
	push %RBP
	pushq -7632(%RBP)
	pushq -7640(%RBP)
	pushq -7648(%RBP)
	pushq -7656(%RBP)
	pushq -7664(%RBP)
	pushq -7672(%RBP)
	pushq -7680(%RBP)
	pushq -7688(%RBP)
	pushq -7696(%RBP)
	pushq $0
	push %RBP
	mov -8048(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28f2
	jmp uuid_00000000000c28f4
uuid_00000000000c28f2:
	push %RBP
	mov -8040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8144(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28e0
	jmp uuid_00000000000c28e2
uuid_00000000000c28e0:
	push %RBP
	jmp uuid_00000000000c28dd
	jmp uuid_00000000000c28df
uuid_00000000000c28dd:
	push %RBP
	mov -8080(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c28da
	jmp uuid_00000000000c28dc
uuid_00000000000c28da:
	movb $1, -8152(%rbp)
uuid_00000000000c28dc:
	mov -8176(%RBP),%RSP
	add $-8184, %RSP
uuid_00000000000c28df:
	mov -8168(%RBP),%RSP
	add $-8184, %RSP
uuid_00000000000c28e2:
	mov -8160(%RBP),%RSP
	add $-8184, %RSP
	mov -8152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28ef
	jmp uuid_00000000000c28f1
uuid_00000000000c28ef:
	push %RBP
	mov -8032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28e9
	jmp uuid_00000000000c28eb
uuid_00000000000c28e9:
	push %RBP
	jmp uuid_00000000000c28e6
	jmp uuid_00000000000c28e8
uuid_00000000000c28e6:
	push %RBP
	mov -8200(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8304(%rbp)
	pushq $uuid_00000000000c28b5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c28e3
	jmp uuid_00000000000c28e5
uuid_00000000000c28e3:
	movb $1, -8272(%rbp)
uuid_00000000000c28e5:
	mov -8296(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c28e8:
	mov -8288(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c28eb:
	mov -8280(%RBP),%RSP
	add $-8304, %RSP
	mov -8272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28ec
	jmp uuid_00000000000c28ee
uuid_00000000000c28ec:
	movb $1, -8056(%rbp)
uuid_00000000000c28ee:
	mov -8192(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c28f1:
	mov -8072(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c28f4:
	mov -8064(%RBP),%RSP
	add $-8304, %RSP
	mov -8056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c28f5
	jmp uuid_00000000000c28f7
uuid_00000000000c28f5:
	movb $1, -7784(%rbp)
uuid_00000000000c28f7:
	mov -7976(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c28fa:
	mov -7800(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000c28fd:
	mov -7792(%RBP),%RSP
	add $-8304, %RSP
	mov -7784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c295f
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -8464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c293b
	jmp uuid_00000000000c293d
uuid_00000000000c293b:
	push %RBP
	pushq -8392(%RBP)
	pushq -8400(%RBP)
	pushq -8408(%RBP)
	pushq -8416(%RBP)
	pushq -8424(%RBP)
	pushq -8432(%RBP)
	pushq -8440(%RBP)
	pushq -8448(%RBP)
	pushq -8456(%RBP)
	pushq $0
	push %RBP
	mov -8560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2904
	jmp uuid_00000000000c2906
uuid_00000000000c2904:
	push %RBP
	pushq -8504(%RBP)
	pushq -8512(%RBP)
	pushq -8520(%RBP)
	pushq -8528(%RBP)
	pushq -8536(%RBP)
	pushq -8544(%RBP)
	pushq -8552(%RBP)
	jmp uuid_00000000000c2901
	jmp uuid_00000000000c2903
uuid_00000000000c2901:
	push %RBP
	mov -8496(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c28fe
	jmp uuid_00000000000c2900
uuid_00000000000c28fe:
	movb $1, -8568(%rbp)
uuid_00000000000c2900:
	mov -8648(%RBP),%RSP
	add $-8656, %RSP
uuid_00000000000c2903:
	mov -8584(%RBP),%RSP
	add $-8656, %RSP
uuid_00000000000c2906:
	mov -8576(%RBP),%RSP
	add $-8656, %RSP
	mov -8568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2938
	jmp uuid_00000000000c293a
uuid_00000000000c2938:
	push %RBP
	pushq -8320(%RBP)
	pushq -8328(%RBP)
	pushq -8336(%RBP)
	pushq -8344(%RBP)
	pushq -8352(%RBP)
	pushq -8360(%RBP)
	pushq -8368(%RBP)
	pushq -8376(%RBP)
	pushq -8384(%RBP)
	pushq $0
	push %RBP
	mov -8736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2932
	jmp uuid_00000000000c2934
uuid_00000000000c2932:
	push %RBP
	mov -8728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8832(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c290d
	jmp uuid_00000000000c290f
uuid_00000000000c290d:
	push %RBP
	jmp uuid_00000000000c290a
	jmp uuid_00000000000c290c
uuid_00000000000c290a:
	push %RBP
	mov -8768(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2907
	jmp uuid_00000000000c2909
uuid_00000000000c2907:
	movb $1, -8840(%rbp)
uuid_00000000000c2909:
	mov -8864(%RBP),%RSP
	add $-8872, %RSP
uuid_00000000000c290c:
	mov -8856(%RBP),%RSP
	add $-8872, %RSP
uuid_00000000000c290f:
	mov -8848(%RBP),%RSP
	add $-8872, %RSP
	mov -8840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c292f
	jmp uuid_00000000000c2931
uuid_00000000000c292f:
	push %RBP
	mov -8720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8952(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2929
	jmp uuid_00000000000c292b
uuid_00000000000c2929:
	push %RBP
	mov -8944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9048(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2916
	jmp uuid_00000000000c2918
uuid_00000000000c2916:
	push %RBP
	jmp uuid_00000000000c2913
	jmp uuid_00000000000c2915
uuid_00000000000c2913:
	push %RBP
	mov -8984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2910
	jmp uuid_00000000000c2912
uuid_00000000000c2910:
	movb $1, -9056(%rbp)
uuid_00000000000c2912:
	mov -9080(%RBP),%RSP
	add $-9088, %RSP
uuid_00000000000c2915:
	mov -9072(%RBP),%RSP
	add $-9088, %RSP
uuid_00000000000c2918:
	mov -9064(%RBP),%RSP
	add $-9088, %RSP
	mov -9056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2926
	jmp uuid_00000000000c2928
uuid_00000000000c2926:
	push %RBP
	mov -8936(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9168(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2920
	jmp uuid_00000000000c2922
uuid_00000000000c2920:
	push %RBP
	jmp uuid_00000000000c291d
	jmp uuid_00000000000c291f
uuid_00000000000c291d:
	push %RBP
	mov -9104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9208(%rbp)
	pushq $uuid_00000000000c2919
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c291a
	jmp uuid_00000000000c291c
uuid_00000000000c291a:
	movb $1, -9176(%rbp)
uuid_00000000000c291c:
	mov -9200(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c291f:
	mov -9192(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c2922:
	mov -9184(%RBP),%RSP
	add $-9208, %RSP
	mov -9176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2923
	jmp uuid_00000000000c2925
uuid_00000000000c2923:
	movb $1, -8960(%rbp)
uuid_00000000000c2925:
	mov -9096(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c2928:
	mov -8976(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c292b:
	mov -8968(%RBP),%RSP
	add $-9208, %RSP
	mov -8960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c292c
	jmp uuid_00000000000c292e
uuid_00000000000c292c:
	movb $1, -8744(%rbp)
uuid_00000000000c292e:
	mov -8880(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c2931:
	mov -8760(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c2934:
	mov -8752(%RBP),%RSP
	add $-9208, %RSP
	mov -8744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2935
	jmp uuid_00000000000c2937
uuid_00000000000c2935:
	movb $1, -8472(%rbp)
uuid_00000000000c2937:
	mov -8664(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c293a:
	mov -8488(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000c293d:
	mov -8480(%RBP),%RSP
	add $-9208, %RSP
	mov -8472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c295c
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -9368(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2952
	jmp uuid_00000000000c2954
uuid_00000000000c2952:
	push %RBP
	pushq -9296(%RBP)
	pushq -9304(%RBP)
	pushq -9312(%RBP)
	pushq -9320(%RBP)
	pushq -9328(%RBP)
	pushq -9336(%RBP)
	pushq -9344(%RBP)
	pushq -9352(%RBP)
	pushq -9360(%RBP)
	jmp uuid_00000000000c294f
	jmp uuid_00000000000c2951
uuid_00000000000c294f:
	push %RBP
	pushq -9224(%RBP)
	pushq -9232(%RBP)
	pushq -9240(%RBP)
	pushq -9248(%RBP)
	pushq -9256(%RBP)
	pushq -9264(%RBP)
	pushq -9272(%RBP)
	pushq -9280(%RBP)
	pushq -9288(%RBP)
	pushq $0
	push %RBP
	mov -9544(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2949
	jmp uuid_00000000000c294b
uuid_00000000000c2949:
	push %RBP
	jmp uuid_00000000000c2946
	jmp uuid_00000000000c2948
uuid_00000000000c2946:
	push %RBP
	mov -9480(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2943
	jmp uuid_00000000000c2945
uuid_00000000000c2943:
	movb $1, -9552(%rbp)
uuid_00000000000c2945:
	mov -9576(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000c2948:
	mov -9568(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000c294b:
	mov -9560(%RBP),%RSP
	add $-9584, %RSP
	mov -9552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c294c
	jmp uuid_00000000000c294e
uuid_00000000000c294c:
	movb $1, -9376(%rbp)
uuid_00000000000c294e:
	mov -9472(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000c2951:
	mov -9392(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000c2954:
	mov -9384(%RBP),%RSP
	add $-9584, %RSP
	mov -9376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2959
	push %RBP
	jmp uuid_00000000000c2956
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2955
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2958
uuid_00000000000c2956:
uuid_00000000000c2958:
	mov -9592(%RBP),%RSP
	add $-9592, %RSP
	jmp uuid_00000000000c295b
uuid_00000000000c2959:
#call function close : Arrow<Context+CaseNumber<1>,Array<Context+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextCaseNumber1ContextCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -9584(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9400(%rbp)
	pushq -9408(%rbp)
	pushq -9416(%rbp)
	pushq -9424(%rbp)
	pushq -9432(%rbp)
	pushq -9440(%rbp)
	pushq -9448(%rbp)
	pushq -9456(%rbp)
	pushq -9464(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c295b:
	mov -9216(%RBP),%RSP
	add $-9584, %RSP
	jmp uuid_00000000000c295e
uuid_00000000000c295c:
	push %RBP
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8656(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %R14
	mov 0(%R14), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2940
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8656(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -9088(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb19
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8592(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq $uuid_00000000000beb19
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9224(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8592(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq -9224(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c293e
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000c293f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -8656(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000bea4c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8872(%rbp)
	pushq -9232(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8592(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq -9232(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	jmp uuid_00000000000c2942
uuid_00000000000c2940:
uuid_00000000000c2942:
	mov -9216(%RBP),%RSP
	add $-9216, %RSP
uuid_00000000000c295e:
	mov -8312(%RBP),%RSP
	add $-9216, %RSP
	jmp uuid_00000000000c2961
uuid_00000000000c295f:
#call function close : Arrow<Context+CaseNumber<1>,Array<Context+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextCaseNumber1ContextCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8184(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -7920(%RBP)
	pushq -7928(%RBP)
	pushq -7936(%RBP)
	pushq -7944(%RBP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c2961:
	mov -7624(%RBP),%RSP
	add $-8304, %RSP
	jmp uuid_00000000000c2964
uuid_00000000000c2962:
uuid_00000000000c2964:
	mov -7000(%RBP),%RSP
	add $-7616, %RSP
	jmp uuid_00000000000c2967
uuid_00000000000c2965:
	push %RBP
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6656(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %R14
	mov 0(%R14), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c28a0
	jmp uuid_00000000000c28a2
uuid_00000000000c28a0:
#call function close : Arrow<Context+CaseNumber<1>,Array<Context+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextCaseNumber1ContextCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -6872(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -6608(%RBP)
	pushq -6616(%RBP)
	pushq -6624(%RBP)
	pushq -6632(%RBP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c28a2:
	mov -7000(%RBP),%RSP
	add $-7000, %RSP
uuid_00000000000c2967:
	mov -6312(%RBP),%RSP
	add $-7000, %RSP
	jmp uuid_00000000000c296a
uuid_00000000000c2968:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6304(%rbp)
	pushq -6184(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2870
	jmp uuid_00000000000c2872
uuid_00000000000c2870:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c2872:
	mov -6312(%RBP),%RSP
	add $-6312, %RSP
uuid_00000000000c296a:
	mov -5896(%RBP),%RSP
	add $-6312, %RSP
	jmp uuid_00000000000c296d
uuid_00000000000c296b:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5888(%rbp)
	pushq -5768(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2852
	jmp uuid_00000000000c2854
uuid_00000000000c2852:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c2854:
	mov -5896(%RBP),%RSP
	add $-5896, %RSP
uuid_00000000000c296d:
	mov -5480(%RBP),%RSP
	add $-5896, %RSP
	jmp uuid_00000000000c2970
uuid_00000000000c296e:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c2970:
	mov -5064(%RBP),%RSP
	add $-5472, %RSP
	jmp uuid_00000000000c2973
uuid_00000000000c2971:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -4704(%rbp)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2818
	jmp uuid_00000000000c281a
uuid_00000000000c2818:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2815
	jmp uuid_00000000000c2817
uuid_00000000000c2815:
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c2817:
	mov -5264(%RBP),%RSP
	add $-5264, %RSP
uuid_00000000000c281a:
	mov -5160(%RBP),%RSP
	add $-5264, %RSP
uuid_00000000000c2973:
	mov -4312(%RBP),%RSP
	add $-5264, %RSP
	jmp uuid_00000000000c2976
uuid_00000000000c2974:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4240(%rbp)
	pushq -4248(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -3984(%rbp)
	pushq -3992(%rbp)
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	pushq -4024(%rbp)
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4312(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c27f1
	jmp uuid_00000000000c27f3
uuid_00000000000c27f1:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4160(%rbp)
	pushq -4168(%rbp)
	pushq -4176(%rbp)
	pushq -4184(%rbp)
	pushq -4192(%rbp)
	pushq -4200(%rbp)
	pushq -4208(%rbp)
	pushq -4216(%rbp)
	pushq -4224(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	pushq -3928(%rbp)
	pushq -3936(%rbp)
	pushq -3944(%rbp)
	pushq -3952(%rbp)
	pushq -3960(%rbp)
	pushq -3968(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c27ee
	jmp uuid_00000000000c27f0
uuid_00000000000c27ee:
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4312(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c27f0:
	mov -4512(%RBP),%RSP
	add $-4512, %RSP
uuid_00000000000c27f3:
	mov -4408(%RBP),%RSP
	add $-4512, %RSP
uuid_00000000000c2976:
	mov -3624(%RBP),%RSP
	add $-4512, %RSP
	jmp uuid_00000000000c2979
uuid_00000000000c2977:
	push %RBP
#call function preprocess-is-suffixed : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_is_SB_suffixed_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-lone-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call is_SB_lone_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27d0
	jmp uuid_00000000000c27d2
uuid_00000000000c27d0:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	pushq -3632(%rbp)
	pushq -3640(%rbp)
	pushq -3648(%rbp)
	pushq -3656(%rbp)
	pushq -3664(%rbp)
	pushq -3672(%rbp)
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	pushq -3752(%rbp)
	pushq -3760(%rbp)
	pushq -3768(%rbp)
	pushq -3776(%rbp)
	pushq $0
	push %RBP
	mov -3936(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27c3
	jmp uuid_00000000000c27c5
uuid_00000000000c27c3:
	push %RBP
	pushq -3864(%RBP)
	pushq -3872(%RBP)
	pushq -3880(%RBP)
	pushq -3888(%RBP)
	pushq -3896(%RBP)
	pushq -3904(%RBP)
	pushq -3912(%RBP)
	pushq -3920(%RBP)
	pushq -3928(%RBP)
	pushq $0
	push %RBP
	mov -4032(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27b1
	jmp uuid_00000000000c27b3
uuid_00000000000c27b1:
	push %RBP
	mov -4024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c27ae
	jmp uuid_00000000000c27b0
uuid_00000000000c27ae:
	push %RBP
	mov -4016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c27ab
	jmp uuid_00000000000c27ad
uuid_00000000000c27ab:
	movb $1, -4040(%rbp)
uuid_00000000000c27ad:
	mov -4136(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000c27b0:
	mov -4056(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000c27b3:
	mov -4048(%RBP),%RSP
	add $-4208, %RSP
	mov -4040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c27c0
	jmp uuid_00000000000c27c2
uuid_00000000000c27c0:
	push %RBP
	pushq -3792(%RBP)
	pushq -3800(%RBP)
	pushq -3808(%RBP)
	pushq -3816(%RBP)
	pushq -3824(%RBP)
	pushq -3832(%RBP)
	pushq -3840(%RBP)
	pushq -3848(%RBP)
	pushq -3856(%RBP)
	pushq $0
	push %RBP
	mov -4288(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c27ba
	jmp uuid_00000000000c27bc
uuid_00000000000c27ba:
	push %RBP
	mov -4280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c27b7
	jmp uuid_00000000000c27b9
uuid_00000000000c27b7:
	push %RBP
	mov -4272(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c27b4
	jmp uuid_00000000000c27b6
uuid_00000000000c27b4:
	movb $1, -4296(%rbp)
uuid_00000000000c27b6:
	mov -4392(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c27b9:
	mov -4312(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c27bc:
	mov -4304(%RBP),%RSP
	add $-4464, %RSP
	mov -4296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c27bd
	jmp uuid_00000000000c27bf
uuid_00000000000c27bd:
	movb $1, -3944(%rbp)
uuid_00000000000c27bf:
	mov -4216(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c27c2:
	mov -3960(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000c27c5:
	mov -3952(%RBP),%RSP
	add $-4464, %RSP
	mov -3944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c27cd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c27cc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c27cf
uuid_00000000000c27cd:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4144(%rbp)
	pushq -4152(%rbp)
	pushq -4160(%rbp)
	pushq -4168(%rbp)
	pushq -4176(%rbp)
	pushq -4184(%rbp)
	pushq -4192(%rbp)
	pushq -4200(%rbp)
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq -4536(%rbp)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c27c9
	jmp uuid_00000000000c27cb
uuid_00000000000c27c9:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	pushq -4120(%rbp)
	pushq -4128(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c27c6
	jmp uuid_00000000000c27c8
uuid_00000000000c27c6:
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq -4536(%rbp)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c27c8:
	mov -4672(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000c27cb:
	mov -4568(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000c27cf:
	mov -3784(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000c27d2:
	mov -3624(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000c2979:
	mov -2904(%RBP),%RSP
	add $-4672, %RSP
	jmp uuid_00000000000c297c
uuid_00000000000c297a:
#call function close : Arrow<Context+CaseNumber<1>,Array<Context+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextCaseNumber1ContextCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2776(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c297c:
	mov -1808(%RBP),%RSP
	add $-2896, %RSP
	jmp uuid_00000000000c297f
uuid_00000000000c297d:
uuid_00000000000c297f:
	mov -776(%RBP),%RSP
	add $-1800, %RSP
	jmp uuid_00000000000c2982
uuid_00000000000c2980:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000c2982:
	mov -440(%RBP),%RSP
	add $-768, %RSP
	subq $96, %rsp
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	addq $96, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
destructure_SB_lhs_CL_ArrowFContextConsFragmentListConsSConsTypeFContext:
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2995
	jmp uuid_00000000000c2997
uuid_00000000000c2995:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2986
	jmp uuid_00000000000c2988
uuid_00000000000c2986:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2983
	jmp uuid_00000000000c2985
uuid_00000000000c2983:
	movb $1, -536(%rbp)
uuid_00000000000c2985:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000c2988:
	mov -544(%RBP),%RSP
	add $-560, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2992
	jmp uuid_00000000000c2994
uuid_00000000000c2992:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c298c
	jmp uuid_00000000000c298e
uuid_00000000000c298c:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	pushq $uuid_00000000000bf208
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2989
	jmp uuid_00000000000c298b
uuid_00000000000c2989:
	movb $1, -600(%rbp)
uuid_00000000000c298b:
	mov -616(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c298e:
	mov -608(%RBP),%RSP
	add $-624, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c298f
	jmp uuid_00000000000c2991
uuid_00000000000c298f:
	movb $1, -488(%rbp)
uuid_00000000000c2991:
	mov -568(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c2994:
	mov -504(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000c2997:
	mov -496(%RBP),%RSP
	add $-624, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c29f1
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $0
	push %RBP
	mov -656(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c29d3
	jmp uuid_00000000000c29d5
uuid_00000000000c29d3:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c29c4
	jmp uuid_00000000000c29c6
uuid_00000000000c29c4:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c29bb
	jmp uuid_00000000000c29bd
uuid_00000000000c29bb:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c29ac
	jmp uuid_00000000000c29ae
uuid_00000000000c29ac:
	push %RBP
	mov -792(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c29a9
	jmp uuid_00000000000c29ab
uuid_00000000000c29a9:
	movb $1, -808(%rbp)
uuid_00000000000c29ab:
	mov -824(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000c29ae:
	mov -816(%RBP),%RSP
	add $-832, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c29b8
	jmp uuid_00000000000c29ba
uuid_00000000000c29b8:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c29b2
	jmp uuid_00000000000c29b4
uuid_00000000000c29b2:
	push %RBP
	mov -856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq $uuid_00000000000bf208
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c29af
	jmp uuid_00000000000c29b1
uuid_00000000000c29af:
	movb $1, -872(%rbp)
uuid_00000000000c29b1:
	mov -888(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000c29b4:
	mov -880(%RBP),%RSP
	add $-896, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c29b5
	jmp uuid_00000000000c29b7
uuid_00000000000c29b5:
	movb $1, -760(%rbp)
uuid_00000000000c29b7:
	mov -840(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000c29ba:
	mov -776(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000c29bd:
	mov -768(%RBP),%RSP
	add $-896, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c29c1
	jmp uuid_00000000000c29c3
uuid_00000000000c29c1:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c29be
	jmp uuid_00000000000c29c0
uuid_00000000000c29be:
	movb $1, -712(%rbp)
uuid_00000000000c29c0:
	mov -904(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c29c3:
	mov -728(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000c29c6:
	mov -720(%RBP),%RSP
	add $-928, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c29d0
	jmp uuid_00000000000c29d2
uuid_00000000000c29d0:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c29ca
	jmp uuid_00000000000c29cc
uuid_00000000000c29ca:
	push %RBP
	mov -952(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -992(%rbp)
	pushq $uuid_00000000000bf25e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c29c7
	jmp uuid_00000000000c29c9
uuid_00000000000c29c7:
	movb $1, -968(%rbp)
uuid_00000000000c29c9:
	mov -984(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c29cc:
	mov -976(%RBP),%RSP
	add $-992, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c29cd
	jmp uuid_00000000000c29cf
uuid_00000000000c29cd:
	movb $1, -664(%rbp)
uuid_00000000000c29cf:
	mov -936(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c29d2:
	mov -680(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000c29d5:
	mov -672(%RBP),%RSP
	add $-992, %RSP
	mov -664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c29ee
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov -1024(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c29eb
	push %RBP
	jmp uuid_00000000000c29e8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c29e7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c29ea
uuid_00000000000c29e8:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c29e6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6ec
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c29ea:
	mov -1032(%RBP),%RSP
	add $-1032, %RSP
	jmp uuid_00000000000c29ed
uuid_00000000000c29eb:
uuid_00000000000c29ed:
	mov -1000(%RBP),%RSP
	add $-1024, %RSP
	jmp uuid_00000000000c29f0
uuid_00000000000c29ee:
#call function p1 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call p1_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	push %RBP
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq $0
	push %RBP
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c29dc
	jmp uuid_00000000000c29de
uuid_00000000000c29dc:
	push %RBP
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	jmp uuid_00000000000c29d9
	jmp uuid_00000000000c29db
uuid_00000000000c29d9:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c29d6
	jmp uuid_00000000000c29d8
uuid_00000000000c29d6:
	movb $1, -1368(%rbp)
uuid_00000000000c29d8:
	mov -1544(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c29db:
	mov -1384(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000c29de:
	mov -1376(%RBP),%RSP
	add $-1712, %RSP
	mov -1368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c29e3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c29e2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c29e5
uuid_00000000000c29e3:
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c29df
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c29a1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c29e1
uuid_00000000000c29df:
uuid_00000000000c29e1:
	mov -1744(%RBP),%RSP
	add $-1744, %RSP
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -832(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	movq -1712(%rbp), %r15
	movq %r15, -416(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -408(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -400(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -392(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -384(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -376(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -368(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1624(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1608(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -256(%rbp)
uuid_00000000000c29e5:
	mov -1192(%RBP),%RSP
	add $-1864, %RSP
#call function destructure-lhs : Arrow<Cons<Cons<Cons<FContext,Type>,S>,FragmentList>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov %RBX, %RBP
	call destructure_SB_lhs_CL_ArrowFContextConsFragmentListConsSConsTypeFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c29f0:
	mov -632(%RBP),%RSP
	add $-1864, %RSP
	jmp uuid_00000000000c29f3
uuid_00000000000c29f1:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	push %RBP
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c299e
	jmp uuid_00000000000c29a0
uuid_00000000000c299e:
	push %RBP
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000c299b
	jmp uuid_00000000000c299d
uuid_00000000000c299b:
	push %RBP
	jmp uuid_00000000000c2998
	jmp uuid_00000000000c299a
uuid_00000000000c2998:
	movb $1, -1000(%rbp)
uuid_00000000000c299a:
	mov -1176(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c299d:
	mov -1016(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c29a0:
	mov -1008(%RBP),%RSP
	add $-1176, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c29a6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c29a5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c29a8
uuid_00000000000c29a6:
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c29a2
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c29a1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c29a4
uuid_00000000000c29a2:
uuid_00000000000c29a4:
	mov -1208(%RBP),%RSP
	add $-1208, %RSP
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -560(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c29a8:
	mov -824(%RBP),%RSP
	add $-1328, %RSP
uuid_00000000000c29f3:
	mov -456(%RBP),%RSP
	add $-1328, %RSP
	subq $200, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $424, %rsp
	ret
fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -272(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -240(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c0b38
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c0b38
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c1baf
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c1baf
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c1baf
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000becfd
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000becfd
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000becfd
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c1a98
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000c1a98
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000c1a98
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000bf2fb
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000bf2fb
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000bf2fb
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragmentList:
uuid_00000000000c2a01:
#call function non-zero : Arrow<FragmentList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2a02
	jmp uuid_00000000000c2a03
uuid_00000000000c2a02:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c29fa
	jmp uuid_00000000000c29fc
uuid_00000000000c29fa:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000c29f7
	jmp uuid_00000000000c29f9
uuid_00000000000c29f7:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c29f4
	jmp uuid_00000000000c29f6
uuid_00000000000c29f4:
	movb $1, -680(%rbp)
uuid_00000000000c29f6:
	mov -856(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c29f9:
	mov -696(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000c29fc:
	mov -688(%RBP),%RSP
	add $-1024, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c29fe
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c29fd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2a00
uuid_00000000000c29fe:
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	movq -1024(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c2a00:
	mov -504(%RBP),%RSP
	add $-1024, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2a01
uuid_00000000000c2a03:
	subq $152, %rsp
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
fragment_CL__CL_expression_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c0b38
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fragment_CL__CL_expression_CL_ArrowFragmentS:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $uuid_00000000000c0b38
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	subq $152, %rsp
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
fragment_CL__CL_get_CL_ArrowSConsStringFragment:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a16
	jmp uuid_00000000000c2a18
uuid_00000000000c2a16:
	push %RBP
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	jmp uuid_00000000000c2a13
	jmp uuid_00000000000c2a15
uuid_00000000000c2a13:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a10
	jmp uuid_00000000000c2a12
uuid_00000000000c2a10:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000c2a0d
	jmp uuid_00000000000c2a0f
uuid_00000000000c2a0d:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2a0a
	jmp uuid_00000000000c2a0c
uuid_00000000000c2a0a:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a07
	jmp uuid_00000000000c2a09
uuid_00000000000c2a07:
	push %RBP
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000c2a04
	jmp uuid_00000000000c2a06
uuid_00000000000c2a04:
	movb $1, -512(%rbp)
uuid_00000000000c2a06:
	mov -872(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c2a09:
	mov -816(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c2a0c:
	mov -800(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c2a0f:
	mov -768(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c2a12:
	mov -560(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c2a15:
	mov -528(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c2a18:
	mov -520(%RBP),%RSP
	add $-944, %RSP
	mov -512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a30
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2a2f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2a32
uuid_00000000000c2a30:
uuid_00000000000c2a2c:
#call function non-zero : Arrow<FragmentKV,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2a2d
	jmp uuid_00000000000c2a2e
uuid_00000000000c2a2d:
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	push %RBP
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq $0
	push %RBP
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a22
	jmp uuid_00000000000c2a24
uuid_00000000000c2a22:
	push %RBP
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	jmp uuid_00000000000c2a1f
	jmp uuid_00000000000c2a21
uuid_00000000000c2a1f:
	push %RBP
	mov -1016(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2a1c
	jmp uuid_00000000000c2a1e
uuid_00000000000c2a1c:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a19
	jmp uuid_00000000000c2a1b
uuid_00000000000c2a19:
	movb $1, -1056(%rbp)
uuid_00000000000c2a1b:
	mov -1120(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c2a1e:
	mov -1104(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c2a21:
	mov -1072(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000c2a24:
	mov -1064(%RBP),%RSP
	add $-1168, %RSP
	mov -1056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a29
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2a28
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2a2b
uuid_00000000000c2a29:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2a25
	movq -1168(%rbp), %r15
	movq %r15, -864(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -856(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -848(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -840(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -832(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -824(%rbp)
	jmp uuid_00000000000c2a27
uuid_00000000000c2a25:
	movq -1096(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -176(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
uuid_00000000000c2a27:
	mov -1176(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000c2a2b:
	mov -1000(%RBP),%RSP
	add $-1176, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2a2c
uuid_00000000000c2a2e:
uuid_00000000000c2a32:
	mov -352(%RBP),%RSP
	add $-944, %RSP
	subq $24, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
fragment_CL__CL_label_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c0b38
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000c0ad1
	pushq $0
	pushq $uuid_00000000000beb98
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000beb98
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $uuid_00000000000c0b38
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $uuid_00000000000c0ad1
	pushq $0
	pushq $uuid_00000000000bf1a0
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	subq $152, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
fragment_CL__CL_new_CL_ArrowFragmentNil:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
#call function close : Arrow<FragmentKV+CaseNumber<1>,Array<FragmentKV+CaseNumber<1>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVCaseNumber1FragmentKVCaseNumber1
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment-context::new : Arrow<Nil,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_new_CL_ArrowFContextNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $1
	pushq $0
	subq $152, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a45
	jmp uuid_00000000000c2a47
uuid_00000000000c2a45:
	push %RBP
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	jmp uuid_00000000000c2a42
	jmp uuid_00000000000c2a44
uuid_00000000000c2a42:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a3f
	jmp uuid_00000000000c2a41
uuid_00000000000c2a3f:
	push %RBP
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	jmp uuid_00000000000c2a3c
	jmp uuid_00000000000c2a3e
uuid_00000000000c2a3c:
	push %RBP
	mov -760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2a39
	jmp uuid_00000000000c2a3b
uuid_00000000000c2a39:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a36
	jmp uuid_00000000000c2a38
uuid_00000000000c2a36:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000c2a33
	jmp uuid_00000000000c2a35
uuid_00000000000c2a33:
	movb $1, -832(%rbp)
uuid_00000000000c2a35:
	mov -1192(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c2a38:
	mov -1136(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c2a3b:
	mov -1120(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c2a3e:
	mov -1088(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c2a41:
	mov -880(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c2a44:
	mov -848(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000c2a47:
	mov -840(%RBP),%RSP
	add $-1264, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a49
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2a48
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2a4b
uuid_00000000000c2a49:
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1128(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $0
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
uuid_00000000000c2a4b:
	mov -672(%RBP),%RSP
	add $-1264, %RSP
	subq $152, %rsp
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $360, %rsp
	ret
fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a5e
	jmp uuid_00000000000c2a60
uuid_00000000000c2a5e:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000c2a5b
	jmp uuid_00000000000c2a5d
uuid_00000000000c2a5b:
	push %RBP
	mov -600(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a58
	jmp uuid_00000000000c2a5a
uuid_00000000000c2a58:
	push %RBP
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	jmp uuid_00000000000c2a55
	jmp uuid_00000000000c2a57
uuid_00000000000c2a55:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2a52
	jmp uuid_00000000000c2a54
uuid_00000000000c2a52:
	push %RBP
	mov -560(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a4f
	jmp uuid_00000000000c2a51
uuid_00000000000c2a4f:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000c2a4c
	jmp uuid_00000000000c2a4e
uuid_00000000000c2a4c:
	movb $1, -640(%rbp)
uuid_00000000000c2a4e:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c2a51:
	mov -944(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c2a54:
	mov -928(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c2a57:
	mov -896(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c2a5a:
	mov -688(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c2a5d:
	mov -656(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000c2a60:
	mov -648(%RBP),%RSP
	add $-1072, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a62
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2a61
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2a64
uuid_00000000000c2a62:
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -160(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq $0
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
uuid_00000000000c2a64:
	mov -480(%RBP),%RSP
	add $-1072, %RSP
	subq $152, %rsp
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a77
	jmp uuid_00000000000c2a79
uuid_00000000000c2a77:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c2a74
	jmp uuid_00000000000c2a76
uuid_00000000000c2a74:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a71
	jmp uuid_00000000000c2a73
uuid_00000000000c2a71:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	jmp uuid_00000000000c2a6e
	jmp uuid_00000000000c2a70
uuid_00000000000c2a6e:
	push %RBP
	mov -480(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2a6b
	jmp uuid_00000000000c2a6d
uuid_00000000000c2a6b:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a68
	jmp uuid_00000000000c2a6a
uuid_00000000000c2a68:
	push %RBP
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000c2a65
	jmp uuid_00000000000c2a67
uuid_00000000000c2a65:
	movb $1, -552(%rbp)
uuid_00000000000c2a67:
	mov -912(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c2a6a:
	mov -856(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c2a6d:
	mov -840(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c2a70:
	mov -808(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c2a73:
	mov -600(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c2a76:
	mov -568(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000c2a79:
	mov -560(%RBP),%RSP
	add $-984, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a7b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2a7a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2a7d
uuid_00000000000c2a7b:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -848(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2a7d:
	mov -392(%RBP),%RSP
	add $-984, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $232, %rsp
	ret
fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a90
	jmp uuid_00000000000c2a92
uuid_00000000000c2a90:
	push %RBP
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	jmp uuid_00000000000c2a8d
	jmp uuid_00000000000c2a8f
uuid_00000000000c2a8d:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a8a
	jmp uuid_00000000000c2a8c
uuid_00000000000c2a8a:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c2a87
	jmp uuid_00000000000c2a89
uuid_00000000000c2a87:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2a84
	jmp uuid_00000000000c2a86
uuid_00000000000c2a84:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a81
	jmp uuid_00000000000c2a83
uuid_00000000000c2a81:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	jmp uuid_00000000000c2a7e
	jmp uuid_00000000000c2a80
uuid_00000000000c2a7e:
	movb $1, -504(%rbp)
uuid_00000000000c2a80:
	mov -864(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c2a83:
	mov -808(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c2a86:
	mov -792(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c2a89:
	mov -760(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c2a8c:
	mov -552(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c2a8f:
	mov -520(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c2a92:
	mov -512(%RBP),%RSP
	add $-936, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2a94
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2a93
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2a96
uuid_00000000000c2a94:
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -800(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2a96:
	mov -344(%RBP),%RSP
	add $-936, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
fragment_CL__CL_set_SB_vararg_CL_ArrowFragmentConsListArray_QM_FragmentFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2aa9
	jmp uuid_00000000000c2aab
uuid_00000000000c2aa9:
	push %RBP
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	jmp uuid_00000000000c2aa6
	jmp uuid_00000000000c2aa8
uuid_00000000000c2aa6:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2aa3
	jmp uuid_00000000000c2aa5
uuid_00000000000c2aa3:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000c2aa0
	jmp uuid_00000000000c2aa2
uuid_00000000000c2aa0:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2a9d
	jmp uuid_00000000000c2a9f
uuid_00000000000c2a9d:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2a9a
	jmp uuid_00000000000c2a9c
uuid_00000000000c2a9a:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	jmp uuid_00000000000c2a97
	jmp uuid_00000000000c2a99
uuid_00000000000c2a97:
	movb $1, -504(%rbp)
uuid_00000000000c2a99:
	mov -864(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c2a9c:
	mov -808(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c2a9f:
	mov -792(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c2aa2:
	mov -760(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c2aa5:
	mov -552(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c2aa8:
	mov -520(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000c2aab:
	mov -512(%RBP),%RSP
	add $-936, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2aad
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2aac
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2aaf
uuid_00000000000c2aad:
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -800(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2aaf:
	mov -344(%RBP),%RSP
	add $-936, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ac2
	jmp uuid_00000000000c2ac4
uuid_00000000000c2ac2:
	push %RBP
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	jmp uuid_00000000000c2abf
	jmp uuid_00000000000c2ac1
uuid_00000000000c2abf:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2abc
	jmp uuid_00000000000c2abe
uuid_00000000000c2abc:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000c2ab9
	jmp uuid_00000000000c2abb
uuid_00000000000c2ab9:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2ab6
	jmp uuid_00000000000c2ab8
uuid_00000000000c2ab6:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2ab3
	jmp uuid_00000000000c2ab5
uuid_00000000000c2ab3:
	push %RBP
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000c2ab0
	jmp uuid_00000000000c2ab2
uuid_00000000000c2ab0:
	movb $1, -512(%rbp)
uuid_00000000000c2ab2:
	mov -872(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c2ab5:
	mov -816(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c2ab8:
	mov -800(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c2abb:
	mov -768(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c2abe:
	mov -560(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c2ac1:
	mov -528(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000c2ac4:
	mov -520(%RBP),%RSP
	add $-944, %RSP
	mov -512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ac6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2ac5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2ac8
uuid_00000000000c2ac6:
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -808(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2ac8:
	mov -352(%RBP),%RSP
	add $-944, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $192, %rsp
	ret
main:
	pushq $1
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000c2b01:
	mov -32(%RBP), %RAX
	mov -8(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b02
	jmp uuid_00000000000c2b03
uuid_00000000000c2b02:
	mov -16(%RBP), %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000c2ac9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2afe
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000c2aca
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2afb
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000c2acb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2af8
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000c2acc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2af5
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000c2acd
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2af2
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000c2ace
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2aef
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000c2acf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2aec
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000c2ad0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2ae9
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000c2ad1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2ae6
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000c2ad2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2ae3
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000c2ad3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2ae0
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000c2ad4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2add
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000c2ad5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2ada
	push %RBP
	pushq -64(%rbp)
	jmp uuid_00000000000c2ad7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2ad6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2ad9
uuid_00000000000c2ad7:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -288(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000c2ad9:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000c2adc
uuid_00000000000c2ada:
	mov -32(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -16(%RBP), %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	movq %R15, %r15
	movq $config_SB_target_CL_String, %r14
	movq %r15, 0(%r14)
uuid_00000000000c2adc:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000c2adf
uuid_00000000000c2add:
	mov $config_SB_profile_SB_invocations_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c2adf:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000c2ae2
uuid_00000000000c2ae0:
	mov $config_SB_preprocess_CL_U8, %r15
	movb $0, 0(%r15)
uuid_00000000000c2ae2:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c2ae5
uuid_00000000000c2ae3:
	mov $config_SB_preprocess_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c2ae5:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000c2ae8
uuid_00000000000c2ae6:
	mov $config_SB_strict_CL_U8, %r15
	movb $0, 0(%r15)
uuid_00000000000c2ae8:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000c2aeb
uuid_00000000000c2ae9:
	mov $config_SB_strict_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000c2aeb:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000c2aee
uuid_00000000000c2aec:
	pushq $0
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
uuid_00000000000c2aee:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000c2af1
uuid_00000000000c2aef:
	pushq $1
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
uuid_00000000000c2af1:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000c2af4
uuid_00000000000c2af2:
	pushq $2
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
uuid_00000000000c2af4:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000c2af7
uuid_00000000000c2af5:
	pushq $3
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
uuid_00000000000c2af7:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000c2afa
uuid_00000000000c2af8:
	pushq $4
	movq $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %R15
	popq 0(%R15)
uuid_00000000000c2afa:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000c2afd
uuid_00000000000c2afb:
	pushq $1
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber1, %R15
	popq 0(%R15)
uuid_00000000000c2afd:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000c2b00
uuid_00000000000c2afe:
	pushq $0
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber1, %R15
	popq 0(%R15)
uuid_00000000000c2b00:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	mov -32(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c2b01
uuid_00000000000c2b03:
	pushq $1
uuid_00000000000c2b2f:
	mov -64(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b30
	jmp uuid_00000000000c2b31
uuid_00000000000c2b30:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b2c
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b0a
	jmp uuid_00000000000c2b0c
uuid_00000000000c2b0a:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b07
	jmp uuid_00000000000c2b09
uuid_00000000000c2b07:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2b04
	jmp uuid_00000000000c2b06
uuid_00000000000c2b04:
	movb $1, -160(%rbp)
uuid_00000000000c2b06:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c2b09:
	mov -176(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c2b0c:
	mov -168(%RBP),%RSP
	add $-232, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b29
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b19
	jmp uuid_00000000000c2b1b
uuid_00000000000c2b19:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b10
	jmp uuid_00000000000c2b12
uuid_00000000000c2b10:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2b0d
	jmp uuid_00000000000c2b0f
uuid_00000000000c2b0d:
	movb $1, -320(%rbp)
uuid_00000000000c2b0f:
	mov -336(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000c2b12:
	mov -328(%RBP),%RSP
	add $-344, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b16
	jmp uuid_00000000000c2b18
uuid_00000000000c2b16:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2b13
	jmp uuid_00000000000c2b15
uuid_00000000000c2b13:
	movb $1, -272(%rbp)
uuid_00000000000c2b15:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c2b18:
	mov -288(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c2b1b:
	mov -280(%RBP),%RSP
	add $-376, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b26
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b1f
	jmp uuid_00000000000c2b21
uuid_00000000000c2b1f:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2b1c
	jmp uuid_00000000000c2b1e
uuid_00000000000c2b1c:
	movb $1, -416(%rbp)
uuid_00000000000c2b1e:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000c2b21:
	mov -424(%RBP),%RSP
	add $-440, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b23
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2b22
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2b25
uuid_00000000000c2b23:
#call function tokenize : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	mov %RBX, %RBP
	call tokenize_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movb $0, -64(%rbp)
uuid_00000000000c2b25:
	mov -384(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000c2b28
uuid_00000000000c2b26:
#call function tokenize : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	mov %RBX, %RBP
	call tokenize_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -376(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c2b28:
	mov -240(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000c2b2b
uuid_00000000000c2b29:
	movq -232(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000c2b2b:
	mov -128(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c2b2e
uuid_00000000000c2b2c:
	movb $0, -64(%rbp)
uuid_00000000000c2b2e:
	mov -96(%RBP),%RSP
	add $-120, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000c2b2f
uuid_00000000000c2b31:
	mov $config_SB_mode_CL_CompileModeCompileModeCaseNumber0, %r15
	pushq 0(%r15)
	push %RBP
	pushq -72(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b43
	push %RBP
	pushq -72(%rbp)
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b40
	push %RBP
	pushq -72(%rbp)
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b3d
	push %RBP
	pushq -72(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b3a
	push %RBP
	pushq -72(%rbp)
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b37
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2b36
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2b39
uuid_00000000000c2b37:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call preprocess_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typecheck : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call typecheck_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2b39:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c2b3c
uuid_00000000000c2b3a:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call preprocess_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typecheck : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call typecheck_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2b3c:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c2b3f
uuid_00000000000c2b3d:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call preprocess_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2b3f:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c2b42
uuid_00000000000c2b40:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2b42:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000c2b45
uuid_00000000000c2b43:
#call function print : Arrow<List<Token>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call print_CL_ArrowNilListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2b45:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $24, %rsp
	ret
print_CL_ArrowNilListToken:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6d0
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000c2b58:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2b59
	jmp uuid_00000000000c2b5a
uuid_00000000000c2b59:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b4e
	jmp uuid_00000000000c2b50
uuid_00000000000c2b4e:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2b4b
	jmp uuid_00000000000c2b4d
uuid_00000000000c2b4b:
	push %RBP
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000c2b48
	jmp uuid_00000000000c2b4a
uuid_00000000000c2b48:
	movb $1, -248(%rbp)
uuid_00000000000c2b4a:
	mov -344(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c2b4d:
	mov -264(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000c2b50:
	mov -256(%RBP),%RSP
	add $-400, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b55
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2b54
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2b57
uuid_00000000000c2b55:
	push %RBP
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b51
	jmp uuid_00000000000c2b53
uuid_00000000000c2b51:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000bea0b
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2b53:
	mov -408(%RBP),%RSP
	add $-408, %RSP
#call function print : Arrow<Token,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movb $1, -88(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -296(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c2b57:
	mov -168(%RBP),%RSP
	add $-408, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2b58
uuid_00000000000c2b5a:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be6d1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
non_SB_zero_CL_ArrowU64ListToken:
	mov $1, %RAX
	push %RAX
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_SS:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_FContextFContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $200
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -200(%rbp), %r15
	movq %r15, 0(%r14)
	movq -192(%rbp), %r15
	movq %r15, 8(%r14)
	movq -184(%rbp), %r15
	movq %r15, 16(%r14)
	movq -176(%rbp), %r15
	movq %r15, 24(%r14)
	movq -168(%rbp), %r15
	movq %r15, 32(%r14)
	movq -160(%rbp), %r15
	movq %r15, 40(%r14)
	movq -152(%rbp), %r15
	movq %r15, 48(%r14)
	movq -144(%rbp), %r15
	movq %r15, 56(%r14)
	movq -136(%rbp), %r15
	movq %r15, 64(%r14)
	movq -128(%rbp), %r15
	movq %r15, 72(%r14)
	movq -120(%rbp), %r15
	movq %r15, 80(%r14)
	movq -112(%rbp), %r15
	movq %r15, 88(%r14)
	movq -104(%rbp), %r15
	movq %r15, 96(%r14)
	movq -96(%rbp), %r15
	movq %r15, 104(%r14)
	movq -88(%rbp), %r15
	movq %r15, 112(%r14)
	movq -80(%rbp), %r15
	movq %r15, 120(%r14)
	movq -72(%rbp), %r15
	movq %r15, 128(%r14)
	movq -64(%rbp), %r15
	movq %r15, 136(%r14)
	movq -56(%rbp), %r15
	movq %r15, 144(%r14)
	movq -48(%rbp), %r15
	movq %r15, 152(%r14)
	movq -40(%rbp), %r15
	movq %r15, 160(%r14)
	movq -32(%rbp), %r15
	movq %r15, 168(%r14)
	movq -24(%rbp), %r15
	movq %r15, 176(%r14)
	movq -16(%rbp), %r15
	movq %r15, 184(%r14)
	movq -8(%rbp), %r15
	movq %r15, 192(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
close_CL_ArrowArray_QM_FragmentKVFragmentKV:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_FragmentKVCaseNumber1FragmentKVCaseNumber1:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_ContextCaseNumber1ContextCaseNumber1:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $96
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -96(%rbp), %r15
	movq %r15, 0(%r14)
	movq -88(%rbp), %r15
	movq %r15, 8(%r14)
	movq -80(%rbp), %r15
	movq %r15, 16(%r14)
	movq -72(%rbp), %r15
	movq %r15, 24(%r14)
	movq -64(%rbp), %r15
	movq %r15, 32(%r14)
	movq -56(%rbp), %r15
	movq %r15, 40(%r14)
	movq -48(%rbp), %r15
	movq %r15, 48(%r14)
	movq -40(%rbp), %r15
	movq %r15, 56(%r14)
	movq -32(%rbp), %r15
	movq %r15, 64(%r14)
	movq -24(%rbp), %r15
	movq %r15, 72(%r14)
	movq -16(%rbp), %r15
	movq %r15, 80(%r14)
	movq -8(%rbp), %r15
	movq %r15, 88(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
close_CL_ArrowArray_QM_ContextContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $96
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -96(%rbp), %r15
	movq %r15, 0(%r14)
	movq -88(%rbp), %r15
	movq %r15, 8(%r14)
	movq -80(%rbp), %r15
	movq %r15, 16(%r14)
	movq -72(%rbp), %r15
	movq %r15, 24(%r14)
	movq -64(%rbp), %r15
	movq %r15, 32(%r14)
	movq -56(%rbp), %r15
	movq %r15, 40(%r14)
	movq -48(%rbp), %r15
	movq %r15, 48(%r14)
	movq -40(%rbp), %r15
	movq %r15, 56(%r14)
	movq -32(%rbp), %r15
	movq %r15, 64(%r14)
	movq -24(%rbp), %r15
	movq %r15, 72(%r14)
	movq -16(%rbp), %r15
	movq %r15, 80(%r14)
	movq -8(%rbp), %r15
	movq %r15, 88(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
close_CL_ArrowArray_QM_ASTAST:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
non_SB_zero_CL_ArrowU64ListArray_QM_Fragment:
	mov $1, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64ListFragment:
	mov $1, %RAX
	push %RAX
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
is_CL_ArrowU64ConsSized8Sized8:
	pushq $0
	pushq $1
uuid_00000000000c2b62:
	mov $8, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b63
	jmp uuid_00000000000c2b64
uuid_00000000000c2b63:
	mov %RBP, %R15
	add $-8, %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	mov %RBP, %R15
	add $-16, %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	mov -48(%RBP), %RAX
	mov -56(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b5f
	movq $0, -40(%rbp)
	jmp uuid_00000000000c2b61
uuid_00000000000c2b5f:
uuid_00000000000c2b61:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	mov -32(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c2b62
uuid_00000000000c2b64:
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
close_CL_ArrowArray_QM_SCaseNumber3SCaseNumber3:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_FragmentListCaseNumber1FragmentListCaseNumber1:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
close_CL_ArrowArray_QM_FragmentListFragmentList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
close_CL_ArrowArray_QM_TypeType:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_StringStringListStringStringList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $32
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -32(%rbp), %r15
	movq %r15, 0(%r14)
	movq -24(%rbp), %r15
	movq %r15, 8(%r14)
	movq -16(%rbp), %r15
	movq %r15, 16(%r14)
	movq -8(%rbp), %r15
	movq %r15, 24(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
reverse_CL_ArrowListTokenListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c2b76:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2b77
	jmp uuid_00000000000c2b78
uuid_00000000000c2b77:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b6f
	jmp uuid_00000000000c2b71
uuid_00000000000c2b6f:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2b6c
	jmp uuid_00000000000c2b6e
uuid_00000000000c2b6c:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	jmp uuid_00000000000c2b69
	jmp uuid_00000000000c2b6b
uuid_00000000000c2b69:
	movb $1, -312(%rbp)
uuid_00000000000c2b6b:
	mov -408(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c2b6e:
	mov -328(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000c2b71:
	mov -320(%RBP),%RSP
	add $-464, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b73
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2b72
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2b75
uuid_00000000000c2b73:
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -400(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c2b75:
	mov -232(%RBP),%RSP
	add $-464, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2b76
uuid_00000000000c2b78:
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_ListTokenListTokenListTokenListToken:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
cons_CL_ArrowListTokenConsListTokenToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	subq $72, %rsp
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
head_CL_ArrowTokenListToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b88
	push %RBP
	jmp uuid_00000000000c2b85
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2b84
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2b87
uuid_00000000000c2b85:
uuid_00000000000c2b87:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000c2b8a
uuid_00000000000c2b88:
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000c2b83
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000c2b8a:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	pushq -8(%RBP)
	pushq -16(%RBP)
	pushq -24(%RBP)
	pushq -32(%RBP)
	pushq -40(%RBP)
	pushq -48(%RBP)
	pushq -56(%RBP)
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_ListTypeListType:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $40
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -40(%rbp), %r15
	movq %r15, 0(%r14)
	movq -32(%rbp), %r15
	movq %r15, 8(%r14)
	movq -24(%rbp), %r15
	movq %r15, 16(%r14)
	movq -16(%rbp), %r15
	movq %r15, 24(%r14)
	movq -8(%rbp), %r15
	movq %r15, 32(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
cons_CL_ArrowListTypeConsListTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	subq $40, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
close_CL_ArrowArray_QM_ListTypeListTypeCaseNumber1ListTypeListTypeCaseNumber1:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $40
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -40(%rbp), %r15
	movq %r15, 0(%r14)
	movq -32(%rbp), %r15
	movq %r15, 8(%r14)
	movq -24(%rbp), %r15
	movq %r15, 16(%r14)
	movq -16(%rbp), %r15
	movq %r15, 24(%r14)
	movq -8(%rbp), %r15
	movq %r15, 32(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
close_CL_ArrowArray_QM_SfxListSfxList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_MacroListMacroList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
close_CL_ArrowArray_QM_ASTCaseNumber9ASTCaseNumber9:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
max_CL_ArrowI64ConsI64I64:
	push %RBP
	mov -8(%RBP), %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2b96
	jmp uuid_00000000000c2b98
uuid_00000000000c2b96:
	movq -16(%rbp), %r15
	movq %r15, -8(%rbp)
	mov -16(%rbp), %r15
	mov %r15, -8(%rbp)
uuid_00000000000c2b98:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
close_CL_ArrowArray_QM_ListTokenListToken:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
cons_CL_ArrowListStringConsListStringString:
	pushq -8(%rbp)
#call function close : Arrow<List<String>,Array<List<String>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListStringListString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
close_CL_ArrowArray_QM_ListStringListString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64ListString:
	mov $1, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
cons_CL_ArrowListArray_QM_FragmentConsListArray_QM_FragmentArray_QM_Fragment:
	pushq -8(%rbp)
#call function close : Arrow<List<Array<Fragment,?>>,Array<List<Array<Fragment,?>>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListArray_QM_FragmentListArray_QM_Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
close_CL_ArrowArray_QM_ListArray_QM_FragmentListArray_QM_Fragment:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_FragmentFragment:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $152
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -152(%rbp), %r15
	movq %r15, 0(%r14)
	movq -144(%rbp), %r15
	movq %r15, 8(%r14)
	movq -136(%rbp), %r15
	movq %r15, 16(%r14)
	movq -128(%rbp), %r15
	movq %r15, 24(%r14)
	movq -120(%rbp), %r15
	movq %r15, 32(%r14)
	movq -112(%rbp), %r15
	movq %r15, 40(%r14)
	movq -104(%rbp), %r15
	movq %r15, 48(%r14)
	movq -96(%rbp), %r15
	movq %r15, 56(%r14)
	movq -88(%rbp), %r15
	movq %r15, 64(%r14)
	movq -80(%rbp), %r15
	movq %r15, 72(%r14)
	movq -72(%rbp), %r15
	movq %r15, 80(%r14)
	movq -64(%rbp), %r15
	movq %r15, 88(%r14)
	movq -56(%rbp), %r15
	movq %r15, 96(%r14)
	movq -48(%rbp), %r15
	movq %r15, 104(%r14)
	movq -40(%rbp), %r15
	movq %r15, 112(%r14)
	movq -32(%rbp), %r15
	movq %r15, 120(%r14)
	movq -24(%rbp), %r15
	movq %r15, 128(%r14)
	movq -16(%rbp), %r15
	movq %r15, 136(%r14)
	movq -8(%rbp), %r15
	movq %r15, 144(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $160, %rsp
	ret
_DT_length_CL_ArrowU64ListFragment:
	pushq $0
uuid_00000000000c2bb2:
#call function non-zero : Arrow<List<Fragment>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2bb3
	jmp uuid_00000000000c2bb4
uuid_00000000000c2bb3:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bab
	jmp uuid_00000000000c2bad
uuid_00000000000c2bab:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2ba8
	jmp uuid_00000000000c2baa
uuid_00000000000c2ba8:
	push %RBP
	jmp uuid_00000000000c2ba5
	jmp uuid_00000000000c2ba7
uuid_00000000000c2ba5:
	movb $1, -536(%rbp)
uuid_00000000000c2ba7:
	mov -728(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c2baa:
	mov -552(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000c2bad:
	mov -544(%RBP),%RSP
	add $-728, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2baf
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2bae
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2bb1
uuid_00000000000c2baf:
	movq -720(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -688(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -680(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -672(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -664(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -640(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -616(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c2bb1:
	mov -360(%RBP),%RSP
	add $-728, %RSP
	mov -184(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -184(%rbp)
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2bb2
uuid_00000000000c2bb4:
	mov -184(%rbp), %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
cons_CL_ArrowListFragmentConsListFragmentFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
#call function close : Arrow<List<Fragment>,Array<List<Fragment>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListFragmentListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	subq $168, %rsp
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
close_CL_ArrowArray_QM_ListFragmentListFragment:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
is_CL_ArrowU64ConsSized24Sized24:
	pushq $0
	pushq $1
uuid_00000000000c2bbd:
	mov $24, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -64(%RBP), %RAX
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bbe
	jmp uuid_00000000000c2bbf
uuid_00000000000c2bbe:
	mov %RBP, %R15
	add $-24, %R15
	mov -64(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	mov %RBP, %R15
	add $-48, %R15
	mov -64(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	mov -80(%RBP), %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bba
	movq $0, -72(%rbp)
	jmp uuid_00000000000c2bbc
uuid_00000000000c2bba:
uuid_00000000000c2bbc:
	mov -96(%RBP),%RSP
	add $-96, %RSP
	mov -64(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -64(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c2bbd
uuid_00000000000c2bbf:
	mov -72(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_TContextTContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $120
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -120(%rbp), %r15
	movq %r15, 0(%r14)
	movq -112(%rbp), %r15
	movq %r15, 8(%r14)
	movq -104(%rbp), %r15
	movq %r15, 16(%r14)
	movq -96(%rbp), %r15
	movq %r15, 24(%r14)
	movq -88(%rbp), %r15
	movq %r15, 32(%r14)
	movq -80(%rbp), %r15
	movq %r15, 40(%r14)
	movq -72(%rbp), %r15
	movq %r15, 48(%r14)
	movq -64(%rbp), %r15
	movq %r15, 56(%r14)
	movq -56(%rbp), %r15
	movq %r15, 64(%r14)
	movq -48(%rbp), %r15
	movq %r15, 72(%r14)
	movq -40(%rbp), %r15
	movq %r15, 80(%r14)
	movq -32(%rbp), %r15
	movq %r15, 88(%r14)
	movq -24(%rbp), %r15
	movq %r15, 96(%r14)
	movq -16(%rbp), %r15
	movq %r15, 104(%r14)
	movq -8(%rbp), %r15
	movq %r15, 112(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $128, %rsp
	ret
_DT_bind_CL_ArrowNilConsTypeConsStringArray_QM_BTreeEqTypeString:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function close : Arrow<BTreeEq<String,Type>,Array<BTreeEq<String,Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_BTreeEqTypeStringBTreeEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c2bcb:
	mov -64(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bcc
	jmp uuid_00000000000c2bcd
uuid_00000000000c2bcc:
	mov -8(%rbp), %r15
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	mov -80(%RBP), %RAX
	mov %RAX, %RAX
	mov -56(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bc8
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bc5
	mov -120(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c2bc7
uuid_00000000000c2bc5:
	mov -72(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 16(%R15)
	movb $0, -64(%rbp)
uuid_00000000000c2bc7:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000c2bca
uuid_00000000000c2bc8:
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bc2
	mov -128(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c2bc4
uuid_00000000000c2bc2:
	mov -72(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 8(%R15)
	movb $0, -64(%rbp)
uuid_00000000000c2bc4:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000c2bca:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	add $64, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2bcb
uuid_00000000000c2bcd:
	mov %rbp, %rsp
	sub $48, %rsp
	ret
close_CL_ArrowArray_QM_BTreeEqTypeStringBTreeEqTypeString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $64
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -64(%rbp), %r15
	movq %r15, 0(%r14)
	movq -56(%rbp), %r15
	movq %r15, 8(%r14)
	movq -48(%rbp), %r15
	movq %r15, 16(%r14)
	movq -40(%rbp), %r15
	movq %r15, 24(%r14)
	movq -32(%rbp), %r15
	movq %r15, 32(%r14)
	movq -24(%rbp), %r15
	movq %r15, 40(%r14)
	movq -16(%rbp), %r15
	movq %r15, 48(%r14)
	movq -8(%rbp), %r15
	movq %r15, 56(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
non_SB_zero_CL_ArrowU64ListStackToSpecialize:
	mov $1, %RAX
	push %RAX
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
max_CL_ArrowU64ConsU64U64:
	push %RBP
	mov -8(%RBP), %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bd6
	jmp uuid_00000000000c2bd8
uuid_00000000000c2bd6:
	movq -16(%rbp), %r15
	movq %r15, -8(%rbp)
	mov -16(%rbp), %r15
	mov %r15, -8(%rbp)
uuid_00000000000c2bd8:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
cons_CL_ArrowListStackToSpecializeConsListStackToSpecializeStackToSpecialize:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
#call function close : Arrow<List<StackToSpecialize>,Array<List<StackToSpecialize>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListStackToSpecializeListStackToSpecialize
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	subq $200, %rsp
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $392, %rsp
	ret
close_CL_ArrowArray_QM_ListStackToSpecializeListStackToSpecialize:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $200
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -200(%rbp), %r15
	movq %r15, 0(%r14)
	movq -192(%rbp), %r15
	movq %r15, 8(%r14)
	movq -184(%rbp), %r15
	movq %r15, 16(%r14)
	movq -176(%rbp), %r15
	movq %r15, 24(%r14)
	movq -168(%rbp), %r15
	movq %r15, 32(%r14)
	movq -160(%rbp), %r15
	movq %r15, 40(%r14)
	movq -152(%rbp), %r15
	movq %r15, 48(%r14)
	movq -144(%rbp), %r15
	movq %r15, 56(%r14)
	movq -136(%rbp), %r15
	movq %r15, 64(%r14)
	movq -128(%rbp), %r15
	movq %r15, 72(%r14)
	movq -120(%rbp), %r15
	movq %r15, 80(%r14)
	movq -112(%rbp), %r15
	movq %r15, 88(%r14)
	movq -104(%rbp), %r15
	movq %r15, 96(%r14)
	movq -96(%rbp), %r15
	movq %r15, 104(%r14)
	movq -88(%rbp), %r15
	movq %r15, 112(%r14)
	movq -80(%rbp), %r15
	movq %r15, 120(%r14)
	movq -72(%rbp), %r15
	movq %r15, 128(%r14)
	movq -64(%rbp), %r15
	movq %r15, 136(%r14)
	movq -56(%rbp), %r15
	movq %r15, 144(%r14)
	movq -48(%rbp), %r15
	movq %r15, 152(%r14)
	movq -40(%rbp), %r15
	movq %r15, 160(%r14)
	movq -32(%rbp), %r15
	movq %r15, 168(%r14)
	movq -24(%rbp), %r15
	movq %r15, 176(%r14)
	movq -16(%rbp), %r15
	movq %r15, 184(%r14)
	movq -8(%rbp), %r15
	movq %r15, 192(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
non_SB_zero_CL_ArrowU64ListType:
	mov $1, %RAX
	push %RAX
	mov -40(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_AD__CL_ArrowListTypeConsListTypeListType:
#call function reverse : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000c2bf2:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2bf3
	jmp uuid_00000000000c2bf4
uuid_00000000000c2bf3:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2beb
	jmp uuid_00000000000c2bed
uuid_00000000000c2beb:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2be8
	jmp uuid_00000000000c2bea
uuid_00000000000c2be8:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c2be5
	jmp uuid_00000000000c2be7
uuid_00000000000c2be5:
	movb $1, -184(%rbp)
uuid_00000000000c2be7:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c2bea:
	mov -200(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c2bed:
	mov -192(%RBP),%RSP
	add $-272, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bef
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2bee
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2bf1
uuid_00000000000c2bef:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	movq -240(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c2bf1:
	mov -136(%RBP),%RSP
	add $-272, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2bf2
uuid_00000000000c2bf4:
	subq $40, %rsp
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
reverse_CL_ArrowListTypeListType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000c2c05:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2c06
	jmp uuid_00000000000c2c07
uuid_00000000000c2c06:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2bff
	jmp uuid_00000000000c2c01
uuid_00000000000c2bff:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2bfc
	jmp uuid_00000000000c2bfe
uuid_00000000000c2bfc:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000c2bf9
	jmp uuid_00000000000c2bfb
uuid_00000000000c2bf9:
	movb $1, -184(%rbp)
uuid_00000000000c2bfb:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c2bfe:
	mov -200(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c2c01:
	mov -192(%RBP),%RSP
	add $-272, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c02
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2b72
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2c04
uuid_00000000000c2c02:
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
#call function close : Arrow<List<Type>,Array<List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	movq -240(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c2c04:
	mov -136(%RBP),%RSP
	add $-272, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2c05
uuid_00000000000c2c07:
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_length_CL_ArrowU64ListType:
	pushq $0
uuid_00000000000c2c16:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2c17
	jmp uuid_00000000000c2c18
uuid_00000000000c2c17:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c10
	jmp uuid_00000000000c2c12
uuid_00000000000c2c10:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2c0d
	jmp uuid_00000000000c2c0f
uuid_00000000000c2c0d:
	push %RBP
	jmp uuid_00000000000c2c0a
	jmp uuid_00000000000c2c0c
uuid_00000000000c2c0a:
	movb $1, -152(%rbp)
uuid_00000000000c2c0c:
	mov -216(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c2c0f:
	mov -168(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c2c12:
	mov -160(%RBP),%RSP
	add $-216, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c13
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2bae
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2c15
uuid_00000000000c2c13:
	movq -208(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c2c15:
	mov -104(%RBP),%RSP
	add $-216, %RSP
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2c16
uuid_00000000000c2c18:
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_lookup_CL_ArrowTypeConsTypeConsStringBTreeEqTypeString:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
uuid_00000000000c2c33:
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c34
	jmp uuid_00000000000c2c35
uuid_00000000000c2c34:
	mov -8(%RBP), %RAX
	push %RAX
	push %RBP
	mov -112(%RBP), %RAX
	mov -128(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c24
	jmp uuid_00000000000c2c26
uuid_00000000000c2c24:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	mov -16(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2c21
	jmp uuid_00000000000c2c23
uuid_00000000000c2c21:
	pushq -24(%RBP)
	pushq -32(%RBP)
	pushq -40(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	movb $0, -120(%rbp)
uuid_00000000000c2c23:
	mov -144(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000c2c26:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	push %RBP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c30
	jmp uuid_00000000000c2c32
uuid_00000000000c2c30:
	push %RBP
	mov -128(%RBP), %RAX
	mov -112(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c2d
	push %RBP
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c2a
	mov -48(%RBP), %RAX
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c2c2c
uuid_00000000000c2c2a:
	movb $0, -120(%rbp)
uuid_00000000000c2c2c:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000c2c2f
uuid_00000000000c2c2d:
	push %RBP
	mov -56(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c27
	mov -56(%RBP), %RAX
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c2c29
uuid_00000000000c2c27:
	movb $0, -120(%rbp)
uuid_00000000000c2c29:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c2c2f:
	mov -160(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000c2c32:
	mov -152(%RBP),%RSP
	add $-168, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2c33
uuid_00000000000c2c35:
	subq $24, %rsp
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $104, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
uuid_00000000000c2c50:
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c51
	jmp uuid_00000000000c2c52
uuid_00000000000c2c51:
	mov -8(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov -96(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c41
	jmp uuid_00000000000c2c43
uuid_00000000000c2c41:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov -16(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2c3e
	jmp uuid_00000000000c2c40
uuid_00000000000c2c3e:
	mov -24(%RBP), %RAX
	movq %RAX, -64(%rbp)
	movb $0, -88(%rbp)
uuid_00000000000c2c40:
	mov -112(%RBP),%RSP
	add $-112, %RSP
uuid_00000000000c2c43:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c4d
	jmp uuid_00000000000c2c4f
uuid_00000000000c2c4d:
	push %RBP
	mov -96(%RBP), %RAX
	mov -80(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c4a
	push %RBP
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c47
	mov -32(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c2c49
uuid_00000000000c2c47:
	movb $0, -88(%rbp)
uuid_00000000000c2c49:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c2c4c
uuid_00000000000c2c4a:
	push %RBP
	mov -40(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c44
	mov -40(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c2c46
uuid_00000000000c2c44:
	movb $0, -88(%rbp)
uuid_00000000000c2c46:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c2c4c:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c2c4f:
	mov -120(%RBP),%RSP
	add $-136, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2c50
uuid_00000000000c2c52:
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringBTreeEqTupleTypeTypeString:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
uuid_00000000000c2c77:
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c78
	jmp uuid_00000000000c2c79
uuid_00000000000c2c78:
	mov -8(%RBP), %RAX
	push %RAX
	push %RBP
	mov -176(%RBP), %RAX
	mov -192(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c68
	jmp uuid_00000000000c2c6a
uuid_00000000000c2c68:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	mov -16(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2c65
	jmp uuid_00000000000c2c67
uuid_00000000000c2c65:
	pushq -24(%RBP)
	pushq -32(%RBP)
	pushq -40(%RBP)
	pushq -48(%RBP)
	pushq -56(%RBP)
	pushq -64(%RBP)
	pushq -72(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	movb $0, -184(%rbp)
uuid_00000000000c2c67:
	mov -208(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c2c6a:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	push %RBP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c74
	jmp uuid_00000000000c2c76
uuid_00000000000c2c74:
	push %RBP
	mov -192(%RBP), %RAX
	mov -176(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c71
	push %RBP
	mov -80(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c6e
	mov -80(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c2c70
uuid_00000000000c2c6e:
	movb $0, -184(%rbp)
uuid_00000000000c2c70:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c2c73
uuid_00000000000c2c71:
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c6b
	mov -88(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c2c6d
uuid_00000000000c2c6b:
	movb $0, -184(%rbp)
uuid_00000000000c2c6d:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c2c73:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000c2c76:
	mov -216(%RBP),%RSP
	add $-232, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2c77
uuid_00000000000c2c79:
	subq $56, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
close_CL_ArrowArray_QM_TContextCaseNumber2TContextCaseNumber2:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $120
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -120(%rbp), %r15
	movq %r15, 0(%r14)
	movq -112(%rbp), %r15
	movq %r15, 8(%r14)
	movq -104(%rbp), %r15
	movq %r15, 16(%r14)
	movq -96(%rbp), %r15
	movq %r15, 24(%r14)
	movq -88(%rbp), %r15
	movq %r15, 32(%r14)
	movq -80(%rbp), %r15
	movq %r15, 40(%r14)
	movq -72(%rbp), %r15
	movq %r15, 48(%r14)
	movq -64(%rbp), %r15
	movq %r15, 56(%r14)
	movq -56(%rbp), %r15
	movq %r15, 64(%r14)
	movq -48(%rbp), %r15
	movq %r15, 72(%r14)
	movq -40(%rbp), %r15
	movq %r15, 80(%r14)
	movq -32(%rbp), %r15
	movq %r15, 88(%r14)
	movq -24(%rbp), %r15
	movq %r15, 96(%r14)
	movq -16(%rbp), %r15
	movq %r15, 104(%r14)
	movq -8(%rbp), %r15
	movq %r15, 112(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $128, %rsp
	ret
_DT_nth_CL_ArrowTypeConsTypeConsU64ListType:
uuid_00000000000c2c8e:
	mov -48(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c8f
	jmp uuid_00000000000c2c90
uuid_00000000000c2c8f:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c84
	jmp uuid_00000000000c2c86
uuid_00000000000c2c84:
	push %RBP
	mov -160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2c81
	jmp uuid_00000000000c2c83
uuid_00000000000c2c81:
	push %RBP
	jmp uuid_00000000000c2c7e
	jmp uuid_00000000000c2c80
uuid_00000000000c2c7e:
	movb $1, -176(%rbp)
uuid_00000000000c2c80:
	mov -240(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c2c83:
	mov -192(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000c2c86:
	mov -184(%RBP),%RSP
	add $-240, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c8b
	push %RBP
	jmp uuid_00000000000c2c88
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2c87
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2c8a
uuid_00000000000c2c88:
uuid_00000000000c2c8a:
	mov -248(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000c2c8d
uuid_00000000000c2c8b:
	movq -232(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000c2c8d:
	mov -128(%RBP),%RSP
	add $-240, %RSP
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2c8e
uuid_00000000000c2c90:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c97
	jmp uuid_00000000000c2c99
uuid_00000000000c2c97:
	push %RBP
	jmp uuid_00000000000c2c94
	jmp uuid_00000000000c2c96
uuid_00000000000c2c94:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	jmp uuid_00000000000c2c91
	jmp uuid_00000000000c2c93
uuid_00000000000c2c91:
	movb $1, -176(%rbp)
uuid_00000000000c2c93:
	mov -200(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000c2c96:
	mov -192(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000c2c99:
	mov -184(%RBP),%RSP
	add $-224, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2c9e
	push %RBP
	jmp uuid_00000000000c2c9b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2c9a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2c9d
uuid_00000000000c2c9b:
uuid_00000000000c2c9d:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000c2ca0
uuid_00000000000c2c9e:
	movq -224(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000c2ca0:
	mov -128(%RBP),%RSP
	add $-224, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_bind_CL_ArrowNilConsTupleTypeTypeConsStringArray_QM_BTreeEqTupleTypeTypeString:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function close : Arrow<BTreeEq<String,Tuple<Type,Type>>,Array<BTreeEq<String,Tuple<Type,Type>>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c2cb3:
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cb4
	jmp uuid_00000000000c2cb5
uuid_00000000000c2cb4:
	mov -8(%rbp), %r15
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cb0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cad
	mov -184(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c2caf
uuid_00000000000c2cad:
	mov -104(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 16(%R15)
	movb $0, -96(%rbp)
uuid_00000000000c2caf:
	mov -216(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000c2cb2
uuid_00000000000c2cb0:
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2caa
	mov -192(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c2cac
uuid_00000000000c2caa:
	mov -104(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 8(%R15)
	movb $0, -96(%rbp)
uuid_00000000000c2cac:
	mov -216(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000c2cb2:
	mov -208(%RBP),%RSP
	add $-216, %RSP
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2cb3
uuid_00000000000c2cb5:
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $96
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -96(%rbp), %r15
	movq %r15, 0(%r14)
	movq -88(%rbp), %r15
	movq %r15, 8(%r14)
	movq -80(%rbp), %r15
	movq %r15, 16(%r14)
	movq -72(%rbp), %r15
	movq %r15, 24(%r14)
	movq -64(%rbp), %r15
	movq %r15, 32(%r14)
	movq -56(%rbp), %r15
	movq %r15, 40(%r14)
	movq -48(%rbp), %r15
	movq %r15, 48(%r14)
	movq -40(%rbp), %r15
	movq %r15, 56(%r14)
	movq -32(%rbp), %r15
	movq %r15, 64(%r14)
	movq -24(%rbp), %r15
	movq %r15, 72(%r14)
	movq -16(%rbp), %r15
	movq %r15, 80(%r14)
	movq -8(%rbp), %r15
	movq %r15, 88(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
_DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function close : Arrow<BTreeEq<String,U64>,Array<BTreeEq<String,U64>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_BTreeEqU64StringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c2ccc:
	mov -48(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ccd
	jmp uuid_00000000000c2cce
uuid_00000000000c2ccd:
	mov -8(%rbp), %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov -40(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cc9
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cc6
	mov -88(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c2cc8
uuid_00000000000c2cc6:
	mov -56(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 16(%R15)
	movb $0, -48(%rbp)
uuid_00000000000c2cc8:
	mov -120(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c2ccb
uuid_00000000000c2cc9:
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cc3
	mov -96(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c2cc5
uuid_00000000000c2cc3:
	mov -56(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 8(%R15)
	movb $0, -48(%rbp)
uuid_00000000000c2cc5:
	mov -120(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000c2ccb:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2ccc
uuid_00000000000c2cce:
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_BTreeEqU64StringBTreeEqU64String:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_lookup_CL_ArrowStringConsStringConsStringBTreeEqStringString:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
uuid_00000000000c2cef:
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cf0
	jmp uuid_00000000000c2cf1
uuid_00000000000c2cf0:
	mov -8(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov -96(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ce0
	jmp uuid_00000000000c2ce2
uuid_00000000000c2ce0:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov -16(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2cdd
	jmp uuid_00000000000c2cdf
uuid_00000000000c2cdd:
	mov -24(%RBP), %RAX
	movq %RAX, -64(%rbp)
	movb $0, -88(%rbp)
uuid_00000000000c2cdf:
	mov -112(%RBP),%RSP
	add $-112, %RSP
uuid_00000000000c2ce2:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cec
	jmp uuid_00000000000c2cee
uuid_00000000000c2cec:
	push %RBP
	mov -96(%RBP), %RAX
	mov -80(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ce9
	push %RBP
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ce6
	mov -32(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c2ce8
uuid_00000000000c2ce6:
	movb $0, -88(%rbp)
uuid_00000000000c2ce8:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000c2ceb
uuid_00000000000c2ce9:
	push %RBP
	mov -40(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ce3
	mov -40(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c2ce5
uuid_00000000000c2ce3:
	movb $0, -88(%rbp)
uuid_00000000000c2ce5:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c2ceb:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000c2cee:
	mov -120(%RBP),%RSP
	add $-136, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2cef
uuid_00000000000c2cf1:
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_bind_CL_ArrowNilConsStringConsStringArray_QM_BTreeEqStringString:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function close : Arrow<BTreeEq<String,String>,Array<BTreeEq<String,String>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_BTreeEqStringStringBTreeEqStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c2cfd:
	mov -48(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cfe
	jmp uuid_00000000000c2cff
uuid_00000000000c2cfe:
	mov -8(%rbp), %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov -40(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cfa
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cf7
	mov -88(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c2cf9
uuid_00000000000c2cf7:
	mov -56(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 16(%R15)
	movb $0, -48(%rbp)
uuid_00000000000c2cf9:
	mov -120(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000c2cfc
uuid_00000000000c2cfa:
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2cf4
	mov -96(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c2cf6
uuid_00000000000c2cf4:
	mov -56(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 8(%R15)
	movb $0, -48(%rbp)
uuid_00000000000c2cf6:
	mov -120(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000c2cfc:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2cfd
uuid_00000000000c2cff:
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_BTreeEqStringStringBTreeEqStringString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsTupleTypeStringBTreeEqU64TupleTypeString:
#call function deep-hash : Arrow<Tuple<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
uuid_00000000000c2d2c:
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d2d
	jmp uuid_00000000000c2d2e
uuid_00000000000c2d2d:
	mov -8(%RBP), %RAX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	mov -160(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d1d
	jmp uuid_00000000000c2d1f
uuid_00000000000c2d1d:
	push %RBP
#call function == : Arrow<Cons<Tuple<String,Type>,Tuple<String,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -16(%RBP)
	pushq -24(%RBP)
	pushq -32(%RBP)
	pushq -40(%RBP)
	pushq -48(%RBP)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2d1a
	jmp uuid_00000000000c2d1c
uuid_00000000000c2d1a:
	mov -56(%RBP), %RAX
	movq %RAX, -128(%rbp)
	movb $0, -152(%rbp)
uuid_00000000000c2d1c:
	mov -176(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c2d1f:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	push %RBP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d29
	jmp uuid_00000000000c2d2b
uuid_00000000000c2d29:
	push %RBP
	mov -160(%RBP), %RAX
	mov -144(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d26
	push %RBP
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d23
	mov -64(%RBP), %RAX
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c2d25
uuid_00000000000c2d23:
	movb $0, -152(%rbp)
uuid_00000000000c2d25:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c2d28
uuid_00000000000c2d26:
	push %RBP
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d20
	mov -72(%RBP), %RAX
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c2d22
uuid_00000000000c2d20:
	movb $0, -152(%rbp)
uuid_00000000000c2d22:
	mov -200(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000c2d28:
	mov -192(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000c2d2b:
	mov -184(%RBP),%RSP
	add $-200, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2d2c
uuid_00000000000c2d2e:
	mov -128(%rbp), %RAX
	mov %rbp, %rsp
	sub $136, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d51
	jmp uuid_00000000000c2d53
uuid_00000000000c2d51:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d3f
	jmp uuid_00000000000c2d41
uuid_00000000000c2d3f:
	push %RBP
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	jmp uuid_00000000000c2d3c
	jmp uuid_00000000000c2d3e
uuid_00000000000c2d3c:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2d39
	jmp uuid_00000000000c2d3b
uuid_00000000000c2d39:
	movb $1, -352(%rbp)
uuid_00000000000c2d3b:
	mov -400(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c2d3e:
	mov -368(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c2d41:
	mov -360(%RBP),%RSP
	add $-408, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d4e
	jmp uuid_00000000000c2d50
uuid_00000000000c2d4e:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d48
	jmp uuid_00000000000c2d4a
uuid_00000000000c2d48:
	push %RBP
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	jmp uuid_00000000000c2d45
	jmp uuid_00000000000c2d47
uuid_00000000000c2d45:
	push %RBP
	mov -424(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2d42
	jmp uuid_00000000000c2d44
uuid_00000000000c2d42:
	movb $1, -464(%rbp)
uuid_00000000000c2d44:
	mov -512(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c2d47:
	mov -480(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c2d4a:
	mov -472(%RBP),%RSP
	add $-520, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d4b
	jmp uuid_00000000000c2d4d
uuid_00000000000c2d4b:
	movb $1, -288(%rbp)
uuid_00000000000c2d4d:
	mov -416(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c2d50:
	mov -304(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c2d53:
	mov -296(%RBP),%RSP
	add $-520, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d5b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2d5a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2d5d
uuid_00000000000c2d5b:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -520(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2d57
	jmp uuid_00000000000c2d59
uuid_00000000000c2d57:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2d54
	jmp uuid_00000000000c2d56
uuid_00000000000c2d54:
	movq $1, -96(%rbp)
uuid_00000000000c2d56:
	mov -536(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c2d59:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c2d5d:
	mov -192(%RBP),%RSP
	add $-536, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
deep_SB_hash_CL_ArrowU64TupleTypeString:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d68
	jmp uuid_00000000000c2d6a
uuid_00000000000c2d68:
	push %RBP
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	jmp uuid_00000000000c2d65
	jmp uuid_00000000000c2d67
uuid_00000000000c2d65:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2d62
	jmp uuid_00000000000c2d64
uuid_00000000000c2d62:
	movb $1, -152(%rbp)
uuid_00000000000c2d64:
	mov -200(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c2d67:
	mov -168(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c2d6a:
	mov -160(%RBP),%RSP
	add $-208, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d6c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2d6b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2d6e
uuid_00000000000c2d6c:
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000c2d6e:
	mov -104(%RBP),%RSP
	add $-208, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_bind_CL_ArrowNilConsU64ConsTupleTypeStringArray_QM_BTreeEqU64TupleTypeString:
#call function deep-hash : Arrow<Tuple<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function close : Arrow<BTreeEq<Tuple<String,Type>,U64>,Array<BTreeEq<Tuple<String,Type>,U64>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c2d83:
	mov -80(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d84
	jmp uuid_00000000000c2d85
uuid_00000000000c2d84:
	mov -8(%rbp), %r15
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d80
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d7d
	mov -152(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c2d7f
uuid_00000000000c2d7d:
	mov -88(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 16(%R15)
	movb $0, -80(%rbp)
uuid_00000000000c2d7f:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000c2d82
uuid_00000000000c2d80:
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2d7a
	mov -160(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c2d7c
uuid_00000000000c2d7a:
	mov -88(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 8(%R15)
	movb $0, -80(%rbp)
uuid_00000000000c2d7c:
	mov -184(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c2d82:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	add $80, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2d83
uuid_00000000000c2d85:
	mov %rbp, %rsp
	sub $64, %rsp
	ret
close_CL_ArrowArray_QM_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $80
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -80(%rbp), %r15
	movq %r15, 0(%r14)
	movq -72(%rbp), %r15
	movq %r15, 8(%r14)
	movq -64(%rbp), %r15
	movq %r15, 16(%r14)
	movq -56(%rbp), %r15
	movq %r15, 24(%r14)
	movq -48(%rbp), %r15
	movq %r15, 32(%r14)
	movq -40(%rbp), %r15
	movq %r15, 40(%r14)
	movq -32(%rbp), %r15
	movq %r15, 48(%r14)
	movq -24(%rbp), %r15
	movq %r15, 56(%r14)
	movq -16(%rbp), %r15
	movq %r15, 64(%r14)
	movq -8(%rbp), %r15
	movq %r15, 72(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringBTreeEqU64TupleU64TupleU64String:
#call function deep-hash : Arrow<Tuple<Tuple<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
uuid_00000000000c2dc3:
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2dc4
	jmp uuid_00000000000c2dc5
uuid_00000000000c2dc4:
	mov -8(%RBP), %RAX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	mov -160(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2db4
	jmp uuid_00000000000c2db6
uuid_00000000000c2db4:
	push %RBP
#call function == : Arrow<Cons<Tuple<Tuple<String,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -16(%RBP)
	pushq -24(%RBP)
	pushq -32(%RBP)
	pushq -40(%RBP)
	pushq -48(%RBP)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2db1
	jmp uuid_00000000000c2db3
uuid_00000000000c2db1:
	mov -56(%RBP), %RAX
	movq %RAX, -128(%rbp)
	movb $0, -152(%rbp)
uuid_00000000000c2db3:
	mov -176(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000c2db6:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	push %RBP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2dc0
	jmp uuid_00000000000c2dc2
uuid_00000000000c2dc0:
	push %RBP
	mov -160(%RBP), %RAX
	mov -144(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2dbd
	push %RBP
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2dba
	mov -64(%RBP), %RAX
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c2dbc
uuid_00000000000c2dba:
	movb $0, -152(%rbp)
uuid_00000000000c2dbc:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000c2dbf
uuid_00000000000c2dbd:
	push %RBP
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2db7
	mov -72(%RBP), %RAX
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c2db9
uuid_00000000000c2db7:
	movb $0, -152(%rbp)
uuid_00000000000c2db9:
	mov -200(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000c2dbf:
	mov -192(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000c2dc2:
	mov -184(%RBP),%RSP
	add $-200, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2dc3
uuid_00000000000c2dc5:
	mov -128(%rbp), %RAX
	mov %rbp, %rsp
	sub $136, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2df1
	jmp uuid_00000000000c2df3
uuid_00000000000c2df1:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ddf
	jmp uuid_00000000000c2de1
uuid_00000000000c2ddf:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2ddc
	jmp uuid_00000000000c2dde
uuid_00000000000c2ddc:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	jmp uuid_00000000000c2dd9
	jmp uuid_00000000000c2ddb
uuid_00000000000c2dd9:
	movb $1, -352(%rbp)
uuid_00000000000c2ddb:
	mov -384(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c2dde:
	mov -368(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000c2de1:
	mov -360(%RBP),%RSP
	add $-408, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2dee
	jmp uuid_00000000000c2df0
uuid_00000000000c2dee:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2de8
	jmp uuid_00000000000c2dea
uuid_00000000000c2de8:
	push %RBP
	mov -448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2de5
	jmp uuid_00000000000c2de7
uuid_00000000000c2de5:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	jmp uuid_00000000000c2de2
	jmp uuid_00000000000c2de4
uuid_00000000000c2de2:
	movb $1, -464(%rbp)
uuid_00000000000c2de4:
	mov -496(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c2de7:
	mov -480(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c2dea:
	mov -472(%RBP),%RSP
	add $-520, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2deb
	jmp uuid_00000000000c2ded
uuid_00000000000c2deb:
	movb $1, -288(%rbp)
uuid_00000000000c2ded:
	mov -416(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c2df0:
	mov -304(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000c2df3:
	mov -296(%RBP),%RSP
	add $-520, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2dfa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2d5a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2dfc
uuid_00000000000c2dfa:
	push %RBP
#call function == : Arrow<Cons<Tuple<String,U64>,Tuple<String,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2df7
	jmp uuid_00000000000c2df9
uuid_00000000000c2df7:
	push %RBP
	mov -488(%RBP), %RAX
	mov -376(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2df4
	jmp uuid_00000000000c2df6
uuid_00000000000c2df4:
	movq $1, -96(%rbp)
uuid_00000000000c2df6:
	mov -536(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c2df9:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000c2dfc:
	mov -192(%RBP),%RSP
	add $-536, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e1f
	jmp uuid_00000000000c2e21
uuid_00000000000c2e1f:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e0d
	jmp uuid_00000000000c2e0f
uuid_00000000000c2e0d:
	push %RBP
	mov -224(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2e0a
	jmp uuid_00000000000c2e0c
uuid_00000000000c2e0a:
	push %RBP
	mov -216(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2e07
	jmp uuid_00000000000c2e09
uuid_00000000000c2e07:
	movb $1, -240(%rbp)
uuid_00000000000c2e09:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c2e0c:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c2e0f:
	mov -248(%RBP),%RSP
	add $-280, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e1c
	jmp uuid_00000000000c2e1e
uuid_00000000000c2e1c:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e16
	jmp uuid_00000000000c2e18
uuid_00000000000c2e16:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2e13
	jmp uuid_00000000000c2e15
uuid_00000000000c2e13:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2e10
	jmp uuid_00000000000c2e12
uuid_00000000000c2e10:
	movb $1, -320(%rbp)
uuid_00000000000c2e12:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c2e15:
	mov -336(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c2e18:
	mov -328(%RBP),%RSP
	add $-360, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e19
	jmp uuid_00000000000c2e1b
uuid_00000000000c2e19:
	movb $1, -192(%rbp)
uuid_00000000000c2e1b:
	mov -288(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c2e1e:
	mov -208(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000c2e21:
	mov -200(%RBP),%RSP
	add $-360, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e28
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2d5a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2e2a
uuid_00000000000c2e28:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2e25
	jmp uuid_00000000000c2e27
uuid_00000000000c2e25:
	push %RBP
	mov -344(%RBP), %RAX
	mov -264(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e22
	jmp uuid_00000000000c2e24
uuid_00000000000c2e22:
	movq $1, -64(%rbp)
uuid_00000000000c2e24:
	mov -376(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c2e27:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000c2e2a:
	mov -128(%RBP),%RSP
	add $-376, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
deep_SB_hash_CL_ArrowU64TupleU64TupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e39
	jmp uuid_00000000000c2e3b
uuid_00000000000c2e39:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2e36
	jmp uuid_00000000000c2e38
uuid_00000000000c2e36:
	push %RBP
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	jmp uuid_00000000000c2e33
	jmp uuid_00000000000c2e35
uuid_00000000000c2e33:
	movb $1, -152(%rbp)
uuid_00000000000c2e35:
	mov -184(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c2e38:
	mov -168(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000c2e3b:
	mov -160(%RBP),%RSP
	add $-208, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e3c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2d6b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2e3e
uuid_00000000000c2e3c:
#call function deep-hash : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<Tuple<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000c2e3e:
	mov -104(%RBP),%RSP
	add $-208, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
deep_SB_hash_CL_ArrowU64TupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e49
	jmp uuid_00000000000c2e4b
uuid_00000000000c2e49:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2e46
	jmp uuid_00000000000c2e48
uuid_00000000000c2e46:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000c2e43
	jmp uuid_00000000000c2e45
uuid_00000000000c2e43:
	movb $1, -104(%rbp)
uuid_00000000000c2e45:
	mov -136(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000c2e48:
	mov -120(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000c2e4b:
	mov -112(%RBP),%RSP
	add $-144, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e4c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2d6b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2e4e
uuid_00000000000c2e4c:
#call function deep-hash : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000c2e4e:
	mov -72(%RBP),%RSP
	add $-144, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_DT_bind_CL_ArrowNilConsU64ConsTupleU64TupleU64StringArray_QM_BTreeEqU64TupleU64TupleU64String:
#call function deep-hash : Arrow<Tuple<Tuple<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function close : Arrow<BTreeEq<Tuple<Tuple<String,U64>,U64>,U64>,Array<BTreeEq<Tuple<Tuple<String,U64>,U64>,U64>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_BTreeEqU64TupleU64TupleU64StringBTreeEqU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c2e6c:
	mov -80(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e6d
	jmp uuid_00000000000c2e6e
uuid_00000000000c2e6d:
	mov -8(%rbp), %r15
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e69
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e66
	mov -152(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c2e68
uuid_00000000000c2e66:
	mov -88(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 16(%R15)
	movb $0, -80(%rbp)
uuid_00000000000c2e68:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000c2e6b
uuid_00000000000c2e69:
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2e63
	mov -160(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c2e65
uuid_00000000000c2e63:
	mov -88(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 8(%R15)
	movb $0, -80(%rbp)
uuid_00000000000c2e65:
	mov -184(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000c2e6b:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	add $80, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2e6c
uuid_00000000000c2e6e:
	mov %rbp, %rsp
	sub $64, %rsp
	ret
close_CL_ArrowArray_QM_BTreeEqU64TupleU64TupleU64StringBTreeEqU64TupleU64TupleU64String:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $80
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -80(%rbp), %r15
	movq %r15, 0(%r14)
	movq -72(%rbp), %r15
	movq %r15, 8(%r14)
	movq -64(%rbp), %r15
	movq %r15, 16(%r14)
	movq -56(%rbp), %r15
	movq %r15, 24(%r14)
	movq -48(%rbp), %r15
	movq %r15, 32(%r14)
	movq -40(%rbp), %r15
	movq %r15, 40(%r14)
	movq -32(%rbp), %r15
	movq %r15, 48(%r14)
	movq -24(%rbp), %r15
	movq %r15, 56(%r14)
	movq -16(%rbp), %r15
	movq %r15, 64(%r14)
	movq -8(%rbp), %r15
	movq %r15, 72(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
non_SB_zero_CL_ArrowU64ListTupleTypeTupleStringString:
	mov $1, %RAX
	push %RAX
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
cons_CL_ArrowListTupleTypeTupleStringStringConsListTupleTypeTupleStringStringTupleTypeTupleStringString:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
#call function close : Arrow<List<Tuple<Tuple<String,String>,Type>>,Array<List<Tuple<Tuple<String,String>,Type>>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTupleTypeTupleStringStringListTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	subq $72, %rsp
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
close_CL_ArrowArray_QM_ListTupleTypeTupleStringStringListTupleTypeTupleStringString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_bind_CL_ArrowNilConsTypeConsASTArray_QM_BTreeIsTypeAST:
#call function hash : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call hash_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function close : Arrow<BTreeIs<AST,Type>,Array<BTreeIs<AST,Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_BTreeIsTypeASTBTreeIsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000c2eba:
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ebb
	jmp uuid_00000000000c2ebc
uuid_00000000000c2ebb:
	mov -8(%rbp), %r15
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov -120(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2eb7
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2eb4
	mov -248(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c2eb6
uuid_00000000000c2eb4:
	mov -136(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 16(%R15)
	movb $0, -128(%rbp)
uuid_00000000000c2eb6:
	mov -280(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000c2eb9
uuid_00000000000c2eb7:
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2eb1
	mov -256(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000c2eb3
uuid_00000000000c2eb1:
	mov -136(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 8(%R15)
	movb $0, -128(%rbp)
uuid_00000000000c2eb3:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000c2eb9:
	mov -272(%RBP),%RSP
	add $-280, %RSP
	add $128, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2eba
uuid_00000000000c2ebc:
	mov %rbp, %rsp
	sub $112, %rsp
	ret
close_CL_ArrowArray_QM_BTreeIsTypeASTBTreeIsTypeAST:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $128
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -128(%rbp), %r15
	movq %r15, 0(%r14)
	movq -120(%rbp), %r15
	movq %r15, 8(%r14)
	movq -112(%rbp), %r15
	movq %r15, 16(%r14)
	movq -104(%rbp), %r15
	movq %r15, 24(%r14)
	movq -96(%rbp), %r15
	movq %r15, 32(%r14)
	movq -88(%rbp), %r15
	movq %r15, 40(%r14)
	movq -80(%rbp), %r15
	movq %r15, 48(%r14)
	movq -72(%rbp), %r15
	movq %r15, 56(%r14)
	movq -64(%rbp), %r15
	movq %r15, 64(%r14)
	movq -56(%rbp), %r15
	movq %r15, 72(%r14)
	movq -48(%rbp), %r15
	movq %r15, 80(%r14)
	movq -40(%rbp), %r15
	movq %r15, 88(%r14)
	movq -32(%rbp), %r15
	movq %r15, 96(%r14)
	movq -24(%rbp), %r15
	movq %r15, 104(%r14)
	movq -16(%rbp), %r15
	movq %r15, 112(%r14)
	movq -8(%rbp), %r15
	movq %r15, 120(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $136, %rsp
	ret
hash_CL_ArrowU64Sized72:
	pushq $0
	pushq $0
uuid_00000000000c2ec3:
#call function not : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $72, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -88(%RBP), %RAX
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	push %RAX
	mov %RBX, %RBP
	call not_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2ec4
	jmp uuid_00000000000c2ec5
uuid_00000000000c2ec4:
	mov %RBP, %R15
	add $-72, %R15
	mov -88(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	mov %R15, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -88(%rbp)
	mov -96(%RBP),%RAX
	shl $10,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%RBP),%RAX
	shr $6,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -96(%rbp)
	jmp uuid_00000000000c2ec3
uuid_00000000000c2ec5:
	mov -96(%RBP),%RAX
	shl $3,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%RBP),%RAX
	shr $11,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%RBP),%RAX
	shl $15,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_lookup_CL_ArrowTypeConsTypeConsASTBTreeIsTypeAST:
#call function hash : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call hash_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
uuid_00000000000c2ee0:
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ee1
	jmp uuid_00000000000c2ee2
uuid_00000000000c2ee1:
	mov -8(%RBP), %RAX
	push %RAX
	push %RBP
	mov -240(%RBP), %RAX
	mov -256(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ed1
	jmp uuid_00000000000c2ed3
uuid_00000000000c2ed1:
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -16(%RBP)
	pushq -24(%RBP)
	pushq -32(%RBP)
	pushq -40(%RBP)
	pushq -48(%RBP)
	pushq -56(%RBP)
	pushq -64(%RBP)
	pushq -72(%RBP)
	pushq -80(%RBP)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2ece
	jmp uuid_00000000000c2ed0
uuid_00000000000c2ece:
	pushq -88(%RBP)
	pushq -96(%RBP)
	pushq -104(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	movb $0, -248(%rbp)
uuid_00000000000c2ed0:
	mov -272(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000c2ed3:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	push %RBP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2edd
	jmp uuid_00000000000c2edf
uuid_00000000000c2edd:
	push %RBP
	mov -256(%RBP), %RAX
	mov -240(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2eda
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ed7
	mov -112(%RBP), %RAX
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c2ed9
uuid_00000000000c2ed7:
	movb $0, -248(%rbp)
uuid_00000000000c2ed9:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000c2edc
uuid_00000000000c2eda:
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ed4
	mov -120(%RBP), %RAX
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000c2ed6
uuid_00000000000c2ed4:
	movb $0, -248(%rbp)
uuid_00000000000c2ed6:
	mov -296(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c2edc:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000c2edf:
	mov -280(%RBP),%RSP
	add $-296, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000c2ee0
uuid_00000000000c2ee2:
	subq $24, %rsp
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $232, %rsp
	ret
is_CL_ArrowU64ConsSized72Sized72:
	pushq $0
	pushq $1
uuid_00000000000c2ee6:
	mov $72, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -160(%RBP), %RAX
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ee7
	jmp uuid_00000000000c2ee8
uuid_00000000000c2ee7:
	mov %RBP, %R15
	add $-72, %R15
	mov -160(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	mov %RBP, %R15
	add $-144, %R15
	mov -160(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	mov -176(%RBP), %RAX
	mov -184(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ee3
	movq $0, -168(%rbp)
	jmp uuid_00000000000c2ee5
uuid_00000000000c2ee3:
uuid_00000000000c2ee5:
	mov -192(%RBP),%RSP
	add $-192, %RSP
	mov -160(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -160(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000c2ee6
uuid_00000000000c2ee8:
	mov -168(%rbp), %RAX
	mov %rbp, %rsp
	sub $152, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsListTypeListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ef4
	jmp uuid_00000000000c2ef6
uuid_00000000000c2ef4:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2ef1
	jmp uuid_00000000000c2ef3
uuid_00000000000c2ef1:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2eee
	jmp uuid_00000000000c2ef0
uuid_00000000000c2eee:
	movb $1, -288(%rbp)
uuid_00000000000c2ef0:
	mov -352(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c2ef3:
	mov -304(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000c2ef6:
	mov -296(%RBP),%RSP
	add $-392, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f1f
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f0f
	jmp uuid_00000000000c2f11
uuid_00000000000c2f0f:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2efd
	jmp uuid_00000000000c2eff
uuid_00000000000c2efd:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2efa
	jmp uuid_00000000000c2efc
uuid_00000000000c2efa:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000c2ef7
	jmp uuid_00000000000c2ef9
uuid_00000000000c2ef7:
	movb $1, -560(%rbp)
uuid_00000000000c2ef9:
	mov -624(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c2efc:
	mov -576(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000c2eff:
	mov -568(%RBP),%RSP
	add $-648, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f0c
	jmp uuid_00000000000c2f0e
uuid_00000000000c2f0c:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f06
	jmp uuid_00000000000c2f08
uuid_00000000000c2f06:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000c2f03
	jmp uuid_00000000000c2f05
uuid_00000000000c2f03:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000c2f00
	jmp uuid_00000000000c2f02
uuid_00000000000c2f00:
	movb $1, -704(%rbp)
uuid_00000000000c2f02:
	mov -768(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c2f05:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c2f08:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f09
	jmp uuid_00000000000c2f0b
uuid_00000000000c2f09:
	movb $1, -496(%rbp)
uuid_00000000000c2f0b:
	mov -656(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c2f0e:
	mov -512(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000c2f11:
	mov -504(%RBP),%RSP
	add $-792, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000c2f1c
	push %RBP
	jmp uuid_00000000000c2f19
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000be645
	pushq $uuid_00000000000c2f18
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000c2f1b
uuid_00000000000c2f19:
uuid_00000000000c2f1b:
	mov -800(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000c2f1e
uuid_00000000000c2f1c:
	push %RBP
#call function == : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2f15
	jmp uuid_00000000000c2f17
uuid_00000000000c2f15:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000c2f12
	jmp uuid_00000000000c2f14
uuid_00000000000c2f12:
	movq $1, -96(%rbp)
uuid_00000000000c2f14:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c2f17:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000c2f1e:
	mov -400(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000c2f21
uuid_00000000000c2f1f:
	movq $1, -96(%rbp)
uuid_00000000000c2f21:
	mov -192(%RBP),%RSP
	add $-392, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
.data
uuid_00000000000be645:
	.ascii "Pattern Match Failure"
	.zero 1
uuid_00000000000be646:
	.ascii "File: LIB/default-stdlib.lm Line: 74 Column: 5"
	.zero 1
uuid_00000000000be6a7:
	.ascii "File: LIB/default-stdlib.lm Line: 90 Column: 5"
	.zero 1
uuid_00000000000be6b7:
	.ascii "()"
	.zero 1
uuid_00000000000be6c7:
	.ascii "("
	.zero 1
uuid_00000000000be6c8:
	.ascii " "
	.zero 1
uuid_00000000000be6c9:
	.ascii ")"
	.zero 1
uuid_00000000000be6d0:
	.ascii "["
	.zero 1
uuid_00000000000be6d1:
	.ascii "]"
	.zero 1
uuid_00000000000be6d2:
	.ascii "File: LIB/default-stdlib.lm Line: 112 Column: 5"
	.zero 1
uuid_00000000000be6df:
	.ascii " at "
	.zero 1
uuid_00000000000be6eb:
	.ascii "Unable to open file: "
	.zero 1
uuid_00000000000be6ec:
	.ascii "\n"
	.zero 1
uuid_00000000000be6f0:
	.ascii "File Read Error ["
	.zero 1
uuid_00000000000be6f1:
	.ascii "]: "
	.zero 1
uuid_00000000000be70a:
	.ascii "File: LIB/default-stdlib.lm Line: 347 Column: 5"
	.zero 1
uuid_00000000000be71a:
	.ascii "0"
	.zero 1
uuid_00000000000be71e:
	.ascii "-"
	.zero 1
uuid_00000000000be72e:
	.ascii "File: LIB/default-stdlib.lm Line: 456 Column: 8"
	.zero 1
uuid_00000000000be753:
	.ascii "1"
	.zero 1
uuid_00000000000be754:
	.ascii "2"
	.zero 1
uuid_00000000000be755:
	.ascii "3"
	.zero 1
uuid_00000000000be756:
	.ascii "4"
	.zero 1
uuid_00000000000be757:
	.ascii "5"
	.zero 1
uuid_00000000000be758:
	.ascii "6"
	.zero 1
uuid_00000000000be759:
	.ascii "7"
	.zero 1
uuid_00000000000be75a:
	.ascii "8"
	.zero 1
uuid_00000000000be75b:
	.ascii "9"
	.zero 1
uuid_00000000000be75c:
	.ascii "a"
	.zero 1
uuid_00000000000be75d:
	.ascii "b"
	.zero 1
uuid_00000000000be75e:
	.ascii "c"
	.zero 1
uuid_00000000000be75f:
	.ascii "d"
	.zero 1
uuid_00000000000be760:
	.ascii "e"
	.zero 1
uuid_00000000000be761:
	.ascii "f"
	.zero 1
uuid_00000000000be762:
	.ascii "File: LIB/default-stdlib.lm Line: 489 Column: 8"
	.zero 1
uuid_00000000000be796:
	.ascii ""
	.zero 1
malloc_SB_block_SB_head_CL_U64:
.zero 8
malloc_SB_block_SB_tail_CL_U64:
.zero 8
malloc_SB_first_SB_free_CL_U64:
.zero 8
malloc_SB_page_SB_tail_CL_U64:
.zero 8
malloc_SB_large_SB_size_CL_U64:
.zero 8
point_SB_of_SB_interest_CL_U64:
.zero 8
rc_SB_magic_SB_number_CL_U64:
.zero 8
assemble_SB_text_SB_section_CL_SSCaseNumber3:
.zero 24
assemble_SB_init_SB_section_CL_SSCaseNumber3:
.zero 24
assemble_SB_data_SB_section_CL_SSCaseNumber3:
.zero 24
assemble_SB_profile_SB_onexit_CL_SSCaseNumber3:
.zero 24
assemble_SB_final_CL_String:
.zero 8
assemble_SB_argv_SB_referenced_CL_U8:
.zero 8
main_SB_with_SB_argv_CL_U8:
.zero 8
main_SB_with_CL_U8:
.zero 8
config_SB_profile_SB_invocations_CL_U8:
.zero 8
config_SB_strict_CL_U8:
.zero 8
config_SB_preprocess_CL_U8:
.zero 8
config_SB_target_CL_String:
.zero 8
uuid_00000000000be7e8:
	.ascii "tmp.s"
	.zero 1
config_SB_assemble_SB_mode_CL_AssembleModeAssembleModeCaseNumber1:
.zero 8
config_SB_mode_CL_CompileModeCompileModeCaseNumber0:
.zero 8
preprocess_SB_macros_CL_MacroListMacroListCaseNumber1:
.zero 168
ast_SB_tokenized_SB_program_CL_ListTokenListTokenCaseNumber1:
.zero 72
ast_SB_parsed_SB_program_CL_ASTASTCaseNumber10:
.zero 72
global_SB_type_SB_context_CL_TContextTContextCaseNumber2:
.zero 120
global_SB_ctx_CL_FContextFContextCaseNumber1:
.zero 200
parse_SB_suffixes_CL_SfxListSfxListCaseNumber1:
.zero 48
stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecializeCaseNumber1:
.zero 200
uuid_00000000000be7ed:
	.ascii "_EX_"
	.zero 1
uuid_00000000000be7ee:
	.ascii "_DL_"
	.zero 1
uuid_00000000000be7ef:
	.ascii "_MD_"
	.zero 1
uuid_00000000000be7f0:
	.ascii "_AM_"
	.zero 1
uuid_00000000000be7f1:
	.ascii "_ML_"
	.zero 1
uuid_00000000000be7f2:
	.ascii "_AD_"
	.zero 1
uuid_00000000000be7f3:
	.ascii "_SB_"
	.zero 1
uuid_00000000000be7f4:
	.ascii "_DT_"
	.zero 1
uuid_00000000000be7f5:
	.ascii "_DV_"
	.zero 1
uuid_00000000000be7f6:
	.ascii "_CL_"
	.zero 1
uuid_00000000000be7f7:
	.ascii "_SC_"
	.zero 1
uuid_00000000000be7f8:
	.ascii "_LT_"
	.zero 1
uuid_00000000000be7f9:
	.ascii "_EQ_"
	.zero 1
uuid_00000000000be7fa:
	.ascii "_GT_"
	.zero 1
uuid_00000000000be7fb:
	.ascii "_QM_"
	.zero 1
uuid_00000000000be7fc:
	.ascii "_AT_"
	.zero 1
uuid_00000000000be7fd:
	.ascii "_LB_"
	.zero 1
uuid_00000000000be7fe:
	.ascii "_RB_"
	.zero 1
uuid_00000000000be7ff:
	.ascii "_HT_"
	.zero 1
uuid_00000000000be800:
	.ascii "_US_"
	.zero 1
uuid_00000000000be801:
	.ascii "_TK_"
	.zero 1
uuid_00000000000be802:
	.ascii "_BR_"
	.zero 1
uuid_00000000000be803:
	.ascii "_TL_"
	.zero 1
uuid_00000000000be804:
	.ascii "File: SRC/mangle-identifier.lm Line: 10 Column: 8"
	.zero 1
uuid_00000000000be850:
	.ascii "?"
	.zero 1
uuid_00000000000be869:
	.ascii "File: SRC/mangle-identifier.lm Line: 55 Column: 32"
	.zero 1
uuid_00000000000be879:
	.ascii "File: SRC/mangle-identifier.lm Line: 49 Column: 5"
	.zero 1
uuid_00000000000be886:
	.ascii "\\"
	.zero 1
uuid_00000000000be887:
	.ascii "Illegal Character: "
	.zero 1
uuid_00000000000be888:
	.ascii "Illegal Escape Sequence In String "
	.zero 1
uuid_00000000000be889:
	.ascii "File: SRC/escape-string.lm Line: 12 Column: 11"
	.zero 1
uuid_00000000000be8ae:
	.ascii "\\\\\""
	.zero 1
uuid_00000000000be8af:
	.ascii ";"
	.zero 1
uuid_00000000000be8b0:
	.ascii "\\\\\\\\"
	.zero 1
uuid_00000000000be8b1:
	.ascii "'"
	.zero 1
uuid_00000000000be8b2:
	.ascii "λ"
	.zero 1
uuid_00000000000be8b3:
	.ascii "\\\\n"
	.zero 1
uuid_00000000000be8b4:
	.ascii "#"
	.zero 1
uuid_00000000000be8b5:
	.ascii "	"
	.zero 1
uuid_00000000000be8b6:
	.ascii "File: SRC/escape-string.lm Line: 50 Column: 14"
	.zero 1
uuid_00000000000be8d8:
	.ascii "\\\\"
	.zero 1
uuid_00000000000be8dc:
	.ascii "\\n"
	.zero 1
uuid_00000000000be8dd:
	.ascii "File: SRC/escape-string.lm Line: 45 Column: 8"
	.zero 1
uuid_00000000000be8fc:
	.ascii "File: SRC/escape-string.lm Line: 85 Column: 5"
	.zero 1
uuid_00000000000be915:
	.ascii "as"
	.zero 1
uuid_00000000000be928:
	.ascii "In Coercion\n"
	.zero 1
uuid_00000000000be929:
	.ascii ":\n"
	.zero 1
uuid_00000000000be92a:
	.ascii "As: "
	.zero 1
uuid_00000000000be934:
	.ascii "In Function Application\n"
	.zero 1
uuid_00000000000be935:
	.ascii "Return:\n"
	.zero 1
uuid_00000000000be936:
	.ascii "File: SRC/error-formatting.lm Line: 12 Column: 5"
	.zero 1
uuid_00000000000be940:
	.ascii "."
	.zero 1
uuid_00000000000be94a:
	.ascii "File: SRC/is-variable.lm Line: 9 Column: 5"
	.zero 1
uuid_00000000000be9de:
	.ascii "@"
	.zero 1
uuid_00000000000be9e2:
	.ascii "Used"
	.zero 1
uuid_00000000000be9e3:
	.ascii "Unused"
	.zero 1
uuid_00000000000be9e4:
	.ascii "Return"
	.zero 1
uuid_00000000000be9e5:
	.ascii "Tail"
	.zero 1
uuid_00000000000be9e6:
	.ascii "Call"
	.zero 1
uuid_00000000000be9e7:
	.ascii "File: SRC/to-string.lm Line: 9 Column: 5"
	.zero 1
uuid_00000000000bea0b:
	.ascii ","
	.zero 1
uuid_00000000000bea0c:
	.ascii "File: SRC/to-string.lm Line: 27 Column: 5"
	.zero 1
uuid_00000000000bea25:
	.ascii "+"
	.zero 1
uuid_00000000000bea38:
	.ascii "..."
	.zero 1
uuid_00000000000bea4b:
	.ascii "<"
	.zero 1
uuid_00000000000bea4c:
	.ascii ">"
	.zero 1
uuid_00000000000bea4d:
	.ascii "File: SRC/to-string.lm Line: 46 Column: 5"
	.zero 1
uuid_00000000000beac0:
	.ascii "File: SRC/is-equal.lm Line: 4 Column: 5"
	.zero 1
type_SB_index_CL_BTreeIsTypeASTBTreeIsTypeASTCaseNumber0:
.zero 128
uuid_00000000000beadc:
	.ascii "Nil"
	.zero 1
uuid_00000000000beaf8:
	.ascii "GlobalVariable"
	.zero 1
uuid_00000000000beaf9:
	.ascii "mov"
	.zero 1
uuid_00000000000beafa:
	.ascii "Cons"
	.zero 1
uuid_00000000000beb19:
	.ascii ":"
	.zero 1
uuid_00000000000beb44:
	.ascii "File: SRC/infer-expr.lm Line: 28 Column: 11"
	.zero 1
uuid_00000000000beb75:
	.ascii "File: SRC/infer-expr.lm Line: 57 Column: 14"
	.zero 1
uuid_00000000000beb85:
	.ascii "gensym-label"
	.zero 1
uuid_00000000000beb98:
	.ascii "Label"
	.zero 1
uuid_00000000000beba2:
	.ascii "label"
	.zero 1
uuid_00000000000bebb5:
	.ascii "if"
	.zero 1
uuid_00000000000bec07:
	.ascii "Reg8"
	.zero 1
uuid_00000000000bec0b:
	.ascii "Reg16"
	.zero 1
uuid_00000000000bec0f:
	.ascii "Reg32"
	.zero 1
uuid_00000000000bec13:
	.ascii "Reg64"
	.zero 1
uuid_00000000000bec17:
	.ascii "File: SRC/infer-expr.lm Line: 89 Column: 11"
	.zero 1
uuid_00000000000bec21:
	.ascii "AsOnly"
	.zero 1
uuid_00000000000bec31:
	.ascii "sizeof"
	.zero 1
uuid_00000000000bec44:
	.ascii "U64"
	.zero 1
uuid_00000000000bec4e:
	.ascii "File: SRC/infer-expr.lm Line: 117 Column: 11"
	.zero 1
uuid_00000000000bec52:
	.ascii "scope"
	.zero 1
uuid_00000000000bec65:
	.ascii "open"
	.zero 1
uuid_00000000000bec78:
	.ascii "Array"
	.zero 1
uuid_00000000000becaf:
	.ascii "push-deref"
	.zero 1
uuid_00000000000becb0:
	.ascii "StackVariable"
	.zero 1
uuid_00000000000becb1:
	.ascii "File: SRC/infer-expr.lm Line: 129 Column: 11"
	.zero 1
uuid_00000000000becd9:
	.ascii "Variable Name Is Already Bound In Outer Scope"
	.zero 1
uuid_00000000000bece0:
	.ascii "Unable to infer type of expression"
	.zero 1
uuid_00000000000becf9:
	.ascii "File: SRC/infer-expr.lm Line: 153 Column: 11"
	.zero 1
uuid_00000000000becfd:
	.ascii "del"
	.zero 1
uuid_00000000000bed1f:
	.ascii "File: SRC/infer-expr.lm Line: 171 Column: 11"
	.zero 1
uuid_00000000000bed29:
	.ascii "Rc"
	.zero 1
uuid_00000000000bed2a:
	.ascii "inc"
	.zero 1
uuid_00000000000bed2b:
	.ascii "Tuple"
	.zero 1
uuid_00000000000bed38:
	.ascii "Constructor"
	.zero 1
uuid_00000000000bed39:
	.ascii "CaseNumber"
	.zero 1
uuid_00000000000bed3a:
	.ascii "Sized"
	.zero 1
uuid_00000000000bed3b:
	.ascii "FieldsSized"
	.zero 1
uuid_00000000000bed3c:
	.ascii "push"
	.zero 1
uuid_00000000000bed3d:
	.ascii "File: SRC/infer-expr.lm Line: 215 Column: 14"
	.zero 1
uuid_00000000000bed74:
	.ascii "File: SRC/infer-expr.lm Line: 233 Column: 14"
	.zero 1
uuid_00000000000bed7b:
	.ascii "Arrow"
	.zero 1
uuid_00000000000bed7c:
	.ascii "cdecl::return"
	.zero 1
uuid_00000000000beda4:
	.ascii "Unknown Term In Type Inference\n"
	.zero 1
uuid_00000000000beda5:
	.ascii "File: SRC/infer-expr.lm Line: 8 Column: 5"
	.zero 1
alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringStringCaseNumber1:
.zero 72
uuid_00000000000bee42:
	.ascii "File: SRC/alias.lm Line: 11 Column: 8"
	.zero 1
uuid_00000000000bee46:
	.ascii "File: SRC/alias.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000bee7a:
	.ascii "File: SRC/alias.lm Line: 31 Column: 8"
	.zero 1
uuid_00000000000bee7e:
	.ascii "File: SRC/alias.lm Line: 30 Column: 5"
	.zero 1
class_SB_exists_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0:
.zero 48
parameter_SB_is_SB_flat_SB_index_CL_BTreeEqU64TupleU64TupleU64StringBTreeEqU64TupleU64TupleU64StringCaseNumber0:
.zero 80
is_SB_special_SB_index_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0:
.zero 80
lone_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0:
.zero 48
tag_SB_is_SB_fragment_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0:
.zero 48
global_SB_symbol_SB_registry_CL_BTreeEqU64TupleTypeStringBTreeEqU64TupleTypeStringCaseNumber0:
.zero 80
uuid_00000000000beed1:
	.ascii "Hook"
	.zero 1
uuid_00000000000beed2:
	.ascii "Duplicate Global Symbol "
	.zero 1
uuid_00000000000beed3:
	.ascii " : "
	.zero 1
class_SB_to_SB_only_SB_child_CL_BTreeEqStringStringBTreeEqStringStringCaseNumber0:
.zero 48
tag_SB_to_SB_index_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0:
.zero 48
unknown_SB_index_SB_of_SB_tag_CL_U64:
.zero 8
class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0:
.zero 48
tag_SB_to_SB_class_SB_index_CL_BTreeEqTypeStringBTreeEqTypeStringCaseNumber0:
.zero 64
uuid_00000000000bef14:
	.ascii "Unexpected Class In index-class-of-tag: "
	.zero 1
uuid_00000000000bef15:
	.ascii "File: SRC/class-of-tag.lm Line: 6 Column: 5"
	.zero 1
class_SB_to_SB_yes_SB_index_CL_BTreeEqU64StringBTreeEqU64StringCaseNumber0:
.zero 48
tag_SB_to_SB_fields_SB_index_CL_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeStringCaseNumber0:
.zero 96
uuid_00000000000bef54:
	.ascii "Tag"
	.zero 1
uuid_00000000000bef70:
	.ascii "File: SRC/fields-of-tag.lm Line: 17 Column: 64"
	.zero 1
uuid_00000000000bef77:
	.ascii "Invalid Tag In fields-of-tag "
	.zero 1
uuid_00000000000bef78:
	.ascii "File: SRC/fields-of-tag.lm Line: 15 Column: 5"
	.zero 1
uuid_00000000000bef7f:
	.ascii "Fields"
	.zero 1
type_SB_constructors_SB_index_CL_BTreeEqTypeStringBTreeEqTypeStringCaseNumber0:
.zero 64
type_SB_complex_SB_fields_SB_index_CL_BTreeEqTupleTypeTypeStringBTreeEqTupleTypeTypeStringCaseNumber0:
.zero 96
uuid_00000000000bef97:
	.ascii "ERROR: set-type-fields\n"
	.zero 1
uuid_00000000000bef98:
	.ascii "File: SRC/type-complex-fields.lm Line: 6 Column: 5"
	.zero 1
uuid_00000000000befc0:
	.ascii "File: SRC/get-vararg-inner.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000befee:
	.ascii "File: SRC/is-constructor.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bf010:
	.ascii "File: SRC/is-constructor.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000bf02c:
	.ascii "File: SRC/is-constructor.lm Line: 28 Column: 5"
	.zero 1
uuid_00000000000bf093:
	.ascii "Field"
	.zero 1
uuid_00000000000bf0b2:
	.ascii "File: SRC/is-open.lm Line: 16 Column: 11"
	.zero 1
uuid_00000000000bf0b9:
	.ascii "File: SRC/is-open.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bf0f0:
	.ascii "File: SRC/is-parameterized.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bf11e:
	.ascii "File: SRC/is-sized.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bf13a:
	.ascii "Constant"
	.zero 1
uuid_00000000000bf171:
	.ascii "File: SRC/has-representation.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bf18a:
	.ascii "File: SRC/guess-representation.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000bf1a0:
	.ascii "LocalVariable"
	.zero 1
uuid_00000000000bf1bf:
	.ascii "File: SRC/deep-hash.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bf1d7:
	.ascii "File: SRC/deep-hash.lm Line: 26 Column: 5"
	.zero 1
uuid_00000000000bf1de:
	.ascii " != "
	.zero 1
uuid_00000000000bf1df:
	.ascii "Type Ascription Inequality"
	.zero 1
uuid_00000000000bf1f8:
	.ascii "File: SRC/typeof.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bf208:
	.ascii "Var"
	.zero 1
uuid_00000000000bf212:
	.ascii "Lit"
	.zero 1
uuid_00000000000bf25e:
	.ascii "App"
	.zero 1
uuid_00000000000bf26b:
	.ascii "Abs"
	.zero 1
uuid_00000000000bf26c:
	.ascii "File: SRC/to-s.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bf297:
	.ascii "File: SRC/p.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000bf2b0:
	.ascii "File: SRC/and.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bf2c9:
	.ascii "File: SRC/union.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bf2e2:
	.ascii "File: SRC/union.lm Line: 21 Column: 8"
	.zero 1
uuid_00000000000bf2fb:
	.ascii "program"
	.zero 1
uuid_00000000000bf2fc:
	.ascii "File: SRC/union.lm Line: 36 Column: 28"
	.zero 1
uuid_00000000000bf30f:
	.ascii "File: SRC/tag-of.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bf345:
	.ascii "File: SRC/can-unify.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bf361:
	.ascii "Meta"
	.zero 1
uuid_00000000000bf4d3:
	.ascii "GT"
	.zero 1
uuid_00000000000bf507:
	.ascii "File: SRC/can-unify.lm Line: 21 Column: 5"
	.zero 1
uuid_00000000000bf5aa:
	.ascii "File: SRC/unify.lm Line: 37 Column: 11"
	.zero 1
uuid_00000000000bf5ea:
	.ascii "File: SRC/unify.lm Line: 47 Column: 11"
	.zero 1
uuid_00000000000bf74a:
	.ascii "File: SRC/unify.lm Line: 12 Column: 5"
	.zero 1
uuid_00000000000bf7a1:
	.ascii "File: SRC/unify.lm Line: 130 Column: 5"
	.zero 1
uuid_00000000000bf7ce:
	.ascii "File: SRC/fields-of-type.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000bf883:
	.ascii "File: SRC/sizeof-type.lm Line: 25 Column: 11"
	.zero 1
uuid_00000000000bf896:
	.ascii "Unexpected Type sizeof-type "
	.zero 1
uuid_00000000000bf897:
	.ascii "File: SRC/sizeof-type.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bf8cb:
	.ascii "File: SRC/has-infinite.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000bf923:
	.ascii "File: SRC/has-infinite.lm Line: 26 Column: 5"
	.zero 1
uuid_00000000000bf944:
	.ascii "File: SRC/has-forward.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bf995:
	.ascii "File: SRC/has-forward.lm Line: 19 Column: 5"
	.zero 1
uuid_00000000000bf9a8:
	.ascii "AL"
	.zero 1
uuid_00000000000bf9a9:
	.ascii "BL"
	.zero 1
uuid_00000000000bf9aa:
	.ascii "CL"
	.zero 1
uuid_00000000000bf9ab:
	.ascii "DL"
	.zero 1
uuid_00000000000bf9ac:
	.ascii "SIL"
	.zero 1
uuid_00000000000bf9ad:
	.ascii "DIL"
	.zero 1
uuid_00000000000bf9ae:
	.ascii "BPL"
	.zero 1
uuid_00000000000bf9af:
	.ascii "SPL"
	.zero 1
uuid_00000000000bf9b0:
	.ascii "R8B"
	.zero 1
uuid_00000000000bf9b1:
	.ascii "R9B"
	.zero 1
uuid_00000000000bf9b2:
	.ascii "R10B"
	.zero 1
uuid_00000000000bf9b3:
	.ascii "R11B"
	.zero 1
uuid_00000000000bf9b4:
	.ascii "R12B"
	.zero 1
uuid_00000000000bf9b5:
	.ascii "R13B"
	.zero 1
uuid_00000000000bf9b6:
	.ascii "R14B"
	.zero 1
uuid_00000000000bf9b7:
	.ascii "R15B"
	.zero 1
uuid_00000000000bf9b8:
	.ascii "File: SRC/is-reg8.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bf9fe:
	.ascii "File: SRC/is-reg8.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000bfa08:
	.ascii "AX"
	.zero 1
uuid_00000000000bfa09:
	.ascii "BX"
	.zero 1
uuid_00000000000bfa0a:
	.ascii "CX"
	.zero 1
uuid_00000000000bfa0b:
	.ascii "DX"
	.zero 1
uuid_00000000000bfa0c:
	.ascii "SI"
	.zero 1
uuid_00000000000bfa0d:
	.ascii "DI"
	.zero 1
uuid_00000000000bfa0e:
	.ascii "BP"
	.zero 1
uuid_00000000000bfa0f:
	.ascii "SP"
	.zero 1
uuid_00000000000bfa10:
	.ascii "R8W"
	.zero 1
uuid_00000000000bfa11:
	.ascii "R9W"
	.zero 1
uuid_00000000000bfa12:
	.ascii "R10W"
	.zero 1
uuid_00000000000bfa13:
	.ascii "R11W"
	.zero 1
uuid_00000000000bfa14:
	.ascii "R12W"
	.zero 1
uuid_00000000000bfa15:
	.ascii "R13W"
	.zero 1
uuid_00000000000bfa16:
	.ascii "R14W"
	.zero 1
uuid_00000000000bfa17:
	.ascii "R15W"
	.zero 1
uuid_00000000000bfa18:
	.ascii "File: SRC/is-reg16.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bfa5e:
	.ascii "File: SRC/is-reg16.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000bfa68:
	.ascii "EAX"
	.zero 1
uuid_00000000000bfa69:
	.ascii "EBX"
	.zero 1
uuid_00000000000bfa6a:
	.ascii "ECX"
	.zero 1
uuid_00000000000bfa6b:
	.ascii "EDX"
	.zero 1
uuid_00000000000bfa6c:
	.ascii "ESI"
	.zero 1
uuid_00000000000bfa6d:
	.ascii "EDI"
	.zero 1
uuid_00000000000bfa6e:
	.ascii "EBP"
	.zero 1
uuid_00000000000bfa6f:
	.ascii "ESP"
	.zero 1
uuid_00000000000bfa70:
	.ascii "R8D"
	.zero 1
uuid_00000000000bfa71:
	.ascii "R9D"
	.zero 1
uuid_00000000000bfa72:
	.ascii "R10D"
	.zero 1
uuid_00000000000bfa73:
	.ascii "R11D"
	.zero 1
uuid_00000000000bfa74:
	.ascii "R12D"
	.zero 1
uuid_00000000000bfa75:
	.ascii "R13D"
	.zero 1
uuid_00000000000bfa76:
	.ascii "R14D"
	.zero 1
uuid_00000000000bfa77:
	.ascii "R15D"
	.zero 1
uuid_00000000000bfa78:
	.ascii "File: SRC/is-reg32.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bfabe:
	.ascii "File: SRC/is-reg32.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000bfac8:
	.ascii "RAX"
	.zero 1
uuid_00000000000bfac9:
	.ascii "RBX"
	.zero 1
uuid_00000000000bfaca:
	.ascii "RCX"
	.zero 1
uuid_00000000000bfacb:
	.ascii "RDX"
	.zero 1
uuid_00000000000bfacc:
	.ascii "RSI"
	.zero 1
uuid_00000000000bfacd:
	.ascii "RDI"
	.zero 1
uuid_00000000000bface:
	.ascii "RBP"
	.zero 1
uuid_00000000000bfacf:
	.ascii "RSP"
	.zero 1
uuid_00000000000bfad0:
	.ascii "R8"
	.zero 1
uuid_00000000000bfad1:
	.ascii "R9"
	.zero 1
uuid_00000000000bfad2:
	.ascii "R10"
	.zero 1
uuid_00000000000bfad3:
	.ascii "R11"
	.zero 1
uuid_00000000000bfad4:
	.ascii "R12"
	.zero 1
uuid_00000000000bfad5:
	.ascii "R13"
	.zero 1
uuid_00000000000bfad6:
	.ascii "R14"
	.zero 1
uuid_00000000000bfad7:
	.ascii "R15"
	.zero 1
uuid_00000000000bfad8:
	.ascii "File: SRC/is-reg64.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bfb1e:
	.ascii "File: SRC/is-reg64.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000bfb34:
	.ascii "File: SRC/with-tag.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000bfb5c:
	.ascii "File: SRC/with-size.lm Line: 8 Column: 5"
	.zero 1
uuid_00000000000bfb6e:
	.ascii "File: SRC/with-size.lm Line: 19 Column: 5"
	.zero 1
uuid_00000000000bfbb4:
	.ascii "File: SRC/with-size.lm Line: 30 Column: 5"
	.zero 1
uuid_00000000000bfbd9:
	.ascii "File: SRC/with-fields.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000bfc04:
	.ascii "File: SRC/without-tag.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000bfc32:
	.ascii "File: SRC/without-tag.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000bfc50:
	.ascii "File: SRC/without-tag.lm Line: 27 Column: 5"
	.zero 1
uuid_00000000000bfc78:
	.ascii "File: SRC/without-constructor.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000bfc90:
	.ascii "File: SRC/without-representation.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000bfcb2:
	.ascii "Literal"
	.zero 1
uuid_00000000000bfd0a:
	.ascii "File: SRC/without-representation.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000bfd3d:
	.ascii "File: SRC/without-size-unless-class.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000bfd65:
	.ascii "File: SRC/without-size-unless-class.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000bfda5:
	.ascii "File: SRC/without-size-unless-class.lm Line: 46 Column: 5"
	.zero 1
uuid_00000000000bfdc3:
	.ascii "File: SRC/without-size.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000bfdfd:
	.ascii "File: SRC/without-size.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000bfe28:
	.ascii "File: SRC/with-only-tag.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bfe50:
	.ascii "File: SRC/with-only-class.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bfe65:
	.ascii "File: SRC/with-only-representation.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bfede:
	.ascii "File: SRC/with-only-representation.lm Line: 19 Column: 5"
	.zero 1
uuid_00000000000bff15:
	.ascii "File: SRC/normalize.lm Line: 12 Column: 5"
	.zero 1
uuid_00000000000bff4f:
	.ascii "Malformed Type Definition"
	.zero 1
uuid_00000000000bff50:
	.ascii "File: SRC/type-of-s.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000bff78:
	.ascii "Mark Field "
	.zero 1
uuid_00000000000bff79:
	.ascii "File: SRC/type-of-s-with-fields.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000bff9b:
	.ascii "File: SRC/type-of-s-with-fields.lm Line: 25 Column: 11"
	.zero 1
uuid_00000000000bffbd:
	.ascii "File: SRC/type-of-s-with-fields.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0015:
	.ascii "Unknown LHS"
	.zero 1
uuid_00000000000c0016:
	.ascii "File: SRC/typeof-lhs.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0046:
	.ascii "File: SRC/cons-head.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0068:
	.ascii "File: SRC/cons-tail.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0078:
	.ascii "File: SRC/parameter-number.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0095:
	.ascii "File: SRC/parameter-number.lm Line: 16 Column: 5"
	.zero 1
uuid_00000000000c009f:
	.ascii "Function Application Yielded No Matches\n"
	.zero 1
uuid_00000000000c00a0:
	.ascii "\nWith Argument : "
	.zero 1
uuid_00000000000c00a1:
	.ascii "Options: "
	.zero 1
uuid_00000000000c00a5:
	.ascii "Function Application Yielded An Irreducible Plurality Of Matches\n"
	.zero 1
uuid_00000000000c00a6:
	.ascii "With Argument "
	.zero 1
uuid_00000000000c00a7:
	.ascii "Matched "
	.zero 1
uuid_00000000000c00b1:
	.ascii "File: SRC/apply.lm Line: 30 Column: 11"
	.zero 1
uuid_00000000000c00df:
	.ascii "Application Did Not Close Before Specialization:\n"
	.zero 1
uuid_00000000000c00e0:
	.ascii "Function "
	.zero 1
uuid_00000000000c00e1:
	.ascii "Argument "
	.zero 1
uuid_00000000000c00e8:
	.ascii "Function Not Simple Arrow: "
	.zero 1
uuid_00000000000c00e9:
	.ascii "File: SRC/apply.lm Line: 42 Column: 8"
	.zero 1
uuid_00000000000c00f0:
	.ascii "File: SRC/apply.lm Line: 41 Column: 5"
	.zero 1
uuid_00000000000c011e:
	.ascii "File: SRC/apply.lm Line: 81 Column: 33"
	.zero 1
uuid_00000000000c0158:
	.ascii "File: SRC/apply.lm Line: 72 Column: 5"
	.zero 1
uuid_00000000000c01a0:
	.ascii "File: SRC/apply-plural.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c01ba:
	.ascii "File: SRC/reduce-plural.lm Line: 5 Column: 41"
	.zero 1
uuid_00000000000c01dc:
	.ascii "File: SRC/reduce-plural.lm Line: 19 Column: 11"
	.zero 1
uuid_00000000000c01e6:
	.ascii "File: SRC/reduce-plural.lm Line: 15 Column: 27"
	.zero 1
uuid_00000000000c0205:
	.ascii "File: SRC/reduce-plural.lm Line: 37 Column: 11"
	.zero 1
uuid_00000000000c020f:
	.ascii "File: SRC/reduce-plural.lm Line: 33 Column: 27"
	.zero 1
uuid_00000000000c022b:
	.ascii "Blob"
	.zero 1
uuid_00000000000c0248:
	.ascii "File: SRC/try-specialize.lm Line: 17 Column: 20"
	.zero 1
uuid_00000000000c0258:
	.ascii "File: SRC/try-specialize.lm Line: 5 Column: 35"
	.zero 1
uuid_00000000000c0292:
	.ascii "File: SRC/unify-hint.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c02a7:
	.ascii "File: SRC/unify-hint.lm Line: 24 Column: 5"
	.zero 1
uuid_00000000000c02b1:
	.ascii "|"
	.zero 1
uuid_00000000000c02e8:
	.ascii "File: SRC/infer-type-definition.lm Line: 18 Column: 14"
	.zero 1
uuid_00000000000c02fb:
	.ascii "File: SRC/infer-type-definition.lm Line: 25 Column: 17"
	.zero 1
uuid_00000000000c0305:
	.ascii "File: SRC/infer-type-definition.lm Line: 7 Column: 5"
	.zero 1
uuid_00000000000c0317:
	.ascii "File: SRC/arity.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0327:
	.ascii "File: SRC/arity.lm Line: 16 Column: 5"
	.zero 1
uuid_00000000000c0349:
	.ascii "File: SRC/cons-arity.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0371:
	.ascii "File: SRC/implicit-tail.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c0378:
	.ascii "Unknown Referenced Variable"
	.zero 1
uuid_00000000000c0397:
	.ascii "File: SRC/typeof-var-raw.lm Line: 4 Column: 28"
	.zero 1
types_SB_have_SB_changed_CL_U8:
.zero 8
uuid_00000000000c03aa:
	.ascii "File: SRC/typecheck.lm Line: 7 Column: 25"
	.zero 1
uuid_00000000000c03ba:
	.ascii "File: SRC/typecheck.lm Line: 14 Column: 42"
	.zero 1
uuid_00000000000c03e1:
	.ascii "File: SRC/typecheck.lm Line: 22 Column: 43"
	.zero 1
uuid_00000000000c0424:
	.ascii "File: SRC/substitute.lm Line: 4 Column: 27"
	.zero 1
uuid_00000000000c043f:
	.ascii "File: SRC/substitute.lm Line: 27 Column: 5"
	.zero 1
uuid_00000000000c045e:
	.ascii "File: SRC/substitute.lm Line: 44 Column: 34"
	.zero 1
uuid_00000000000c047a:
	.ascii "File: SRC/substitute.lm Line: 41 Column: 5"
	.zero 1
uuid_00000000000c0492:
	.ascii "File: SRC/substitute.lm Line: 73 Column: 5"
	.zero 1
uuid_00000000000c04db:
	.ascii "File: SRC/substitute.lm Line: 90 Column: 34"
	.zero 1
uuid_00000000000c04fd:
	.ascii "File: SRC/substitute.lm Line: 87 Column: 5"
	.zero 1
uuid_00000000000c0582:
	.ascii "Unexpected Substitute LHS"
	.zero 1
uuid_00000000000c0583:
	.ascii "File: SRC/substitute.lm Line: 128 Column: 5"
	.zero 1
uuid_00000000000c05d2:
	.ascii "File: SRC/substitute.lm Line: 168 Column: 34"
	.zero 1
uuid_00000000000c0618:
	.ascii "File: SRC/substitute.lm Line: 187 Column: 34"
	.zero 1
uuid_00000000000c066a:
	.ascii "Unexpected Substitution Term:"
	.zero 1
uuid_00000000000c066b:
	.ascii "File: SRC/substitute.lm Line: 159 Column: 5"
	.zero 1
uuid_00000000000c06a8:
	.ascii "File: SRC/substitute.lm Line: 247 Column: 34"
	.zero 1
uuid_00000000000c06b8:
	.ascii "File: SRC/substitute.lm Line: 243 Column: 5"
	.zero 1
uuid_00000000000c06e6:
	.ascii "File: SRC/specialize.lm Line: 14 Column: 20"
	.zero 1
uuid_00000000000c06f3:
	.ascii "File: SRC/specialize.lm Line: 7 Column: 38"
	.zero 1
uuid_00000000000c0712:
	.ascii "File: SRC/mark-constructor-flat-parameters.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c0743:
	.ascii "File: SRC/mark-constructor-flat-parameters.lm Line: 16 Column: 5"
	.zero 1
uuid_00000000000c076b:
	.ascii "Size Of Type Cannot Be Determined Due To Forward Reference: "
	.zero 1
uuid_00000000000c076f:
	.ascii "Size Of Type Is Infinite: "
	.zero 1
uuid_00000000000c0773:
	.ascii "File: SRC/infer-type-constructor.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0798:
	.ascii "File: SRC/infer-global-context.lm Line: 9 Column: 11"
	.zero 1
uuid_00000000000c07e4:
	.ascii "Hooks Must Not Return Values."
	.zero 1
uuid_00000000000c0827:
	.ascii "Global Bindings Must Be Ascripted"
	.zero 1
uuid_00000000000c0828:
	.ascii "File: SRC/infer-global-context.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0841:
	.ascii "File: SRC/assert-well-typed.lm Line: 3 Column: 26"
	.zero 1
uuid_00000000000c090e:
	.ascii "set"
	.zero 1
uuid_00000000000c098a:
	.ascii "Unknown Term In Assert Well Typed "
	.zero 1
uuid_00000000000c098b:
	.ascii "File: SRC/assert-well-typed.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000c0a2b:
	.ascii "Invalid LHS"
	.zero 1
uuid_00000000000c0a2c:
	.ascii "File: SRC/infer-ctx.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c0a44:
	.ascii "File: SRC/infer-tctx.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c0a63:
	.ascii "File: SRC/infer-tctx.lm Line: 15 Column: 5"
	.zero 1
uuid_00000000000c0a70:
	.ascii "	mov $60, %rax\n"
	.zero 1
uuid_00000000000c0a71:
	.ascii "	mov $0, %rdi\n"
	.zero 1
uuid_00000000000c0a72:
	.ascii "	syscall\n"
	.zero 1
uuid_00000000000c0a73:
	.ascii ".data\n"
	.zero 1
uuid_00000000000c0a74:
	.ascii ".global _start\n"
	.zero 1
uuid_00000000000c0a75:
	.ascii ".text\n"
	.zero 1
uuid_00000000000c0a76:
	.ascii "_start:\n"
	.zero 1
uuid_00000000000c0a77:
	.ascii "	mov %rsp,%rbp\n"
	.zero 1
uuid_00000000000c0a78:
	.ascii "	mov %rbp,%rsp\n"
	.zero 1
uuid_00000000000c0a7c:
	.ascii "	popq %r8\n"
	.zero 1
uuid_00000000000c0a7d:
	.ascii "	movq %rsp, %r9\n"
	.zero 1
uuid_00000000000c0a81:
	.ascii "	push %rbp\n"
	.zero 1
uuid_00000000000c0a82:
	.ascii "	mov %rsp, %rbp\n"
	.zero 1
uuid_00000000000c0a83:
	.ascii "	pushq %r8\n"
	.zero 1
uuid_00000000000c0a84:
	.ascii "	pushq %r9\n"
	.zero 1
uuid_00000000000c0a88:
	.ascii "	call main\n"
	.zero 1
uuid_00000000000c0a89:
	.ascii "	mov %rbp, %rsp\n"
	.zero 1
uuid_00000000000c0a8a:
	.ascii "	pop %rbp\n"
	.zero 1
uuid_00000000000c0a8e:
	.ascii "File: SRC/compile.lm Line: 2 Column: 20"
	.zero 1
uuid_00000000000c0ad1:
	.ascii "fragment-type"
	.zero 1
uuid_00000000000c0ad2:
	.ascii "Function"
	.zero 1
uuid_00000000000c0ad3:
	.ascii "File: SRC/compile-blob.lm Line: 10 Column: 11"
	.zero 1
uuid_00000000000c0ae3:
	.ascii "File: SRC/compile-blob.lm Line: 4 Column: 39"
	.zero 1
uuid_00000000000c0b38:
	.ascii "expression"
	.zero 1
uuid_00000000000c0b39:
	.ascii "File: SRC/compile-blob.lm Line: 31 Column: 39"
	.zero 1
uuid_00000000000c0b67:
	.ascii "main"
	.zero 1
uuid_00000000000c0b6b:
	.ascii "Global"
	.zero 1
uuid_00000000000c0b90:
	.ascii "File: SRC/compile-gnu.lm Line: 4 Column: 39"
	.zero 1
uuid_00000000000c0bac:
	.ascii "File: SRC/compile-program-ordered.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0bdd:
	.ascii "File: SRC/compile-program-ordered.lm Line: 11 Column: 5"
	.zero 1
uuid_00000000000c0c05:
	.ascii "File: SRC/fragment-context::lookup.lm Line: 11 Column: 27"
	.zero 1
uuid_00000000000c0c0c:
	.ascii "Context::lookup "
	.zero 1
uuid_00000000000c0c0d:
	.ascii "\nCandidates:\n"
	.zero 1
uuid_00000000000c0c20:
	.ascii "File: SRC/fragment-context::lookup.lm Line: 43 Column: 30"
	.zero 1
uuid_00000000000c0c27:
	.ascii "Context::lookup Could Not Find Symbol"
	.zero 1
uuid_00000000000c0c67:
	.ascii "File: SRC/fragment-context::lookups.lm Line: 10 Column: 27"
	.zero 1
uuid_00000000000c0c6e:
	.ascii "Context::lookups "
	.zero 1
uuid_00000000000c0c84:
	.ascii "File: SRC/fragment-context::lookup-vararg.lm Line: 4 Column: 27"
	.zero 1
uuid_00000000000c0cdc:
	.ascii "File: SRC/with-location.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0d07:
	.ascii "File: SRC/with-location.lm Line: 57 Column: 5"
	.zero 1
uuid_00000000000c0d53:
	.ascii "File: SRC/without-location.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0d7e:
	.ascii "File: SRC/without-location.lm Line: 52 Column: 5"
	.zero 1
uuid_00000000000c0d8e:
	.ascii "File: SRC/with-key.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c0d92:
	.ascii "Unknown"
	.zero 1
uuid_00000000000c0de4:
	.ascii "File: SRC/location-of.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0e09:
	.ascii "File: SRC/unique.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c0e19:
	.ascii "File: SRC/print-verbose.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c0e2c:
	.ascii "File: SRC/non-zero.lm Line: 4 Column: 5"
	.zero 1
already_SB_tokenized_CL_ListStringListStringCaseNumber1:
.zero 24
uuid_00000000000c0e42:
	.ascii "File: SRC/tokenize.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c0e50:
	.ascii "File: SRC/tokenize.lm Line: 25 Column: 8"
	.zero 1
uuid_00000000000c0eb5:
	.ascii "File: SRC/tokenize.lm Line: 35 Column: 8"
	.zero 1
uuid_00000000000c0edf:
	.ascii "Hanging Parentheses In File: "
	.zero 1
uuid_00000000000c0ee0:
	.ascii " Count: "
	.zero 1
uuid_00000000000c0ef6:
	.ascii "File: SRC/is-nil.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0f09:
	.ascii "File: SRC/is-seq.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0f22:
	.ascii "File: SRC/is-arrow.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0f3e:
	.ascii "File: SRC/is-hook.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0f5a:
	.ascii "File: SRC/is-blob.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0f76:
	.ascii "File: SRC/is-cons.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0f89:
	.ascii "ImpureCtx"
	.zero 1
uuid_00000000000c0f93:
	.ascii "File: SRC/is-impure-ctx.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0fa6:
	.ascii "String"
	.zero 1
uuid_00000000000c0fb0:
	.ascii "File: SRC/is-string.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0fc3:
	.ascii "OntoStack"
	.zero 1
uuid_00000000000c0fdf:
	.ascii "File: SRC/is-onto-stack.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c0ff2:
	.ascii "ImpureOffset"
	.zero 1
uuid_00000000000c100e:
	.ascii "File: SRC/is-impure-offset.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c1021:
	.ascii "BranchConditional"
	.zero 1
uuid_00000000000c102b:
	.ascii "File: SRC/is-branchconditional.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c103e:
	.ascii "File: SRC/plus.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c1054:
	.ascii "File: SRC/print.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c1064:
	.ascii " = "
	.zero 1
uuid_00000000000c1065:
	.ascii ";\n"
	.zero 1
uuid_00000000000c1066:
	.ascii "File: SRC/print.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000c107f:
	.ascii "File: SRC/print.lm Line: 25 Column: 5"
	.zero 1
uuid_00000000000c1089:
	.ascii "EOF"
	.zero 1
uuid_00000000000c10b1:
	.ascii "type "
	.zero 1
uuid_00000000000c10bb:
	.ascii " := "
	.zero 1
uuid_00000000000c10da:
	.ascii "File: SRC/print.lm Line: 40 Column: 5"
	.zero 1
uuid_00000000000c10fc:
	.ascii "Fragment Context:\n"
	.zero 1
uuid_00000000000c110c:
	.ascii "File: SRC/print.lm Line: 84 Column: 27"
	.zero 1
uuid_00000000000c1128:
	.ascii "Fragment\n"
	.zero 1
uuid_00000000000c1129:
	.ascii "	Offset = "
	.zero 1
uuid_00000000000c1136:
	.ascii "File: SRC/print.lm Line: 99 Column: 33"
	.zero 1
uuid_00000000000c113d:
	.ascii "File: SRC/print.lm Line: 94 Column: 5"
	.zero 1
uuid_00000000000c114a:
	.ascii "File: SRC/print.lm Line: 111 Column: 5"
	.zero 1
uuid_00000000000c115d:
	.ascii "In File "
	.zero 1
uuid_00000000000c115e:
	.ascii " Line "
	.zero 1
uuid_00000000000c115f:
	.ascii " Column "
	.zero 1
uuid_00000000000c1160:
	.ascii "File: SRC/print.lm Line: 122 Column: 5"
	.zero 1
uuid_00000000000c117c:
	.ascii " +\n"
	.zero 1
uuid_00000000000c117d:
	.ascii " + "
	.zero 1
uuid_00000000000c118a:
	.ascii "File: SRC/print.lm Line: 135 Column: 29"
	.zero 1
uuid_00000000000c11ae:
	.ascii "File: SRC/print.lm Line: 159 Column: 35"
	.zero 1
uuid_00000000000c11c1:
	.ascii "File: SRC/reverse.lm Line: 4 Column: 26"
	.zero 1
uuid_00000000000c11d7:
	.ascii "(Variable "
	.zero 1
uuid_00000000000c11e1:
	.ascii "(Literal "
	.zero 1
uuid_00000000000c11f1:
	.ascii "(Type ("
	.zero 1
uuid_00000000000c11f2:
	.ascii "))"
	.zero 1
uuid_00000000000c11fc:
	.ascii "(Global ("
	.zero 1
uuid_00000000000c1206:
	.ascii "(App ("
	.zero 1
uuid_00000000000c1213:
	.ascii "(Lambda ("
	.zero 1
uuid_00000000000c1226:
	.ascii "File: SRC/serialize-ast.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c125f:
	.ascii "File: SRC/serialize-ast.lm Line: 59 Column: 43"
	.zero 1
uuid_00000000000c1269:
	.ascii "(Variable ?)"
	.zero 1
uuid_00000000000c1279:
	.ascii "(Literal And) "
	.zero 1
uuid_00000000000c128c:
	.ascii ") "
	.zero 1
uuid_00000000000c128d:
	.ascii "File: SRC/serialize-ast.lm Line: 72 Column: 37"
	.zero 1
uuid_00000000000c12b5:
	.ascii "File: SRC/slot.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c12d4:
	.ascii "File: SRC/slot.lm Line: 30 Column: 14"
	.zero 1
uuid_00000000000c12ea:
	.ascii "File: SRC/slot.lm Line: 26 Column: 5"
	.zero 1
uuid_SB_counter_CL_U64:
.zero 8
uuid_00000000000c12f4:
	.ascii "uuid_"
	.zero 1
uuid_00000000000c1307:
	.ascii "File: SRC/var-name-if-var.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c133f:
	.ascii "File: SRC/parse-lambda.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c1363:
	.ascii "File: SRC/parse-lambda.lm Line: 16 Column: 38"
	.zero 1
uuid_00000000000c1370:
	.ascii "File: SRC/parse-lambda.lm Line: 14 Column: 5"
	.zero 1
uuid_00000000000c1392:
	.ascii "File: SRC/parse-lambda.lm Line: 33 Column: 14"
	.zero 1
uuid_00000000000c139f:
	.ascii "Expected Dot For Lambda Body\n"
	.zero 1
uuid_00000000000c13a9:
	.ascii "File: SRC/parse-lambda.lm Line: 30 Column: 8"
	.zero 1
uuid_00000000000c13f3:
	.ascii "File: SRC/parse-many-expressions.lm Line: 18 Column: 14"
	.zero 1
uuid_00000000000c13f7:
	.ascii "File: SRC/parse-many-expressions.lm Line: 6 Column: 8"
	.zero 1
uuid_00000000000c1426:
	.ascii "File: SRC/parse-one-expression.lm Line: 12 Column: 11"
	.zero 1
uuid_00000000000c143f:
	.ascii "Unexpected Closing Parentheses"
	.zero 1
uuid_00000000000c145e:
	.ascii "File: SRC/parse-one-expression.lm Line: 24 Column: 11"
	.zero 1
uuid_00000000000c148c:
	.ascii "File: SRC/parse-one-expression.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c14b6:
	.ascii "macro"
	.zero 1
uuid_00000000000c14e7:
	.ascii "File: SRC/parse-toplevel.lm Line: 18 Column: 26"
	.zero 1
uuid_00000000000c14ee:
	.ascii "File: SRC/parse-toplevel.lm Line: 14 Column: 20"
	.zero 1
uuid_00000000000c14f2:
	.ascii "File: SRC/parse-toplevel.lm Line: 11 Column: 14"
	.zero 1
uuid_00000000000c14f6:
	.ascii "meta"
	.zero 1
uuid_00000000000c1515:
	.ascii "File: SRC/parse-toplevel.lm Line: 36 Column: 14"
	.zero 1
uuid_00000000000c1519:
	.ascii "type"
	.zero 1
uuid_00000000000c152f:
	.ascii "fragment"
	.zero 1
uuid_00000000000c1557:
	.ascii "File: SRC/parse-toplevel.lm Line: 50 Column: 34"
	.zero 1
uuid_00000000000c155b:
	.ascii "File: SRC/parse-toplevel.lm Line: 48 Column: 14"
	.zero 1
uuid_00000000000c1586:
	.ascii "File: SRC/parse-toplevel.lm Line: 70 Column: 34"
	.zero 1
uuid_00000000000c158a:
	.ascii "File: SRC/parse-toplevel.lm Line: 68 Column: 14"
	.zero 1
uuid_00000000000c15b8:
	.ascii "suffix"
	.zero 1
uuid_00000000000c15ce:
	.ascii "atom"
	.zero 1
uuid_00000000000c1616:
	.ascii "size"
	.zero 1
uuid_00000000000c1641:
	.ascii "import"
	.zero 1
uuid_00000000000c1675:
	.ascii "zero"
	.zero 1
uuid_00000000000c168b:
	.ascii "non-zero"
	.zero 1
uuid_00000000000c168c:
	.ascii "t"
	.zero 1
uuid_00000000000c168d:
	.ascii "!="
	.zero 1
uuid_00000000000c168e:
	.ascii ".0"
	.zero 1
uuid_00000000000c168f:
	.ascii ":="
	.zero 1
uuid_00000000000c16b7:
	.ascii "File: SRC/parse-toplevel.lm Line: 150 Column: 14"
	.zero 1
uuid_00000000000c16c4:
	.ascii "File: SRC/parse-toplevel.lm Line: 162 Column: 14"
	.zero 1
uuid_00000000000c16c8:
	.ascii "File: SRC/parse-toplevel.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000c16ef:
	.ascii "File: SRC/parse-type-comma-sep.lm Line: 7 Column: 8"
	.zero 1
uuid_00000000000c1722:
	.ascii "File: SRC/parse-type-single.lm Line: 9 Column: 11"
	.zero 1
uuid_00000000000c172c:
	.ascii "File: SRC/parse-type-single.lm Line: 59 Column: 11"
	.zero 1
uuid_00000000000c174e:
	.ascii "Unexpected Parameterized Type: "
	.zero 1
uuid_00000000000c174f:
	.ascii "File: SRC/parse-type-single.lm Line: 86 Column: 25"
	.zero 1
uuid_00000000000c1759:
	.ascii "File: SRC/parse-type-single.lm Line: 68 Column: 14"
	.zero 1
uuid_00000000000c1779:
	.ascii "File: SRC/parse-type.lm Line: 12 Column: 8"
	.zero 1
uuid_00000000000c1792:
	.ascii "File: SRC/parse-type.lm Line: 22 Column: 14"
	.zero 1
uuid_00000000000c17ab:
	.ascii "File: SRC/parse-type.lm Line: 51 Column: 8"
	.zero 1
uuid_00000000000c17f9:
	.ascii "File: SRC/remove-parens.lm Line: 7 Column: 33"
	.zero 1
uuid_00000000000c1803:
	.ascii "File: SRC/remove-parens.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c1846:
	.ascii "File: SRC/take-one-expr.lm Line: 19 Column: 11"
	.zero 1
uuid_00000000000c1850:
	.ascii "File: SRC/take-one-expr.lm Line: 6 Column: 30"
	.zero 1
uuid_00000000000c185a:
	.ascii "src"
	.zero 1
cstring_SB_cache_CL_StringStringListStringStringListCaseNumber1:
.zero 32
uuid_00000000000c186a:
	.ascii "File: SRC/compile-declare-cstring.lm Line: 10 Column: 32"
	.zero 1
uuid_00000000000c1871:
	.ascii ":\n	.ascii \""
	.zero 1
uuid_00000000000c1872:
	.ascii "\"\n	.zero 1\n"
	.zero 1
uuid_00000000000c18d9:
	.ascii "File: SRC/compile-destructure-args.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c1901:
	.ascii "True"
	.zero 1
uuid_00000000000c1902:
	.ascii "False"
	.zero 1
uuid_00000000000c1903:
	.ascii "\\t"
	.zero 1
uuid_00000000000c1904:
	.ascii "10"
	.zero 1
uuid_00000000000c1905:
	.ascii "\\s"
	.zero 1
uuid_00000000000c1906:
	.ascii "32"
	.zero 1
uuid_00000000000c1907:
	.ascii "\\o"
	.zero 1
uuid_00000000000c1908:
	.ascii "35"
	.zero 1
uuid_00000000000c1909:
	.ascii "\\`"
	.zero 1
uuid_00000000000c190a:
	.ascii "39"
	.zero 1
uuid_00000000000c190b:
	.ascii "\\["
	.zero 1
uuid_00000000000c190c:
	.ascii "40"
	.zero 1
uuid_00000000000c190d:
	.ascii "\\]"
	.zero 1
uuid_00000000000c190e:
	.ascii "41"
	.zero 1
uuid_00000000000c190f:
	.ascii "\\:"
	.zero 1
uuid_00000000000c1910:
	.ascii "59"
	.zero 1
uuid_00000000000c1911:
	.ascii "File: SRC/compile-expr-direct.lm Line: 36 Column: 20"
	.zero 1
uuid_00000000000c19ed:
	.ascii "File: SRC/compile-expr-direct.lm Line: 81 Column: 11"
	.zero 1
uuid_00000000000c1a54:
	.ascii "into-branch-conditional"
	.zero 1
uuid_00000000000c1a55:
	.ascii "rsp-offset"
	.zero 1
uuid_00000000000c1a56:
	.ascii "end-offset"
	.zero 1
uuid_00000000000c1a57:
	.ascii "return-size"
	.zero 1
uuid_00000000000c1a58:
	.ascii "ImplicitContext"
	.zero 1
uuid_00000000000c1a59:
	.ascii "ictx"
	.zero 1
uuid_00000000000c1a5a:
	.ascii "primitive::if"
	.zero 1
uuid_00000000000c1a94:
	.ascii "File: SRC/compile-expr-direct.lm Line: 166 Column: 11"
	.zero 1
uuid_00000000000c1a98:
	.ascii "unframe"
	.zero 1
uuid_00000000000c1a99:
	.ascii "	add $"
	.zero 1
uuid_00000000000c1a9a:
	.ascii ", %rsp\n"
	.zero 1
uuid_00000000000c1b0a:
	.ascii "File: SRC/compile-expr-direct.lm Line: 196 Column: 14"
	.zero 1
uuid_00000000000c1b1d:
	.ascii "File: SRC/compile-expr-direct.lm Line: 6 Column: 5"
	.zero 1
uuid_00000000000c1b48:
	.ascii "File: SRC/compile-expr.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c1b7c:
	.ascii "File: SRC/compile-fragment-args.lm Line: 7 Column: 11"
	.zero 1
uuid_00000000000c1b83:
	.ascii "File: SRC/compile-fragment-args.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c1b96:
	.ascii "cdecl::args-size"
	.zero 1
uuid_00000000000c1b97:
	.ascii "File: SRC/compile-global.lm Line: 22 Column: 14"
	.zero 1
uuid_00000000000c1ba1:
	.ascii "_COUNTER"
	.zero 1
uuid_00000000000c1ba2:
	.ascii ":\n.zero 8\n"
	.zero 1
uuid_00000000000c1ba3:
	.ascii "_LABEL:\n	.ascii	\"\\\\t"
	.zero 1
uuid_00000000000c1ba4:
	.ascii "\\\\n\"\n	.zero 1\n"
	.zero 1
uuid_00000000000c1ba5:
	.ascii "	mov $"
	.zero 1
uuid_00000000000c1ba6:
	.ascii ", %RBX\n	mov 0(%RBX), %RAX\n"
	.zero 1
uuid_00000000000c1ba7:
	.ascii "	inc %RAX\n	mov %RAX, 0(%RBX)\n"
	.zero 1
uuid_00000000000c1ba8:
	.ascii "	push %RBP\n	mov %RSP, %RBP\n	push %RAX\n	call print_CL_ArrowNilU64\n	mov %RBP, %RSP\n	pop %RBP\n"
	.zero 1
uuid_00000000000c1ba9:
	.ascii "	push %RBP\n	mov %RSP, %RBP\n	push $"
	.zero 1
uuid_00000000000c1baa:
	.ascii "_LABEL\n"
	.zero 1
uuid_00000000000c1bab:
	.ascii "	call print_CL_ArrowNilString\n	mov %RBP, %RSP\n	pop %RBP\n"
	.zero 1
uuid_00000000000c1baf:
	.ascii "frame"
	.zero 1
uuid_00000000000c1bb0:
	.ascii "	sub $"
	.zero 1
uuid_00000000000c1bb1:
	.ascii "	ret\n"
	.zero 1
uuid_00000000000c1bd6:
	.ascii ":\n.zero "
	.zero 1
uuid_00000000000c1bd7:
	.ascii "File: SRC/compile-global.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c1bea:
	.ascii "File: SRC/compile-maybe-push-stack.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c1c1b:
	.ascii "File: SRC/compile-push-rvalue.lm Line: 11 Column: 11"
	.zero 1
uuid_00000000000c1c28:
	.ascii "File: SRC/compile-push-rvalue.lm Line: 8 Column: 5"
	.zero 1
uuid_00000000000c1c35:
	.ascii "FunctionArguments"
	.zero 1
uuid_00000000000c1c36:
	.ascii "function-id"
	.zero 1
uuid_00000000000c1c37:
	.ascii "function-name"
	.zero 1
uuid_00000000000c1c38:
	.ascii "function-type"
	.zero 1
uuid_00000000000c1c39:
	.ascii "args-size"
	.zero 1
uuid_00000000000c1c3a:
	.ascii "used"
	.zero 1
uuid_00000000000c1c3b:
	.ascii "args"
	.zero 1
uuid_00000000000c1c3c:
	.ascii "primitive::call"
	.zero 1
uuid_00000000000c1c4f:
	.ascii "File: SRC/compile-stack-calls.lm Line: 7 Column: 5"
	.zero 1
uuid_00000000000c1c71:
	.ascii "File: SRC/translate-local-variables.lm Line: 11 Column: 17"
	.zero 1
uuid_00000000000c1c75:
	.ascii "File: SRC/translate-local-variables.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000c1c7c:
	.ascii "File: SRC/translate-local-variables.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c1c8f:
	.ascii "L"
	.zero 1
uuid_00000000000c1c93:
	.ascii "File: SRC/cc-blob.lm Line: 7 Column: 5"
	.zero 1
uuid_00000000000c1ca3:
	.ascii "File: SRC/cc-blob.lm Line: 30 Column: 5"
	.zero 1
uuid_00000000000c1cf8:
	.ascii "File: SRC/cc-args.lm Line: 9 Column: 14"
	.zero 1
uuid_00000000000c1d4a:
	.ascii "Codegen Unexpected RHS"
	.zero 1
uuid_00000000000c1d4e:
	.ascii "File: SRC/cc-args.lm Line: 75 Column: 14"
	.zero 1
uuid_00000000000c1d61:
	.ascii "File: SRC/cc-args.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c1dda:
	.ascii "for-arg-i"
	.zero 1
uuid_00000000000c1e1a:
	.ascii "for-arg"
	.zero 1
uuid_00000000000c1e51:
	.ascii "File: SRC/blob-render.lm Line: 37 Column: 11"
	.zero 1
uuid_00000000000c1e85:
	.ascii "for-atom"
	.zero 1
uuid_00000000000c1ebc:
	.ascii "File: SRC/blob-render.lm Line: 53 Column: 34"
	.zero 1
uuid_00000000000c1ecf:
	.ascii "range"
	.zero 1
uuid_00000000000c1ee5:
	.ascii "uuid"
	.zero 1
uuid_00000000000c1ef8:
	.ascii "align"
	.zero 1
uuid_00000000000c1f14:
	.ascii "=="
	.zero 1
uuid_00000000000c1f51:
	.ascii "/"
	.zero 1
uuid_00000000000c1f6d:
	.ascii "*"
	.zero 1
uuid_00000000000c1f89:
	.ascii "%"
	.zero 1
uuid_00000000000c1ffc:
	.ascii "File: SRC/blob-render.lm Line: 151 Column: 11"
	.zero 1
uuid_00000000000c2036:
	.ascii "File: SRC/blob-render.lm Line: 175 Column: 14"
	.zero 1
uuid_00000000000c203d:
	.ascii "Unknown Render Term "
	.zero 1
uuid_00000000000c203e:
	.ascii "File: SRC/blob-render.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c20d8:
	.ascii "File: SRC/blob-render.lm Line: 205 Column: 5"
	.zero 1
uuid_00000000000c2148:
	.ascii "File: SRC/extract-uuids.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2185:
	.ascii "File: SRC/index-typedefs.lm Line: 3 Column: 31"
	.zero 1
uuid_00000000000c21fe:
	.ascii "Invalid Typedef"
	.zero 1
uuid_00000000000c21ff:
	.ascii "File: SRC/index-typedefs.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000c227b:
	.ascii "Unrecognized Macro Pattern\n"
	.zero 1
uuid_00000000000c227c:
	.ascii "File: SRC/is-macro-head.lm Line: 5 Column: 30"
	.zero 1
uuid_00000000000c22ce:
	.ascii "File: SRC/preprocess-apply-hard.lm Line: 11 Column: 11"
	.zero 1
uuid_00000000000c22d8:
	.ascii "File: SRC/preprocess-apply-hard.lm Line: 25 Column: 14"
	.zero 1
uuid_00000000000c22e2:
	.ascii "File: SRC/preprocess-apply-hard.lm Line: 6 Column: 30"
	.zero 1
uuid_00000000000c22ec:
	.ascii "Invalid Macro Application\n"
	.zero 1
uuid_00000000000c2341:
	.ascii "_t"
	.zero 1
uuid_00000000000c2342:
	.ascii "Token"
	.zero 1
uuid_00000000000c2343:
	.ascii "Literal+Constant+String"
	.zero 1
uuid_00000000000c2344:
	.ascii "_"
	.zero 1
uuid_00000000000c2384:
	.ascii "File: SRC/preprocess-apply-literals.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000c23a3:
	.ascii ":Location:"
	.zero 1
uuid_00000000000c23ad:
	.ascii "p"
	.zero 1
uuid_00000000000c23c0:
	.ascii "Location Unknown"
	.zero 1
uuid_00000000000c23cd:
	.ascii "File: "
	.zero 1
uuid_00000000000c23ce:
	.ascii " Line: "
	.zero 1
uuid_00000000000c23cf:
	.ascii " Column: "
	.zero 1
uuid_00000000000c23d0:
	.ascii "File: SRC/preprocess-apply-locations.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000c2416:
	.ascii "File: SRC/preprocess-apply-locations.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2564:
	.ascii "File: SRC/preprocess-apply.lm Line: 38 Column: 38"
	.zero 1
uuid_00000000000c2583:
	.ascii "File: SRC/preprocess-apply.lm Line: 56 Column: 38"
	.zero 1
uuid_00000000000c25e4:
	.ascii "File: SRC/preprocess-apply.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2627:
	.ascii "File: SRC/preprocess-is-suffixed.lm Line: 5 Column: 32"
	.zero 1
uuid_00000000000c2658:
	.ascii "File: SRC/substitute-uuids.lm Line: 7 Column: 33"
	.zero 1
uuid_00000000000c26aa:
	.ascii "File: SRC/substitute-uuids.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2759:
	.ascii ":Literal:"
	.zero 1
uuid_00000000000c27cc:
	.ascii "File: SRC/try-destructure-macro.lm Line: 13 Column: 14"
	.zero 1
uuid_00000000000c2824:
	.ascii ":Any:"
	.zero 1
uuid_00000000000c28b5:
	.ascii ":Variable:"
	.zero 1
uuid_00000000000c2919:
	.ascii ":Tag:"
	.zero 1
uuid_00000000000c293e:
	.ascii "Constant+Literal+U64"
	.zero 1
uuid_00000000000c293f:
	.ascii "Tag<"
	.zero 1
uuid_00000000000c2955:
	.ascii "File: SRC/try-destructure-macro.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c29a1:
	.ascii "Fragment Has No Type:\n"
	.zero 1
uuid_00000000000c29a5:
	.ascii "File: SRC/destructure-lhs.lm Line: 7 Column: 11"
	.zero 1
uuid_00000000000c29e2:
	.ascii "File: SRC/destructure-lhs.lm Line: 24 Column: 11"
	.zero 1
uuid_00000000000c29e6:
	.ascii "Unexpected Destructure LHS: "
	.zero 1
uuid_00000000000c29e7:
	.ascii "File: SRC/destructure-lhs.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c29fd:
	.ascii "File: SRC/fragment::chain.lm Line: 27 Column: 36"
	.zero 1
uuid_00000000000c2a28:
	.ascii "File: SRC/fragment::get.lm Line: 7 Column: 33"
	.zero 1
uuid_00000000000c2a2f:
	.ascii "File: SRC/fragment::get.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2a48:
	.ascii "File: SRC/fragment::set-context.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2a61:
	.ascii "File: SRC/fragment::set-offset.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000c2a7a:
	.ascii "File: SRC/fragment::set-term.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c2a93:
	.ascii "File: SRC/fragment::set-type.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c2aac:
	.ascii "File: SRC/fragment::set-vararg.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c2ac5:
	.ascii "File: SRC/fragment::set.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000c2ac9:
	.ascii "--blob"
	.zero 1
uuid_00000000000c2aca:
	.ascii "--gnu"
	.zero 1
uuid_00000000000c2acb:
	.ascii "--tokenize"
	.zero 1
uuid_00000000000c2acc:
	.ascii "--parse"
	.zero 1
uuid_00000000000c2acd:
	.ascii "--preprocess"
	.zero 1
uuid_00000000000c2ace:
	.ascii "--typecheck"
	.zero 1
uuid_00000000000c2acf:
	.ascii "--compile"
	.zero 1
uuid_00000000000c2ad0:
	.ascii "--strict"
	.zero 1
uuid_00000000000c2ad1:
	.ascii "--gradual"
	.zero 1
uuid_00000000000c2ad2:
	.ascii "--macro"
	.zero 1
uuid_00000000000c2ad3:
	.ascii "--nomacro"
	.zero 1
uuid_00000000000c2ad4:
	.ascii "--profile-invocations"
	.zero 1
uuid_00000000000c2ad5:
	.ascii "-o"
	.zero 1
uuid_00000000000c2ad6:
	.ascii "File: SRC/main.lm Line: 6 Column: 8"
	.zero 1
uuid_00000000000c2b22:
	.ascii "File: SRC/main.lm Line: 35 Column: 37"
	.zero 1
uuid_00000000000c2b36:
	.ascii "File: SRC/main.lm Line: 43 Column: 5"
	.zero 1
uuid_00000000000c2b54:
	.ascii "File: LIB/default-list.lm Line: 57 Column: 25"
	.zero 1
uuid_00000000000c2b72:
	.ascii "File: LIB/default-list.lm Line: 44 Column: 25"
	.zero 1
uuid_00000000000c2b83:
	.ascii "List::head is fallible\n"
	.zero 1
uuid_00000000000c2b84:
	.ascii "File: LIB/default-list.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000c2bae:
	.ascii "File: LIB/default-list.lm Line: 33 Column: 8"
	.zero 1
uuid_00000000000c2bee:
	.ascii "File: LIB/default-list.lm Line: 20 Column: 26"
	.zero 1
uuid_00000000000c2c87:
	.ascii "File: LIB/default-list.lm Line: 71 Column: 8"
	.zero 1
uuid_00000000000c2c9a:
	.ascii "File: LIB/default-list.lm Line: 78 Column: 5"
	.zero 1
uuid_00000000000c2d5a:
	.ascii "File: LIB/default-stdlib.lm Line: 20 Column: 5"
	.zero 1
uuid_00000000000c2d6b:
	.ascii "File: LIB/default-stdlib.lm Line: 52 Column: 5"
	.zero 1
uuid_00000000000c2f18:
	.ascii "File: LIB/default-stdlib.lm Line: 35 Column: 5"
	.zero 1
